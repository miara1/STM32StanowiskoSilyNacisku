
DoPracy2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b82c  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000718  0800b9d0  0800b9d0  0000c9d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c0e8  0800c0e8  0000e1d4  2**0
                  CONTENTS
  4 .ARM          00000008  0800c0e8  0800c0e8  0000d0e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c0f0  0800c0f0  0000e1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c0f0  0800c0f0  0000d0f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c0f4  0800c0f4  0000d0f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  0800c0f8  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005284  200001d4  0800c2cc  0000e1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20005458  0800c2cc  0000e458  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000e1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001339f  00000000  00000000  0000e204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002df8  00000000  00000000  000215a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fd0  00000000  00000000  000243a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c2e  00000000  00000000  00025370  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019bbf  00000000  00000000  00025f9e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001447e  00000000  00000000  0003fb5d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009b9c5  00000000  00000000  00053fdb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ef9a0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000059c8  00000000  00000000  000ef9e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  000f53ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001d4 	.word	0x200001d4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800b9b4 	.word	0x0800b9b4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001d8 	.word	0x200001d8
 80001dc:	0800b9b4 	.word	0x0800b9b4

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <strlen>:
 80002a0:	4603      	mov	r3, r0
 80002a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d1fb      	bne.n	80002a2 <strlen+0x2>
 80002aa:	1a18      	subs	r0, r3, r0
 80002ac:	3801      	subs	r0, #1
 80002ae:	4770      	bx	lr

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	@ 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_uldivmod>:
 8000cb8:	b953      	cbnz	r3, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cba:	b94a      	cbnz	r2, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	bf08      	it	eq
 8000cc0:	2800      	cmpeq	r0, #0
 8000cc2:	bf1c      	itt	ne
 8000cc4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000cc8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000ccc:	f000 b9a0 	b.w	8001010 <__aeabi_idiv0>
 8000cd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cd8:	f000 f83c 	bl	8000d54 <__udivmoddi4>
 8000cdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce4:	b004      	add	sp, #16
 8000ce6:	4770      	bx	lr

08000ce8 <__aeabi_d2lz>:
 8000ce8:	b538      	push	{r3, r4, r5, lr}
 8000cea:	2200      	movs	r2, #0
 8000cec:	2300      	movs	r3, #0
 8000cee:	4604      	mov	r4, r0
 8000cf0:	460d      	mov	r5, r1
 8000cf2:	f7ff ff0b 	bl	8000b0c <__aeabi_dcmplt>
 8000cf6:	b928      	cbnz	r0, 8000d04 <__aeabi_d2lz+0x1c>
 8000cf8:	4620      	mov	r0, r4
 8000cfa:	4629      	mov	r1, r5
 8000cfc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d00:	f000 b80a 	b.w	8000d18 <__aeabi_d2ulz>
 8000d04:	4620      	mov	r0, r4
 8000d06:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d0a:	f000 f805 	bl	8000d18 <__aeabi_d2ulz>
 8000d0e:	4240      	negs	r0, r0
 8000d10:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d14:	bd38      	pop	{r3, r4, r5, pc}
 8000d16:	bf00      	nop

08000d18 <__aeabi_d2ulz>:
 8000d18:	b5d0      	push	{r4, r6, r7, lr}
 8000d1a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d4c <__aeabi_d2ulz+0x34>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	4606      	mov	r6, r0
 8000d20:	460f      	mov	r7, r1
 8000d22:	f7ff fc81 	bl	8000628 <__aeabi_dmul>
 8000d26:	f7ff ff57 	bl	8000bd8 <__aeabi_d2uiz>
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	f7ff fc02 	bl	8000534 <__aeabi_ui2d>
 8000d30:	4b07      	ldr	r3, [pc, #28]	@ (8000d50 <__aeabi_d2ulz+0x38>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	f7ff fc78 	bl	8000628 <__aeabi_dmul>
 8000d38:	4602      	mov	r2, r0
 8000d3a:	460b      	mov	r3, r1
 8000d3c:	4630      	mov	r0, r6
 8000d3e:	4639      	mov	r1, r7
 8000d40:	f7ff faba 	bl	80002b8 <__aeabi_dsub>
 8000d44:	f7ff ff48 	bl	8000bd8 <__aeabi_d2uiz>
 8000d48:	4621      	mov	r1, r4
 8000d4a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d4c:	3df00000 	.word	0x3df00000
 8000d50:	41f00000 	.word	0x41f00000

08000d54 <__udivmoddi4>:
 8000d54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d58:	9d08      	ldr	r5, [sp, #32]
 8000d5a:	460c      	mov	r4, r1
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d14e      	bne.n	8000dfe <__udivmoddi4+0xaa>
 8000d60:	4694      	mov	ip, r2
 8000d62:	458c      	cmp	ip, r1
 8000d64:	4686      	mov	lr, r0
 8000d66:	fab2 f282 	clz	r2, r2
 8000d6a:	d962      	bls.n	8000e32 <__udivmoddi4+0xde>
 8000d6c:	b14a      	cbz	r2, 8000d82 <__udivmoddi4+0x2e>
 8000d6e:	f1c2 0320 	rsb	r3, r2, #32
 8000d72:	4091      	lsls	r1, r2
 8000d74:	fa20 f303 	lsr.w	r3, r0, r3
 8000d78:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d7c:	4319      	orrs	r1, r3
 8000d7e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d82:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d86:	fa1f f68c 	uxth.w	r6, ip
 8000d8a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d8e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d92:	fb07 1114 	mls	r1, r7, r4, r1
 8000d96:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d9a:	fb04 f106 	mul.w	r1, r4, r6
 8000d9e:	4299      	cmp	r1, r3
 8000da0:	d90a      	bls.n	8000db8 <__udivmoddi4+0x64>
 8000da2:	eb1c 0303 	adds.w	r3, ip, r3
 8000da6:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000daa:	f080 8112 	bcs.w	8000fd2 <__udivmoddi4+0x27e>
 8000dae:	4299      	cmp	r1, r3
 8000db0:	f240 810f 	bls.w	8000fd2 <__udivmoddi4+0x27e>
 8000db4:	3c02      	subs	r4, #2
 8000db6:	4463      	add	r3, ip
 8000db8:	1a59      	subs	r1, r3, r1
 8000dba:	fa1f f38e 	uxth.w	r3, lr
 8000dbe:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dc2:	fb07 1110 	mls	r1, r7, r0, r1
 8000dc6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dca:	fb00 f606 	mul.w	r6, r0, r6
 8000dce:	429e      	cmp	r6, r3
 8000dd0:	d90a      	bls.n	8000de8 <__udivmoddi4+0x94>
 8000dd2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dd6:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000dda:	f080 80fc 	bcs.w	8000fd6 <__udivmoddi4+0x282>
 8000dde:	429e      	cmp	r6, r3
 8000de0:	f240 80f9 	bls.w	8000fd6 <__udivmoddi4+0x282>
 8000de4:	4463      	add	r3, ip
 8000de6:	3802      	subs	r0, #2
 8000de8:	1b9b      	subs	r3, r3, r6
 8000dea:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dee:	2100      	movs	r1, #0
 8000df0:	b11d      	cbz	r5, 8000dfa <__udivmoddi4+0xa6>
 8000df2:	40d3      	lsrs	r3, r2
 8000df4:	2200      	movs	r2, #0
 8000df6:	e9c5 3200 	strd	r3, r2, [r5]
 8000dfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dfe:	428b      	cmp	r3, r1
 8000e00:	d905      	bls.n	8000e0e <__udivmoddi4+0xba>
 8000e02:	b10d      	cbz	r5, 8000e08 <__udivmoddi4+0xb4>
 8000e04:	e9c5 0100 	strd	r0, r1, [r5]
 8000e08:	2100      	movs	r1, #0
 8000e0a:	4608      	mov	r0, r1
 8000e0c:	e7f5      	b.n	8000dfa <__udivmoddi4+0xa6>
 8000e0e:	fab3 f183 	clz	r1, r3
 8000e12:	2900      	cmp	r1, #0
 8000e14:	d146      	bne.n	8000ea4 <__udivmoddi4+0x150>
 8000e16:	42a3      	cmp	r3, r4
 8000e18:	d302      	bcc.n	8000e20 <__udivmoddi4+0xcc>
 8000e1a:	4290      	cmp	r0, r2
 8000e1c:	f0c0 80f0 	bcc.w	8001000 <__udivmoddi4+0x2ac>
 8000e20:	1a86      	subs	r6, r0, r2
 8000e22:	eb64 0303 	sbc.w	r3, r4, r3
 8000e26:	2001      	movs	r0, #1
 8000e28:	2d00      	cmp	r5, #0
 8000e2a:	d0e6      	beq.n	8000dfa <__udivmoddi4+0xa6>
 8000e2c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e30:	e7e3      	b.n	8000dfa <__udivmoddi4+0xa6>
 8000e32:	2a00      	cmp	r2, #0
 8000e34:	f040 8090 	bne.w	8000f58 <__udivmoddi4+0x204>
 8000e38:	eba1 040c 	sub.w	r4, r1, ip
 8000e3c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e40:	fa1f f78c 	uxth.w	r7, ip
 8000e44:	2101      	movs	r1, #1
 8000e46:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e4a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e4e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e52:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e56:	fb07 f006 	mul.w	r0, r7, r6
 8000e5a:	4298      	cmp	r0, r3
 8000e5c:	d908      	bls.n	8000e70 <__udivmoddi4+0x11c>
 8000e5e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e62:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000e66:	d202      	bcs.n	8000e6e <__udivmoddi4+0x11a>
 8000e68:	4298      	cmp	r0, r3
 8000e6a:	f200 80cd 	bhi.w	8001008 <__udivmoddi4+0x2b4>
 8000e6e:	4626      	mov	r6, r4
 8000e70:	1a1c      	subs	r4, r3, r0
 8000e72:	fa1f f38e 	uxth.w	r3, lr
 8000e76:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e7a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e7e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e82:	fb00 f707 	mul.w	r7, r0, r7
 8000e86:	429f      	cmp	r7, r3
 8000e88:	d908      	bls.n	8000e9c <__udivmoddi4+0x148>
 8000e8a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e8e:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000e92:	d202      	bcs.n	8000e9a <__udivmoddi4+0x146>
 8000e94:	429f      	cmp	r7, r3
 8000e96:	f200 80b0 	bhi.w	8000ffa <__udivmoddi4+0x2a6>
 8000e9a:	4620      	mov	r0, r4
 8000e9c:	1bdb      	subs	r3, r3, r7
 8000e9e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ea2:	e7a5      	b.n	8000df0 <__udivmoddi4+0x9c>
 8000ea4:	f1c1 0620 	rsb	r6, r1, #32
 8000ea8:	408b      	lsls	r3, r1
 8000eaa:	fa22 f706 	lsr.w	r7, r2, r6
 8000eae:	431f      	orrs	r7, r3
 8000eb0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000eb4:	fa04 f301 	lsl.w	r3, r4, r1
 8000eb8:	ea43 030c 	orr.w	r3, r3, ip
 8000ebc:	40f4      	lsrs	r4, r6
 8000ebe:	fa00 f801 	lsl.w	r8, r0, r1
 8000ec2:	0c38      	lsrs	r0, r7, #16
 8000ec4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ec8:	fbb4 fef0 	udiv	lr, r4, r0
 8000ecc:	fa1f fc87 	uxth.w	ip, r7
 8000ed0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ed4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ed8:	fb0e f90c 	mul.w	r9, lr, ip
 8000edc:	45a1      	cmp	r9, r4
 8000ede:	fa02 f201 	lsl.w	r2, r2, r1
 8000ee2:	d90a      	bls.n	8000efa <__udivmoddi4+0x1a6>
 8000ee4:	193c      	adds	r4, r7, r4
 8000ee6:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000eea:	f080 8084 	bcs.w	8000ff6 <__udivmoddi4+0x2a2>
 8000eee:	45a1      	cmp	r9, r4
 8000ef0:	f240 8081 	bls.w	8000ff6 <__udivmoddi4+0x2a2>
 8000ef4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ef8:	443c      	add	r4, r7
 8000efa:	eba4 0409 	sub.w	r4, r4, r9
 8000efe:	fa1f f983 	uxth.w	r9, r3
 8000f02:	fbb4 f3f0 	udiv	r3, r4, r0
 8000f06:	fb00 4413 	mls	r4, r0, r3, r4
 8000f0a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f0e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f12:	45a4      	cmp	ip, r4
 8000f14:	d907      	bls.n	8000f26 <__udivmoddi4+0x1d2>
 8000f16:	193c      	adds	r4, r7, r4
 8000f18:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000f1c:	d267      	bcs.n	8000fee <__udivmoddi4+0x29a>
 8000f1e:	45a4      	cmp	ip, r4
 8000f20:	d965      	bls.n	8000fee <__udivmoddi4+0x29a>
 8000f22:	3b02      	subs	r3, #2
 8000f24:	443c      	add	r4, r7
 8000f26:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f2a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f2e:	eba4 040c 	sub.w	r4, r4, ip
 8000f32:	429c      	cmp	r4, r3
 8000f34:	46ce      	mov	lr, r9
 8000f36:	469c      	mov	ip, r3
 8000f38:	d351      	bcc.n	8000fde <__udivmoddi4+0x28a>
 8000f3a:	d04e      	beq.n	8000fda <__udivmoddi4+0x286>
 8000f3c:	b155      	cbz	r5, 8000f54 <__udivmoddi4+0x200>
 8000f3e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f42:	eb64 040c 	sbc.w	r4, r4, ip
 8000f46:	fa04 f606 	lsl.w	r6, r4, r6
 8000f4a:	40cb      	lsrs	r3, r1
 8000f4c:	431e      	orrs	r6, r3
 8000f4e:	40cc      	lsrs	r4, r1
 8000f50:	e9c5 6400 	strd	r6, r4, [r5]
 8000f54:	2100      	movs	r1, #0
 8000f56:	e750      	b.n	8000dfa <__udivmoddi4+0xa6>
 8000f58:	f1c2 0320 	rsb	r3, r2, #32
 8000f5c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f60:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f64:	fa24 f303 	lsr.w	r3, r4, r3
 8000f68:	4094      	lsls	r4, r2
 8000f6a:	430c      	orrs	r4, r1
 8000f6c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f70:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f74:	fa1f f78c 	uxth.w	r7, ip
 8000f78:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f7c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f80:	0c23      	lsrs	r3, r4, #16
 8000f82:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f86:	fb00 f107 	mul.w	r1, r0, r7
 8000f8a:	4299      	cmp	r1, r3
 8000f8c:	d908      	bls.n	8000fa0 <__udivmoddi4+0x24c>
 8000f8e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f92:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000f96:	d22c      	bcs.n	8000ff2 <__udivmoddi4+0x29e>
 8000f98:	4299      	cmp	r1, r3
 8000f9a:	d92a      	bls.n	8000ff2 <__udivmoddi4+0x29e>
 8000f9c:	3802      	subs	r0, #2
 8000f9e:	4463      	add	r3, ip
 8000fa0:	1a5b      	subs	r3, r3, r1
 8000fa2:	b2a4      	uxth	r4, r4
 8000fa4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000fa8:	fb08 3311 	mls	r3, r8, r1, r3
 8000fac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000fb0:	fb01 f307 	mul.w	r3, r1, r7
 8000fb4:	42a3      	cmp	r3, r4
 8000fb6:	d908      	bls.n	8000fca <__udivmoddi4+0x276>
 8000fb8:	eb1c 0404 	adds.w	r4, ip, r4
 8000fbc:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000fc0:	d213      	bcs.n	8000fea <__udivmoddi4+0x296>
 8000fc2:	42a3      	cmp	r3, r4
 8000fc4:	d911      	bls.n	8000fea <__udivmoddi4+0x296>
 8000fc6:	3902      	subs	r1, #2
 8000fc8:	4464      	add	r4, ip
 8000fca:	1ae4      	subs	r4, r4, r3
 8000fcc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fd0:	e739      	b.n	8000e46 <__udivmoddi4+0xf2>
 8000fd2:	4604      	mov	r4, r0
 8000fd4:	e6f0      	b.n	8000db8 <__udivmoddi4+0x64>
 8000fd6:	4608      	mov	r0, r1
 8000fd8:	e706      	b.n	8000de8 <__udivmoddi4+0x94>
 8000fda:	45c8      	cmp	r8, r9
 8000fdc:	d2ae      	bcs.n	8000f3c <__udivmoddi4+0x1e8>
 8000fde:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fe2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000fe6:	3801      	subs	r0, #1
 8000fe8:	e7a8      	b.n	8000f3c <__udivmoddi4+0x1e8>
 8000fea:	4631      	mov	r1, r6
 8000fec:	e7ed      	b.n	8000fca <__udivmoddi4+0x276>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	e799      	b.n	8000f26 <__udivmoddi4+0x1d2>
 8000ff2:	4630      	mov	r0, r6
 8000ff4:	e7d4      	b.n	8000fa0 <__udivmoddi4+0x24c>
 8000ff6:	46d6      	mov	lr, sl
 8000ff8:	e77f      	b.n	8000efa <__udivmoddi4+0x1a6>
 8000ffa:	4463      	add	r3, ip
 8000ffc:	3802      	subs	r0, #2
 8000ffe:	e74d      	b.n	8000e9c <__udivmoddi4+0x148>
 8001000:	4606      	mov	r6, r0
 8001002:	4623      	mov	r3, r4
 8001004:	4608      	mov	r0, r1
 8001006:	e70f      	b.n	8000e28 <__udivmoddi4+0xd4>
 8001008:	3e02      	subs	r6, #2
 800100a:	4463      	add	r3, ip
 800100c:	e730      	b.n	8000e70 <__udivmoddi4+0x11c>
 800100e:	bf00      	nop

08001010 <__aeabi_idiv0>:
 8001010:	4770      	bx	lr
 8001012:	bf00      	nop

08001014 <ADC_Select_CH0>:
		.wartosc6 = 0

};

void ADC_Select_CH0 (void)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b084      	sub	sp, #16
 8001018:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig ={0};
 800101a:	463b      	mov	r3, r7
 800101c:	2200      	movs	r2, #0
 800101e:	601a      	str	r2, [r3, #0]
 8001020:	605a      	str	r2, [r3, #4]
 8001022:	609a      	str	r2, [r3, #8]
 8001024:	60da      	str	r2, [r3, #12]

	  sConfig.Channel = ADC_CHANNEL_0;
 8001026:	2300      	movs	r3, #0
 8001028:	603b      	str	r3, [r7, #0]
	  sConfig.Rank = 1;
 800102a:	2301      	movs	r3, #1
 800102c:	607b      	str	r3, [r7, #4]
	  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 800102e:	2301      	movs	r3, #1
 8001030:	60bb      	str	r3, [r7, #8]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001032:	463b      	mov	r3, r7
 8001034:	4619      	mov	r1, r3
 8001036:	4806      	ldr	r0, [pc, #24]	@ (8001050 <ADC_Select_CH0+0x3c>)
 8001038:	f002 f994 	bl	8003364 <HAL_ADC_ConfigChannel>
 800103c:	4603      	mov	r3, r0
 800103e:	2b00      	cmp	r3, #0
 8001040:	d001      	beq.n	8001046 <ADC_Select_CH0+0x32>
	  {
	    Error_Handler();
 8001042:	f000 fd59 	bl	8001af8 <Error_Handler>
	  }
}
 8001046:	bf00      	nop
 8001048:	3710      	adds	r7, #16
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	20000208 	.word	0x20000208

08001054 <ADC_Select_CH1>:

void ADC_Select_CH1 (void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b084      	sub	sp, #16
 8001058:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig ={0};
 800105a:	463b      	mov	r3, r7
 800105c:	2200      	movs	r2, #0
 800105e:	601a      	str	r2, [r3, #0]
 8001060:	605a      	str	r2, [r3, #4]
 8001062:	609a      	str	r2, [r3, #8]
 8001064:	60da      	str	r2, [r3, #12]
	  sConfig.Channel = ADC_CHANNEL_1;
 8001066:	2301      	movs	r3, #1
 8001068:	603b      	str	r3, [r7, #0]
	  sConfig.Rank = 1;
 800106a:	2301      	movs	r3, #1
 800106c:	607b      	str	r3, [r7, #4]
	  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 800106e:	2301      	movs	r3, #1
 8001070:	60bb      	str	r3, [r7, #8]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001072:	463b      	mov	r3, r7
 8001074:	4619      	mov	r1, r3
 8001076:	4806      	ldr	r0, [pc, #24]	@ (8001090 <ADC_Select_CH1+0x3c>)
 8001078:	f002 f974 	bl	8003364 <HAL_ADC_ConfigChannel>
 800107c:	4603      	mov	r3, r0
 800107e:	2b00      	cmp	r3, #0
 8001080:	d001      	beq.n	8001086 <ADC_Select_CH1+0x32>
	  {
	    Error_Handler();
 8001082:	f000 fd39 	bl	8001af8 <Error_Handler>
	  }
}
 8001086:	bf00      	nop
 8001088:	3710      	adds	r7, #16
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	20000208 	.word	0x20000208

08001094 <ADC_Select_CH4>:

void ADC_Select_CH4 (void)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b084      	sub	sp, #16
 8001098:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig ={0};
 800109a:	463b      	mov	r3, r7
 800109c:	2200      	movs	r2, #0
 800109e:	601a      	str	r2, [r3, #0]
 80010a0:	605a      	str	r2, [r3, #4]
 80010a2:	609a      	str	r2, [r3, #8]
 80010a4:	60da      	str	r2, [r3, #12]
	  sConfig.Channel = ADC_CHANNEL_4;
 80010a6:	2304      	movs	r3, #4
 80010a8:	603b      	str	r3, [r7, #0]
	  sConfig.Rank = 1;
 80010aa:	2301      	movs	r3, #1
 80010ac:	607b      	str	r3, [r7, #4]
	  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 80010ae:	2301      	movs	r3, #1
 80010b0:	60bb      	str	r3, [r7, #8]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010b2:	463b      	mov	r3, r7
 80010b4:	4619      	mov	r1, r3
 80010b6:	4806      	ldr	r0, [pc, #24]	@ (80010d0 <ADC_Select_CH4+0x3c>)
 80010b8:	f002 f954 	bl	8003364 <HAL_ADC_ConfigChannel>
 80010bc:	4603      	mov	r3, r0
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d001      	beq.n	80010c6 <ADC_Select_CH4+0x32>
	  {
	    Error_Handler();
 80010c2:	f000 fd19 	bl	8001af8 <Error_Handler>
	  }
}
 80010c6:	bf00      	nop
 80010c8:	3710      	adds	r7, #16
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	bf00      	nop
 80010d0:	20000208 	.word	0x20000208

080010d4 <ADC_Select_CH8>:

void ADC_Select_CH8 (void)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b084      	sub	sp, #16
 80010d8:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig ={0};
 80010da:	463b      	mov	r3, r7
 80010dc:	2200      	movs	r2, #0
 80010de:	601a      	str	r2, [r3, #0]
 80010e0:	605a      	str	r2, [r3, #4]
 80010e2:	609a      	str	r2, [r3, #8]
 80010e4:	60da      	str	r2, [r3, #12]
	  sConfig.Channel = ADC_CHANNEL_8;
 80010e6:	2308      	movs	r3, #8
 80010e8:	603b      	str	r3, [r7, #0]
	  sConfig.Rank = 1;
 80010ea:	2301      	movs	r3, #1
 80010ec:	607b      	str	r3, [r7, #4]
	  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 80010ee:	2301      	movs	r3, #1
 80010f0:	60bb      	str	r3, [r7, #8]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010f2:	463b      	mov	r3, r7
 80010f4:	4619      	mov	r1, r3
 80010f6:	4806      	ldr	r0, [pc, #24]	@ (8001110 <ADC_Select_CH8+0x3c>)
 80010f8:	f002 f934 	bl	8003364 <HAL_ADC_ConfigChannel>
 80010fc:	4603      	mov	r3, r0
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d001      	beq.n	8001106 <ADC_Select_CH8+0x32>
	  {
	    Error_Handler();
 8001102:	f000 fcf9 	bl	8001af8 <Error_Handler>
	  }
}
 8001106:	bf00      	nop
 8001108:	3710      	adds	r7, #16
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}
 800110e:	bf00      	nop
 8001110:	20000208 	.word	0x20000208

08001114 <ADC_Select_CH10>:

void ADC_Select_CH10 (void)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b084      	sub	sp, #16
 8001118:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig ={0};
 800111a:	463b      	mov	r3, r7
 800111c:	2200      	movs	r2, #0
 800111e:	601a      	str	r2, [r3, #0]
 8001120:	605a      	str	r2, [r3, #4]
 8001122:	609a      	str	r2, [r3, #8]
 8001124:	60da      	str	r2, [r3, #12]
	  sConfig.Channel = ADC_CHANNEL_10;
 8001126:	230a      	movs	r3, #10
 8001128:	603b      	str	r3, [r7, #0]
	  sConfig.Rank = 1;
 800112a:	2301      	movs	r3, #1
 800112c:	607b      	str	r3, [r7, #4]
	  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 800112e:	2303      	movs	r3, #3
 8001130:	60bb      	str	r3, [r7, #8]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001132:	463b      	mov	r3, r7
 8001134:	4619      	mov	r1, r3
 8001136:	4806      	ldr	r0, [pc, #24]	@ (8001150 <ADC_Select_CH10+0x3c>)
 8001138:	f002 f914 	bl	8003364 <HAL_ADC_ConfigChannel>
 800113c:	4603      	mov	r3, r0
 800113e:	2b00      	cmp	r3, #0
 8001140:	d001      	beq.n	8001146 <ADC_Select_CH10+0x32>
	  {
	    Error_Handler();
 8001142:	f000 fcd9 	bl	8001af8 <Error_Handler>
	  }
}
 8001146:	bf00      	nop
 8001148:	3710      	adds	r7, #16
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}
 800114e:	bf00      	nop
 8001150:	20000208 	.word	0x20000208

08001154 <ADC_Select_CH11>:

void ADC_Select_CH11 (void)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b084      	sub	sp, #16
 8001158:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig ={0};
 800115a:	463b      	mov	r3, r7
 800115c:	2200      	movs	r2, #0
 800115e:	601a      	str	r2, [r3, #0]
 8001160:	605a      	str	r2, [r3, #4]
 8001162:	609a      	str	r2, [r3, #8]
 8001164:	60da      	str	r2, [r3, #12]
	  sConfig.Channel = ADC_CHANNEL_11;
 8001166:	230b      	movs	r3, #11
 8001168:	603b      	str	r3, [r7, #0]
	  sConfig.Rank = 1;
 800116a:	2301      	movs	r3, #1
 800116c:	607b      	str	r3, [r7, #4]
	  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 800116e:	2303      	movs	r3, #3
 8001170:	60bb      	str	r3, [r7, #8]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001172:	463b      	mov	r3, r7
 8001174:	4619      	mov	r1, r3
 8001176:	4806      	ldr	r0, [pc, #24]	@ (8001190 <ADC_Select_CH11+0x3c>)
 8001178:	f002 f8f4 	bl	8003364 <HAL_ADC_ConfigChannel>
 800117c:	4603      	mov	r3, r0
 800117e:	2b00      	cmp	r3, #0
 8001180:	d001      	beq.n	8001186 <ADC_Select_CH11+0x32>
	  {
	    Error_Handler();
 8001182:	f000 fcb9 	bl	8001af8 <Error_Handler>
	  }
}
 8001186:	bf00      	nop
 8001188:	3710      	adds	r7, #16
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	20000208 	.word	0x20000208

08001194 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b082      	sub	sp, #8
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
	if( (hadc->Instance == ADC1) && (warunkiPomiaru.flagaZmiany == 1) && (warunkiPomiaru.idPomiaruDynam[0] == 'T') )
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	4a0f      	ldr	r2, [pc, #60]	@ (80011e0 <HAL_ADC_ConvCpltCallback+0x4c>)
 80011a2:	4293      	cmp	r3, r2
 80011a4:	d110      	bne.n	80011c8 <HAL_ADC_ConvCpltCallback+0x34>
 80011a6:	4b0f      	ldr	r3, [pc, #60]	@ (80011e4 <HAL_ADC_ConvCpltCallback+0x50>)
 80011a8:	691b      	ldr	r3, [r3, #16]
 80011aa:	2b01      	cmp	r3, #1
 80011ac:	d10c      	bne.n	80011c8 <HAL_ADC_ConvCpltCallback+0x34>
 80011ae:	4b0d      	ldr	r3, [pc, #52]	@ (80011e4 <HAL_ADC_ConvCpltCallback+0x50>)
 80011b0:	78db      	ldrb	r3, [r3, #3]
 80011b2:	2b54      	cmp	r3, #84	@ 0x54
 80011b4:	d108      	bne.n	80011c8 <HAL_ADC_ConvCpltCallback+0x34>
	{
		sendDataRamkaDynamT(danePomiaroweDynam.tablicaPomiarowDynamicznych, warunkiPomiaru.czasPomiaruDynam);
 80011b6:	4b0b      	ldr	r3, [pc, #44]	@ (80011e4 <HAL_ADC_ConvCpltCallback+0x50>)
 80011b8:	88db      	ldrh	r3, [r3, #6]
 80011ba:	4619      	mov	r1, r3
 80011bc:	480a      	ldr	r0, [pc, #40]	@ (80011e8 <HAL_ADC_ConvCpltCallback+0x54>)
 80011be:	f000 f8cf 	bl	8001360 <sendDataRamkaDynamT>
		HAL_ADC_Stop_DMA(&hadc1);
 80011c2:	480a      	ldr	r0, [pc, #40]	@ (80011ec <HAL_ADC_ConvCpltCallback+0x58>)
 80011c4:	f002 f852 	bl	800326c <HAL_ADC_Stop_DMA>
	}

	if( (hadc->Instance == ADC1) && (warunkiPomiaru.flagaZmiany == 1) && (warunkiPomiaru.idPomiaruDynam[0] == 'X') )
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	4a04      	ldr	r2, [pc, #16]	@ (80011e0 <HAL_ADC_ConvCpltCallback+0x4c>)
 80011ce:	4293      	cmp	r3, r2
 80011d0:	d102      	bne.n	80011d8 <HAL_ADC_ConvCpltCallback+0x44>
 80011d2:	4b04      	ldr	r3, [pc, #16]	@ (80011e4 <HAL_ADC_ConvCpltCallback+0x50>)
 80011d4:	691b      	ldr	r3, [r3, #16]
 80011d6:	2b01      	cmp	r3, #1
	{
	}
}
 80011d8:	bf00      	nop
 80011da:	3708      	adds	r7, #8
 80011dc:	46bd      	mov	sp, r7
 80011de:	bd80      	pop	{r7, pc}
 80011e0:	40012000 	.word	0x40012000
 80011e4:	20000408 	.word	0x20000408
 80011e8:	2000041c 	.word	0x2000041c
 80011ec:	20000208 	.word	0x20000208

080011f0 <HAL_ADC_ErrorCallback>:

void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc) {
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b082      	sub	sp, #8
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
    printf("ADC DMA Error\n");
 80011f8:	4803      	ldr	r0, [pc, #12]	@ (8001208 <HAL_ADC_ErrorCallback+0x18>)
 80011fa:	f006 fb75 	bl	80078e8 <puts>
}
 80011fe:	bf00      	nop
 8001200:	3708      	adds	r7, #8
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}
 8001206:	bf00      	nop
 8001208:	0800b9d0 	.word	0x0800b9d0

0800120c <crc16_ccitt_false>:
#include "crc.h"

uint16_t crc16_ccitt_false(const char* pData, int length)
{
 800120c:	b480      	push	{r7}
 800120e:	b085      	sub	sp, #20
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
 8001214:	6039      	str	r1, [r7, #0]
    uint16_t wCrc = 0xffff;
 8001216:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800121a:	81fb      	strh	r3, [r7, #14]
    while (length--) {
 800121c:	e025      	b.n	800126a <crc16_ccitt_false+0x5e>
        wCrc ^= *(unsigned const char *)pData++ << 8;
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	1c5a      	adds	r2, r3, #1
 8001222:	607a      	str	r2, [r7, #4]
 8001224:	781b      	ldrb	r3, [r3, #0]
 8001226:	021b      	lsls	r3, r3, #8
 8001228:	b21a      	sxth	r2, r3
 800122a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800122e:	4053      	eors	r3, r2
 8001230:	b21b      	sxth	r3, r3
 8001232:	81fb      	strh	r3, [r7, #14]
        for (int i=0; i < 8; i++)
 8001234:	2300      	movs	r3, #0
 8001236:	60bb      	str	r3, [r7, #8]
 8001238:	e014      	b.n	8001264 <crc16_ccitt_false+0x58>
            wCrc = wCrc & 0x8000 ? (wCrc << 1) ^ 0x1021 : wCrc << 1;
 800123a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800123e:	2b00      	cmp	r3, #0
 8001240:	da09      	bge.n	8001256 <crc16_ccitt_false+0x4a>
 8001242:	89fb      	ldrh	r3, [r7, #14]
 8001244:	005b      	lsls	r3, r3, #1
 8001246:	b21b      	sxth	r3, r3
 8001248:	f483 5381 	eor.w	r3, r3, #4128	@ 0x1020
 800124c:	f083 0301 	eor.w	r3, r3, #1
 8001250:	b21b      	sxth	r3, r3
 8001252:	b29b      	uxth	r3, r3
 8001254:	e002      	b.n	800125c <crc16_ccitt_false+0x50>
 8001256:	89fb      	ldrh	r3, [r7, #14]
 8001258:	005b      	lsls	r3, r3, #1
 800125a:	b29b      	uxth	r3, r3
 800125c:	81fb      	strh	r3, [r7, #14]
        for (int i=0; i < 8; i++)
 800125e:	68bb      	ldr	r3, [r7, #8]
 8001260:	3301      	adds	r3, #1
 8001262:	60bb      	str	r3, [r7, #8]
 8001264:	68bb      	ldr	r3, [r7, #8]
 8001266:	2b07      	cmp	r3, #7
 8001268:	dde7      	ble.n	800123a <crc16_ccitt_false+0x2e>
    while (length--) {
 800126a:	683b      	ldr	r3, [r7, #0]
 800126c:	1e5a      	subs	r2, r3, #1
 800126e:	603a      	str	r2, [r7, #0]
 8001270:	2b00      	cmp	r3, #0
 8001272:	d1d4      	bne.n	800121e <crc16_ccitt_false+0x12>
    }
    return wCrc;
 8001274:	89fb      	ldrh	r3, [r7, #14]
}
 8001276:	4618      	mov	r0, r3
 8001278:	3714      	adds	r7, #20
 800127a:	46bd      	mov	sp, r7
 800127c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001280:	4770      	bx	lr
	...

08001284 <parse_crc_from_text>:

uint16_t parse_crc_from_text(const char *crc_text) {
 8001284:	b580      	push	{r7, lr}
 8001286:	b084      	sub	sp, #16
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
    uint16_t crc_value = 0;
 800128c:	2300      	movs	r3, #0
 800128e:	81fb      	strh	r3, [r7, #14]
    sscanf(crc_text, "%4hx", &crc_value);  // Parsowanie jako 16-bitowy hex
 8001290:	f107 030e 	add.w	r3, r7, #14
 8001294:	461a      	mov	r2, r3
 8001296:	4904      	ldr	r1, [pc, #16]	@ (80012a8 <parse_crc_from_text+0x24>)
 8001298:	6878      	ldr	r0, [r7, #4]
 800129a:	f006 fb81 	bl	80079a0 <siscanf>
    return crc_value;
 800129e:	89fb      	ldrh	r3, [r7, #14]
}
 80012a0:	4618      	mov	r0, r3
 80012a2:	3710      	adds	r7, #16
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd80      	pop	{r7, pc}
 80012a8:	0800b9e0 	.word	0x0800b9e0

080012ac <receive_data_frame>:
		.buffer = {0},
		.receivedData = 0
};

// Funkcja odbierająca ramkę danych
void receive_data_frame(uint16_t length) {
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b086      	sub	sp, #24
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	4603      	mov	r3, r0
 80012b4:	80fb      	strh	r3, [r7, #6]
    // Sprawdzamy, czy ramka jest wystarczająco długa oraz czy zaczyna się od 'U'
    if (length < 9 || odbiorUART.buffer[0] != 'U') {  // Zakładamy minimalną długość: U + dane + 4 znaki CRC + \r\n
 80012b6:	88fb      	ldrh	r3, [r7, #6]
 80012b8:	2b08      	cmp	r3, #8
 80012ba:	d903      	bls.n	80012c4 <receive_data_frame+0x18>
 80012bc:	4b20      	ldr	r3, [pc, #128]	@ (8001340 <receive_data_frame+0x94>)
 80012be:	785b      	ldrb	r3, [r3, #1]
 80012c0:	2b55      	cmp	r3, #85	@ 0x55
 80012c2:	d003      	beq.n	80012cc <receive_data_frame+0x20>
        printf("Błąd: Niepoprawna ramka lub brak nagłówka 'U'\n");
 80012c4:	481f      	ldr	r0, [pc, #124]	@ (8001344 <receive_data_frame+0x98>)
 80012c6:	f006 fb0f 	bl	80078e8 <puts>
 80012ca:	e035      	b.n	8001338 <receive_data_frame+0x8c>
        return;
    }
    //Zatrzymanie przerwan wsyzstkich timerow
    HAL_TIM_Base_Stop_IT(&htim2);
 80012cc:	481e      	ldr	r0, [pc, #120]	@ (8001348 <receive_data_frame+0x9c>)
 80012ce:	f003 feef 	bl	80050b0 <HAL_TIM_Base_Stop_IT>
    HAL_TIM_Base_Stop_IT(&htim3);
 80012d2:	481e      	ldr	r0, [pc, #120]	@ (800134c <receive_data_frame+0xa0>)
 80012d4:	f003 feec 	bl	80050b0 <HAL_TIM_Base_Stop_IT>
    HAL_TIM_Base_Stop_IT(&htim4);
 80012d8:	481d      	ldr	r0, [pc, #116]	@ (8001350 <receive_data_frame+0xa4>)
 80012da:	f003 fee9 	bl	80050b0 <HAL_TIM_Base_Stop_IT>
    //Czyszczenie buforow
//    memset(tablicaPomiarowDynamicznych, 0, sizeof(tablicaPomiarowDynamicznych));
//    memset(tablicaHistoriiPrzedPomiarem, 0, sizeof(tablicaHistoriiPrzedPomiarem));

    // Oddzielamy dane od CRC (ostatnie 4 znaki przed '\r\n' to tekstowe CRC)
    char crc_text[5] = {0};
 80012de:	2300      	movs	r3, #0
 80012e0:	60fb      	str	r3, [r7, #12]
 80012e2:	2300      	movs	r3, #0
 80012e4:	743b      	strb	r3, [r7, #16]
    memcpy(crc_text, &odbiorUART.buffer[length - 6], 4);  // Kopiujemy 4 znaki tekstowego CRC (np. "a9f9")
 80012e6:	88fb      	ldrh	r3, [r7, #6]
 80012e8:	3b06      	subs	r3, #6
 80012ea:	4a15      	ldr	r2, [pc, #84]	@ (8001340 <receive_data_frame+0x94>)
 80012ec:	4413      	add	r3, r2
 80012ee:	3301      	adds	r3, #1
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	60fb      	str	r3, [r7, #12]

    // Parsujemy tekstowe CRC na wartość liczbową
    uint16_t crc_received = parse_crc_from_text(crc_text);
 80012f4:	f107 030c 	add.w	r3, r7, #12
 80012f8:	4618      	mov	r0, r3
 80012fa:	f7ff ffc3 	bl	8001284 <parse_crc_from_text>
 80012fe:	4603      	mov	r3, r0
 8001300:	82fb      	strh	r3, [r7, #22]
    //printf("Mam nowe crc_received: %d\r\n", crc_received);

    // Obliczamy CRC dla odebranych danych (bez 'U' i bez CRC)
    uint16_t crc_calculated = crc16_ccitt_false((const char*)odbiorUART.buffer, length - 6);
 8001302:	88fb      	ldrh	r3, [r7, #6]
 8001304:	3b06      	subs	r3, #6
 8001306:	4619      	mov	r1, r3
 8001308:	4812      	ldr	r0, [pc, #72]	@ (8001354 <receive_data_frame+0xa8>)
 800130a:	f7ff ff7f 	bl	800120c <crc16_ccitt_false>
 800130e:	4603      	mov	r3, r0
 8001310:	82bb      	strh	r3, [r7, #20]
    //printf("A crc calculated t o : %d\r\n", crc_calculated);

    // Sprawdzamy poprawność CRC
    if (crc_calculated == crc_received) {
 8001312:	8aba      	ldrh	r2, [r7, #20]
 8001314:	8afb      	ldrh	r3, [r7, #22]
 8001316:	429a      	cmp	r2, r3
 8001318:	d108      	bne.n	800132c <receive_data_frame+0x80>
        // Przekazujemy dane bez CRC i nagłówka 'U' do przetworzenia
        process_received_data(odbiorUART.buffer + 2, length - 7);  // -7 to U + CRC (4 znaki) + \r\n
 800131a:	4a0f      	ldr	r2, [pc, #60]	@ (8001358 <receive_data_frame+0xac>)
 800131c:	88fb      	ldrh	r3, [r7, #6]
 800131e:	3b07      	subs	r3, #7
 8001320:	b29b      	uxth	r3, r3
 8001322:	4619      	mov	r1, r3
 8001324:	4610      	mov	r0, r2
 8001326:	f000 fe33 	bl	8001f90 <process_received_data>
 800132a:	e005      	b.n	8001338 <receive_data_frame+0x8c>
    } else {
        printf("Błąd CRC! Odebrano: %u, Obliczono: %u\n", crc_received, crc_calculated);
 800132c:	8afb      	ldrh	r3, [r7, #22]
 800132e:	8aba      	ldrh	r2, [r7, #20]
 8001330:	4619      	mov	r1, r3
 8001332:	480a      	ldr	r0, [pc, #40]	@ (800135c <receive_data_frame+0xb0>)
 8001334:	f006 fa70 	bl	8007818 <iprintf>
    }
}
 8001338:	3718      	adds	r7, #24
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop
 8001340:	200003d0 	.word	0x200003d0
 8001344:	0800b9e8 	.word	0x0800b9e8
 8001348:	200002b0 	.word	0x200002b0
 800134c:	200002f8 	.word	0x200002f8
 8001350:	20000340 	.word	0x20000340
 8001354:	200003d1 	.word	0x200003d1
 8001358:	200003d3 	.word	0x200003d3
 800135c:	0800ba1c 	.word	0x0800ba1c

08001360 <sendDataRamkaDynamT>:

void sendDataRamkaDynamT(uint32_t *tablicaPomiarowDynamicznych, int czasPomiaruDynam)
{
 8001360:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001364:	b08d      	sub	sp, #52	@ 0x34
 8001366:	af00      	add	r7, sp, #0
 8001368:	6078      	str	r0, [r7, #4]
 800136a:	6039      	str	r1, [r7, #0]
 800136c:	466b      	mov	r3, sp
 800136e:	461e      	mov	r6, r3
    const int maxBufSize = 3*MAX_POMIARY;  // Większy bufor, aby zmieścić całą ramkę
 8001370:	f643 2398 	movw	r3, #15000	@ 0x3a98
 8001374:	61fb      	str	r3, [r7, #28]
    char frame[maxBufSize];      // Bufor dla całej ramki
 8001376:	69fb      	ldr	r3, [r7, #28]
 8001378:	3b01      	subs	r3, #1
 800137a:	61bb      	str	r3, [r7, #24]
 800137c:	69fb      	ldr	r3, [r7, #28]
 800137e:	2200      	movs	r2, #0
 8001380:	4698      	mov	r8, r3
 8001382:	4691      	mov	r9, r2
 8001384:	f04f 0200 	mov.w	r2, #0
 8001388:	f04f 0300 	mov.w	r3, #0
 800138c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001390:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001394:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001398:	69fb      	ldr	r3, [r7, #28]
 800139a:	2200      	movs	r2, #0
 800139c:	461c      	mov	r4, r3
 800139e:	4615      	mov	r5, r2
 80013a0:	f04f 0200 	mov.w	r2, #0
 80013a4:	f04f 0300 	mov.w	r3, #0
 80013a8:	00eb      	lsls	r3, r5, #3
 80013aa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80013ae:	00e2      	lsls	r2, r4, #3
 80013b0:	69fb      	ldr	r3, [r7, #28]
 80013b2:	3307      	adds	r3, #7
 80013b4:	08db      	lsrs	r3, r3, #3
 80013b6:	00db      	lsls	r3, r3, #3
 80013b8:	ebad 0d03 	sub.w	sp, sp, r3
 80013bc:	466b      	mov	r3, sp
 80013be:	3300      	adds	r3, #0
 80013c0:	617b      	str	r3, [r7, #20]
    int czasPomNa2 = czasPomiaruDynam/2;
 80013c2:	683b      	ldr	r3, [r7, #0]
 80013c4:	0fda      	lsrs	r2, r3, #31
 80013c6:	4413      	add	r3, r2
 80013c8:	105b      	asrs	r3, r3, #1
 80013ca:	613b      	str	r3, [r7, #16]
    int index = 0;
 80013cc:	2300      	movs	r3, #0
 80013ce:	62fb      	str	r3, [r7, #44]	@ 0x2c

    // Dodanie nagłówka "P D [C5 lub C6]"
    index += snprintf(frame + index, sizeof(frame) - index, "P D %s ", warunkiPomiaru.idCzujnika);
 80013d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80013d2:	697a      	ldr	r2, [r7, #20]
 80013d4:	18d0      	adds	r0, r2, r3
 80013d6:	69fa      	ldr	r2, [r7, #28]
 80013d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80013da:	1ad1      	subs	r1, r2, r3
 80013dc:	4b4c      	ldr	r3, [pc, #304]	@ (8001510 <sendDataRamkaDynamT+0x1b0>)
 80013de:	4a4d      	ldr	r2, [pc, #308]	@ (8001514 <sendDataRamkaDynamT+0x1b4>)
 80013e0:	f006 fa8a 	bl	80078f8 <sniprintf>
 80013e4:	4602      	mov	r2, r0
 80013e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80013e8:	4413      	add	r3, r2
 80013ea:	62fb      	str	r3, [r7, #44]	@ 0x2c

    // Dodanie informacji o rodzaju pomiaru: "T [czasPomiaruDynam]"
    index += snprintf(frame + index, sizeof(frame) - index, "T %d ", czasPomiaruDynam);
 80013ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80013ee:	697a      	ldr	r2, [r7, #20]
 80013f0:	18d0      	adds	r0, r2, r3
 80013f2:	69fa      	ldr	r2, [r7, #28]
 80013f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80013f6:	1ad1      	subs	r1, r2, r3
 80013f8:	683b      	ldr	r3, [r7, #0]
 80013fa:	4a47      	ldr	r2, [pc, #284]	@ (8001518 <sendDataRamkaDynamT+0x1b8>)
 80013fc:	f006 fa7c 	bl	80078f8 <sniprintf>
 8001400:	4602      	mov	r2, r0
 8001402:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001404:	4413      	add	r3, r2
 8001406:	62fb      	str	r3, [r7, #44]	@ 0x2c


    int wyliczonyIdxHistorii = warunkiPomiaru.indeksHistorii;
 8001408:	4b41      	ldr	r3, [pc, #260]	@ (8001510 <sendDataRamkaDynamT+0x1b0>)
 800140a:	89db      	ldrh	r3, [r3, #14]
 800140c:	62bb      	str	r3, [r7, #40]	@ 0x28
    // Dodanie historii pomiaru
    for ( int licznik = 0; licznik<ROZM_HISTORIA; licznik++)
 800140e:	2300      	movs	r3, #0
 8001410:	627b      	str	r3, [r7, #36]	@ 0x24
 8001412:	e023      	b.n	800145c <sendDataRamkaDynamT+0xfc>
    {
    	index += snprintf(frame + index, sizeof(frame) - index, "%lu ", danePomiaroweDynam.tablicaHistoriiPrzedPomiarem[wyliczonyIdxHistorii]);
 8001414:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001416:	697a      	ldr	r2, [r7, #20]
 8001418:	18d0      	adds	r0, r2, r3
 800141a:	69fa      	ldr	r2, [r7, #28]
 800141c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800141e:	1ad1      	subs	r1, r2, r3
 8001420:	4a3e      	ldr	r2, [pc, #248]	@ (800151c <sendDataRamkaDynamT+0x1bc>)
 8001422:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001424:	f503 539c 	add.w	r3, r3, #4992	@ 0x1380
 8001428:	3308      	adds	r3, #8
 800142a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800142e:	4a3c      	ldr	r2, [pc, #240]	@ (8001520 <sendDataRamkaDynamT+0x1c0>)
 8001430:	f006 fa62 	bl	80078f8 <sniprintf>
 8001434:	4602      	mov	r2, r0
 8001436:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001438:	4413      	add	r3, r2
 800143a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    	wyliczonyIdxHistorii = (wyliczonyIdxHistorii + 1) % ROZM_HISTORIA;
 800143c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800143e:	3301      	adds	r3, #1
 8001440:	4a38      	ldr	r2, [pc, #224]	@ (8001524 <sendDataRamkaDynamT+0x1c4>)
 8001442:	fb82 1203 	smull	r1, r2, r2, r3
 8001446:	1111      	asrs	r1, r2, #4
 8001448:	17da      	asrs	r2, r3, #31
 800144a:	1a8a      	subs	r2, r1, r2
 800144c:	2132      	movs	r1, #50	@ 0x32
 800144e:	fb01 f202 	mul.w	r2, r1, r2
 8001452:	1a9b      	subs	r3, r3, r2
 8001454:	62bb      	str	r3, [r7, #40]	@ 0x28
    for ( int licznik = 0; licznik<ROZM_HISTORIA; licznik++)
 8001456:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001458:	3301      	adds	r3, #1
 800145a:	627b      	str	r3, [r7, #36]	@ 0x24
 800145c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800145e:	2b31      	cmp	r3, #49	@ 0x31
 8001460:	ddd8      	ble.n	8001414 <sendDataRamkaDynamT+0xb4>
    }
    // Dodanie danych pomiarowych

    for (int i = 0; i < czasPomNa2; i++) {
 8001462:	2300      	movs	r3, #0
 8001464:	623b      	str	r3, [r7, #32]
 8001466:	e01a      	b.n	800149e <sendDataRamkaDynamT+0x13e>
    	if(danePomiaroweDynam.tablicaPomiarowDynamicznych[i] > 0)
 8001468:	4a2c      	ldr	r2, [pc, #176]	@ (800151c <sendDataRamkaDynamT+0x1bc>)
 800146a:	6a3b      	ldr	r3, [r7, #32]
 800146c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001470:	2b00      	cmp	r3, #0
 8001472:	d011      	beq.n	8001498 <sendDataRamkaDynamT+0x138>
    	{
        index += snprintf(frame + index, sizeof(frame) - index, "%lu ", tablicaPomiarowDynamicznych[i] );
 8001474:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001476:	697a      	ldr	r2, [r7, #20]
 8001478:	18d0      	adds	r0, r2, r3
 800147a:	69fa      	ldr	r2, [r7, #28]
 800147c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800147e:	1ad1      	subs	r1, r2, r3
 8001480:	6a3b      	ldr	r3, [r7, #32]
 8001482:	009b      	lsls	r3, r3, #2
 8001484:	687a      	ldr	r2, [r7, #4]
 8001486:	4413      	add	r3, r2
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	4a25      	ldr	r2, [pc, #148]	@ (8001520 <sendDataRamkaDynamT+0x1c0>)
 800148c:	f006 fa34 	bl	80078f8 <sniprintf>
 8001490:	4602      	mov	r2, r0
 8001492:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001494:	4413      	add	r3, r2
 8001496:	62fb      	str	r3, [r7, #44]	@ 0x2c
    for (int i = 0; i < czasPomNa2; i++) {
 8001498:	6a3b      	ldr	r3, [r7, #32]
 800149a:	3301      	adds	r3, #1
 800149c:	623b      	str	r3, [r7, #32]
 800149e:	6a3a      	ldr	r2, [r7, #32]
 80014a0:	693b      	ldr	r3, [r7, #16]
 80014a2:	429a      	cmp	r2, r3
 80014a4:	dbe0      	blt.n	8001468 <sendDataRamkaDynamT+0x108>
    	}
    }

    // Usuwanie ostatniej spacji, jeśli istnieje
    if (index > 0 && frame[index - 1] == ' ') {
 80014a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	dd08      	ble.n	80014be <sendDataRamkaDynamT+0x15e>
 80014ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80014ae:	3b01      	subs	r3, #1
 80014b0:	697a      	ldr	r2, [r7, #20]
 80014b2:	5cd3      	ldrb	r3, [r2, r3]
 80014b4:	2b20      	cmp	r3, #32
 80014b6:	d102      	bne.n	80014be <sendDataRamkaDynamT+0x15e>
        index--; // Cofnięcie indeksu, aby pominąć końcową spację
 80014b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80014ba:	3b01      	subs	r3, #1
 80014bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }

    // Obliczenie CRC dla danych w ramce (bez końcowej spacji)
    uint16_t crc = crc16_ccitt_false((char *)frame, index);
 80014be:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80014c0:	6978      	ldr	r0, [r7, #20]
 80014c2:	f7ff fea3 	bl	800120c <crc16_ccitt_false>
 80014c6:	4603      	mov	r3, r0
 80014c8:	81fb      	strh	r3, [r7, #14]

    // Dodanie CRC na końcu ramki
    index += snprintf(frame + index, sizeof(frame) - index, " %u\r\n", crc);
 80014ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80014cc:	697a      	ldr	r2, [r7, #20]
 80014ce:	18d0      	adds	r0, r2, r3
 80014d0:	69fa      	ldr	r2, [r7, #28]
 80014d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80014d4:	1ad1      	subs	r1, r2, r3
 80014d6:	89fb      	ldrh	r3, [r7, #14]
 80014d8:	4a13      	ldr	r2, [pc, #76]	@ (8001528 <sendDataRamkaDynamT+0x1c8>)
 80014da:	f006 fa0d 	bl	80078f8 <sniprintf>
 80014de:	4602      	mov	r2, r0
 80014e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80014e2:	4413      	add	r3, r2
 80014e4:	62fb      	str	r3, [r7, #44]	@ 0x2c

    // Wysyłanie całej ramki jednorazowo
    HAL_UART_Transmit(&huart2, (uint8_t *)frame, index, HAL_MAX_DELAY);
 80014e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80014e8:	b29a      	uxth	r2, r3
 80014ea:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80014ee:	6979      	ldr	r1, [r7, #20]
 80014f0:	480e      	ldr	r0, [pc, #56]	@ (800152c <sendDataRamkaDynamT+0x1cc>)
 80014f2:	f004 f9e3 	bl	80058bc <HAL_UART_Transmit>

    // Wyczyszczenie tablicy po wysłaniu danych
    memset(tablicaPomiarowDynamicznych, 0, sizeof(int) * MAX_POMIARY);  // Zerowanie zawartości tablicy
 80014f6:	f644 6220 	movw	r2, #20000	@ 0x4e20
 80014fa:	2100      	movs	r1, #0
 80014fc:	6878      	ldr	r0, [r7, #4]
 80014fe:	f006 fb53 	bl	8007ba8 <memset>
 8001502:	46b5      	mov	sp, r6
}
 8001504:	bf00      	nop
 8001506:	3734      	adds	r7, #52	@ 0x34
 8001508:	46bd      	mov	sp, r7
 800150a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800150e:	bf00      	nop
 8001510:	20000408 	.word	0x20000408
 8001514:	0800ba48 	.word	0x0800ba48
 8001518:	0800ba50 	.word	0x0800ba50
 800151c:	2000041c 	.word	0x2000041c
 8001520:	0800ba58 	.word	0x0800ba58
 8001524:	51eb851f 	.word	0x51eb851f
 8001528:	0800ba60 	.word	0x0800ba60
 800152c:	20000388 	.word	0x20000388

08001530 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001530:	b580      	push	{r7, lr}
 8001532:	b082      	sub	sp, #8
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART2) {
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	4a21      	ldr	r2, [pc, #132]	@ (80015c4 <HAL_UART_RxCpltCallback+0x94>)
 800153e:	4293      	cmp	r3, r2
 8001540:	d13d      	bne.n	80015be <HAL_UART_RxCpltCallback+0x8e>
        static uint16_t length = 0;

        // Sprawdzamy, czy ramka zaczyna się od 'U'
        if (length == 0 && odbiorUART.receivedData != 'U') {
 8001542:	4b21      	ldr	r3, [pc, #132]	@ (80015c8 <HAL_UART_RxCpltCallback+0x98>)
 8001544:	881b      	ldrh	r3, [r3, #0]
 8001546:	2b00      	cmp	r3, #0
 8001548:	d10c      	bne.n	8001564 <HAL_UART_RxCpltCallback+0x34>
 800154a:	4b20      	ldr	r3, [pc, #128]	@ (80015cc <HAL_UART_RxCpltCallback+0x9c>)
 800154c:	781b      	ldrb	r3, [r3, #0]
 800154e:	2b55      	cmp	r3, #85	@ 0x55
 8001550:	d008      	beq.n	8001564 <HAL_UART_RxCpltCallback+0x34>
        	printf("Nie ma U na poczatku\r\n");
 8001552:	481f      	ldr	r0, [pc, #124]	@ (80015d0 <HAL_UART_RxCpltCallback+0xa0>)
 8001554:	f006 f9c8 	bl	80078e8 <puts>
            // Ignorujemy, jeśli pierwszy znak nie jest 'U'
            HAL_UART_Receive_IT(&huart2, &odbiorUART.receivedData, 1);
 8001558:	2201      	movs	r2, #1
 800155a:	491c      	ldr	r1, [pc, #112]	@ (80015cc <HAL_UART_RxCpltCallback+0x9c>)
 800155c:	481d      	ldr	r0, [pc, #116]	@ (80015d4 <HAL_UART_RxCpltCallback+0xa4>)
 800155e:	f004 fa38 	bl	80059d2 <HAL_UART_Receive_IT>
            return;
 8001562:	e02c      	b.n	80015be <HAL_UART_RxCpltCallback+0x8e>
        }

        odbiorUART.buffer[length++] = odbiorUART.receivedData;  // Buforowanie odebranego znaku
 8001564:	4b18      	ldr	r3, [pc, #96]	@ (80015c8 <HAL_UART_RxCpltCallback+0x98>)
 8001566:	881b      	ldrh	r3, [r3, #0]
 8001568:	1c5a      	adds	r2, r3, #1
 800156a:	b291      	uxth	r1, r2
 800156c:	4a16      	ldr	r2, [pc, #88]	@ (80015c8 <HAL_UART_RxCpltCallback+0x98>)
 800156e:	8011      	strh	r1, [r2, #0]
 8001570:	4619      	mov	r1, r3
 8001572:	4b16      	ldr	r3, [pc, #88]	@ (80015cc <HAL_UART_RxCpltCallback+0x9c>)
 8001574:	781a      	ldrb	r2, [r3, #0]
 8001576:	4b15      	ldr	r3, [pc, #84]	@ (80015cc <HAL_UART_RxCpltCallback+0x9c>)
 8001578:	440b      	add	r3, r1
 800157a:	705a      	strb	r2, [r3, #1]

        // Sprawdzamy, czy ramka kończy się na '\r\n'
        if (length >= 2 && odbiorUART.buffer[length - 2] == '\r' && odbiorUART.buffer[length - 1] == '\n') {
 800157c:	4b12      	ldr	r3, [pc, #72]	@ (80015c8 <HAL_UART_RxCpltCallback+0x98>)
 800157e:	881b      	ldrh	r3, [r3, #0]
 8001580:	2b01      	cmp	r3, #1
 8001582:	d917      	bls.n	80015b4 <HAL_UART_RxCpltCallback+0x84>
 8001584:	4b10      	ldr	r3, [pc, #64]	@ (80015c8 <HAL_UART_RxCpltCallback+0x98>)
 8001586:	881b      	ldrh	r3, [r3, #0]
 8001588:	3b02      	subs	r3, #2
 800158a:	4a10      	ldr	r2, [pc, #64]	@ (80015cc <HAL_UART_RxCpltCallback+0x9c>)
 800158c:	4413      	add	r3, r2
 800158e:	785b      	ldrb	r3, [r3, #1]
 8001590:	2b0d      	cmp	r3, #13
 8001592:	d10f      	bne.n	80015b4 <HAL_UART_RxCpltCallback+0x84>
 8001594:	4b0c      	ldr	r3, [pc, #48]	@ (80015c8 <HAL_UART_RxCpltCallback+0x98>)
 8001596:	881b      	ldrh	r3, [r3, #0]
 8001598:	3b01      	subs	r3, #1
 800159a:	4a0c      	ldr	r2, [pc, #48]	@ (80015cc <HAL_UART_RxCpltCallback+0x9c>)
 800159c:	4413      	add	r3, r2
 800159e:	785b      	ldrb	r3, [r3, #1]
 80015a0:	2b0a      	cmp	r3, #10
 80015a2:	d107      	bne.n	80015b4 <HAL_UART_RxCpltCallback+0x84>
            receive_data_frame(length);  // Przetwarzamy ramkę danych
 80015a4:	4b08      	ldr	r3, [pc, #32]	@ (80015c8 <HAL_UART_RxCpltCallback+0x98>)
 80015a6:	881b      	ldrh	r3, [r3, #0]
 80015a8:	4618      	mov	r0, r3
 80015aa:	f7ff fe7f 	bl	80012ac <receive_data_frame>
            length = 0;  // Resetujemy długość bufora po zakończeniu ramki
 80015ae:	4b06      	ldr	r3, [pc, #24]	@ (80015c8 <HAL_UART_RxCpltCallback+0x98>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	801a      	strh	r2, [r3, #0]
        }

        // Włączamy ponownie przerwanie odbioru danych UART
        HAL_UART_Receive_IT(&huart2, &odbiorUART.receivedData, 1);
 80015b4:	2201      	movs	r2, #1
 80015b6:	4905      	ldr	r1, [pc, #20]	@ (80015cc <HAL_UART_RxCpltCallback+0x9c>)
 80015b8:	4806      	ldr	r0, [pc, #24]	@ (80015d4 <HAL_UART_RxCpltCallback+0xa4>)
 80015ba:	f004 fa0a 	bl	80059d2 <HAL_UART_Receive_IT>
    }
}
 80015be:	3708      	adds	r7, #8
 80015c0:	46bd      	mov	sp, r7
 80015c2:	bd80      	pop	{r7, pc}
 80015c4:	40004400 	.word	0x40004400
 80015c8:	20000404 	.word	0x20000404
 80015cc:	200003d0 	.word	0x200003d0
 80015d0:	0800ba68 	.word	0x0800ba68
 80015d4:	20000388 	.word	0x20000388

080015d8 <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b082      	sub	sp, #8
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 80015e0:	1d39      	adds	r1, r7, #4
 80015e2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80015e6:	2201      	movs	r2, #1
 80015e8:	4803      	ldr	r0, [pc, #12]	@ (80015f8 <__io_putchar+0x20>)
 80015ea:	f004 f967 	bl	80058bc <HAL_UART_Transmit>
	return ch;
 80015ee:	687b      	ldr	r3, [r7, #4]
}
 80015f0:	4618      	mov	r0, r3
 80015f2:	3708      	adds	r7, #8
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bd80      	pop	{r7, pc}
 80015f8:	20000388 	.word	0x20000388

080015fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001600:	f001 f94e 	bl	80028a0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001604:	f000 f81e 	bl	8001644 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001608:	f000 fa08 	bl	8001a1c <MX_GPIO_Init>
  MX_DMA_Init();
 800160c:	f000 f9e6 	bl	80019dc <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001610:	f000 f9ba 	bl	8001988 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8001614:	f000 f880 	bl	8001718 <MX_ADC1_Init>
  MX_TIM2_Init();
 8001618:	f000 f8d0 	bl	80017bc <MX_TIM2_Init>
  MX_TIM3_Init();
 800161c:	f000 f91a 	bl	8001854 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001620:	f000 f964 	bl	80018ec <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_IT(&hadc1);
 8001624:	4804      	ldr	r0, [pc, #16]	@ (8001638 <main+0x3c>)
 8001626:	f001 fb63 	bl	8002cf0 <HAL_ADC_Start_IT>
  HAL_UART_Receive_IT(&huart2, &odbiorUART.receivedData, 1);
 800162a:	2201      	movs	r2, #1
 800162c:	4903      	ldr	r1, [pc, #12]	@ (800163c <main+0x40>)
 800162e:	4804      	ldr	r0, [pc, #16]	@ (8001640 <main+0x44>)
 8001630:	f004 f9cf 	bl	80059d2 <HAL_UART_Receive_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001634:	bf00      	nop
 8001636:	e7fd      	b.n	8001634 <main+0x38>
 8001638:	20000208 	.word	0x20000208
 800163c:	200003d0 	.word	0x200003d0
 8001640:	20000388 	.word	0x20000388

08001644 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b094      	sub	sp, #80	@ 0x50
 8001648:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800164a:	f107 0320 	add.w	r3, r7, #32
 800164e:	2230      	movs	r2, #48	@ 0x30
 8001650:	2100      	movs	r1, #0
 8001652:	4618      	mov	r0, r3
 8001654:	f006 faa8 	bl	8007ba8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001658:	f107 030c 	add.w	r3, r7, #12
 800165c:	2200      	movs	r2, #0
 800165e:	601a      	str	r2, [r3, #0]
 8001660:	605a      	str	r2, [r3, #4]
 8001662:	609a      	str	r2, [r3, #8]
 8001664:	60da      	str	r2, [r3, #12]
 8001666:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001668:	2300      	movs	r3, #0
 800166a:	60bb      	str	r3, [r7, #8]
 800166c:	4b28      	ldr	r3, [pc, #160]	@ (8001710 <SystemClock_Config+0xcc>)
 800166e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001670:	4a27      	ldr	r2, [pc, #156]	@ (8001710 <SystemClock_Config+0xcc>)
 8001672:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001676:	6413      	str	r3, [r2, #64]	@ 0x40
 8001678:	4b25      	ldr	r3, [pc, #148]	@ (8001710 <SystemClock_Config+0xcc>)
 800167a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800167c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001680:	60bb      	str	r3, [r7, #8]
 8001682:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001684:	2300      	movs	r3, #0
 8001686:	607b      	str	r3, [r7, #4]
 8001688:	4b22      	ldr	r3, [pc, #136]	@ (8001714 <SystemClock_Config+0xd0>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001690:	4a20      	ldr	r2, [pc, #128]	@ (8001714 <SystemClock_Config+0xd0>)
 8001692:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001696:	6013      	str	r3, [r2, #0]
 8001698:	4b1e      	ldr	r3, [pc, #120]	@ (8001714 <SystemClock_Config+0xd0>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80016a0:	607b      	str	r3, [r7, #4]
 80016a2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80016a4:	2302      	movs	r3, #2
 80016a6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80016a8:	2301      	movs	r3, #1
 80016aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80016ac:	2310      	movs	r3, #16
 80016ae:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016b0:	2302      	movs	r3, #2
 80016b2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80016b4:	2300      	movs	r3, #0
 80016b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80016b8:	2308      	movs	r3, #8
 80016ba:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 68;
 80016bc:	2344      	movs	r3, #68	@ 0x44
 80016be:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80016c0:	2302      	movs	r3, #2
 80016c2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80016c4:	2307      	movs	r3, #7
 80016c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016c8:	f107 0320 	add.w	r3, r7, #32
 80016cc:	4618      	mov	r0, r3
 80016ce:	f002 ffa5 	bl	800461c <HAL_RCC_OscConfig>
 80016d2:	4603      	mov	r3, r0
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d001      	beq.n	80016dc <SystemClock_Config+0x98>
  {
    Error_Handler();
 80016d8:	f000 fa0e 	bl	8001af8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016dc:	230f      	movs	r3, #15
 80016de:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80016e0:	2302      	movs	r3, #2
 80016e2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016e4:	2300      	movs	r3, #0
 80016e6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80016e8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80016ec:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80016ee:	2300      	movs	r3, #0
 80016f0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80016f2:	f107 030c 	add.w	r3, r7, #12
 80016f6:	2102      	movs	r1, #2
 80016f8:	4618      	mov	r0, r3
 80016fa:	f003 fa07 	bl	8004b0c <HAL_RCC_ClockConfig>
 80016fe:	4603      	mov	r3, r0
 8001700:	2b00      	cmp	r3, #0
 8001702:	d001      	beq.n	8001708 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001704:	f000 f9f8 	bl	8001af8 <Error_Handler>
  }
}
 8001708:	bf00      	nop
 800170a:	3750      	adds	r7, #80	@ 0x50
 800170c:	46bd      	mov	sp, r7
 800170e:	bd80      	pop	{r7, pc}
 8001710:	40023800 	.word	0x40023800
 8001714:	40007000 	.word	0x40007000

08001718 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b084      	sub	sp, #16
 800171c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800171e:	463b      	mov	r3, r7
 8001720:	2200      	movs	r2, #0
 8001722:	601a      	str	r2, [r3, #0]
 8001724:	605a      	str	r2, [r3, #4]
 8001726:	609a      	str	r2, [r3, #8]
 8001728:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800172a:	4b21      	ldr	r3, [pc, #132]	@ (80017b0 <MX_ADC1_Init+0x98>)
 800172c:	4a21      	ldr	r2, [pc, #132]	@ (80017b4 <MX_ADC1_Init+0x9c>)
 800172e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001730:	4b1f      	ldr	r3, [pc, #124]	@ (80017b0 <MX_ADC1_Init+0x98>)
 8001732:	2200      	movs	r2, #0
 8001734:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001736:	4b1e      	ldr	r3, [pc, #120]	@ (80017b0 <MX_ADC1_Init+0x98>)
 8001738:	2200      	movs	r2, #0
 800173a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800173c:	4b1c      	ldr	r3, [pc, #112]	@ (80017b0 <MX_ADC1_Init+0x98>)
 800173e:	2200      	movs	r2, #0
 8001740:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001742:	4b1b      	ldr	r3, [pc, #108]	@ (80017b0 <MX_ADC1_Init+0x98>)
 8001744:	2201      	movs	r2, #1
 8001746:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001748:	4b19      	ldr	r3, [pc, #100]	@ (80017b0 <MX_ADC1_Init+0x98>)
 800174a:	2200      	movs	r2, #0
 800174c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001750:	4b17      	ldr	r3, [pc, #92]	@ (80017b0 <MX_ADC1_Init+0x98>)
 8001752:	2200      	movs	r2, #0
 8001754:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001756:	4b16      	ldr	r3, [pc, #88]	@ (80017b0 <MX_ADC1_Init+0x98>)
 8001758:	4a17      	ldr	r2, [pc, #92]	@ (80017b8 <MX_ADC1_Init+0xa0>)
 800175a:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800175c:	4b14      	ldr	r3, [pc, #80]	@ (80017b0 <MX_ADC1_Init+0x98>)
 800175e:	2200      	movs	r2, #0
 8001760:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001762:	4b13      	ldr	r3, [pc, #76]	@ (80017b0 <MX_ADC1_Init+0x98>)
 8001764:	2201      	movs	r2, #1
 8001766:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001768:	4b11      	ldr	r3, [pc, #68]	@ (80017b0 <MX_ADC1_Init+0x98>)
 800176a:	2201      	movs	r2, #1
 800176c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001770:	4b0f      	ldr	r3, [pc, #60]	@ (80017b0 <MX_ADC1_Init+0x98>)
 8001772:	2201      	movs	r2, #1
 8001774:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001776:	480e      	ldr	r0, [pc, #56]	@ (80017b0 <MX_ADC1_Init+0x98>)
 8001778:	f001 f904 	bl	8002984 <HAL_ADC_Init>
 800177c:	4603      	mov	r3, r0
 800177e:	2b00      	cmp	r3, #0
 8001780:	d001      	beq.n	8001786 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8001782:	f000 f9b9 	bl	8001af8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001786:	2300      	movs	r3, #0
 8001788:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800178a:	2301      	movs	r3, #1
 800178c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 800178e:	2301      	movs	r3, #1
 8001790:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001792:	463b      	mov	r3, r7
 8001794:	4619      	mov	r1, r3
 8001796:	4806      	ldr	r0, [pc, #24]	@ (80017b0 <MX_ADC1_Init+0x98>)
 8001798:	f001 fde4 	bl	8003364 <HAL_ADC_ConfigChannel>
 800179c:	4603      	mov	r3, r0
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d001      	beq.n	80017a6 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80017a2:	f000 f9a9 	bl	8001af8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80017a6:	bf00      	nop
 80017a8:	3710      	adds	r7, #16
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bd80      	pop	{r7, pc}
 80017ae:	bf00      	nop
 80017b0:	20000208 	.word	0x20000208
 80017b4:	40012000 	.word	0x40012000
 80017b8:	0f000001 	.word	0x0f000001

080017bc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b086      	sub	sp, #24
 80017c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80017c2:	f107 0308 	add.w	r3, r7, #8
 80017c6:	2200      	movs	r2, #0
 80017c8:	601a      	str	r2, [r3, #0]
 80017ca:	605a      	str	r2, [r3, #4]
 80017cc:	609a      	str	r2, [r3, #8]
 80017ce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017d0:	463b      	mov	r3, r7
 80017d2:	2200      	movs	r2, #0
 80017d4:	601a      	str	r2, [r3, #0]
 80017d6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80017d8:	4b1d      	ldr	r3, [pc, #116]	@ (8001850 <MX_TIM2_Init+0x94>)
 80017da:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80017de:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = TIM2_PRESCALER;
 80017e0:	4b1b      	ldr	r3, [pc, #108]	@ (8001850 <MX_TIM2_Init+0x94>)
 80017e2:	2243      	movs	r2, #67	@ 0x43
 80017e4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017e6:	4b1a      	ldr	r3, [pc, #104]	@ (8001850 <MX_TIM2_Init+0x94>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = TIM2_PERIOD;
 80017ec:	4b18      	ldr	r3, [pc, #96]	@ (8001850 <MX_TIM2_Init+0x94>)
 80017ee:	f246 12a7 	movw	r2, #24999	@ 0x61a7
 80017f2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017f4:	4b16      	ldr	r3, [pc, #88]	@ (8001850 <MX_TIM2_Init+0x94>)
 80017f6:	2200      	movs	r2, #0
 80017f8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017fa:	4b15      	ldr	r3, [pc, #84]	@ (8001850 <MX_TIM2_Init+0x94>)
 80017fc:	2200      	movs	r2, #0
 80017fe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001800:	4813      	ldr	r0, [pc, #76]	@ (8001850 <MX_TIM2_Init+0x94>)
 8001802:	f003 fba3 	bl	8004f4c <HAL_TIM_Base_Init>
 8001806:	4603      	mov	r3, r0
 8001808:	2b00      	cmp	r3, #0
 800180a:	d001      	beq.n	8001810 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800180c:	f000 f974 	bl	8001af8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001810:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001814:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001816:	f107 0308 	add.w	r3, r7, #8
 800181a:	4619      	mov	r1, r3
 800181c:	480c      	ldr	r0, [pc, #48]	@ (8001850 <MX_TIM2_Init+0x94>)
 800181e:	f003 fd66 	bl	80052ee <HAL_TIM_ConfigClockSource>
 8001822:	4603      	mov	r3, r0
 8001824:	2b00      	cmp	r3, #0
 8001826:	d001      	beq.n	800182c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001828:	f000 f966 	bl	8001af8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800182c:	2300      	movs	r3, #0
 800182e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001830:	2300      	movs	r3, #0
 8001832:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001834:	463b      	mov	r3, r7
 8001836:	4619      	mov	r1, r3
 8001838:	4805      	ldr	r0, [pc, #20]	@ (8001850 <MX_TIM2_Init+0x94>)
 800183a:	f003 ff6d 	bl	8005718 <HAL_TIMEx_MasterConfigSynchronization>
 800183e:	4603      	mov	r3, r0
 8001840:	2b00      	cmp	r3, #0
 8001842:	d001      	beq.n	8001848 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001844:	f000 f958 	bl	8001af8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001848:	bf00      	nop
 800184a:	3718      	adds	r7, #24
 800184c:	46bd      	mov	sp, r7
 800184e:	bd80      	pop	{r7, pc}
 8001850:	200002b0 	.word	0x200002b0

08001854 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b086      	sub	sp, #24
 8001858:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800185a:	f107 0308 	add.w	r3, r7, #8
 800185e:	2200      	movs	r2, #0
 8001860:	601a      	str	r2, [r3, #0]
 8001862:	605a      	str	r2, [r3, #4]
 8001864:	609a      	str	r2, [r3, #8]
 8001866:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001868:	463b      	mov	r3, r7
 800186a:	2200      	movs	r2, #0
 800186c:	601a      	str	r2, [r3, #0]
 800186e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001870:	4b1c      	ldr	r3, [pc, #112]	@ (80018e4 <MX_TIM3_Init+0x90>)
 8001872:	4a1d      	ldr	r2, [pc, #116]	@ (80018e8 <MX_TIM3_Init+0x94>)
 8001874:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = TIM3_PRESCALER;
 8001876:	4b1b      	ldr	r3, [pc, #108]	@ (80018e4 <MX_TIM3_Init+0x90>)
 8001878:	2243      	movs	r2, #67	@ 0x43
 800187a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800187c:	4b19      	ldr	r3, [pc, #100]	@ (80018e4 <MX_TIM3_Init+0x90>)
 800187e:	2200      	movs	r2, #0
 8001880:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = TIM3_PERIOD;
 8001882:	4b18      	ldr	r3, [pc, #96]	@ (80018e4 <MX_TIM3_Init+0x90>)
 8001884:	2263      	movs	r2, #99	@ 0x63
 8001886:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001888:	4b16      	ldr	r3, [pc, #88]	@ (80018e4 <MX_TIM3_Init+0x90>)
 800188a:	2200      	movs	r2, #0
 800188c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800188e:	4b15      	ldr	r3, [pc, #84]	@ (80018e4 <MX_TIM3_Init+0x90>)
 8001890:	2200      	movs	r2, #0
 8001892:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001894:	4813      	ldr	r0, [pc, #76]	@ (80018e4 <MX_TIM3_Init+0x90>)
 8001896:	f003 fb59 	bl	8004f4c <HAL_TIM_Base_Init>
 800189a:	4603      	mov	r3, r0
 800189c:	2b00      	cmp	r3, #0
 800189e:	d001      	beq.n	80018a4 <MX_TIM3_Init+0x50>
  {
    Error_Handler();
 80018a0:	f000 f92a 	bl	8001af8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80018a4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80018a8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80018aa:	f107 0308 	add.w	r3, r7, #8
 80018ae:	4619      	mov	r1, r3
 80018b0:	480c      	ldr	r0, [pc, #48]	@ (80018e4 <MX_TIM3_Init+0x90>)
 80018b2:	f003 fd1c 	bl	80052ee <HAL_TIM_ConfigClockSource>
 80018b6:	4603      	mov	r3, r0
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d001      	beq.n	80018c0 <MX_TIM3_Init+0x6c>
  {
    Error_Handler();
 80018bc:	f000 f91c 	bl	8001af8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018c0:	2300      	movs	r3, #0
 80018c2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018c4:	2300      	movs	r3, #0
 80018c6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80018c8:	463b      	mov	r3, r7
 80018ca:	4619      	mov	r1, r3
 80018cc:	4805      	ldr	r0, [pc, #20]	@ (80018e4 <MX_TIM3_Init+0x90>)
 80018ce:	f003 ff23 	bl	8005718 <HAL_TIMEx_MasterConfigSynchronization>
 80018d2:	4603      	mov	r3, r0
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d001      	beq.n	80018dc <MX_TIM3_Init+0x88>
  {
    Error_Handler();
 80018d8:	f000 f90e 	bl	8001af8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80018dc:	bf00      	nop
 80018de:	3718      	adds	r7, #24
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bd80      	pop	{r7, pc}
 80018e4:	200002f8 	.word	0x200002f8
 80018e8:	40000400 	.word	0x40000400

080018ec <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b086      	sub	sp, #24
 80018f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80018f2:	f107 0308 	add.w	r3, r7, #8
 80018f6:	2200      	movs	r2, #0
 80018f8:	601a      	str	r2, [r3, #0]
 80018fa:	605a      	str	r2, [r3, #4]
 80018fc:	609a      	str	r2, [r3, #8]
 80018fe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001900:	463b      	mov	r3, r7
 8001902:	2200      	movs	r2, #0
 8001904:	601a      	str	r2, [r3, #0]
 8001906:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001908:	4b1d      	ldr	r3, [pc, #116]	@ (8001980 <MX_TIM4_Init+0x94>)
 800190a:	4a1e      	ldr	r2, [pc, #120]	@ (8001984 <MX_TIM4_Init+0x98>)
 800190c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = TIM4_PRESCALER;
 800190e:	4b1c      	ldr	r3, [pc, #112]	@ (8001980 <MX_TIM4_Init+0x94>)
 8001910:	f240 120f 	movw	r2, #271	@ 0x10f
 8001914:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001916:	4b1a      	ldr	r3, [pc, #104]	@ (8001980 <MX_TIM4_Init+0x94>)
 8001918:	2200      	movs	r2, #0
 800191a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = TIM4_PERIOD;
 800191c:	4b18      	ldr	r3, [pc, #96]	@ (8001980 <MX_TIM4_Init+0x94>)
 800191e:	f246 12a7 	movw	r2, #24999	@ 0x61a7
 8001922:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001924:	4b16      	ldr	r3, [pc, #88]	@ (8001980 <MX_TIM4_Init+0x94>)
 8001926:	2200      	movs	r2, #0
 8001928:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800192a:	4b15      	ldr	r3, [pc, #84]	@ (8001980 <MX_TIM4_Init+0x94>)
 800192c:	2200      	movs	r2, #0
 800192e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001930:	4813      	ldr	r0, [pc, #76]	@ (8001980 <MX_TIM4_Init+0x94>)
 8001932:	f003 fb0b 	bl	8004f4c <HAL_TIM_Base_Init>
 8001936:	4603      	mov	r3, r0
 8001938:	2b00      	cmp	r3, #0
 800193a:	d001      	beq.n	8001940 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 800193c:	f000 f8dc 	bl	8001af8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001940:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001944:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001946:	f107 0308 	add.w	r3, r7, #8
 800194a:	4619      	mov	r1, r3
 800194c:	480c      	ldr	r0, [pc, #48]	@ (8001980 <MX_TIM4_Init+0x94>)
 800194e:	f003 fcce 	bl	80052ee <HAL_TIM_ConfigClockSource>
 8001952:	4603      	mov	r3, r0
 8001954:	2b00      	cmp	r3, #0
 8001956:	d001      	beq.n	800195c <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8001958:	f000 f8ce 	bl	8001af8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800195c:	2300      	movs	r3, #0
 800195e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001960:	2300      	movs	r3, #0
 8001962:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001964:	463b      	mov	r3, r7
 8001966:	4619      	mov	r1, r3
 8001968:	4805      	ldr	r0, [pc, #20]	@ (8001980 <MX_TIM4_Init+0x94>)
 800196a:	f003 fed5 	bl	8005718 <HAL_TIMEx_MasterConfigSynchronization>
 800196e:	4603      	mov	r3, r0
 8001970:	2b00      	cmp	r3, #0
 8001972:	d001      	beq.n	8001978 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8001974:	f000 f8c0 	bl	8001af8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001978:	bf00      	nop
 800197a:	3718      	adds	r7, #24
 800197c:	46bd      	mov	sp, r7
 800197e:	bd80      	pop	{r7, pc}
 8001980:	20000340 	.word	0x20000340
 8001984:	40000800 	.word	0x40000800

08001988 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800198c:	4b11      	ldr	r3, [pc, #68]	@ (80019d4 <MX_USART2_UART_Init+0x4c>)
 800198e:	4a12      	ldr	r2, [pc, #72]	@ (80019d8 <MX_USART2_UART_Init+0x50>)
 8001990:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001992:	4b10      	ldr	r3, [pc, #64]	@ (80019d4 <MX_USART2_UART_Init+0x4c>)
 8001994:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001998:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800199a:	4b0e      	ldr	r3, [pc, #56]	@ (80019d4 <MX_USART2_UART_Init+0x4c>)
 800199c:	2200      	movs	r2, #0
 800199e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80019a0:	4b0c      	ldr	r3, [pc, #48]	@ (80019d4 <MX_USART2_UART_Init+0x4c>)
 80019a2:	2200      	movs	r2, #0
 80019a4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80019a6:	4b0b      	ldr	r3, [pc, #44]	@ (80019d4 <MX_USART2_UART_Init+0x4c>)
 80019a8:	2200      	movs	r2, #0
 80019aa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80019ac:	4b09      	ldr	r3, [pc, #36]	@ (80019d4 <MX_USART2_UART_Init+0x4c>)
 80019ae:	220c      	movs	r2, #12
 80019b0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019b2:	4b08      	ldr	r3, [pc, #32]	@ (80019d4 <MX_USART2_UART_Init+0x4c>)
 80019b4:	2200      	movs	r2, #0
 80019b6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80019b8:	4b06      	ldr	r3, [pc, #24]	@ (80019d4 <MX_USART2_UART_Init+0x4c>)
 80019ba:	2200      	movs	r2, #0
 80019bc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80019be:	4805      	ldr	r0, [pc, #20]	@ (80019d4 <MX_USART2_UART_Init+0x4c>)
 80019c0:	f003 ff2c 	bl	800581c <HAL_UART_Init>
 80019c4:	4603      	mov	r3, r0
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d001      	beq.n	80019ce <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80019ca:	f000 f895 	bl	8001af8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80019ce:	bf00      	nop
 80019d0:	bd80      	pop	{r7, pc}
 80019d2:	bf00      	nop
 80019d4:	20000388 	.word	0x20000388
 80019d8:	40004400 	.word	0x40004400

080019dc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b082      	sub	sp, #8
 80019e0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80019e2:	2300      	movs	r3, #0
 80019e4:	607b      	str	r3, [r7, #4]
 80019e6:	4b0c      	ldr	r3, [pc, #48]	@ (8001a18 <MX_DMA_Init+0x3c>)
 80019e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019ea:	4a0b      	ldr	r2, [pc, #44]	@ (8001a18 <MX_DMA_Init+0x3c>)
 80019ec:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80019f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80019f2:	4b09      	ldr	r3, [pc, #36]	@ (8001a18 <MX_DMA_Init+0x3c>)
 80019f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019f6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80019fa:	607b      	str	r3, [r7, #4]
 80019fc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80019fe:	2200      	movs	r2, #0
 8001a00:	2100      	movs	r1, #0
 8001a02:	2038      	movs	r0, #56	@ 0x38
 8001a04:	f002 f833 	bl	8003a6e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001a08:	2038      	movs	r0, #56	@ 0x38
 8001a0a:	f002 f84c 	bl	8003aa6 <HAL_NVIC_EnableIRQ>

}
 8001a0e:	bf00      	nop
 8001a10:	3708      	adds	r7, #8
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bd80      	pop	{r7, pc}
 8001a16:	bf00      	nop
 8001a18:	40023800 	.word	0x40023800

08001a1c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b08a      	sub	sp, #40	@ 0x28
 8001a20:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a22:	f107 0314 	add.w	r3, r7, #20
 8001a26:	2200      	movs	r2, #0
 8001a28:	601a      	str	r2, [r3, #0]
 8001a2a:	605a      	str	r2, [r3, #4]
 8001a2c:	609a      	str	r2, [r3, #8]
 8001a2e:	60da      	str	r2, [r3, #12]
 8001a30:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a32:	2300      	movs	r3, #0
 8001a34:	613b      	str	r3, [r7, #16]
 8001a36:	4b2d      	ldr	r3, [pc, #180]	@ (8001aec <MX_GPIO_Init+0xd0>)
 8001a38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a3a:	4a2c      	ldr	r2, [pc, #176]	@ (8001aec <MX_GPIO_Init+0xd0>)
 8001a3c:	f043 0304 	orr.w	r3, r3, #4
 8001a40:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a42:	4b2a      	ldr	r3, [pc, #168]	@ (8001aec <MX_GPIO_Init+0xd0>)
 8001a44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a46:	f003 0304 	and.w	r3, r3, #4
 8001a4a:	613b      	str	r3, [r7, #16]
 8001a4c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001a4e:	2300      	movs	r3, #0
 8001a50:	60fb      	str	r3, [r7, #12]
 8001a52:	4b26      	ldr	r3, [pc, #152]	@ (8001aec <MX_GPIO_Init+0xd0>)
 8001a54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a56:	4a25      	ldr	r2, [pc, #148]	@ (8001aec <MX_GPIO_Init+0xd0>)
 8001a58:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001a5c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a5e:	4b23      	ldr	r3, [pc, #140]	@ (8001aec <MX_GPIO_Init+0xd0>)
 8001a60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a62:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001a66:	60fb      	str	r3, [r7, #12]
 8001a68:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	60bb      	str	r3, [r7, #8]
 8001a6e:	4b1f      	ldr	r3, [pc, #124]	@ (8001aec <MX_GPIO_Init+0xd0>)
 8001a70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a72:	4a1e      	ldr	r2, [pc, #120]	@ (8001aec <MX_GPIO_Init+0xd0>)
 8001a74:	f043 0301 	orr.w	r3, r3, #1
 8001a78:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a7a:	4b1c      	ldr	r3, [pc, #112]	@ (8001aec <MX_GPIO_Init+0xd0>)
 8001a7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a7e:	f003 0301 	and.w	r3, r3, #1
 8001a82:	60bb      	str	r3, [r7, #8]
 8001a84:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a86:	2300      	movs	r3, #0
 8001a88:	607b      	str	r3, [r7, #4]
 8001a8a:	4b18      	ldr	r3, [pc, #96]	@ (8001aec <MX_GPIO_Init+0xd0>)
 8001a8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a8e:	4a17      	ldr	r2, [pc, #92]	@ (8001aec <MX_GPIO_Init+0xd0>)
 8001a90:	f043 0302 	orr.w	r3, r3, #2
 8001a94:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a96:	4b15      	ldr	r3, [pc, #84]	@ (8001aec <MX_GPIO_Init+0xd0>)
 8001a98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a9a:	f003 0302 	and.w	r3, r3, #2
 8001a9e:	607b      	str	r3, [r7, #4]
 8001aa0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	2120      	movs	r1, #32
 8001aa6:	4812      	ldr	r0, [pc, #72]	@ (8001af0 <MX_GPIO_Init+0xd4>)
 8001aa8:	f002 fd9e 	bl	80045e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001aac:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001ab0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001ab2:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001ab6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001abc:	f107 0314 	add.w	r3, r7, #20
 8001ac0:	4619      	mov	r1, r3
 8001ac2:	480c      	ldr	r0, [pc, #48]	@ (8001af4 <MX_GPIO_Init+0xd8>)
 8001ac4:	f002 fc0c 	bl	80042e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001ac8:	2320      	movs	r3, #32
 8001aca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001acc:	2301      	movs	r3, #1
 8001ace:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001ad8:	f107 0314 	add.w	r3, r7, #20
 8001adc:	4619      	mov	r1, r3
 8001ade:	4804      	ldr	r0, [pc, #16]	@ (8001af0 <MX_GPIO_Init+0xd4>)
 8001ae0:	f002 fbfe 	bl	80042e0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001ae4:	bf00      	nop
 8001ae6:	3728      	adds	r7, #40	@ 0x28
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	bd80      	pop	{r7, pc}
 8001aec:	40023800 	.word	0x40023800
 8001af0:	40020000 	.word	0x40020000
 8001af4:	40020800 	.word	0x40020800

08001af8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001af8:	b480      	push	{r7}
 8001afa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001afc:	b672      	cpsid	i
}
 8001afe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b00:	bf00      	nop
 8001b02:	e7fd      	b.n	8001b00 <Error_Handler+0x8>

08001b04 <HAL_TIM_PeriodElapsedCallback>:
#include "przerwaniaTimerow.h"

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b082      	sub	sp, #8
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]

	if(htim == &htim2)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	4a13      	ldr	r2, [pc, #76]	@ (8001b5c <HAL_TIM_PeriodElapsedCallback+0x58>)
 8001b10:	4293      	cmp	r3, r2
 8001b12:	d107      	bne.n	8001b24 <HAL_TIM_PeriodElapsedCallback+0x20>
	{
        HAL_TIM_Base_Stop_IT(&htim3);
 8001b14:	4812      	ldr	r0, [pc, #72]	@ (8001b60 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8001b16:	f003 facb 	bl	80050b0 <HAL_TIM_Base_Stop_IT>
        HAL_TIM_Base_Stop_IT(&htim4);
 8001b1a:	4812      	ldr	r0, [pc, #72]	@ (8001b64 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8001b1c:	f003 fac8 	bl	80050b0 <HAL_TIM_Base_Stop_IT>

        obsluzPrzerwanieMatrycy();
 8001b20:	f000 f822 	bl	8001b68 <obsluzPrzerwanieMatrycy>
	}

	if (htim == &htim3)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	4a0e      	ldr	r2, [pc, #56]	@ (8001b60 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8001b28:	4293      	cmp	r3, r2
 8001b2a:	d107      	bne.n	8001b3c <HAL_TIM_PeriodElapsedCallback+0x38>
	    {
        HAL_TIM_Base_Stop_IT(&htim2);
 8001b2c:	480b      	ldr	r0, [pc, #44]	@ (8001b5c <HAL_TIM_PeriodElapsedCallback+0x58>)
 8001b2e:	f003 fabf 	bl	80050b0 <HAL_TIM_Base_Stop_IT>
        HAL_TIM_Base_Stop_IT(&htim4);
 8001b32:	480c      	ldr	r0, [pc, #48]	@ (8001b64 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8001b34:	f003 fabc 	bl	80050b0 <HAL_TIM_Base_Stop_IT>

        obsluzPrzerwanieDynam();
 8001b38:	f000 f8ca 	bl	8001cd0 <obsluzPrzerwanieDynam>
	    }

	if (htim == &htim4)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	4a09      	ldr	r2, [pc, #36]	@ (8001b64 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8001b40:	4293      	cmp	r3, r2
 8001b42:	d107      	bne.n	8001b54 <HAL_TIM_PeriodElapsedCallback+0x50>
	{
        HAL_TIM_Base_Stop_IT(&htim3);
 8001b44:	4806      	ldr	r0, [pc, #24]	@ (8001b60 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8001b46:	f003 fab3 	bl	80050b0 <HAL_TIM_Base_Stop_IT>
        HAL_TIM_Base_Stop_IT(&htim2);
 8001b4a:	4804      	ldr	r0, [pc, #16]	@ (8001b5c <HAL_TIM_PeriodElapsedCallback+0x58>)
 8001b4c:	f003 fab0 	bl	80050b0 <HAL_TIM_Base_Stop_IT>

        obsluzPrzerwanieStat();
 8001b50:	f000 f998 	bl	8001e84 <obsluzPrzerwanieStat>

	}
}
 8001b54:	bf00      	nop
 8001b56:	3708      	adds	r7, #8
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bd80      	pop	{r7, pc}
 8001b5c:	200002b0 	.word	0x200002b0
 8001b60:	200002f8 	.word	0x200002f8
 8001b64:	20000340 	.word	0x20000340

08001b68 <obsluzPrzerwanieMatrycy>:

void obsluzPrzerwanieMatrycy()
{
 8001b68:	b590      	push	{r4, r7, lr}
 8001b6a:	b09d      	sub	sp, #116	@ 0x74
 8001b6c:	af02      	add	r7, sp, #8
	static uint8_t licznikDoPomiaruMatrycy = 0;
	if( warunkiPomiaru.idPomiaru == 'M' && warunkiPomiaru.idCzujnika[0] == '0' )
 8001b6e:	4b52      	ldr	r3, [pc, #328]	@ (8001cb8 <obsluzPrzerwanieMatrycy+0x150>)
 8001b70:	795b      	ldrb	r3, [r3, #5]
 8001b72:	2b4d      	cmp	r3, #77	@ 0x4d
 8001b74:	f040 809b 	bne.w	8001cae <obsluzPrzerwanieMatrycy+0x146>
 8001b78:	4b4f      	ldr	r3, [pc, #316]	@ (8001cb8 <obsluzPrzerwanieMatrycy+0x150>)
 8001b7a:	781b      	ldrb	r3, [r3, #0]
 8001b7c:	2b30      	cmp	r3, #48	@ 0x30
 8001b7e:	f040 8096 	bne.w	8001cae <obsluzPrzerwanieMatrycy+0x146>
	{
		switch(licznikDoPomiaruMatrycy)
 8001b82:	4b4e      	ldr	r3, [pc, #312]	@ (8001cbc <obsluzPrzerwanieMatrycy+0x154>)
 8001b84:	781b      	ldrb	r3, [r3, #0]
 8001b86:	2b03      	cmp	r3, #3
 8001b88:	f200 8083 	bhi.w	8001c92 <obsluzPrzerwanieMatrycy+0x12a>
 8001b8c:	a201      	add	r2, pc, #4	@ (adr r2, 8001b94 <obsluzPrzerwanieMatrycy+0x2c>)
 8001b8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b92:	bf00      	nop
 8001b94:	08001ba5 	.word	0x08001ba5
 8001b98:	08001bcf 	.word	0x08001bcf
 8001b9c:	08001bf9 	.word	0x08001bf9
 8001ba0:	08001c23 	.word	0x08001c23
		{
		case 0:
			HAL_ADC_Stop(&hadc1);
 8001ba4:	4846      	ldr	r0, [pc, #280]	@ (8001cc0 <obsluzPrzerwanieMatrycy+0x158>)
 8001ba6:	f000 ffe5 	bl	8002b74 <HAL_ADC_Stop>
			ADC_Select_CH0();
 8001baa:	f7ff fa33 	bl	8001014 <ADC_Select_CH0>
			HAL_ADC_Start(&hadc1);
 8001bae:	4844      	ldr	r0, [pc, #272]	@ (8001cc0 <obsluzPrzerwanieMatrycy+0x158>)
 8001bb0:	f000 ff2c 	bl	8002a0c <HAL_ADC_Start>
			HAL_ADC_PollForConversion(&hadc1, 1000);
 8001bb4:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001bb8:	4841      	ldr	r0, [pc, #260]	@ (8001cc0 <obsluzPrzerwanieMatrycy+0x158>)
 8001bba:	f001 f80e 	bl	8002bda <HAL_ADC_PollForConversion>
			wartosciADC.wartosc1=HAL_ADC_GetValue(&hadc1);
 8001bbe:	4840      	ldr	r0, [pc, #256]	@ (8001cc0 <obsluzPrzerwanieMatrycy+0x158>)
 8001bc0:	f001 fbae 	bl	8003320 <HAL_ADC_GetValue>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	461a      	mov	r2, r3
 8001bc8:	4b3e      	ldr	r3, [pc, #248]	@ (8001cc4 <obsluzPrzerwanieMatrycy+0x15c>)
 8001bca:	601a      	str	r2, [r3, #0]
			break;
 8001bcc:	e062      	b.n	8001c94 <obsluzPrzerwanieMatrycy+0x12c>

		case 1:
			HAL_ADC_Stop(&hadc1);
 8001bce:	483c      	ldr	r0, [pc, #240]	@ (8001cc0 <obsluzPrzerwanieMatrycy+0x158>)
 8001bd0:	f000 ffd0 	bl	8002b74 <HAL_ADC_Stop>
			ADC_Select_CH1();
 8001bd4:	f7ff fa3e 	bl	8001054 <ADC_Select_CH1>
			HAL_ADC_Start(&hadc1);
 8001bd8:	4839      	ldr	r0, [pc, #228]	@ (8001cc0 <obsluzPrzerwanieMatrycy+0x158>)
 8001bda:	f000 ff17 	bl	8002a0c <HAL_ADC_Start>
			HAL_ADC_PollForConversion(&hadc1, 1000);
 8001bde:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001be2:	4837      	ldr	r0, [pc, #220]	@ (8001cc0 <obsluzPrzerwanieMatrycy+0x158>)
 8001be4:	f000 fff9 	bl	8002bda <HAL_ADC_PollForConversion>
			wartosciADC.wartosc2=HAL_ADC_GetValue(&hadc1);
 8001be8:	4835      	ldr	r0, [pc, #212]	@ (8001cc0 <obsluzPrzerwanieMatrycy+0x158>)
 8001bea:	f001 fb99 	bl	8003320 <HAL_ADC_GetValue>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	461a      	mov	r2, r3
 8001bf2:	4b34      	ldr	r3, [pc, #208]	@ (8001cc4 <obsluzPrzerwanieMatrycy+0x15c>)
 8001bf4:	605a      	str	r2, [r3, #4]
			break;
 8001bf6:	e04d      	b.n	8001c94 <obsluzPrzerwanieMatrycy+0x12c>

		case 2:
			HAL_ADC_Stop(&hadc1);
 8001bf8:	4831      	ldr	r0, [pc, #196]	@ (8001cc0 <obsluzPrzerwanieMatrycy+0x158>)
 8001bfa:	f000 ffbb 	bl	8002b74 <HAL_ADC_Stop>
			ADC_Select_CH4();
 8001bfe:	f7ff fa49 	bl	8001094 <ADC_Select_CH4>
			HAL_ADC_Start(&hadc1);
 8001c02:	482f      	ldr	r0, [pc, #188]	@ (8001cc0 <obsluzPrzerwanieMatrycy+0x158>)
 8001c04:	f000 ff02 	bl	8002a0c <HAL_ADC_Start>
			HAL_ADC_PollForConversion(&hadc1, 1000);
 8001c08:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001c0c:	482c      	ldr	r0, [pc, #176]	@ (8001cc0 <obsluzPrzerwanieMatrycy+0x158>)
 8001c0e:	f000 ffe4 	bl	8002bda <HAL_ADC_PollForConversion>
			wartosciADC.wartosc3=HAL_ADC_GetValue(&hadc1);
 8001c12:	482b      	ldr	r0, [pc, #172]	@ (8001cc0 <obsluzPrzerwanieMatrycy+0x158>)
 8001c14:	f001 fb84 	bl	8003320 <HAL_ADC_GetValue>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	461a      	mov	r2, r3
 8001c1c:	4b29      	ldr	r3, [pc, #164]	@ (8001cc4 <obsluzPrzerwanieMatrycy+0x15c>)
 8001c1e:	609a      	str	r2, [r3, #8]
			break;
 8001c20:	e038      	b.n	8001c94 <obsluzPrzerwanieMatrycy+0x12c>

		case 3:
			HAL_ADC_Stop(&hadc1);
 8001c22:	4827      	ldr	r0, [pc, #156]	@ (8001cc0 <obsluzPrzerwanieMatrycy+0x158>)
 8001c24:	f000 ffa6 	bl	8002b74 <HAL_ADC_Stop>
			ADC_Select_CH8();
 8001c28:	f7ff fa54 	bl	80010d4 <ADC_Select_CH8>
			HAL_ADC_Start(&hadc1);
 8001c2c:	4824      	ldr	r0, [pc, #144]	@ (8001cc0 <obsluzPrzerwanieMatrycy+0x158>)
 8001c2e:	f000 feed 	bl	8002a0c <HAL_ADC_Start>
			HAL_ADC_PollForConversion(&hadc1, 1000);
 8001c32:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001c36:	4822      	ldr	r0, [pc, #136]	@ (8001cc0 <obsluzPrzerwanieMatrycy+0x158>)
 8001c38:	f000 ffcf 	bl	8002bda <HAL_ADC_PollForConversion>
			wartosciADC.wartosc4=HAL_ADC_GetValue(&hadc1);
 8001c3c:	4820      	ldr	r0, [pc, #128]	@ (8001cc0 <obsluzPrzerwanieMatrycy+0x158>)
 8001c3e:	f001 fb6f 	bl	8003320 <HAL_ADC_GetValue>
 8001c42:	4603      	mov	r3, r0
 8001c44:	461a      	mov	r2, r3
 8001c46:	4b1f      	ldr	r3, [pc, #124]	@ (8001cc4 <obsluzPrzerwanieMatrycy+0x15c>)
 8001c48:	60da      	str	r2, [r3, #12]

			// Wyslij raz na 4 przerwania zegara
			char dane[100];

			sprintf(dane, "P M C1 %d C2 %d C3 %d C4 %d", wartosciADC.wartosc1, wartosciADC.wartosc2,
 8001c4a:	4b1e      	ldr	r3, [pc, #120]	@ (8001cc4 <obsluzPrzerwanieMatrycy+0x15c>)
 8001c4c:	6819      	ldr	r1, [r3, #0]
 8001c4e:	4b1d      	ldr	r3, [pc, #116]	@ (8001cc4 <obsluzPrzerwanieMatrycy+0x15c>)
 8001c50:	685c      	ldr	r4, [r3, #4]
					wartosciADC.wartosc3, wartosciADC.wartosc4 );
 8001c52:	4b1c      	ldr	r3, [pc, #112]	@ (8001cc4 <obsluzPrzerwanieMatrycy+0x15c>)
 8001c54:	689b      	ldr	r3, [r3, #8]
 8001c56:	4a1b      	ldr	r2, [pc, #108]	@ (8001cc4 <obsluzPrzerwanieMatrycy+0x15c>)
 8001c58:	68d2      	ldr	r2, [r2, #12]
			sprintf(dane, "P M C1 %d C2 %d C3 %d C4 %d", wartosciADC.wartosc1, wartosciADC.wartosc2,
 8001c5a:	4638      	mov	r0, r7
 8001c5c:	9201      	str	r2, [sp, #4]
 8001c5e:	9300      	str	r3, [sp, #0]
 8001c60:	4623      	mov	r3, r4
 8001c62:	460a      	mov	r2, r1
 8001c64:	4918      	ldr	r1, [pc, #96]	@ (8001cc8 <obsluzPrzerwanieMatrycy+0x160>)
 8001c66:	f005 fe7b 	bl	8007960 <siprintf>
			int crc16=crc16_ccitt_false(dane, strlen(dane));
 8001c6a:	463b      	mov	r3, r7
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	f7fe fb17 	bl	80002a0 <strlen>
 8001c72:	4603      	mov	r3, r0
 8001c74:	461a      	mov	r2, r3
 8001c76:	463b      	mov	r3, r7
 8001c78:	4611      	mov	r1, r2
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	f7ff fac6 	bl	800120c <crc16_ccitt_false>
 8001c80:	4603      	mov	r3, r0
 8001c82:	667b      	str	r3, [r7, #100]	@ 0x64
			printf( "%s %0*d\r\n", dane, 5, crc16);
 8001c84:	4639      	mov	r1, r7
 8001c86:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001c88:	2205      	movs	r2, #5
 8001c8a:	4810      	ldr	r0, [pc, #64]	@ (8001ccc <obsluzPrzerwanieMatrycy+0x164>)
 8001c8c:	f005 fdc4 	bl	8007818 <iprintf>
			break;
 8001c90:	e000      	b.n	8001c94 <obsluzPrzerwanieMatrycy+0x12c>

		default:
			break;
 8001c92:	bf00      	nop
		}

		licznikDoPomiaruMatrycy = (licznikDoPomiaruMatrycy + 1) %4;
 8001c94:	4b09      	ldr	r3, [pc, #36]	@ (8001cbc <obsluzPrzerwanieMatrycy+0x154>)
 8001c96:	781b      	ldrb	r3, [r3, #0]
 8001c98:	3301      	adds	r3, #1
 8001c9a:	425a      	negs	r2, r3
 8001c9c:	f003 0303 	and.w	r3, r3, #3
 8001ca0:	f002 0203 	and.w	r2, r2, #3
 8001ca4:	bf58      	it	pl
 8001ca6:	4253      	negpl	r3, r2
 8001ca8:	b2da      	uxtb	r2, r3
 8001caa:	4b04      	ldr	r3, [pc, #16]	@ (8001cbc <obsluzPrzerwanieMatrycy+0x154>)
 8001cac:	701a      	strb	r2, [r3, #0]
	}
}
 8001cae:	bf00      	nop
 8001cb0:	376c      	adds	r7, #108	@ 0x6c
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd90      	pop	{r4, r7, pc}
 8001cb6:	bf00      	nop
 8001cb8:	20000408 	.word	0x20000408
 8001cbc:	20000406 	.word	0x20000406
 8001cc0:	20000208 	.word	0x20000208
 8001cc4:	200001f0 	.word	0x200001f0
 8001cc8:	0800ba80 	.word	0x0800ba80
 8001ccc:	0800ba9c 	.word	0x0800ba9c

08001cd0 <obsluzPrzerwanieDynam>:

void obsluzPrzerwanieDynam()
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b082      	sub	sp, #8
 8001cd4:	af00      	add	r7, sp, #0
	int tempValPom = 0;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	607b      	str	r3, [r7, #4]
	if ( warunkiPomiaru.idCzujnika[1] == '5' )
 8001cda:	4b5f      	ldr	r3, [pc, #380]	@ (8001e58 <obsluzPrzerwanieDynam+0x188>)
 8001cdc:	785b      	ldrb	r3, [r3, #1]
 8001cde:	2b35      	cmp	r3, #53	@ 0x35
 8001ce0:	d11a      	bne.n	8001d18 <obsluzPrzerwanieDynam+0x48>
	{
		HAL_ADC_Stop(&hadc1);
 8001ce2:	485e      	ldr	r0, [pc, #376]	@ (8001e5c <obsluzPrzerwanieDynam+0x18c>)
 8001ce4:	f000 ff46 	bl	8002b74 <HAL_ADC_Stop>
		ADC_Select_CH11();
 8001ce8:	f7ff fa34 	bl	8001154 <ADC_Select_CH11>
		HAL_ADC_Start(&hadc1);
 8001cec:	485b      	ldr	r0, [pc, #364]	@ (8001e5c <obsluzPrzerwanieDynam+0x18c>)
 8001cee:	f000 fe8d 	bl	8002a0c <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1, 1000);
 8001cf2:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001cf6:	4859      	ldr	r0, [pc, #356]	@ (8001e5c <obsluzPrzerwanieDynam+0x18c>)
 8001cf8:	f000 ff6f 	bl	8002bda <HAL_ADC_PollForConversion>
		wartosciADC.wartosc5=HAL_ADC_GetValue(&hadc1);
 8001cfc:	4857      	ldr	r0, [pc, #348]	@ (8001e5c <obsluzPrzerwanieDynam+0x18c>)
 8001cfe:	f001 fb0f 	bl	8003320 <HAL_ADC_GetValue>
 8001d02:	4603      	mov	r3, r0
 8001d04:	461a      	mov	r2, r3
 8001d06:	4b56      	ldr	r3, [pc, #344]	@ (8001e60 <obsluzPrzerwanieDynam+0x190>)
 8001d08:	611a      	str	r2, [r3, #16]
		HAL_ADC_Stop(&hadc1);
 8001d0a:	4854      	ldr	r0, [pc, #336]	@ (8001e5c <obsluzPrzerwanieDynam+0x18c>)
 8001d0c:	f000 ff32 	bl	8002b74 <HAL_ADC_Stop>

		tempValPom = wartosciADC.wartosc5;
 8001d10:	4b53      	ldr	r3, [pc, #332]	@ (8001e60 <obsluzPrzerwanieDynam+0x190>)
 8001d12:	691b      	ldr	r3, [r3, #16]
 8001d14:	607b      	str	r3, [r7, #4]
 8001d16:	e01d      	b.n	8001d54 <obsluzPrzerwanieDynam+0x84>

	} else if( warunkiPomiaru.idCzujnika[1] == '6' ) {
 8001d18:	4b4f      	ldr	r3, [pc, #316]	@ (8001e58 <obsluzPrzerwanieDynam+0x188>)
 8001d1a:	785b      	ldrb	r3, [r3, #1]
 8001d1c:	2b36      	cmp	r3, #54	@ 0x36
 8001d1e:	d119      	bne.n	8001d54 <obsluzPrzerwanieDynam+0x84>

		HAL_ADC_Stop(&hadc1);
 8001d20:	484e      	ldr	r0, [pc, #312]	@ (8001e5c <obsluzPrzerwanieDynam+0x18c>)
 8001d22:	f000 ff27 	bl	8002b74 <HAL_ADC_Stop>
		ADC_Select_CH10();
 8001d26:	f7ff f9f5 	bl	8001114 <ADC_Select_CH10>
		HAL_ADC_Start(&hadc1);
 8001d2a:	484c      	ldr	r0, [pc, #304]	@ (8001e5c <obsluzPrzerwanieDynam+0x18c>)
 8001d2c:	f000 fe6e 	bl	8002a0c <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1, 1000);
 8001d30:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001d34:	4849      	ldr	r0, [pc, #292]	@ (8001e5c <obsluzPrzerwanieDynam+0x18c>)
 8001d36:	f000 ff50 	bl	8002bda <HAL_ADC_PollForConversion>
		wartosciADC.wartosc6=HAL_ADC_GetValue(&hadc1);
 8001d3a:	4848      	ldr	r0, [pc, #288]	@ (8001e5c <obsluzPrzerwanieDynam+0x18c>)
 8001d3c:	f001 faf0 	bl	8003320 <HAL_ADC_GetValue>
 8001d40:	4603      	mov	r3, r0
 8001d42:	461a      	mov	r2, r3
 8001d44:	4b46      	ldr	r3, [pc, #280]	@ (8001e60 <obsluzPrzerwanieDynam+0x190>)
 8001d46:	615a      	str	r2, [r3, #20]
		HAL_ADC_Stop(&hadc1);
 8001d48:	4844      	ldr	r0, [pc, #272]	@ (8001e5c <obsluzPrzerwanieDynam+0x18c>)
 8001d4a:	f000 ff13 	bl	8002b74 <HAL_ADC_Stop>

		tempValPom = wartosciADC.wartosc6;
 8001d4e:	4b44      	ldr	r3, [pc, #272]	@ (8001e60 <obsluzPrzerwanieDynam+0x190>)
 8001d50:	695b      	ldr	r3, [r3, #20]
 8001d52:	607b      	str	r3, [r7, #4]
	}

	if ( !warunkiPomiaru.flagaZmiany)
 8001d54:	4b40      	ldr	r3, [pc, #256]	@ (8001e58 <obsluzPrzerwanieDynam+0x188>)
 8001d56:	691b      	ldr	r3, [r3, #16]
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d118      	bne.n	8001d8e <obsluzPrzerwanieDynam+0xbe>
	{
		danePomiaroweDynam.tablicaHistoriiPrzedPomiarem[warunkiPomiaru.indeksHistorii] = tempValPom;
 8001d5c:	4b3e      	ldr	r3, [pc, #248]	@ (8001e58 <obsluzPrzerwanieDynam+0x188>)
 8001d5e:	89db      	ldrh	r3, [r3, #14]
 8001d60:	687a      	ldr	r2, [r7, #4]
 8001d62:	4940      	ldr	r1, [pc, #256]	@ (8001e64 <obsluzPrzerwanieDynam+0x194>)
 8001d64:	f503 539c 	add.w	r3, r3, #4992	@ 0x1380
 8001d68:	3308      	adds	r3, #8
 8001d6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		warunkiPomiaru.indeksHistorii = (warunkiPomiaru.indeksHistorii + 1) % ROZM_HISTORIA;  // Przejście na kolejny indeks cyklicznie
 8001d6e:	4b3a      	ldr	r3, [pc, #232]	@ (8001e58 <obsluzPrzerwanieDynam+0x188>)
 8001d70:	89db      	ldrh	r3, [r3, #14]
 8001d72:	3301      	adds	r3, #1
 8001d74:	4a3c      	ldr	r2, [pc, #240]	@ (8001e68 <obsluzPrzerwanieDynam+0x198>)
 8001d76:	fb82 1203 	smull	r1, r2, r2, r3
 8001d7a:	1111      	asrs	r1, r2, #4
 8001d7c:	17da      	asrs	r2, r3, #31
 8001d7e:	1a8a      	subs	r2, r1, r2
 8001d80:	2132      	movs	r1, #50	@ 0x32
 8001d82:	fb01 f202 	mul.w	r2, r1, r2
 8001d86:	1a9a      	subs	r2, r3, r2
 8001d88:	b292      	uxth	r2, r2
 8001d8a:	4b33      	ldr	r3, [pc, #204]	@ (8001e58 <obsluzPrzerwanieDynam+0x188>)
 8001d8c:	81da      	strh	r2, [r3, #14]
	}

	if (( (wartosciADC.wartosc6 > warunkiPomiaru.progPomiaruDynam) && warunkiPomiaru.idCzujnika[1] == '6') ||
 8001d8e:	4b34      	ldr	r3, [pc, #208]	@ (8001e60 <obsluzPrzerwanieDynam+0x190>)
 8001d90:	695b      	ldr	r3, [r3, #20]
 8001d92:	4a31      	ldr	r2, [pc, #196]	@ (8001e58 <obsluzPrzerwanieDynam+0x188>)
 8001d94:	8912      	ldrh	r2, [r2, #8]
 8001d96:	4293      	cmp	r3, r2
 8001d98:	dd03      	ble.n	8001da2 <obsluzPrzerwanieDynam+0xd2>
 8001d9a:	4b2f      	ldr	r3, [pc, #188]	@ (8001e58 <obsluzPrzerwanieDynam+0x188>)
 8001d9c:	785b      	ldrb	r3, [r3, #1]
 8001d9e:	2b36      	cmp	r3, #54	@ 0x36
 8001da0:	d009      	beq.n	8001db6 <obsluzPrzerwanieDynam+0xe6>
			( (wartosciADC.wartosc5 > warunkiPomiaru.progPomiaruDynam) && warunkiPomiaru.idCzujnika[1] == '5'))
 8001da2:	4b2f      	ldr	r3, [pc, #188]	@ (8001e60 <obsluzPrzerwanieDynam+0x190>)
 8001da4:	691b      	ldr	r3, [r3, #16]
 8001da6:	4a2c      	ldr	r2, [pc, #176]	@ (8001e58 <obsluzPrzerwanieDynam+0x188>)
 8001da8:	8912      	ldrh	r2, [r2, #8]
	if (( (wartosciADC.wartosc6 > warunkiPomiaru.progPomiaruDynam) && warunkiPomiaru.idCzujnika[1] == '6') ||
 8001daa:	4293      	cmp	r3, r2
 8001dac:	dd50      	ble.n	8001e50 <obsluzPrzerwanieDynam+0x180>
			( (wartosciADC.wartosc5 > warunkiPomiaru.progPomiaruDynam) && warunkiPomiaru.idCzujnika[1] == '5'))
 8001dae:	4b2a      	ldr	r3, [pc, #168]	@ (8001e58 <obsluzPrzerwanieDynam+0x188>)
 8001db0:	785b      	ldrb	r3, [r3, #1]
 8001db2:	2b35      	cmp	r3, #53	@ 0x35
 8001db4:	d14c      	bne.n	8001e50 <obsluzPrzerwanieDynam+0x180>
	{
		if( warunkiPomiaru.idPomiaruDynam[0] == 'T' )
 8001db6:	4b28      	ldr	r3, [pc, #160]	@ (8001e58 <obsluzPrzerwanieDynam+0x188>)
 8001db8:	78db      	ldrb	r3, [r3, #3]
 8001dba:	2b54      	cmp	r3, #84	@ 0x54
 8001dbc:	d12c      	bne.n	8001e18 <obsluzPrzerwanieDynam+0x148>
		{
			// Sprawdzenie, czy zmieniło się z <30 na >30
			if (!warunkiPomiaru.flagaZmiany)
 8001dbe:	4b26      	ldr	r3, [pc, #152]	@ (8001e58 <obsluzPrzerwanieDynam+0x188>)
 8001dc0:	691b      	ldr	r3, [r3, #16]
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d144      	bne.n	8001e50 <obsluzPrzerwanieDynam+0x180>
			{
				if( warunkiPomiaru.idCzujnika[1] == '5')
 8001dc6:	4b24      	ldr	r3, [pc, #144]	@ (8001e58 <obsluzPrzerwanieDynam+0x188>)
 8001dc8:	785b      	ldrb	r3, [r3, #1]
 8001dca:	2b35      	cmp	r3, #53	@ 0x35
 8001dcc:	d111      	bne.n	8001df2 <obsluzPrzerwanieDynam+0x122>
				{
					printf("T oraz 5");
 8001dce:	4827      	ldr	r0, [pc, #156]	@ (8001e6c <obsluzPrzerwanieDynam+0x19c>)
 8001dd0:	f005 fd22 	bl	8007818 <iprintf>
					//printf("ZaczynamDynamT!!!\r\n");
					HAL_ADC_Stop(&hadc1);
 8001dd4:	4821      	ldr	r0, [pc, #132]	@ (8001e5c <obsluzPrzerwanieDynam+0x18c>)
 8001dd6:	f000 fecd 	bl	8002b74 <HAL_ADC_Stop>
					ADC_Select_CH11();
 8001dda:	f7ff f9bb 	bl	8001154 <ADC_Select_CH11>
					HAL_ADC_Start_DMA(&hadc1, (uint32_t*)danePomiaroweDynam.tablicaPomiarowDynamicznych, MAX_POMIARY);
 8001dde:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001de2:	4920      	ldr	r1, [pc, #128]	@ (8001e64 <obsluzPrzerwanieDynam+0x194>)
 8001de4:	481d      	ldr	r0, [pc, #116]	@ (8001e5c <obsluzPrzerwanieDynam+0x18c>)
 8001de6:	f001 f951 	bl	800308c <HAL_ADC_Start_DMA>
					warunkiPomiaru.flagaZmiany = 1;  // Ustawienie flagi zmiany
 8001dea:	4b1b      	ldr	r3, [pc, #108]	@ (8001e58 <obsluzPrzerwanieDynam+0x188>)
 8001dec:	2201      	movs	r2, #1
 8001dee:	611a      	str	r2, [r3, #16]

					printf("D C6 oraz X\r\n");
			}
		}
	}
}
 8001df0:	e02e      	b.n	8001e50 <obsluzPrzerwanieDynam+0x180>
				} else if (warunkiPomiaru.idCzujnika[1] == '6') {
 8001df2:	4b19      	ldr	r3, [pc, #100]	@ (8001e58 <obsluzPrzerwanieDynam+0x188>)
 8001df4:	785b      	ldrb	r3, [r3, #1]
 8001df6:	2b36      	cmp	r3, #54	@ 0x36
 8001df8:	d12a      	bne.n	8001e50 <obsluzPrzerwanieDynam+0x180>
					HAL_ADC_Stop(&hadc1);
 8001dfa:	4818      	ldr	r0, [pc, #96]	@ (8001e5c <obsluzPrzerwanieDynam+0x18c>)
 8001dfc:	f000 feba 	bl	8002b74 <HAL_ADC_Stop>
					ADC_Select_CH10();
 8001e00:	f7ff f988 	bl	8001114 <ADC_Select_CH10>
					HAL_ADC_Start_DMA(&hadc1, (uint32_t*)danePomiaroweDynam.tablicaPomiarowDynamicznych, MAX_POMIARY);
 8001e04:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e08:	4916      	ldr	r1, [pc, #88]	@ (8001e64 <obsluzPrzerwanieDynam+0x194>)
 8001e0a:	4814      	ldr	r0, [pc, #80]	@ (8001e5c <obsluzPrzerwanieDynam+0x18c>)
 8001e0c:	f001 f93e 	bl	800308c <HAL_ADC_Start_DMA>
					warunkiPomiaru.flagaZmiany = 1;  // Ustawienie flagi zmiany
 8001e10:	4b11      	ldr	r3, [pc, #68]	@ (8001e58 <obsluzPrzerwanieDynam+0x188>)
 8001e12:	2201      	movs	r2, #1
 8001e14:	611a      	str	r2, [r3, #16]
}
 8001e16:	e01b      	b.n	8001e50 <obsluzPrzerwanieDynam+0x180>
		} else if(strcmp(warunkiPomiaru.idPomiaruDynam, "X") == 0) {
 8001e18:	4915      	ldr	r1, [pc, #84]	@ (8001e70 <obsluzPrzerwanieDynam+0x1a0>)
 8001e1a:	4816      	ldr	r0, [pc, #88]	@ (8001e74 <obsluzPrzerwanieDynam+0x1a4>)
 8001e1c:	f7fe f9e0 	bl	80001e0 <strcmp>
 8001e20:	4603      	mov	r3, r0
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d114      	bne.n	8001e50 <obsluzPrzerwanieDynam+0x180>
			if(!warunkiPomiaru.flagaZmiany)
 8001e26:	4b0c      	ldr	r3, [pc, #48]	@ (8001e58 <obsluzPrzerwanieDynam+0x188>)
 8001e28:	691b      	ldr	r3, [r3, #16]
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d110      	bne.n	8001e50 <obsluzPrzerwanieDynam+0x180>
				if(strcmp(warunkiPomiaru.idCzujnika, "C5") == 0)
 8001e2e:	4912      	ldr	r1, [pc, #72]	@ (8001e78 <obsluzPrzerwanieDynam+0x1a8>)
 8001e30:	4809      	ldr	r0, [pc, #36]	@ (8001e58 <obsluzPrzerwanieDynam+0x188>)
 8001e32:	f7fe f9d5 	bl	80001e0 <strcmp>
 8001e36:	4603      	mov	r3, r0
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d009      	beq.n	8001e50 <obsluzPrzerwanieDynam+0x180>
				} else if(strcmp(warunkiPomiaru.idCzujnika, "C6") == 0)
 8001e3c:	490f      	ldr	r1, [pc, #60]	@ (8001e7c <obsluzPrzerwanieDynam+0x1ac>)
 8001e3e:	4806      	ldr	r0, [pc, #24]	@ (8001e58 <obsluzPrzerwanieDynam+0x188>)
 8001e40:	f7fe f9ce 	bl	80001e0 <strcmp>
 8001e44:	4603      	mov	r3, r0
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d102      	bne.n	8001e50 <obsluzPrzerwanieDynam+0x180>
					printf("D C6 oraz X\r\n");
 8001e4a:	480d      	ldr	r0, [pc, #52]	@ (8001e80 <obsluzPrzerwanieDynam+0x1b0>)
 8001e4c:	f005 fd4c 	bl	80078e8 <puts>
}
 8001e50:	bf00      	nop
 8001e52:	3708      	adds	r7, #8
 8001e54:	46bd      	mov	sp, r7
 8001e56:	bd80      	pop	{r7, pc}
 8001e58:	20000408 	.word	0x20000408
 8001e5c:	20000208 	.word	0x20000208
 8001e60:	200001f0 	.word	0x200001f0
 8001e64:	2000041c 	.word	0x2000041c
 8001e68:	51eb851f 	.word	0x51eb851f
 8001e6c:	0800baa8 	.word	0x0800baa8
 8001e70:	0800bab4 	.word	0x0800bab4
 8001e74:	2000040b 	.word	0x2000040b
 8001e78:	0800bab8 	.word	0x0800bab8
 8001e7c:	0800babc 	.word	0x0800babc
 8001e80:	0800bac0 	.word	0x0800bac0

08001e84 <obsluzPrzerwanieStat>:

void obsluzPrzerwanieStat()
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b09c      	sub	sp, #112	@ 0x70
 8001e88:	af00      	add	r7, sp, #0
	if( warunkiPomiaru.idPomiaru == 'S' )
 8001e8a:	4b39      	ldr	r3, [pc, #228]	@ (8001f70 <obsluzPrzerwanieStat+0xec>)
 8001e8c:	795b      	ldrb	r3, [r3, #5]
 8001e8e:	2b53      	cmp	r3, #83	@ 0x53
 8001e90:	d169      	bne.n	8001f66 <obsluzPrzerwanieStat+0xe2>
	{

		if(strcmp(warunkiPomiaru.idCzujnika, "C5") == 0)
 8001e92:	4938      	ldr	r1, [pc, #224]	@ (8001f74 <obsluzPrzerwanieStat+0xf0>)
 8001e94:	4836      	ldr	r0, [pc, #216]	@ (8001f70 <obsluzPrzerwanieStat+0xec>)
 8001e96:	f7fe f9a3 	bl	80001e0 <strcmp>
 8001e9a:	4603      	mov	r3, r0
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d12d      	bne.n	8001efc <obsluzPrzerwanieStat+0x78>
		{
			  HAL_ADC_Stop(&hadc1);
 8001ea0:	4835      	ldr	r0, [pc, #212]	@ (8001f78 <obsluzPrzerwanieStat+0xf4>)
 8001ea2:	f000 fe67 	bl	8002b74 <HAL_ADC_Stop>
			  ADC_Select_CH11();
 8001ea6:	f7ff f955 	bl	8001154 <ADC_Select_CH11>
			  HAL_ADC_Start(&hadc1);
 8001eaa:	4833      	ldr	r0, [pc, #204]	@ (8001f78 <obsluzPrzerwanieStat+0xf4>)
 8001eac:	f000 fdae 	bl	8002a0c <HAL_ADC_Start>
			  HAL_ADC_PollForConversion(&hadc1, 1000);
 8001eb0:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001eb4:	4830      	ldr	r0, [pc, #192]	@ (8001f78 <obsluzPrzerwanieStat+0xf4>)
 8001eb6:	f000 fe90 	bl	8002bda <HAL_ADC_PollForConversion>
			  wartosciADC.wartosc5=HAL_ADC_GetValue(&hadc1);
 8001eba:	482f      	ldr	r0, [pc, #188]	@ (8001f78 <obsluzPrzerwanieStat+0xf4>)
 8001ebc:	f001 fa30 	bl	8003320 <HAL_ADC_GetValue>
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	461a      	mov	r2, r3
 8001ec4:	4b2d      	ldr	r3, [pc, #180]	@ (8001f7c <obsluzPrzerwanieStat+0xf8>)
 8001ec6:	611a      	str	r2, [r3, #16]

			  char dane[100];
			  sprintf(dane, "P S C5 %d", wartosciADC.wartosc5);
 8001ec8:	4b2c      	ldr	r3, [pc, #176]	@ (8001f7c <obsluzPrzerwanieStat+0xf8>)
 8001eca:	691a      	ldr	r2, [r3, #16]
 8001ecc:	1d3b      	adds	r3, r7, #4
 8001ece:	492c      	ldr	r1, [pc, #176]	@ (8001f80 <obsluzPrzerwanieStat+0xfc>)
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	f005 fd45 	bl	8007960 <siprintf>
			  int crc16=crc16_ccitt_false(dane, strlen(dane));
 8001ed6:	1d3b      	adds	r3, r7, #4
 8001ed8:	4618      	mov	r0, r3
 8001eda:	f7fe f9e1 	bl	80002a0 <strlen>
 8001ede:	4603      	mov	r3, r0
 8001ee0:	461a      	mov	r2, r3
 8001ee2:	1d3b      	adds	r3, r7, #4
 8001ee4:	4611      	mov	r1, r2
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	f7ff f990 	bl	800120c <crc16_ccitt_false>
 8001eec:	4603      	mov	r3, r0
 8001eee:	66fb      	str	r3, [r7, #108]	@ 0x6c
			  printf( "%s %0*d\r\n", dane, 5, crc16);
 8001ef0:	1d39      	adds	r1, r7, #4
 8001ef2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001ef4:	2205      	movs	r2, #5
 8001ef6:	4823      	ldr	r0, [pc, #140]	@ (8001f84 <obsluzPrzerwanieStat+0x100>)
 8001ef8:	f005 fc8e 	bl	8007818 <iprintf>
		}

		if(strcmp(warunkiPomiaru.idCzujnika, "C6") == 0)
 8001efc:	4922      	ldr	r1, [pc, #136]	@ (8001f88 <obsluzPrzerwanieStat+0x104>)
 8001efe:	481c      	ldr	r0, [pc, #112]	@ (8001f70 <obsluzPrzerwanieStat+0xec>)
 8001f00:	f7fe f96e 	bl	80001e0 <strcmp>
 8001f04:	4603      	mov	r3, r0
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d12d      	bne.n	8001f66 <obsluzPrzerwanieStat+0xe2>
		{
			  HAL_ADC_Stop(&hadc1);
 8001f0a:	481b      	ldr	r0, [pc, #108]	@ (8001f78 <obsluzPrzerwanieStat+0xf4>)
 8001f0c:	f000 fe32 	bl	8002b74 <HAL_ADC_Stop>
			  ADC_Select_CH10();
 8001f10:	f7ff f900 	bl	8001114 <ADC_Select_CH10>
			  HAL_ADC_Start(&hadc1);
 8001f14:	4818      	ldr	r0, [pc, #96]	@ (8001f78 <obsluzPrzerwanieStat+0xf4>)
 8001f16:	f000 fd79 	bl	8002a0c <HAL_ADC_Start>
			  HAL_ADC_PollForConversion(&hadc1, 1000);
 8001f1a:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001f1e:	4816      	ldr	r0, [pc, #88]	@ (8001f78 <obsluzPrzerwanieStat+0xf4>)
 8001f20:	f000 fe5b 	bl	8002bda <HAL_ADC_PollForConversion>
			  wartosciADC.wartosc6=HAL_ADC_GetValue(&hadc1);
 8001f24:	4814      	ldr	r0, [pc, #80]	@ (8001f78 <obsluzPrzerwanieStat+0xf4>)
 8001f26:	f001 f9fb 	bl	8003320 <HAL_ADC_GetValue>
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	461a      	mov	r2, r3
 8001f2e:	4b13      	ldr	r3, [pc, #76]	@ (8001f7c <obsluzPrzerwanieStat+0xf8>)
 8001f30:	615a      	str	r2, [r3, #20]

			  char dane[100];
			  sprintf(dane, "P S C6 %d", wartosciADC.wartosc6);
 8001f32:	4b12      	ldr	r3, [pc, #72]	@ (8001f7c <obsluzPrzerwanieStat+0xf8>)
 8001f34:	695a      	ldr	r2, [r3, #20]
 8001f36:	1d3b      	adds	r3, r7, #4
 8001f38:	4914      	ldr	r1, [pc, #80]	@ (8001f8c <obsluzPrzerwanieStat+0x108>)
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	f005 fd10 	bl	8007960 <siprintf>
			  int crc16=crc16_ccitt_false(dane, strlen(dane));
 8001f40:	1d3b      	adds	r3, r7, #4
 8001f42:	4618      	mov	r0, r3
 8001f44:	f7fe f9ac 	bl	80002a0 <strlen>
 8001f48:	4603      	mov	r3, r0
 8001f4a:	461a      	mov	r2, r3
 8001f4c:	1d3b      	adds	r3, r7, #4
 8001f4e:	4611      	mov	r1, r2
 8001f50:	4618      	mov	r0, r3
 8001f52:	f7ff f95b 	bl	800120c <crc16_ccitt_false>
 8001f56:	4603      	mov	r3, r0
 8001f58:	66bb      	str	r3, [r7, #104]	@ 0x68
			  printf( "%s %0*d\r\n", dane, 5, crc16);
 8001f5a:	1d39      	adds	r1, r7, #4
 8001f5c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001f5e:	2205      	movs	r2, #5
 8001f60:	4808      	ldr	r0, [pc, #32]	@ (8001f84 <obsluzPrzerwanieStat+0x100>)
 8001f62:	f005 fc59 	bl	8007818 <iprintf>
		}

	}
}
 8001f66:	bf00      	nop
 8001f68:	3770      	adds	r7, #112	@ 0x70
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	bd80      	pop	{r7, pc}
 8001f6e:	bf00      	nop
 8001f70:	20000408 	.word	0x20000408
 8001f74:	0800bab8 	.word	0x0800bab8
 8001f78:	20000208 	.word	0x20000208
 8001f7c:	200001f0 	.word	0x200001f0
 8001f80:	0800bad0 	.word	0x0800bad0
 8001f84:	0800ba9c 	.word	0x0800ba9c
 8001f88:	0800babc 	.word	0x0800babc
 8001f8c:	0800badc 	.word	0x0800badc

08001f90 <process_received_data>:
DanePomiaroweDynam danePomiaroweDynam = {
		.tablicaPomiarowDynamicznych = {0},
		.tablicaHistoriiPrzedPomiarem = {0}
};

void process_received_data(uint8_t *data, uint16_t length) {
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b08e      	sub	sp, #56	@ 0x38
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
 8001f98:	460b      	mov	r3, r1
 8001f9a:	807b      	strh	r3, [r7, #2]
    char command = data[0];  // 'command' jest teraz w pierwszym znaku danych
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	781b      	ldrb	r3, [r3, #0]
 8001fa0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    warunkiPomiaru.idPomiaru = command;
 8001fa4:	4aa7      	ldr	r2, [pc, #668]	@ (8002244 <process_received_data+0x2b4>)
 8001fa6:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001faa:	7153      	strb	r3, [r2, #5]


    if ( !(command == 'M') )
 8001fac:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001fb0:	2b4d      	cmp	r3, #77	@ 0x4d
 8001fb2:	d00a      	beq.n	8001fca <process_received_data+0x3a>
    {

    strncpy(warunkiPomiaru.idCzujnika, (char*)&data[2], 2);  // Kopiowanie dwóch znaków od indeksu 2
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	3302      	adds	r3, #2
 8001fb8:	2202      	movs	r2, #2
 8001fba:	4619      	mov	r1, r3
 8001fbc:	48a1      	ldr	r0, [pc, #644]	@ (8002244 <process_received_data+0x2b4>)
 8001fbe:	f005 fe08 	bl	8007bd2 <strncpy>
    warunkiPomiaru.idCzujnika[2] = '\0';
 8001fc2:	4ba0      	ldr	r3, [pc, #640]	@ (8002244 <process_received_data+0x2b4>)
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	709a      	strb	r2, [r3, #2]
 8001fc8:	e008      	b.n	8001fdc <process_received_data+0x4c>

    } else {

    	warunkiPomiaru.idCzujnika[0] = '0';
 8001fca:	4b9e      	ldr	r3, [pc, #632]	@ (8002244 <process_received_data+0x2b4>)
 8001fcc:	2230      	movs	r2, #48	@ 0x30
 8001fce:	701a      	strb	r2, [r3, #0]
    	warunkiPomiaru.idCzujnika[1] = '0';
 8001fd0:	4b9c      	ldr	r3, [pc, #624]	@ (8002244 <process_received_data+0x2b4>)
 8001fd2:	2230      	movs	r2, #48	@ 0x30
 8001fd4:	705a      	strb	r2, [r3, #1]
    	warunkiPomiaru.idCzujnika[2] = '\0';
 8001fd6:	4b9b      	ldr	r3, [pc, #620]	@ (8002244 <process_received_data+0x2b4>)
 8001fd8:	2200      	movs	r2, #0
 8001fda:	709a      	strb	r2, [r3, #2]
    }
    // Wyszukiwanie wartości po "P "
        char *ptrP = strstr((char *)data, "P ");
 8001fdc:	499a      	ldr	r1, [pc, #616]	@ (8002248 <process_received_data+0x2b8>)
 8001fde:	6878      	ldr	r0, [r7, #4]
 8001fe0:	f005 fe0a 	bl	8007bf8 <strstr>
 8001fe4:	62f8      	str	r0, [r7, #44]	@ 0x2c
        if (ptrP != NULL) {
 8001fe6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d03c      	beq.n	8002066 <process_received_data+0xd6>
            ptrP += 2;  // Przesunięcie wskaźnika za "P "
 8001fec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001fee:	3302      	adds	r3, #2
 8001ff0:	62fb      	str	r3, [r7, #44]	@ 0x2c
            char *endPtr = strchr(ptrP, ' ');  // Znalezienie końca wartości (pierwszej spacji)
 8001ff2:	2120      	movs	r1, #32
 8001ff4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8001ff6:	f005 fddf 	bl	8007bb8 <strchr>
 8001ffa:	6378      	str	r0, [r7, #52]	@ 0x34

            if (endPtr == NULL) {  // Jeśli brak spacji, zakładamy koniec danych
 8001ffc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d103      	bne.n	800200a <process_received_data+0x7a>
                endPtr = (char *)data + length;
 8002002:	887b      	ldrh	r3, [r7, #2]
 8002004:	687a      	ldr	r2, [r7, #4]
 8002006:	4413      	add	r3, r2
 8002008:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            // Obliczanie długości wartości
            size_t len = endPtr - ptrP;
 800200a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800200c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800200e:	1ad3      	subs	r3, r2, r3
 8002010:	62bb      	str	r3, [r7, #40]	@ 0x28
            if (len < 6) {  // Sprawdzamy, czy długość jest poprawna
 8002012:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002014:	2b05      	cmp	r3, #5
 8002016:	d822      	bhi.n	800205e <process_received_data+0xce>
                char progStr[6] = {0};  // Bufor na wartość progu
 8002018:	2300      	movs	r3, #0
 800201a:	617b      	str	r3, [r7, #20]
 800201c:	2300      	movs	r3, #0
 800201e:	833b      	strh	r3, [r7, #24]
                strncpy(progStr, ptrP, len);
 8002020:	f107 0314 	add.w	r3, r7, #20
 8002024:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002026:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002028:	4618      	mov	r0, r3
 800202a:	f005 fdd2 	bl	8007bd2 <strncpy>
                progStr[len] = '\0';  // Zakończenie ciągu znaków
 800202e:	f107 0214 	add.w	r2, r7, #20
 8002032:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002034:	4413      	add	r3, r2
 8002036:	2200      	movs	r2, #0
 8002038:	701a      	strb	r2, [r3, #0]
                warunkiPomiaru.progPomiaruDynam = (uint16_t)strtoul(progStr, NULL, 10);  // Konwersja na uint16_t
 800203a:	f107 0314 	add.w	r3, r7, #20
 800203e:	220a      	movs	r2, #10
 8002040:	2100      	movs	r1, #0
 8002042:	4618      	mov	r0, r3
 8002044:	f004 fcb0 	bl	80069a8 <strtoul>
 8002048:	4603      	mov	r3, r0
 800204a:	b29a      	uxth	r2, r3
 800204c:	4b7d      	ldr	r3, [pc, #500]	@ (8002244 <process_received_data+0x2b4>)
 800204e:	811a      	strh	r2, [r3, #8]
                printf("Prog pomiaru dynam: %u\r\n", warunkiPomiaru.progPomiaruDynam);
 8002050:	4b7c      	ldr	r3, [pc, #496]	@ (8002244 <process_received_data+0x2b4>)
 8002052:	891b      	ldrh	r3, [r3, #8]
 8002054:	4619      	mov	r1, r3
 8002056:	487d      	ldr	r0, [pc, #500]	@ (800224c <process_received_data+0x2bc>)
 8002058:	f005 fbde 	bl	8007818 <iprintf>
 800205c:	e006      	b.n	800206c <process_received_data+0xdc>
            } else {
                printf("Błąd: Długość wartości progu przekracza limit!\r\n");
 800205e:	487c      	ldr	r0, [pc, #496]	@ (8002250 <process_received_data+0x2c0>)
 8002060:	f005 fc42 	bl	80078e8 <puts>
 8002064:	e002      	b.n	800206c <process_received_data+0xdc>
            }
        } else {
            printf("Błąd: Nie znaleziono ciągu 'P '.\r\n");
 8002066:	487b      	ldr	r0, [pc, #492]	@ (8002254 <process_received_data+0x2c4>)
 8002068:	f005 fc3e 	bl	80078e8 <puts>
        }

    printf("IdCzujnika: %s\r\n", warunkiPomiaru.idCzujnika);
 800206c:	4975      	ldr	r1, [pc, #468]	@ (8002244 <process_received_data+0x2b4>)
 800206e:	487a      	ldr	r0, [pc, #488]	@ (8002258 <process_received_data+0x2c8>)
 8002070:	f005 fbd2 	bl	8007818 <iprintf>
    printf("Command: %c\r\n", command);
 8002074:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002078:	4619      	mov	r1, r3
 800207a:	4878      	ldr	r0, [pc, #480]	@ (800225c <process_received_data+0x2cc>)
 800207c:	f005 fbcc 	bl	8007818 <iprintf>

    if ( command == 'S' )
 8002080:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002084:	2b53      	cmp	r3, #83	@ 0x53
 8002086:	d10f      	bne.n	80020a8 <process_received_data+0x118>
    {
    	HAL_ADC_Stop_DMA(&hadc1);
 8002088:	4875      	ldr	r0, [pc, #468]	@ (8002260 <process_received_data+0x2d0>)
 800208a:	f001 f8ef 	bl	800326c <HAL_ADC_Stop_DMA>
        HAL_TIM_Base_Stop_IT(&htim2);
 800208e:	4875      	ldr	r0, [pc, #468]	@ (8002264 <process_received_data+0x2d4>)
 8002090:	f003 f80e 	bl	80050b0 <HAL_TIM_Base_Stop_IT>
        HAL_TIM_Base_Stop_IT(&htim3);
 8002094:	4874      	ldr	r0, [pc, #464]	@ (8002268 <process_received_data+0x2d8>)
 8002096:	f003 f80b 	bl	80050b0 <HAL_TIM_Base_Stop_IT>
        HAL_TIM_Base_Start_IT(&htim4);
 800209a:	4874      	ldr	r0, [pc, #464]	@ (800226c <process_received_data+0x2dc>)
 800209c:	f002 ffa6 	bl	8004fec <HAL_TIM_Base_Start_IT>

        warunkiPomiaru.flagaZmiany = 0;
 80020a0:	4b68      	ldr	r3, [pc, #416]	@ (8002244 <process_received_data+0x2b4>)
 80020a2:	2200      	movs	r2, #0
 80020a4:	611a      	str	r2, [r3, #16]

        HAL_TIM_Base_Stop_IT(&htim2);
        HAL_TIM_Base_Stop_IT(&htim4);
        HAL_TIM_Base_Start_IT(&htim3);
    }
}
 80020a6:	e0c8      	b.n	800223a <process_received_data+0x2aa>
    } else if ( command == 'M' ) {
 80020a8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80020ac:	2b4d      	cmp	r3, #77	@ 0x4d
 80020ae:	d10f      	bne.n	80020d0 <process_received_data+0x140>
    	HAL_ADC_Stop_DMA(&hadc1);
 80020b0:	486b      	ldr	r0, [pc, #428]	@ (8002260 <process_received_data+0x2d0>)
 80020b2:	f001 f8db 	bl	800326c <HAL_ADC_Stop_DMA>
        HAL_TIM_Base_Start_IT(&htim4);
 80020b6:	486d      	ldr	r0, [pc, #436]	@ (800226c <process_received_data+0x2dc>)
 80020b8:	f002 ff98 	bl	8004fec <HAL_TIM_Base_Start_IT>
        HAL_TIM_Base_Stop_IT(&htim3);
 80020bc:	486a      	ldr	r0, [pc, #424]	@ (8002268 <process_received_data+0x2d8>)
 80020be:	f002 fff7 	bl	80050b0 <HAL_TIM_Base_Stop_IT>
        HAL_TIM_Base_Start_IT(&htim2);
 80020c2:	4868      	ldr	r0, [pc, #416]	@ (8002264 <process_received_data+0x2d4>)
 80020c4:	f002 ff92 	bl	8004fec <HAL_TIM_Base_Start_IT>
        warunkiPomiaru.flagaZmiany = 0;
 80020c8:	4b5e      	ldr	r3, [pc, #376]	@ (8002244 <process_received_data+0x2b4>)
 80020ca:	2200      	movs	r2, #0
 80020cc:	611a      	str	r2, [r3, #16]
}
 80020ce:	e0b4      	b.n	800223a <process_received_data+0x2aa>
    } else if (command == 'D') {
 80020d0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80020d4:	2b44      	cmp	r3, #68	@ 0x44
 80020d6:	f040 80b0 	bne.w	800223a <process_received_data+0x2aa>
    	HAL_ADC_Stop(&hadc1);
 80020da:	4861      	ldr	r0, [pc, #388]	@ (8002260 <process_received_data+0x2d0>)
 80020dc:	f000 fd4a 	bl	8002b74 <HAL_ADC_Stop>
    	if (strncmp((char*)data + 5, "T", 1) == 0) {  // Komenda "T" zaczyna się od indeksu 5
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	3305      	adds	r3, #5
 80020e4:	781a      	ldrb	r2, [r3, #0]
 80020e6:	4b62      	ldr	r3, [pc, #392]	@ (8002270 <process_received_data+0x2e0>)
 80020e8:	781b      	ldrb	r3, [r3, #0]
 80020ea:	1ad3      	subs	r3, r2, r3
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d122      	bne.n	8002136 <process_received_data+0x1a6>
            strncpy(warunkiPomiaru.idPomiaruDynam, "T", 2);
 80020f0:	4b54      	ldr	r3, [pc, #336]	@ (8002244 <process_received_data+0x2b4>)
 80020f2:	4a5f      	ldr	r2, [pc, #380]	@ (8002270 <process_received_data+0x2e0>)
 80020f4:	3303      	adds	r3, #3
 80020f6:	8812      	ldrh	r2, [r2, #0]
 80020f8:	801a      	strh	r2, [r3, #0]
            warunkiPomiaru.idPomiaruDynam[2] = '\0';  // Dodanie końca stringa
 80020fa:	4b52      	ldr	r3, [pc, #328]	@ (8002244 <process_received_data+0x2b4>)
 80020fc:	2200      	movs	r2, #0
 80020fe:	715a      	strb	r2, [r3, #5]
            char param_str[6] = {0};
 8002100:	2300      	movs	r3, #0
 8002102:	60fb      	str	r3, [r7, #12]
 8002104:	2300      	movs	r3, #0
 8002106:	823b      	strh	r3, [r7, #16]
            strncpy(param_str, (char*)data + 7, 5);  // Parametr zaczyna się od indeksu 7
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	1dd9      	adds	r1, r3, #7
 800210c:	f107 030c 	add.w	r3, r7, #12
 8002110:	2205      	movs	r2, #5
 8002112:	4618      	mov	r0, r3
 8002114:	f005 fd5d 	bl	8007bd2 <strncpy>
            warunkiPomiaru.czasPomiaruDynam = (uint16_t)strtoul(param_str, NULL, 10);  // Konwersja na uint16_t
 8002118:	f107 030c 	add.w	r3, r7, #12
 800211c:	220a      	movs	r2, #10
 800211e:	2100      	movs	r1, #0
 8002120:	4618      	mov	r0, r3
 8002122:	f004 fc41 	bl	80069a8 <strtoul>
 8002126:	4603      	mov	r3, r0
 8002128:	b29a      	uxth	r2, r3
 800212a:	4b46      	ldr	r3, [pc, #280]	@ (8002244 <process_received_data+0x2b4>)
 800212c:	80da      	strh	r2, [r3, #6]
            printf("Mam komende D T");
 800212e:	4851      	ldr	r0, [pc, #324]	@ (8002274 <process_received_data+0x2e4>)
 8002130:	f005 fb72 	bl	8007818 <iprintf>
 8002134:	e069      	b.n	800220a <process_received_data+0x27a>
    	} else if (strncmp((char*)data + 5, "X", 1) == 0) {  // Komenda "X" zaczyna się od indeksu 5
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	3305      	adds	r3, #5
 800213a:	781a      	ldrb	r2, [r3, #0]
 800213c:	4b4e      	ldr	r3, [pc, #312]	@ (8002278 <process_received_data+0x2e8>)
 800213e:	781b      	ldrb	r3, [r3, #0]
 8002140:	1ad3      	subs	r3, r2, r3
 8002142:	2b00      	cmp	r3, #0
 8002144:	d161      	bne.n	800220a <process_received_data+0x27a>
    	    strncpy(warunkiPomiaru.idPomiaruDynam, "X", 2);
 8002146:	4b3f      	ldr	r3, [pc, #252]	@ (8002244 <process_received_data+0x2b4>)
 8002148:	4a4b      	ldr	r2, [pc, #300]	@ (8002278 <process_received_data+0x2e8>)
 800214a:	3303      	adds	r3, #3
 800214c:	8812      	ldrh	r2, [r2, #0]
 800214e:	801a      	strh	r2, [r3, #0]
    	    warunkiPomiaru.idPomiaruDynam[2] = '\0';  // Dodanie końca stringa
 8002150:	4b3c      	ldr	r3, [pc, #240]	@ (8002244 <process_received_data+0x2b4>)
 8002152:	2200      	movs	r2, #0
 8002154:	715a      	strb	r2, [r3, #5]
    	    char *ptrP = strstr((char *)data, "P ");
 8002156:	493c      	ldr	r1, [pc, #240]	@ (8002248 <process_received_data+0x2b8>)
 8002158:	6878      	ldr	r0, [r7, #4]
 800215a:	f005 fd4d 	bl	8007bf8 <strstr>
 800215e:	6278      	str	r0, [r7, #36]	@ 0x24
    	    if (ptrP) {
 8002160:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002162:	2b00      	cmp	r3, #0
 8002164:	d012      	beq.n	800218c <process_received_data+0x1fc>
    	        ptrP += 2;  // Przesunięcie wskaźnika za "P "
 8002166:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002168:	3302      	adds	r3, #2
 800216a:	627b      	str	r3, [r7, #36]	@ 0x24
    	        warunkiPomiaru.progPomiaruDynam = (uint16_t)strtoul(ptrP, NULL, 10);  // Konwersja do uint16_t
 800216c:	220a      	movs	r2, #10
 800216e:	2100      	movs	r1, #0
 8002170:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002172:	f004 fc19 	bl	80069a8 <strtoul>
 8002176:	4603      	mov	r3, r0
 8002178:	b29a      	uxth	r2, r3
 800217a:	4b32      	ldr	r3, [pc, #200]	@ (8002244 <process_received_data+0x2b4>)
 800217c:	811a      	strh	r2, [r3, #8]
    	        printf("Prog pomiaru (P): %u\r\n", warunkiPomiaru.progPomiaruDynam);
 800217e:	4b31      	ldr	r3, [pc, #196]	@ (8002244 <process_received_data+0x2b4>)
 8002180:	891b      	ldrh	r3, [r3, #8]
 8002182:	4619      	mov	r1, r3
 8002184:	483d      	ldr	r0, [pc, #244]	@ (800227c <process_received_data+0x2ec>)
 8002186:	f005 fb47 	bl	8007818 <iprintf>
 800218a:	e002      	b.n	8002192 <process_received_data+0x202>
    	        printf("Błąd: Nie znaleziono parametru 'P'.\r\n");
 800218c:	483c      	ldr	r0, [pc, #240]	@ (8002280 <process_received_data+0x2f0>)
 800218e:	f005 fbab 	bl	80078e8 <puts>
    	    char *ptrN = strstr((char *)data, "N ");
 8002192:	493c      	ldr	r1, [pc, #240]	@ (8002284 <process_received_data+0x2f4>)
 8002194:	6878      	ldr	r0, [r7, #4]
 8002196:	f005 fd2f 	bl	8007bf8 <strstr>
 800219a:	6238      	str	r0, [r7, #32]
    	    if (ptrN) {
 800219c:	6a3b      	ldr	r3, [r7, #32]
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d012      	beq.n	80021c8 <process_received_data+0x238>
    	        ptrN += 2;  // Przesunięcie wskaźnika za "N "
 80021a2:	6a3b      	ldr	r3, [r7, #32]
 80021a4:	3302      	adds	r3, #2
 80021a6:	623b      	str	r3, [r7, #32]
    	        warunkiPomiaru.iloscPunktowDoSredniej = (uint16_t)strtoul(ptrN, NULL, 10);  // Konwersja do uint16_t
 80021a8:	220a      	movs	r2, #10
 80021aa:	2100      	movs	r1, #0
 80021ac:	6a38      	ldr	r0, [r7, #32]
 80021ae:	f004 fbfb 	bl	80069a8 <strtoul>
 80021b2:	4603      	mov	r3, r0
 80021b4:	b29a      	uxth	r2, r3
 80021b6:	4b23      	ldr	r3, [pc, #140]	@ (8002244 <process_received_data+0x2b4>)
 80021b8:	819a      	strh	r2, [r3, #12]
    	        printf("Liczba pomiarów (N): %u\r\n", warunkiPomiaru.iloscPunktowDoSredniej);
 80021ba:	4b22      	ldr	r3, [pc, #136]	@ (8002244 <process_received_data+0x2b4>)
 80021bc:	899b      	ldrh	r3, [r3, #12]
 80021be:	4619      	mov	r1, r3
 80021c0:	4831      	ldr	r0, [pc, #196]	@ (8002288 <process_received_data+0x2f8>)
 80021c2:	f005 fb29 	bl	8007818 <iprintf>
 80021c6:	e002      	b.n	80021ce <process_received_data+0x23e>
    	        printf("Błąd: Nie znaleziono parametru 'N'.\r\n");
 80021c8:	4830      	ldr	r0, [pc, #192]	@ (800228c <process_received_data+0x2fc>)
 80021ca:	f005 fb8d 	bl	80078e8 <puts>
    	    char *ptrK = strstr((char *)data, "K ");
 80021ce:	4930      	ldr	r1, [pc, #192]	@ (8002290 <process_received_data+0x300>)
 80021d0:	6878      	ldr	r0, [r7, #4]
 80021d2:	f005 fd11 	bl	8007bf8 <strstr>
 80021d6:	61f8      	str	r0, [r7, #28]
    	    if (ptrK) {
 80021d8:	69fb      	ldr	r3, [r7, #28]
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d012      	beq.n	8002204 <process_received_data+0x274>
    	        ptrK += 2;  // Przesunięcie wskaźnika za "K "
 80021de:	69fb      	ldr	r3, [r7, #28]
 80021e0:	3302      	adds	r3, #2
 80021e2:	61fb      	str	r3, [r7, #28]
    	        warunkiPomiaru.minimalnaZmiana = (uint16_t)strtoul(ptrK, NULL, 10);  // Konwersja do uint16_t
 80021e4:	220a      	movs	r2, #10
 80021e6:	2100      	movs	r1, #0
 80021e8:	69f8      	ldr	r0, [r7, #28]
 80021ea:	f004 fbdd 	bl	80069a8 <strtoul>
 80021ee:	4603      	mov	r3, r0
 80021f0:	b29a      	uxth	r2, r3
 80021f2:	4b14      	ldr	r3, [pc, #80]	@ (8002244 <process_received_data+0x2b4>)
 80021f4:	815a      	strh	r2, [r3, #10]
    	        printf("Minimalna zmiana (K): %u\r\n", warunkiPomiaru.minimalnaZmiana);
 80021f6:	4b13      	ldr	r3, [pc, #76]	@ (8002244 <process_received_data+0x2b4>)
 80021f8:	895b      	ldrh	r3, [r3, #10]
 80021fa:	4619      	mov	r1, r3
 80021fc:	4825      	ldr	r0, [pc, #148]	@ (8002294 <process_received_data+0x304>)
 80021fe:	f005 fb0b 	bl	8007818 <iprintf>
 8002202:	e002      	b.n	800220a <process_received_data+0x27a>
    	        printf("Błąd: Nie znaleziono parametru 'K'.\r\n");
 8002204:	4824      	ldr	r0, [pc, #144]	@ (8002298 <process_received_data+0x308>)
 8002206:	f005 fb6f 	bl	80078e8 <puts>
    	if ( warunkiPomiaru.idCzujnika[1] == '5' )
 800220a:	4b0e      	ldr	r3, [pc, #56]	@ (8002244 <process_received_data+0x2b4>)
 800220c:	785b      	ldrb	r3, [r3, #1]
 800220e:	2b35      	cmp	r3, #53	@ 0x35
 8002210:	d103      	bne.n	800221a <process_received_data+0x28a>
    		warunkiPomiaru.flagaZmiany = 0;
 8002212:	4b0c      	ldr	r3, [pc, #48]	@ (8002244 <process_received_data+0x2b4>)
 8002214:	2200      	movs	r2, #0
 8002216:	611a      	str	r2, [r3, #16]
 8002218:	e006      	b.n	8002228 <process_received_data+0x298>
    	} else if( warunkiPomiaru.idCzujnika[1] == '6' ) {
 800221a:	4b0a      	ldr	r3, [pc, #40]	@ (8002244 <process_received_data+0x2b4>)
 800221c:	785b      	ldrb	r3, [r3, #1]
 800221e:	2b36      	cmp	r3, #54	@ 0x36
 8002220:	d102      	bne.n	8002228 <process_received_data+0x298>
    		warunkiPomiaru.flagaZmiany = 0;
 8002222:	4b08      	ldr	r3, [pc, #32]	@ (8002244 <process_received_data+0x2b4>)
 8002224:	2200      	movs	r2, #0
 8002226:	611a      	str	r2, [r3, #16]
        HAL_TIM_Base_Stop_IT(&htim2);
 8002228:	480e      	ldr	r0, [pc, #56]	@ (8002264 <process_received_data+0x2d4>)
 800222a:	f002 ff41 	bl	80050b0 <HAL_TIM_Base_Stop_IT>
        HAL_TIM_Base_Stop_IT(&htim4);
 800222e:	480f      	ldr	r0, [pc, #60]	@ (800226c <process_received_data+0x2dc>)
 8002230:	f002 ff3e 	bl	80050b0 <HAL_TIM_Base_Stop_IT>
        HAL_TIM_Base_Start_IT(&htim3);
 8002234:	480c      	ldr	r0, [pc, #48]	@ (8002268 <process_received_data+0x2d8>)
 8002236:	f002 fed9 	bl	8004fec <HAL_TIM_Base_Start_IT>
}
 800223a:	bf00      	nop
 800223c:	3738      	adds	r7, #56	@ 0x38
 800223e:	46bd      	mov	sp, r7
 8002240:	bd80      	pop	{r7, pc}
 8002242:	bf00      	nop
 8002244:	20000408 	.word	0x20000408
 8002248:	0800bae8 	.word	0x0800bae8
 800224c:	0800baec 	.word	0x0800baec
 8002250:	0800bb08 	.word	0x0800bb08
 8002254:	0800bb40 	.word	0x0800bb40
 8002258:	0800bb68 	.word	0x0800bb68
 800225c:	0800bb7c 	.word	0x0800bb7c
 8002260:	20000208 	.word	0x20000208
 8002264:	200002b0 	.word	0x200002b0
 8002268:	200002f8 	.word	0x200002f8
 800226c:	20000340 	.word	0x20000340
 8002270:	0800bb8c 	.word	0x0800bb8c
 8002274:	0800bb90 	.word	0x0800bb90
 8002278:	0800bba0 	.word	0x0800bba0
 800227c:	0800bba4 	.word	0x0800bba4
 8002280:	0800bbbc 	.word	0x0800bbbc
 8002284:	0800bbe4 	.word	0x0800bbe4
 8002288:	0800bbe8 	.word	0x0800bbe8
 800228c:	0800bc04 	.word	0x0800bc04
 8002290:	0800bc2c 	.word	0x0800bc2c
 8002294:	0800bc30 	.word	0x0800bc30
 8002298:	0800bc4c 	.word	0x0800bc4c

0800229c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b082      	sub	sp, #8
 80022a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022a2:	2300      	movs	r3, #0
 80022a4:	607b      	str	r3, [r7, #4]
 80022a6:	4b10      	ldr	r3, [pc, #64]	@ (80022e8 <HAL_MspInit+0x4c>)
 80022a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022aa:	4a0f      	ldr	r2, [pc, #60]	@ (80022e8 <HAL_MspInit+0x4c>)
 80022ac:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80022b0:	6453      	str	r3, [r2, #68]	@ 0x44
 80022b2:	4b0d      	ldr	r3, [pc, #52]	@ (80022e8 <HAL_MspInit+0x4c>)
 80022b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022b6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80022ba:	607b      	str	r3, [r7, #4]
 80022bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80022be:	2300      	movs	r3, #0
 80022c0:	603b      	str	r3, [r7, #0]
 80022c2:	4b09      	ldr	r3, [pc, #36]	@ (80022e8 <HAL_MspInit+0x4c>)
 80022c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022c6:	4a08      	ldr	r2, [pc, #32]	@ (80022e8 <HAL_MspInit+0x4c>)
 80022c8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80022cc:	6413      	str	r3, [r2, #64]	@ 0x40
 80022ce:	4b06      	ldr	r3, [pc, #24]	@ (80022e8 <HAL_MspInit+0x4c>)
 80022d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80022d6:	603b      	str	r3, [r7, #0]
 80022d8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80022da:	2007      	movs	r0, #7
 80022dc:	f001 fbbc 	bl	8003a58 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80022e0:	bf00      	nop
 80022e2:	3708      	adds	r7, #8
 80022e4:	46bd      	mov	sp, r7
 80022e6:	bd80      	pop	{r7, pc}
 80022e8:	40023800 	.word	0x40023800

080022ec <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b08c      	sub	sp, #48	@ 0x30
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022f4:	f107 031c 	add.w	r3, r7, #28
 80022f8:	2200      	movs	r2, #0
 80022fa:	601a      	str	r2, [r3, #0]
 80022fc:	605a      	str	r2, [r3, #4]
 80022fe:	609a      	str	r2, [r3, #8]
 8002300:	60da      	str	r2, [r3, #12]
 8002302:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	4a4e      	ldr	r2, [pc, #312]	@ (8002444 <HAL_ADC_MspInit+0x158>)
 800230a:	4293      	cmp	r3, r2
 800230c:	f040 8095 	bne.w	800243a <HAL_ADC_MspInit+0x14e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002310:	2300      	movs	r3, #0
 8002312:	61bb      	str	r3, [r7, #24]
 8002314:	4b4c      	ldr	r3, [pc, #304]	@ (8002448 <HAL_ADC_MspInit+0x15c>)
 8002316:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002318:	4a4b      	ldr	r2, [pc, #300]	@ (8002448 <HAL_ADC_MspInit+0x15c>)
 800231a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800231e:	6453      	str	r3, [r2, #68]	@ 0x44
 8002320:	4b49      	ldr	r3, [pc, #292]	@ (8002448 <HAL_ADC_MspInit+0x15c>)
 8002322:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002324:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002328:	61bb      	str	r3, [r7, #24]
 800232a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800232c:	2300      	movs	r3, #0
 800232e:	617b      	str	r3, [r7, #20]
 8002330:	4b45      	ldr	r3, [pc, #276]	@ (8002448 <HAL_ADC_MspInit+0x15c>)
 8002332:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002334:	4a44      	ldr	r2, [pc, #272]	@ (8002448 <HAL_ADC_MspInit+0x15c>)
 8002336:	f043 0304 	orr.w	r3, r3, #4
 800233a:	6313      	str	r3, [r2, #48]	@ 0x30
 800233c:	4b42      	ldr	r3, [pc, #264]	@ (8002448 <HAL_ADC_MspInit+0x15c>)
 800233e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002340:	f003 0304 	and.w	r3, r3, #4
 8002344:	617b      	str	r3, [r7, #20]
 8002346:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002348:	2300      	movs	r3, #0
 800234a:	613b      	str	r3, [r7, #16]
 800234c:	4b3e      	ldr	r3, [pc, #248]	@ (8002448 <HAL_ADC_MspInit+0x15c>)
 800234e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002350:	4a3d      	ldr	r2, [pc, #244]	@ (8002448 <HAL_ADC_MspInit+0x15c>)
 8002352:	f043 0301 	orr.w	r3, r3, #1
 8002356:	6313      	str	r3, [r2, #48]	@ 0x30
 8002358:	4b3b      	ldr	r3, [pc, #236]	@ (8002448 <HAL_ADC_MspInit+0x15c>)
 800235a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800235c:	f003 0301 	and.w	r3, r3, #1
 8002360:	613b      	str	r3, [r7, #16]
 8002362:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002364:	2300      	movs	r3, #0
 8002366:	60fb      	str	r3, [r7, #12]
 8002368:	4b37      	ldr	r3, [pc, #220]	@ (8002448 <HAL_ADC_MspInit+0x15c>)
 800236a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800236c:	4a36      	ldr	r2, [pc, #216]	@ (8002448 <HAL_ADC_MspInit+0x15c>)
 800236e:	f043 0302 	orr.w	r3, r3, #2
 8002372:	6313      	str	r3, [r2, #48]	@ 0x30
 8002374:	4b34      	ldr	r3, [pc, #208]	@ (8002448 <HAL_ADC_MspInit+0x15c>)
 8002376:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002378:	f003 0302 	and.w	r3, r3, #2
 800237c:	60fb      	str	r3, [r7, #12]
 800237e:	68fb      	ldr	r3, [r7, #12]
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA4     ------> ADC1_IN4
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002380:	2303      	movs	r3, #3
 8002382:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002384:	2303      	movs	r3, #3
 8002386:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002388:	2300      	movs	r3, #0
 800238a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800238c:	f107 031c 	add.w	r3, r7, #28
 8002390:	4619      	mov	r1, r3
 8002392:	482e      	ldr	r0, [pc, #184]	@ (800244c <HAL_ADC_MspInit+0x160>)
 8002394:	f001 ffa4 	bl	80042e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4;
 8002398:	2313      	movs	r3, #19
 800239a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800239c:	2303      	movs	r3, #3
 800239e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023a0:	2300      	movs	r3, #0
 80023a2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023a4:	f107 031c 	add.w	r3, r7, #28
 80023a8:	4619      	mov	r1, r3
 80023aa:	4829      	ldr	r0, [pc, #164]	@ (8002450 <HAL_ADC_MspInit+0x164>)
 80023ac:	f001 ff98 	bl	80042e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80023b0:	2301      	movs	r3, #1
 80023b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80023b4:	2303      	movs	r3, #3
 80023b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023b8:	2300      	movs	r3, #0
 80023ba:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023bc:	f107 031c 	add.w	r3, r7, #28
 80023c0:	4619      	mov	r1, r3
 80023c2:	4824      	ldr	r0, [pc, #144]	@ (8002454 <HAL_ADC_MspInit+0x168>)
 80023c4:	f001 ff8c 	bl	80042e0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80023c8:	4b23      	ldr	r3, [pc, #140]	@ (8002458 <HAL_ADC_MspInit+0x16c>)
 80023ca:	4a24      	ldr	r2, [pc, #144]	@ (800245c <HAL_ADC_MspInit+0x170>)
 80023cc:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80023ce:	4b22      	ldr	r3, [pc, #136]	@ (8002458 <HAL_ADC_MspInit+0x16c>)
 80023d0:	2200      	movs	r2, #0
 80023d2:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80023d4:	4b20      	ldr	r3, [pc, #128]	@ (8002458 <HAL_ADC_MspInit+0x16c>)
 80023d6:	2200      	movs	r2, #0
 80023d8:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80023da:	4b1f      	ldr	r3, [pc, #124]	@ (8002458 <HAL_ADC_MspInit+0x16c>)
 80023dc:	2200      	movs	r2, #0
 80023de:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80023e0:	4b1d      	ldr	r3, [pc, #116]	@ (8002458 <HAL_ADC_MspInit+0x16c>)
 80023e2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80023e6:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80023e8:	4b1b      	ldr	r3, [pc, #108]	@ (8002458 <HAL_ADC_MspInit+0x16c>)
 80023ea:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80023ee:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80023f0:	4b19      	ldr	r3, [pc, #100]	@ (8002458 <HAL_ADC_MspInit+0x16c>)
 80023f2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80023f6:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80023f8:	4b17      	ldr	r3, [pc, #92]	@ (8002458 <HAL_ADC_MspInit+0x16c>)
 80023fa:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80023fe:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002400:	4b15      	ldr	r3, [pc, #84]	@ (8002458 <HAL_ADC_MspInit+0x16c>)
 8002402:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8002406:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002408:	4b13      	ldr	r3, [pc, #76]	@ (8002458 <HAL_ADC_MspInit+0x16c>)
 800240a:	2200      	movs	r2, #0
 800240c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800240e:	4812      	ldr	r0, [pc, #72]	@ (8002458 <HAL_ADC_MspInit+0x16c>)
 8002410:	f001 fb64 	bl	8003adc <HAL_DMA_Init>
 8002414:	4603      	mov	r3, r0
 8002416:	2b00      	cmp	r3, #0
 8002418:	d001      	beq.n	800241e <HAL_ADC_MspInit+0x132>
    {
      Error_Handler();
 800241a:	f7ff fb6d 	bl	8001af8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	4a0d      	ldr	r2, [pc, #52]	@ (8002458 <HAL_ADC_MspInit+0x16c>)
 8002422:	639a      	str	r2, [r3, #56]	@ 0x38
 8002424:	4a0c      	ldr	r2, [pc, #48]	@ (8002458 <HAL_ADC_MspInit+0x16c>)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6393      	str	r3, [r2, #56]	@ 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 800242a:	2200      	movs	r2, #0
 800242c:	2100      	movs	r1, #0
 800242e:	2012      	movs	r0, #18
 8002430:	f001 fb1d 	bl	8003a6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8002434:	2012      	movs	r0, #18
 8002436:	f001 fb36 	bl	8003aa6 <HAL_NVIC_EnableIRQ>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 800243a:	bf00      	nop
 800243c:	3730      	adds	r7, #48	@ 0x30
 800243e:	46bd      	mov	sp, r7
 8002440:	bd80      	pop	{r7, pc}
 8002442:	bf00      	nop
 8002444:	40012000 	.word	0x40012000
 8002448:	40023800 	.word	0x40023800
 800244c:	40020800 	.word	0x40020800
 8002450:	40020000 	.word	0x40020000
 8002454:	40020400 	.word	0x40020400
 8002458:	20000250 	.word	0x20000250
 800245c:	40026410 	.word	0x40026410

08002460 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b086      	sub	sp, #24
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002470:	d116      	bne.n	80024a0 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002472:	2300      	movs	r3, #0
 8002474:	617b      	str	r3, [r7, #20]
 8002476:	4b28      	ldr	r3, [pc, #160]	@ (8002518 <HAL_TIM_Base_MspInit+0xb8>)
 8002478:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800247a:	4a27      	ldr	r2, [pc, #156]	@ (8002518 <HAL_TIM_Base_MspInit+0xb8>)
 800247c:	f043 0301 	orr.w	r3, r3, #1
 8002480:	6413      	str	r3, [r2, #64]	@ 0x40
 8002482:	4b25      	ldr	r3, [pc, #148]	@ (8002518 <HAL_TIM_Base_MspInit+0xb8>)
 8002484:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002486:	f003 0301 	and.w	r3, r3, #1
 800248a:	617b      	str	r3, [r7, #20]
 800248c:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800248e:	2200      	movs	r2, #0
 8002490:	2100      	movs	r1, #0
 8002492:	201c      	movs	r0, #28
 8002494:	f001 faeb 	bl	8003a6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002498:	201c      	movs	r0, #28
 800249a:	f001 fb04 	bl	8003aa6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800249e:	e036      	b.n	800250e <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM3)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	4a1d      	ldr	r2, [pc, #116]	@ (800251c <HAL_TIM_Base_MspInit+0xbc>)
 80024a6:	4293      	cmp	r3, r2
 80024a8:	d116      	bne.n	80024d8 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80024aa:	2300      	movs	r3, #0
 80024ac:	613b      	str	r3, [r7, #16]
 80024ae:	4b1a      	ldr	r3, [pc, #104]	@ (8002518 <HAL_TIM_Base_MspInit+0xb8>)
 80024b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024b2:	4a19      	ldr	r2, [pc, #100]	@ (8002518 <HAL_TIM_Base_MspInit+0xb8>)
 80024b4:	f043 0302 	orr.w	r3, r3, #2
 80024b8:	6413      	str	r3, [r2, #64]	@ 0x40
 80024ba:	4b17      	ldr	r3, [pc, #92]	@ (8002518 <HAL_TIM_Base_MspInit+0xb8>)
 80024bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024be:	f003 0302 	and.w	r3, r3, #2
 80024c2:	613b      	str	r3, [r7, #16]
 80024c4:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80024c6:	2200      	movs	r2, #0
 80024c8:	2100      	movs	r1, #0
 80024ca:	201d      	movs	r0, #29
 80024cc:	f001 facf 	bl	8003a6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80024d0:	201d      	movs	r0, #29
 80024d2:	f001 fae8 	bl	8003aa6 <HAL_NVIC_EnableIRQ>
}
 80024d6:	e01a      	b.n	800250e <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM4)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	4a10      	ldr	r2, [pc, #64]	@ (8002520 <HAL_TIM_Base_MspInit+0xc0>)
 80024de:	4293      	cmp	r3, r2
 80024e0:	d115      	bne.n	800250e <HAL_TIM_Base_MspInit+0xae>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80024e2:	2300      	movs	r3, #0
 80024e4:	60fb      	str	r3, [r7, #12]
 80024e6:	4b0c      	ldr	r3, [pc, #48]	@ (8002518 <HAL_TIM_Base_MspInit+0xb8>)
 80024e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024ea:	4a0b      	ldr	r2, [pc, #44]	@ (8002518 <HAL_TIM_Base_MspInit+0xb8>)
 80024ec:	f043 0304 	orr.w	r3, r3, #4
 80024f0:	6413      	str	r3, [r2, #64]	@ 0x40
 80024f2:	4b09      	ldr	r3, [pc, #36]	@ (8002518 <HAL_TIM_Base_MspInit+0xb8>)
 80024f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024f6:	f003 0304 	and.w	r3, r3, #4
 80024fa:	60fb      	str	r3, [r7, #12]
 80024fc:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80024fe:	2200      	movs	r2, #0
 8002500:	2100      	movs	r1, #0
 8002502:	201e      	movs	r0, #30
 8002504:	f001 fab3 	bl	8003a6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002508:	201e      	movs	r0, #30
 800250a:	f001 facc 	bl	8003aa6 <HAL_NVIC_EnableIRQ>
}
 800250e:	bf00      	nop
 8002510:	3718      	adds	r7, #24
 8002512:	46bd      	mov	sp, r7
 8002514:	bd80      	pop	{r7, pc}
 8002516:	bf00      	nop
 8002518:	40023800 	.word	0x40023800
 800251c:	40000400 	.word	0x40000400
 8002520:	40000800 	.word	0x40000800

08002524 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b08a      	sub	sp, #40	@ 0x28
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800252c:	f107 0314 	add.w	r3, r7, #20
 8002530:	2200      	movs	r2, #0
 8002532:	601a      	str	r2, [r3, #0]
 8002534:	605a      	str	r2, [r3, #4]
 8002536:	609a      	str	r2, [r3, #8]
 8002538:	60da      	str	r2, [r3, #12]
 800253a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	4a1d      	ldr	r2, [pc, #116]	@ (80025b8 <HAL_UART_MspInit+0x94>)
 8002542:	4293      	cmp	r3, r2
 8002544:	d133      	bne.n	80025ae <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002546:	2300      	movs	r3, #0
 8002548:	613b      	str	r3, [r7, #16]
 800254a:	4b1c      	ldr	r3, [pc, #112]	@ (80025bc <HAL_UART_MspInit+0x98>)
 800254c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800254e:	4a1b      	ldr	r2, [pc, #108]	@ (80025bc <HAL_UART_MspInit+0x98>)
 8002550:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002554:	6413      	str	r3, [r2, #64]	@ 0x40
 8002556:	4b19      	ldr	r3, [pc, #100]	@ (80025bc <HAL_UART_MspInit+0x98>)
 8002558:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800255a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800255e:	613b      	str	r3, [r7, #16]
 8002560:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002562:	2300      	movs	r3, #0
 8002564:	60fb      	str	r3, [r7, #12]
 8002566:	4b15      	ldr	r3, [pc, #84]	@ (80025bc <HAL_UART_MspInit+0x98>)
 8002568:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800256a:	4a14      	ldr	r2, [pc, #80]	@ (80025bc <HAL_UART_MspInit+0x98>)
 800256c:	f043 0301 	orr.w	r3, r3, #1
 8002570:	6313      	str	r3, [r2, #48]	@ 0x30
 8002572:	4b12      	ldr	r3, [pc, #72]	@ (80025bc <HAL_UART_MspInit+0x98>)
 8002574:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002576:	f003 0301 	and.w	r3, r3, #1
 800257a:	60fb      	str	r3, [r7, #12]
 800257c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800257e:	230c      	movs	r3, #12
 8002580:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002582:	2302      	movs	r3, #2
 8002584:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002586:	2300      	movs	r3, #0
 8002588:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800258a:	2300      	movs	r3, #0
 800258c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800258e:	2307      	movs	r3, #7
 8002590:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002592:	f107 0314 	add.w	r3, r7, #20
 8002596:	4619      	mov	r1, r3
 8002598:	4809      	ldr	r0, [pc, #36]	@ (80025c0 <HAL_UART_MspInit+0x9c>)
 800259a:	f001 fea1 	bl	80042e0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800259e:	2200      	movs	r2, #0
 80025a0:	2100      	movs	r1, #0
 80025a2:	2026      	movs	r0, #38	@ 0x26
 80025a4:	f001 fa63 	bl	8003a6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80025a8:	2026      	movs	r0, #38	@ 0x26
 80025aa:	f001 fa7c 	bl	8003aa6 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 80025ae:	bf00      	nop
 80025b0:	3728      	adds	r7, #40	@ 0x28
 80025b2:	46bd      	mov	sp, r7
 80025b4:	bd80      	pop	{r7, pc}
 80025b6:	bf00      	nop
 80025b8:	40004400 	.word	0x40004400
 80025bc:	40023800 	.word	0x40023800
 80025c0:	40020000 	.word	0x40020000

080025c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80025c4:	b480      	push	{r7}
 80025c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80025c8:	bf00      	nop
 80025ca:	e7fd      	b.n	80025c8 <NMI_Handler+0x4>

080025cc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80025cc:	b480      	push	{r7}
 80025ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80025d0:	bf00      	nop
 80025d2:	e7fd      	b.n	80025d0 <HardFault_Handler+0x4>

080025d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80025d4:	b480      	push	{r7}
 80025d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80025d8:	bf00      	nop
 80025da:	e7fd      	b.n	80025d8 <MemManage_Handler+0x4>

080025dc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80025dc:	b480      	push	{r7}
 80025de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80025e0:	bf00      	nop
 80025e2:	e7fd      	b.n	80025e0 <BusFault_Handler+0x4>

080025e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80025e4:	b480      	push	{r7}
 80025e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80025e8:	bf00      	nop
 80025ea:	e7fd      	b.n	80025e8 <UsageFault_Handler+0x4>

080025ec <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80025ec:	b480      	push	{r7}
 80025ee:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80025f0:	bf00      	nop
 80025f2:	46bd      	mov	sp, r7
 80025f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f8:	4770      	bx	lr

080025fa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80025fa:	b480      	push	{r7}
 80025fc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80025fe:	bf00      	nop
 8002600:	46bd      	mov	sp, r7
 8002602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002606:	4770      	bx	lr

08002608 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002608:	b480      	push	{r7}
 800260a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800260c:	bf00      	nop
 800260e:	46bd      	mov	sp, r7
 8002610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002614:	4770      	bx	lr

08002616 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002616:	b580      	push	{r7, lr}
 8002618:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800261a:	f000 f993 	bl	8002944 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800261e:	bf00      	nop
 8002620:	bd80      	pop	{r7, pc}
	...

08002624 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002628:	4802      	ldr	r0, [pc, #8]	@ (8002634 <ADC_IRQHandler+0x10>)
 800262a:	f000 fc1f 	bl	8002e6c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 800262e:	bf00      	nop
 8002630:	bd80      	pop	{r7, pc}
 8002632:	bf00      	nop
 8002634:	20000208 	.word	0x20000208

08002638 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800263c:	4802      	ldr	r0, [pc, #8]	@ (8002648 <TIM2_IRQHandler+0x10>)
 800263e:	f002 fd66 	bl	800510e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002642:	bf00      	nop
 8002644:	bd80      	pop	{r7, pc}
 8002646:	bf00      	nop
 8002648:	200002b0 	.word	0x200002b0

0800264c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002650:	4802      	ldr	r0, [pc, #8]	@ (800265c <TIM3_IRQHandler+0x10>)
 8002652:	f002 fd5c 	bl	800510e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002656:	bf00      	nop
 8002658:	bd80      	pop	{r7, pc}
 800265a:	bf00      	nop
 800265c:	200002f8 	.word	0x200002f8

08002660 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002664:	4802      	ldr	r0, [pc, #8]	@ (8002670 <TIM4_IRQHandler+0x10>)
 8002666:	f002 fd52 	bl	800510e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800266a:	bf00      	nop
 800266c:	bd80      	pop	{r7, pc}
 800266e:	bf00      	nop
 8002670:	20000340 	.word	0x20000340

08002674 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002678:	4802      	ldr	r0, [pc, #8]	@ (8002684 <USART2_IRQHandler+0x10>)
 800267a:	f003 f9cf 	bl	8005a1c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800267e:	bf00      	nop
 8002680:	bd80      	pop	{r7, pc}
 8002682:	bf00      	nop
 8002684:	20000388 	.word	0x20000388

08002688 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800268c:	4802      	ldr	r0, [pc, #8]	@ (8002698 <DMA2_Stream0_IRQHandler+0x10>)
 800268e:	f001 fbbd 	bl	8003e0c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002692:	bf00      	nop
 8002694:	bd80      	pop	{r7, pc}
 8002696:	bf00      	nop
 8002698:	20000250 	.word	0x20000250

0800269c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800269c:	b480      	push	{r7}
 800269e:	af00      	add	r7, sp, #0
	return 1;
 80026a0:	2301      	movs	r3, #1
}
 80026a2:	4618      	mov	r0, r3
 80026a4:	46bd      	mov	sp, r7
 80026a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026aa:	4770      	bx	lr

080026ac <_kill>:

int _kill(int pid, int sig)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b082      	sub	sp, #8
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
 80026b4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80026b6:	f005 faff 	bl	8007cb8 <__errno>
 80026ba:	4603      	mov	r3, r0
 80026bc:	2216      	movs	r2, #22
 80026be:	601a      	str	r2, [r3, #0]
	return -1;
 80026c0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80026c4:	4618      	mov	r0, r3
 80026c6:	3708      	adds	r7, #8
 80026c8:	46bd      	mov	sp, r7
 80026ca:	bd80      	pop	{r7, pc}

080026cc <_exit>:

void _exit (int status)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b082      	sub	sp, #8
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80026d4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80026d8:	6878      	ldr	r0, [r7, #4]
 80026da:	f7ff ffe7 	bl	80026ac <_kill>
	while (1) {}		/* Make sure we hang here */
 80026de:	bf00      	nop
 80026e0:	e7fd      	b.n	80026de <_exit+0x12>

080026e2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80026e2:	b580      	push	{r7, lr}
 80026e4:	b086      	sub	sp, #24
 80026e6:	af00      	add	r7, sp, #0
 80026e8:	60f8      	str	r0, [r7, #12]
 80026ea:	60b9      	str	r1, [r7, #8]
 80026ec:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026ee:	2300      	movs	r3, #0
 80026f0:	617b      	str	r3, [r7, #20]
 80026f2:	e00a      	b.n	800270a <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80026f4:	f3af 8000 	nop.w
 80026f8:	4601      	mov	r1, r0
 80026fa:	68bb      	ldr	r3, [r7, #8]
 80026fc:	1c5a      	adds	r2, r3, #1
 80026fe:	60ba      	str	r2, [r7, #8]
 8002700:	b2ca      	uxtb	r2, r1
 8002702:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002704:	697b      	ldr	r3, [r7, #20]
 8002706:	3301      	adds	r3, #1
 8002708:	617b      	str	r3, [r7, #20]
 800270a:	697a      	ldr	r2, [r7, #20]
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	429a      	cmp	r2, r3
 8002710:	dbf0      	blt.n	80026f4 <_read+0x12>
	}

return len;
 8002712:	687b      	ldr	r3, [r7, #4]
}
 8002714:	4618      	mov	r0, r3
 8002716:	3718      	adds	r7, #24
 8002718:	46bd      	mov	sp, r7
 800271a:	bd80      	pop	{r7, pc}

0800271c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	b086      	sub	sp, #24
 8002720:	af00      	add	r7, sp, #0
 8002722:	60f8      	str	r0, [r7, #12]
 8002724:	60b9      	str	r1, [r7, #8]
 8002726:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002728:	2300      	movs	r3, #0
 800272a:	617b      	str	r3, [r7, #20]
 800272c:	e009      	b.n	8002742 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800272e:	68bb      	ldr	r3, [r7, #8]
 8002730:	1c5a      	adds	r2, r3, #1
 8002732:	60ba      	str	r2, [r7, #8]
 8002734:	781b      	ldrb	r3, [r3, #0]
 8002736:	4618      	mov	r0, r3
 8002738:	f7fe ff4e 	bl	80015d8 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800273c:	697b      	ldr	r3, [r7, #20]
 800273e:	3301      	adds	r3, #1
 8002740:	617b      	str	r3, [r7, #20]
 8002742:	697a      	ldr	r2, [r7, #20]
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	429a      	cmp	r2, r3
 8002748:	dbf1      	blt.n	800272e <_write+0x12>
	}
	return len;
 800274a:	687b      	ldr	r3, [r7, #4]
}
 800274c:	4618      	mov	r0, r3
 800274e:	3718      	adds	r7, #24
 8002750:	46bd      	mov	sp, r7
 8002752:	bd80      	pop	{r7, pc}

08002754 <_close>:

int _close(int file)
{
 8002754:	b480      	push	{r7}
 8002756:	b083      	sub	sp, #12
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
	return -1;
 800275c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8002760:	4618      	mov	r0, r3
 8002762:	370c      	adds	r7, #12
 8002764:	46bd      	mov	sp, r7
 8002766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276a:	4770      	bx	lr

0800276c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800276c:	b480      	push	{r7}
 800276e:	b083      	sub	sp, #12
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
 8002774:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800277c:	605a      	str	r2, [r3, #4]
	return 0;
 800277e:	2300      	movs	r3, #0
}
 8002780:	4618      	mov	r0, r3
 8002782:	370c      	adds	r7, #12
 8002784:	46bd      	mov	sp, r7
 8002786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278a:	4770      	bx	lr

0800278c <_isatty>:

int _isatty(int file)
{
 800278c:	b480      	push	{r7}
 800278e:	b083      	sub	sp, #12
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
	return 1;
 8002794:	2301      	movs	r3, #1
}
 8002796:	4618      	mov	r0, r3
 8002798:	370c      	adds	r7, #12
 800279a:	46bd      	mov	sp, r7
 800279c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a0:	4770      	bx	lr

080027a2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80027a2:	b480      	push	{r7}
 80027a4:	b085      	sub	sp, #20
 80027a6:	af00      	add	r7, sp, #0
 80027a8:	60f8      	str	r0, [r7, #12]
 80027aa:	60b9      	str	r1, [r7, #8]
 80027ac:	607a      	str	r2, [r7, #4]
	return 0;
 80027ae:	2300      	movs	r3, #0
}
 80027b0:	4618      	mov	r0, r3
 80027b2:	3714      	adds	r7, #20
 80027b4:	46bd      	mov	sp, r7
 80027b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ba:	4770      	bx	lr

080027bc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b086      	sub	sp, #24
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80027c4:	4a14      	ldr	r2, [pc, #80]	@ (8002818 <_sbrk+0x5c>)
 80027c6:	4b15      	ldr	r3, [pc, #84]	@ (800281c <_sbrk+0x60>)
 80027c8:	1ad3      	subs	r3, r2, r3
 80027ca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80027cc:	697b      	ldr	r3, [r7, #20]
 80027ce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80027d0:	4b13      	ldr	r3, [pc, #76]	@ (8002820 <_sbrk+0x64>)
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d102      	bne.n	80027de <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80027d8:	4b11      	ldr	r3, [pc, #68]	@ (8002820 <_sbrk+0x64>)
 80027da:	4a12      	ldr	r2, [pc, #72]	@ (8002824 <_sbrk+0x68>)
 80027dc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80027de:	4b10      	ldr	r3, [pc, #64]	@ (8002820 <_sbrk+0x64>)
 80027e0:	681a      	ldr	r2, [r3, #0]
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	4413      	add	r3, r2
 80027e6:	693a      	ldr	r2, [r7, #16]
 80027e8:	429a      	cmp	r2, r3
 80027ea:	d207      	bcs.n	80027fc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80027ec:	f005 fa64 	bl	8007cb8 <__errno>
 80027f0:	4603      	mov	r3, r0
 80027f2:	220c      	movs	r2, #12
 80027f4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80027f6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80027fa:	e009      	b.n	8002810 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80027fc:	4b08      	ldr	r3, [pc, #32]	@ (8002820 <_sbrk+0x64>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002802:	4b07      	ldr	r3, [pc, #28]	@ (8002820 <_sbrk+0x64>)
 8002804:	681a      	ldr	r2, [r3, #0]
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	4413      	add	r3, r2
 800280a:	4a05      	ldr	r2, [pc, #20]	@ (8002820 <_sbrk+0x64>)
 800280c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800280e:	68fb      	ldr	r3, [r7, #12]
}
 8002810:	4618      	mov	r0, r3
 8002812:	3718      	adds	r7, #24
 8002814:	46bd      	mov	sp, r7
 8002816:	bd80      	pop	{r7, pc}
 8002818:	20018000 	.word	0x20018000
 800281c:	00000400 	.word	0x00000400
 8002820:	20005304 	.word	0x20005304
 8002824:	20005458 	.word	0x20005458

08002828 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002828:	b480      	push	{r7}
 800282a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800282c:	4b06      	ldr	r3, [pc, #24]	@ (8002848 <SystemInit+0x20>)
 800282e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002832:	4a05      	ldr	r2, [pc, #20]	@ (8002848 <SystemInit+0x20>)
 8002834:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002838:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800283c:	bf00      	nop
 800283e:	46bd      	mov	sp, r7
 8002840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002844:	4770      	bx	lr
 8002846:	bf00      	nop
 8002848:	e000ed00 	.word	0xe000ed00

0800284c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800284c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002884 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002850:	480d      	ldr	r0, [pc, #52]	@ (8002888 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002852:	490e      	ldr	r1, [pc, #56]	@ (800288c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002854:	4a0e      	ldr	r2, [pc, #56]	@ (8002890 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002856:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002858:	e002      	b.n	8002860 <LoopCopyDataInit>

0800285a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800285a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800285c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800285e:	3304      	adds	r3, #4

08002860 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002860:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002862:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002864:	d3f9      	bcc.n	800285a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002866:	4a0b      	ldr	r2, [pc, #44]	@ (8002894 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002868:	4c0b      	ldr	r4, [pc, #44]	@ (8002898 <LoopFillZerobss+0x26>)
  movs r3, #0
 800286a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800286c:	e001      	b.n	8002872 <LoopFillZerobss>

0800286e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800286e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002870:	3204      	adds	r2, #4

08002872 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002872:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002874:	d3fb      	bcc.n	800286e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002876:	f7ff ffd7 	bl	8002828 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800287a:	f005 fa23 	bl	8007cc4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800287e:	f7fe febd 	bl	80015fc <main>
  bx  lr    
 8002882:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002884:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002888:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800288c:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8002890:	0800c0f8 	.word	0x0800c0f8
  ldr r2, =_sbss
 8002894:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8002898:	20005458 	.word	0x20005458

0800289c <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800289c:	e7fe      	b.n	800289c <DMA1_Stream0_IRQHandler>
	...

080028a0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80028a4:	4b0e      	ldr	r3, [pc, #56]	@ (80028e0 <HAL_Init+0x40>)
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	4a0d      	ldr	r2, [pc, #52]	@ (80028e0 <HAL_Init+0x40>)
 80028aa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80028ae:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80028b0:	4b0b      	ldr	r3, [pc, #44]	@ (80028e0 <HAL_Init+0x40>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	4a0a      	ldr	r2, [pc, #40]	@ (80028e0 <HAL_Init+0x40>)
 80028b6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80028ba:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80028bc:	4b08      	ldr	r3, [pc, #32]	@ (80028e0 <HAL_Init+0x40>)
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	4a07      	ldr	r2, [pc, #28]	@ (80028e0 <HAL_Init+0x40>)
 80028c2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80028c6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80028c8:	2003      	movs	r0, #3
 80028ca:	f001 f8c5 	bl	8003a58 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80028ce:	2000      	movs	r0, #0
 80028d0:	f000 f808 	bl	80028e4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80028d4:	f7ff fce2 	bl	800229c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80028d8:	2300      	movs	r3, #0
}
 80028da:	4618      	mov	r0, r3
 80028dc:	bd80      	pop	{r7, pc}
 80028de:	bf00      	nop
 80028e0:	40023c00 	.word	0x40023c00

080028e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b082      	sub	sp, #8
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80028ec:	4b12      	ldr	r3, [pc, #72]	@ (8002938 <HAL_InitTick+0x54>)
 80028ee:	681a      	ldr	r2, [r3, #0]
 80028f0:	4b12      	ldr	r3, [pc, #72]	@ (800293c <HAL_InitTick+0x58>)
 80028f2:	781b      	ldrb	r3, [r3, #0]
 80028f4:	4619      	mov	r1, r3
 80028f6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80028fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80028fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8002902:	4618      	mov	r0, r3
 8002904:	f001 f8dd 	bl	8003ac2 <HAL_SYSTICK_Config>
 8002908:	4603      	mov	r3, r0
 800290a:	2b00      	cmp	r3, #0
 800290c:	d001      	beq.n	8002912 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800290e:	2301      	movs	r3, #1
 8002910:	e00e      	b.n	8002930 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	2b0f      	cmp	r3, #15
 8002916:	d80a      	bhi.n	800292e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002918:	2200      	movs	r2, #0
 800291a:	6879      	ldr	r1, [r7, #4]
 800291c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002920:	f001 f8a5 	bl	8003a6e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002924:	4a06      	ldr	r2, [pc, #24]	@ (8002940 <HAL_InitTick+0x5c>)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800292a:	2300      	movs	r3, #0
 800292c:	e000      	b.n	8002930 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800292e:	2301      	movs	r3, #1
}
 8002930:	4618      	mov	r0, r3
 8002932:	3708      	adds	r7, #8
 8002934:	46bd      	mov	sp, r7
 8002936:	bd80      	pop	{r7, pc}
 8002938:	20000000 	.word	0x20000000
 800293c:	20000008 	.word	0x20000008
 8002940:	20000004 	.word	0x20000004

08002944 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002944:	b480      	push	{r7}
 8002946:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002948:	4b06      	ldr	r3, [pc, #24]	@ (8002964 <HAL_IncTick+0x20>)
 800294a:	781b      	ldrb	r3, [r3, #0]
 800294c:	461a      	mov	r2, r3
 800294e:	4b06      	ldr	r3, [pc, #24]	@ (8002968 <HAL_IncTick+0x24>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	4413      	add	r3, r2
 8002954:	4a04      	ldr	r2, [pc, #16]	@ (8002968 <HAL_IncTick+0x24>)
 8002956:	6013      	str	r3, [r2, #0]
}
 8002958:	bf00      	nop
 800295a:	46bd      	mov	sp, r7
 800295c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002960:	4770      	bx	lr
 8002962:	bf00      	nop
 8002964:	20000008 	.word	0x20000008
 8002968:	20005308 	.word	0x20005308

0800296c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800296c:	b480      	push	{r7}
 800296e:	af00      	add	r7, sp, #0
  return uwTick;
 8002970:	4b03      	ldr	r3, [pc, #12]	@ (8002980 <HAL_GetTick+0x14>)
 8002972:	681b      	ldr	r3, [r3, #0]
}
 8002974:	4618      	mov	r0, r3
 8002976:	46bd      	mov	sp, r7
 8002978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297c:	4770      	bx	lr
 800297e:	bf00      	nop
 8002980:	20005308 	.word	0x20005308

08002984 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b084      	sub	sp, #16
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800298c:	2300      	movs	r3, #0
 800298e:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2b00      	cmp	r3, #0
 8002994:	d101      	bne.n	800299a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002996:	2301      	movs	r3, #1
 8002998:	e033      	b.n	8002a02 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d109      	bne.n	80029b6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80029a2:	6878      	ldr	r0, [r7, #4]
 80029a4:	f7ff fca2 	bl	80022ec <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2200      	movs	r2, #0
 80029ac:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	2200      	movs	r2, #0
 80029b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029ba:	f003 0310 	and.w	r3, r3, #16
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d118      	bne.n	80029f4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029c6:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80029ca:	f023 0302 	bic.w	r3, r3, #2
 80029ce:	f043 0202 	orr.w	r2, r3, #2
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80029d6:	6878      	ldr	r0, [r7, #4]
 80029d8:	f000 fde6 	bl	80035a8 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2200      	movs	r2, #0
 80029e0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029e6:	f023 0303 	bic.w	r3, r3, #3
 80029ea:	f043 0201 	orr.w	r2, r3, #1
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	641a      	str	r2, [r3, #64]	@ 0x40
 80029f2:	e001      	b.n	80029f8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80029f4:	2301      	movs	r3, #1
 80029f6:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2200      	movs	r2, #0
 80029fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002a00:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a02:	4618      	mov	r0, r3
 8002a04:	3710      	adds	r7, #16
 8002a06:	46bd      	mov	sp, r7
 8002a08:	bd80      	pop	{r7, pc}
	...

08002a0c <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002a0c:	b480      	push	{r7}
 8002a0e:	b085      	sub	sp, #20
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002a14:	2300      	movs	r3, #0
 8002a16:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002a1e:	2b01      	cmp	r3, #1
 8002a20:	d101      	bne.n	8002a26 <HAL_ADC_Start+0x1a>
 8002a22:	2302      	movs	r3, #2
 8002a24:	e097      	b.n	8002b56 <HAL_ADC_Start+0x14a>
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	2201      	movs	r2, #1
 8002a2a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	689b      	ldr	r3, [r3, #8]
 8002a34:	f003 0301 	and.w	r3, r3, #1
 8002a38:	2b01      	cmp	r3, #1
 8002a3a:	d018      	beq.n	8002a6e <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	689a      	ldr	r2, [r3, #8]
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f042 0201 	orr.w	r2, r2, #1
 8002a4a:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002a4c:	4b45      	ldr	r3, [pc, #276]	@ (8002b64 <HAL_ADC_Start+0x158>)
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	4a45      	ldr	r2, [pc, #276]	@ (8002b68 <HAL_ADC_Start+0x15c>)
 8002a52:	fba2 2303 	umull	r2, r3, r2, r3
 8002a56:	0c9a      	lsrs	r2, r3, #18
 8002a58:	4613      	mov	r3, r2
 8002a5a:	005b      	lsls	r3, r3, #1
 8002a5c:	4413      	add	r3, r2
 8002a5e:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8002a60:	e002      	b.n	8002a68 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8002a62:	68bb      	ldr	r3, [r7, #8]
 8002a64:	3b01      	subs	r3, #1
 8002a66:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8002a68:	68bb      	ldr	r3, [r7, #8]
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d1f9      	bne.n	8002a62 <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	689b      	ldr	r3, [r3, #8]
 8002a74:	f003 0301 	and.w	r3, r3, #1
 8002a78:	2b01      	cmp	r3, #1
 8002a7a:	d15f      	bne.n	8002b3c <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a80:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8002a84:	f023 0301 	bic.w	r3, r3, #1
 8002a88:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	685b      	ldr	r3, [r3, #4]
 8002a96:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d007      	beq.n	8002aae <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002aa2:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002aa6:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ab2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002ab6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002aba:	d106      	bne.n	8002aca <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ac0:	f023 0206 	bic.w	r2, r3, #6
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	645a      	str	r2, [r3, #68]	@ 0x44
 8002ac8:	e002      	b.n	8002ad0 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	2200      	movs	r2, #0
 8002ace:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002ad8:	4b24      	ldr	r3, [pc, #144]	@ (8002b6c <HAL_ADC_Start+0x160>)
 8002ada:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8002ae4:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	685b      	ldr	r3, [r3, #4]
 8002aea:	f003 031f 	and.w	r3, r3, #31
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d10f      	bne.n	8002b12 <HAL_ADC_Start+0x106>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	689b      	ldr	r3, [r3, #8]
 8002af8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d129      	bne.n	8002b54 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	689a      	ldr	r2, [r3, #8]
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002b0e:	609a      	str	r2, [r3, #8]
 8002b10:	e020      	b.n	8002b54 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	4a16      	ldr	r2, [pc, #88]	@ (8002b70 <HAL_ADC_Start+0x164>)
 8002b18:	4293      	cmp	r3, r2
 8002b1a:	d11b      	bne.n	8002b54 <HAL_ADC_Start+0x148>
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	689b      	ldr	r3, [r3, #8]
 8002b22:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d114      	bne.n	8002b54 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	689a      	ldr	r2, [r3, #8]
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002b38:	609a      	str	r2, [r3, #8]
 8002b3a:	e00b      	b.n	8002b54 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b40:	f043 0210 	orr.w	r2, r3, #16
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b4c:	f043 0201 	orr.w	r2, r3, #1
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8002b54:	2300      	movs	r3, #0
}
 8002b56:	4618      	mov	r0, r3
 8002b58:	3714      	adds	r7, #20
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b60:	4770      	bx	lr
 8002b62:	bf00      	nop
 8002b64:	20000000 	.word	0x20000000
 8002b68:	431bde83 	.word	0x431bde83
 8002b6c:	40012300 	.word	0x40012300
 8002b70:	40012000 	.word	0x40012000

08002b74 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8002b74:	b480      	push	{r7}
 8002b76:	b083      	sub	sp, #12
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002b82:	2b01      	cmp	r3, #1
 8002b84:	d101      	bne.n	8002b8a <HAL_ADC_Stop+0x16>
 8002b86:	2302      	movs	r3, #2
 8002b88:	e021      	b.n	8002bce <HAL_ADC_Stop+0x5a>
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	2201      	movs	r2, #1
 8002b8e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	689a      	ldr	r2, [r3, #8]
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f022 0201 	bic.w	r2, r2, #1
 8002ba0:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	689b      	ldr	r3, [r3, #8]
 8002ba8:	f003 0301 	and.w	r3, r3, #1
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d109      	bne.n	8002bc4 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bb4:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002bb8:	f023 0301 	bic.w	r3, r3, #1
 8002bbc:	f043 0201 	orr.w	r2, r3, #1
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8002bcc:	2300      	movs	r3, #0
}
 8002bce:	4618      	mov	r0, r3
 8002bd0:	370c      	adds	r7, #12
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd8:	4770      	bx	lr

08002bda <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002bda:	b580      	push	{r7, lr}
 8002bdc:	b084      	sub	sp, #16
 8002bde:	af00      	add	r7, sp, #0
 8002be0:	6078      	str	r0, [r7, #4]
 8002be2:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002be4:	2300      	movs	r3, #0
 8002be6:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	689b      	ldr	r3, [r3, #8]
 8002bee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002bf2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002bf6:	d113      	bne.n	8002c20 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	689b      	ldr	r3, [r3, #8]
 8002bfe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002c02:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002c06:	d10b      	bne.n	8002c20 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c0c:	f043 0220 	orr.w	r2, r3, #32
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2200      	movs	r2, #0
 8002c18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002c1c:	2301      	movs	r3, #1
 8002c1e:	e063      	b.n	8002ce8 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8002c20:	f7ff fea4 	bl	800296c <HAL_GetTick>
 8002c24:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002c26:	e021      	b.n	8002c6c <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002c2e:	d01d      	beq.n	8002c6c <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d007      	beq.n	8002c46 <HAL_ADC_PollForConversion+0x6c>
 8002c36:	f7ff fe99 	bl	800296c <HAL_GetTick>
 8002c3a:	4602      	mov	r2, r0
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	1ad3      	subs	r3, r2, r3
 8002c40:	683a      	ldr	r2, [r7, #0]
 8002c42:	429a      	cmp	r2, r3
 8002c44:	d212      	bcs.n	8002c6c <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f003 0302 	and.w	r3, r3, #2
 8002c50:	2b02      	cmp	r3, #2
 8002c52:	d00b      	beq.n	8002c6c <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c58:	f043 0204 	orr.w	r2, r3, #4
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2200      	movs	r2, #0
 8002c64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 8002c68:	2303      	movs	r3, #3
 8002c6a:	e03d      	b.n	8002ce8 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f003 0302 	and.w	r3, r3, #2
 8002c76:	2b02      	cmp	r3, #2
 8002c78:	d1d6      	bne.n	8002c28 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f06f 0212 	mvn.w	r2, #18
 8002c82:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c88:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	689b      	ldr	r3, [r3, #8]
 8002c96:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d123      	bne.n	8002ce6 <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d11f      	bne.n	8002ce6 <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cac:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d006      	beq.n	8002cc2 <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	689b      	ldr	r3, [r3, #8]
 8002cba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d111      	bne.n	8002ce6 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cc6:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cd2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d105      	bne.n	8002ce6 <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cde:	f043 0201 	orr.w	r2, r3, #1
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 8002ce6:	2300      	movs	r3, #0
}
 8002ce8:	4618      	mov	r0, r3
 8002cea:	3710      	adds	r7, #16
 8002cec:	46bd      	mov	sp, r7
 8002cee:	bd80      	pop	{r7, pc}

08002cf0 <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 8002cf0:	b480      	push	{r7}
 8002cf2:	b085      	sub	sp, #20
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002d02:	2b01      	cmp	r3, #1
 8002d04:	d101      	bne.n	8002d0a <HAL_ADC_Start_IT+0x1a>
 8002d06:	2302      	movs	r3, #2
 8002d08:	e0a1      	b.n	8002e4e <HAL_ADC_Start_IT+0x15e>
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	2201      	movs	r2, #1
 8002d0e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	689b      	ldr	r3, [r3, #8]
 8002d18:	f003 0301 	and.w	r3, r3, #1
 8002d1c:	2b01      	cmp	r3, #1
 8002d1e:	d018      	beq.n	8002d52 <HAL_ADC_Start_IT+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	689a      	ldr	r2, [r3, #8]
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f042 0201 	orr.w	r2, r2, #1
 8002d2e:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002d30:	4b4a      	ldr	r3, [pc, #296]	@ (8002e5c <HAL_ADC_Start_IT+0x16c>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	4a4a      	ldr	r2, [pc, #296]	@ (8002e60 <HAL_ADC_Start_IT+0x170>)
 8002d36:	fba2 2303 	umull	r2, r3, r2, r3
 8002d3a:	0c9a      	lsrs	r2, r3, #18
 8002d3c:	4613      	mov	r3, r2
 8002d3e:	005b      	lsls	r3, r3, #1
 8002d40:	4413      	add	r3, r2
 8002d42:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8002d44:	e002      	b.n	8002d4c <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 8002d46:	68bb      	ldr	r3, [r7, #8]
 8002d48:	3b01      	subs	r3, #1
 8002d4a:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8002d4c:	68bb      	ldr	r3, [r7, #8]
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d1f9      	bne.n	8002d46 <HAL_ADC_Start_IT+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	689b      	ldr	r3, [r3, #8]
 8002d58:	f003 0301 	and.w	r3, r3, #1
 8002d5c:	2b01      	cmp	r3, #1
 8002d5e:	d169      	bne.n	8002e34 <HAL_ADC_Start_IT+0x144>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d64:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8002d68:	f023 0301 	bic.w	r3, r3, #1
 8002d6c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	685b      	ldr	r3, [r3, #4]
 8002d7a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d007      	beq.n	8002d92 <HAL_ADC_Start_IT+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d86:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002d8a:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d96:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002d9a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002d9e:	d106      	bne.n	8002dae <HAL_ADC_Start_IT+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002da4:	f023 0206 	bic.w	r2, r3, #6
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	645a      	str	r2, [r3, #68]	@ 0x44
 8002dac:	e002      	b.n	8002db4 <HAL_ADC_Start_IT+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	2200      	movs	r2, #0
 8002db2:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2200      	movs	r2, #0
 8002db8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002dbc:	4b29      	ldr	r3, [pc, #164]	@ (8002e64 <HAL_ADC_Start_IT+0x174>)
 8002dbe:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8002dc8:	601a      	str	r2, [r3, #0]

    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	685b      	ldr	r3, [r3, #4]
 8002dd0:	687a      	ldr	r2, [r7, #4]
 8002dd2:	6812      	ldr	r2, [r2, #0]
 8002dd4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002dd8:	f043 0320 	orr.w	r3, r3, #32
 8002ddc:	6053      	str	r3, [r2, #4]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	685b      	ldr	r3, [r3, #4]
 8002de2:	f003 031f 	and.w	r3, r3, #31
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d10f      	bne.n	8002e0a <HAL_ADC_Start_IT+0x11a>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	689b      	ldr	r3, [r3, #8]
 8002df0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d129      	bne.n	8002e4c <HAL_ADC_Start_IT+0x15c>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	689a      	ldr	r2, [r3, #8]
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002e06:	609a      	str	r2, [r3, #8]
 8002e08:	e020      	b.n	8002e4c <HAL_ADC_Start_IT+0x15c>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	4a16      	ldr	r2, [pc, #88]	@ (8002e68 <HAL_ADC_Start_IT+0x178>)
 8002e10:	4293      	cmp	r3, r2
 8002e12:	d11b      	bne.n	8002e4c <HAL_ADC_Start_IT+0x15c>
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	689b      	ldr	r3, [r3, #8]
 8002e1a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d114      	bne.n	8002e4c <HAL_ADC_Start_IT+0x15c>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	689a      	ldr	r2, [r3, #8]
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002e30:	609a      	str	r2, [r3, #8]
 8002e32:	e00b      	b.n	8002e4c <HAL_ADC_Start_IT+0x15c>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e38:	f043 0210 	orr.w	r2, r3, #16
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e44:	f043 0201 	orr.w	r2, r3, #1
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8002e4c:	2300      	movs	r3, #0
}
 8002e4e:	4618      	mov	r0, r3
 8002e50:	3714      	adds	r7, #20
 8002e52:	46bd      	mov	sp, r7
 8002e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e58:	4770      	bx	lr
 8002e5a:	bf00      	nop
 8002e5c:	20000000 	.word	0x20000000
 8002e60:	431bde83 	.word	0x431bde83
 8002e64:	40012300 	.word	0x40012300
 8002e68:	40012000 	.word	0x40012000

08002e6c <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b086      	sub	sp, #24
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8002e74:	2300      	movs	r3, #0
 8002e76:	617b      	str	r3, [r7, #20]
 8002e78:	2300      	movs	r3, #0
 8002e7a:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	685b      	ldr	r3, [r3, #4]
 8002e8a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	f003 0302 	and.w	r3, r3, #2
 8002e92:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8002e94:	68bb      	ldr	r3, [r7, #8]
 8002e96:	f003 0320 	and.w	r3, r3, #32
 8002e9a:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 8002e9c:	697b      	ldr	r3, [r7, #20]
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d049      	beq.n	8002f36 <HAL_ADC_IRQHandler+0xca>
 8002ea2:	693b      	ldr	r3, [r7, #16]
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d046      	beq.n	8002f36 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002eac:	f003 0310 	and.w	r3, r3, #16
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d105      	bne.n	8002ec0 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002eb8:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	689b      	ldr	r3, [r3, #8]
 8002ec6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d12b      	bne.n	8002f26 <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d127      	bne.n	8002f26 <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002edc:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d006      	beq.n	8002ef2 <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	689b      	ldr	r3, [r3, #8]
 8002eea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d119      	bne.n	8002f26 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	685a      	ldr	r2, [r3, #4]
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f022 0220 	bic.w	r2, r2, #32
 8002f00:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f06:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f12:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d105      	bne.n	8002f26 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f1e:	f043 0201 	orr.w	r2, r3, #1
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002f26:	6878      	ldr	r0, [r7, #4]
 8002f28:	f7fe f934 	bl	8001194 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f06f 0212 	mvn.w	r2, #18
 8002f34:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	f003 0304 	and.w	r3, r3, #4
 8002f3c:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8002f3e:	68bb      	ldr	r3, [r7, #8]
 8002f40:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f44:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 8002f46:	697b      	ldr	r3, [r7, #20]
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d057      	beq.n	8002ffc <HAL_ADC_IRQHandler+0x190>
 8002f4c:	693b      	ldr	r3, [r7, #16]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d054      	beq.n	8002ffc <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f56:	f003 0310 	and.w	r3, r3, #16
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d105      	bne.n	8002f6a <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f62:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	689b      	ldr	r3, [r3, #8]
 8002f70:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d139      	bne.n	8002fec <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f7e:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d006      	beq.n	8002f94 <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	689b      	ldr	r3, [r3, #8]
 8002f8c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d12b      	bne.n	8002fec <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	685b      	ldr	r3, [r3, #4]
 8002f9a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d124      	bne.n	8002fec <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	689b      	ldr	r3, [r3, #8]
 8002fa8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d11d      	bne.n	8002fec <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d119      	bne.n	8002fec <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	685a      	ldr	r2, [r3, #4]
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002fc6:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fcc:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fd8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d105      	bne.n	8002fec <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fe4:	f043 0201 	orr.w	r2, r3, #1
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002fec:	6878      	ldr	r0, [r7, #4]
 8002fee:	f000 fc59 	bl	80038a4 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f06f 020c 	mvn.w	r2, #12
 8002ffa:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	f003 0301 	and.w	r3, r3, #1
 8003002:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8003004:	68bb      	ldr	r3, [r7, #8]
 8003006:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800300a:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 800300c:	697b      	ldr	r3, [r7, #20]
 800300e:	2b00      	cmp	r3, #0
 8003010:	d017      	beq.n	8003042 <HAL_ADC_IRQHandler+0x1d6>
 8003012:	693b      	ldr	r3, [r7, #16]
 8003014:	2b00      	cmp	r3, #0
 8003016:	d014      	beq.n	8003042 <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f003 0301 	and.w	r3, r3, #1
 8003022:	2b01      	cmp	r3, #1
 8003024:	d10d      	bne.n	8003042 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800302a:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003032:	6878      	ldr	r0, [r7, #4]
 8003034:	f000 f98b 	bl	800334e <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f06f 0201 	mvn.w	r2, #1
 8003040:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	f003 0320 	and.w	r3, r3, #32
 8003048:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 800304a:	68bb      	ldr	r3, [r7, #8]
 800304c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003050:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 8003052:	697b      	ldr	r3, [r7, #20]
 8003054:	2b00      	cmp	r3, #0
 8003056:	d015      	beq.n	8003084 <HAL_ADC_IRQHandler+0x218>
 8003058:	693b      	ldr	r3, [r7, #16]
 800305a:	2b00      	cmp	r3, #0
 800305c:	d012      	beq.n	8003084 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003062:	f043 0202 	orr.w	r2, r3, #2
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f06f 0220 	mvn.w	r2, #32
 8003072:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 8003074:	6878      	ldr	r0, [r7, #4]
 8003076:	f7fe f8bb 	bl	80011f0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f06f 0220 	mvn.w	r2, #32
 8003082:	601a      	str	r2, [r3, #0]
  }
}
 8003084:	bf00      	nop
 8003086:	3718      	adds	r7, #24
 8003088:	46bd      	mov	sp, r7
 800308a:	bd80      	pop	{r7, pc}

0800308c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	b086      	sub	sp, #24
 8003090:	af00      	add	r7, sp, #0
 8003092:	60f8      	str	r0, [r7, #12]
 8003094:	60b9      	str	r1, [r7, #8]
 8003096:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8003098:	2300      	movs	r3, #0
 800309a:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80030a2:	2b01      	cmp	r3, #1
 80030a4:	d101      	bne.n	80030aa <HAL_ADC_Start_DMA+0x1e>
 80030a6:	2302      	movs	r3, #2
 80030a8:	e0ce      	b.n	8003248 <HAL_ADC_Start_DMA+0x1bc>
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	2201      	movs	r2, #1
 80030ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	689b      	ldr	r3, [r3, #8]
 80030b8:	f003 0301 	and.w	r3, r3, #1
 80030bc:	2b01      	cmp	r3, #1
 80030be:	d018      	beq.n	80030f2 <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	689a      	ldr	r2, [r3, #8]
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f042 0201 	orr.w	r2, r2, #1
 80030ce:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80030d0:	4b5f      	ldr	r3, [pc, #380]	@ (8003250 <HAL_ADC_Start_DMA+0x1c4>)
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	4a5f      	ldr	r2, [pc, #380]	@ (8003254 <HAL_ADC_Start_DMA+0x1c8>)
 80030d6:	fba2 2303 	umull	r2, r3, r2, r3
 80030da:	0c9a      	lsrs	r2, r3, #18
 80030dc:	4613      	mov	r3, r2
 80030de:	005b      	lsls	r3, r3, #1
 80030e0:	4413      	add	r3, r2
 80030e2:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 80030e4:	e002      	b.n	80030ec <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80030e6:	693b      	ldr	r3, [r7, #16]
 80030e8:	3b01      	subs	r3, #1
 80030ea:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 80030ec:	693b      	ldr	r3, [r7, #16]
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d1f9      	bne.n	80030e6 <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	689b      	ldr	r3, [r3, #8]
 80030f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030fc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003100:	d107      	bne.n	8003112 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	689a      	ldr	r2, [r3, #8]
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003110:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	689b      	ldr	r3, [r3, #8]
 8003118:	f003 0301 	and.w	r3, r3, #1
 800311c:	2b01      	cmp	r3, #1
 800311e:	f040 8086 	bne.w	800322e <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003126:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 800312a:	f023 0301 	bic.w	r3, r3, #1
 800312e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	685b      	ldr	r3, [r3, #4]
 800313c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003140:	2b00      	cmp	r3, #0
 8003142:	d007      	beq.n	8003154 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003148:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800314c:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003158:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800315c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003160:	d106      	bne.n	8003170 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003166:	f023 0206 	bic.w	r2, r3, #6
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	645a      	str	r2, [r3, #68]	@ 0x44
 800316e:	e002      	b.n	8003176 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	2200      	movs	r2, #0
 8003174:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	2200      	movs	r2, #0
 800317a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800317e:	4b36      	ldr	r3, [pc, #216]	@ (8003258 <HAL_ADC_Start_DMA+0x1cc>)
 8003180:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003186:	4a35      	ldr	r2, [pc, #212]	@ (800325c <HAL_ADC_Start_DMA+0x1d0>)
 8003188:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800318e:	4a34      	ldr	r2, [pc, #208]	@ (8003260 <HAL_ADC_Start_DMA+0x1d4>)
 8003190:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003196:	4a33      	ldr	r2, [pc, #204]	@ (8003264 <HAL_ADC_Start_DMA+0x1d8>)
 8003198:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 80031a2:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	685a      	ldr	r2, [r3, #4]
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 80031b2:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	689a      	ldr	r2, [r3, #8]
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80031c2:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	334c      	adds	r3, #76	@ 0x4c
 80031ce:	4619      	mov	r1, r3
 80031d0:	68ba      	ldr	r2, [r7, #8]
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	f000 fd30 	bl	8003c38 <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80031d8:	697b      	ldr	r3, [r7, #20]
 80031da:	685b      	ldr	r3, [r3, #4]
 80031dc:	f003 031f 	and.w	r3, r3, #31
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d10f      	bne.n	8003204 <HAL_ADC_Start_DMA+0x178>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	689b      	ldr	r3, [r3, #8]
 80031ea:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d129      	bne.n	8003246 <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	689a      	ldr	r2, [r3, #8]
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8003200:	609a      	str	r2, [r3, #8]
 8003202:	e020      	b.n	8003246 <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	4a17      	ldr	r2, [pc, #92]	@ (8003268 <HAL_ADC_Start_DMA+0x1dc>)
 800320a:	4293      	cmp	r3, r2
 800320c:	d11b      	bne.n	8003246 <HAL_ADC_Start_DMA+0x1ba>
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	689b      	ldr	r3, [r3, #8]
 8003214:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003218:	2b00      	cmp	r3, #0
 800321a:	d114      	bne.n	8003246 <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	689a      	ldr	r2, [r3, #8]
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800322a:	609a      	str	r2, [r3, #8]
 800322c:	e00b      	b.n	8003246 <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003232:	f043 0210 	orr.w	r2, r3, #16
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800323e:	f043 0201 	orr.w	r2, r3, #1
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8003246:	2300      	movs	r3, #0
}
 8003248:	4618      	mov	r0, r3
 800324a:	3718      	adds	r7, #24
 800324c:	46bd      	mov	sp, r7
 800324e:	bd80      	pop	{r7, pc}
 8003250:	20000000 	.word	0x20000000
 8003254:	431bde83 	.word	0x431bde83
 8003258:	40012300 	.word	0x40012300
 800325c:	080037a1 	.word	0x080037a1
 8003260:	0800385b 	.word	0x0800385b
 8003264:	08003877 	.word	0x08003877
 8003268:	40012000 	.word	0x40012000

0800326c <HAL_ADC_Stop_DMA>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	b084      	sub	sp, #16
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003274:	2300      	movs	r3, #0
 8003276:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800327e:	2b01      	cmp	r3, #1
 8003280:	d101      	bne.n	8003286 <HAL_ADC_Stop_DMA+0x1a>
 8003282:	2302      	movs	r3, #2
 8003284:	e048      	b.n	8003318 <HAL_ADC_Stop_DMA+0xac>
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	2201      	movs	r2, #1
 800328a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	689a      	ldr	r2, [r3, #8]
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f022 0201 	bic.w	r2, r2, #1
 800329c:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	689b      	ldr	r3, [r3, #8]
 80032a4:	f003 0301 	and.w	r3, r3, #1
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d130      	bne.n	800330e <HAL_ADC_Stop_DMA+0xa2>
  {
    /* Disable the selected ADC DMA mode */
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	689a      	ldr	r2, [r3, #8]
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80032ba:	609a      	str	r2, [r3, #8]

    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032c0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80032c4:	b2db      	uxtb	r3, r3
 80032c6:	2b02      	cmp	r3, #2
 80032c8:	d10f      	bne.n	80032ea <HAL_ADC_Stop_DMA+0x7e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032ce:	4618      	mov	r0, r3
 80032d0:	f000 fd0a 	bl	8003ce8 <HAL_DMA_Abort>
 80032d4:	4603      	mov	r3, r0
 80032d6:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 80032d8:	7bfb      	ldrb	r3, [r7, #15]
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d005      	beq.n	80032ea <HAL_ADC_Stop_DMA+0x7e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032e2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	641a      	str	r2, [r3, #64]	@ 0x40
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	685a      	ldr	r2, [r3, #4]
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f022 6280 	bic.w	r2, r2, #67108864	@ 0x4000000
 80032f8:	605a      	str	r2, [r3, #4]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032fe:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8003302:	f023 0301 	bic.w	r3, r3, #1
 8003306:	f043 0201 	orr.w	r2, r3, #1
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	2200      	movs	r2, #0
 8003312:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003316:	7bfb      	ldrb	r3, [r7, #15]
}
 8003318:	4618      	mov	r0, r3
 800331a:	3710      	adds	r7, #16
 800331c:	46bd      	mov	sp, r7
 800331e:	bd80      	pop	{r7, pc}

08003320 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8003320:	b480      	push	{r7}
 8003322:	b083      	sub	sp, #12
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 800332e:	4618      	mov	r0, r3
 8003330:	370c      	adds	r7, #12
 8003332:	46bd      	mov	sp, r7
 8003334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003338:	4770      	bx	lr

0800333a <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 800333a:	b480      	push	{r7}
 800333c:	b083      	sub	sp, #12
 800333e:	af00      	add	r7, sp, #0
 8003340:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8003342:	bf00      	nop
 8003344:	370c      	adds	r7, #12
 8003346:	46bd      	mov	sp, r7
 8003348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334c:	4770      	bx	lr

0800334e <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 800334e:	b480      	push	{r7}
 8003350:	b083      	sub	sp, #12
 8003352:	af00      	add	r7, sp, #0
 8003354:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8003356:	bf00      	nop
 8003358:	370c      	adds	r7, #12
 800335a:	46bd      	mov	sp, r7
 800335c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003360:	4770      	bx	lr
	...

08003364 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003364:	b480      	push	{r7}
 8003366:	b085      	sub	sp, #20
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
 800336c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800336e:	2300      	movs	r3, #0
 8003370:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003378:	2b01      	cmp	r3, #1
 800337a:	d101      	bne.n	8003380 <HAL_ADC_ConfigChannel+0x1c>
 800337c:	2302      	movs	r3, #2
 800337e:	e105      	b.n	800358c <HAL_ADC_ConfigChannel+0x228>
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2201      	movs	r2, #1
 8003384:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	2b09      	cmp	r3, #9
 800338e:	d925      	bls.n	80033dc <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	68d9      	ldr	r1, [r3, #12]
 8003396:	683b      	ldr	r3, [r7, #0]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	b29b      	uxth	r3, r3
 800339c:	461a      	mov	r2, r3
 800339e:	4613      	mov	r3, r2
 80033a0:	005b      	lsls	r3, r3, #1
 80033a2:	4413      	add	r3, r2
 80033a4:	3b1e      	subs	r3, #30
 80033a6:	2207      	movs	r2, #7
 80033a8:	fa02 f303 	lsl.w	r3, r2, r3
 80033ac:	43da      	mvns	r2, r3
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	400a      	ands	r2, r1
 80033b4:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	68d9      	ldr	r1, [r3, #12]
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	689a      	ldr	r2, [r3, #8]
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	b29b      	uxth	r3, r3
 80033c6:	4618      	mov	r0, r3
 80033c8:	4603      	mov	r3, r0
 80033ca:	005b      	lsls	r3, r3, #1
 80033cc:	4403      	add	r3, r0
 80033ce:	3b1e      	subs	r3, #30
 80033d0:	409a      	lsls	r2, r3
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	430a      	orrs	r2, r1
 80033d8:	60da      	str	r2, [r3, #12]
 80033da:	e022      	b.n	8003422 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	6919      	ldr	r1, [r3, #16]
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	b29b      	uxth	r3, r3
 80033e8:	461a      	mov	r2, r3
 80033ea:	4613      	mov	r3, r2
 80033ec:	005b      	lsls	r3, r3, #1
 80033ee:	4413      	add	r3, r2
 80033f0:	2207      	movs	r2, #7
 80033f2:	fa02 f303 	lsl.w	r3, r2, r3
 80033f6:	43da      	mvns	r2, r3
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	400a      	ands	r2, r1
 80033fe:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	6919      	ldr	r1, [r3, #16]
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	689a      	ldr	r2, [r3, #8]
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	b29b      	uxth	r3, r3
 8003410:	4618      	mov	r0, r3
 8003412:	4603      	mov	r3, r0
 8003414:	005b      	lsls	r3, r3, #1
 8003416:	4403      	add	r3, r0
 8003418:	409a      	lsls	r2, r3
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	430a      	orrs	r2, r1
 8003420:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003422:	683b      	ldr	r3, [r7, #0]
 8003424:	685b      	ldr	r3, [r3, #4]
 8003426:	2b06      	cmp	r3, #6
 8003428:	d824      	bhi.n	8003474 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	685a      	ldr	r2, [r3, #4]
 8003434:	4613      	mov	r3, r2
 8003436:	009b      	lsls	r3, r3, #2
 8003438:	4413      	add	r3, r2
 800343a:	3b05      	subs	r3, #5
 800343c:	221f      	movs	r2, #31
 800343e:	fa02 f303 	lsl.w	r3, r2, r3
 8003442:	43da      	mvns	r2, r3
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	400a      	ands	r2, r1
 800344a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003452:	683b      	ldr	r3, [r7, #0]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	b29b      	uxth	r3, r3
 8003458:	4618      	mov	r0, r3
 800345a:	683b      	ldr	r3, [r7, #0]
 800345c:	685a      	ldr	r2, [r3, #4]
 800345e:	4613      	mov	r3, r2
 8003460:	009b      	lsls	r3, r3, #2
 8003462:	4413      	add	r3, r2
 8003464:	3b05      	subs	r3, #5
 8003466:	fa00 f203 	lsl.w	r2, r0, r3
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	430a      	orrs	r2, r1
 8003470:	635a      	str	r2, [r3, #52]	@ 0x34
 8003472:	e04c      	b.n	800350e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	685b      	ldr	r3, [r3, #4]
 8003478:	2b0c      	cmp	r3, #12
 800347a:	d824      	bhi.n	80034c6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	685a      	ldr	r2, [r3, #4]
 8003486:	4613      	mov	r3, r2
 8003488:	009b      	lsls	r3, r3, #2
 800348a:	4413      	add	r3, r2
 800348c:	3b23      	subs	r3, #35	@ 0x23
 800348e:	221f      	movs	r2, #31
 8003490:	fa02 f303 	lsl.w	r3, r2, r3
 8003494:	43da      	mvns	r2, r3
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	400a      	ands	r2, r1
 800349c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	b29b      	uxth	r3, r3
 80034aa:	4618      	mov	r0, r3
 80034ac:	683b      	ldr	r3, [r7, #0]
 80034ae:	685a      	ldr	r2, [r3, #4]
 80034b0:	4613      	mov	r3, r2
 80034b2:	009b      	lsls	r3, r3, #2
 80034b4:	4413      	add	r3, r2
 80034b6:	3b23      	subs	r3, #35	@ 0x23
 80034b8:	fa00 f203 	lsl.w	r2, r0, r3
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	430a      	orrs	r2, r1
 80034c2:	631a      	str	r2, [r3, #48]	@ 0x30
 80034c4:	e023      	b.n	800350e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	685a      	ldr	r2, [r3, #4]
 80034d0:	4613      	mov	r3, r2
 80034d2:	009b      	lsls	r3, r3, #2
 80034d4:	4413      	add	r3, r2
 80034d6:	3b41      	subs	r3, #65	@ 0x41
 80034d8:	221f      	movs	r2, #31
 80034da:	fa02 f303 	lsl.w	r3, r2, r3
 80034de:	43da      	mvns	r2, r3
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	400a      	ands	r2, r1
 80034e6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80034ee:	683b      	ldr	r3, [r7, #0]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	b29b      	uxth	r3, r3
 80034f4:	4618      	mov	r0, r3
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	685a      	ldr	r2, [r3, #4]
 80034fa:	4613      	mov	r3, r2
 80034fc:	009b      	lsls	r3, r3, #2
 80034fe:	4413      	add	r3, r2
 8003500:	3b41      	subs	r3, #65	@ 0x41
 8003502:	fa00 f203 	lsl.w	r2, r0, r3
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	430a      	orrs	r2, r1
 800350c:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800350e:	4b22      	ldr	r3, [pc, #136]	@ (8003598 <HAL_ADC_ConfigChannel+0x234>)
 8003510:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	4a21      	ldr	r2, [pc, #132]	@ (800359c <HAL_ADC_ConfigChannel+0x238>)
 8003518:	4293      	cmp	r3, r2
 800351a:	d109      	bne.n	8003530 <HAL_ADC_ConfigChannel+0x1cc>
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	2b12      	cmp	r3, #18
 8003522:	d105      	bne.n	8003530 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	685b      	ldr	r3, [r3, #4]
 8003528:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	4a19      	ldr	r2, [pc, #100]	@ (800359c <HAL_ADC_ConfigChannel+0x238>)
 8003536:	4293      	cmp	r3, r2
 8003538:	d123      	bne.n	8003582 <HAL_ADC_ConfigChannel+0x21e>
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	2b10      	cmp	r3, #16
 8003540:	d003      	beq.n	800354a <HAL_ADC_ConfigChannel+0x1e6>
 8003542:	683b      	ldr	r3, [r7, #0]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	2b11      	cmp	r3, #17
 8003548:	d11b      	bne.n	8003582 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	685b      	ldr	r3, [r3, #4]
 800354e:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003556:	683b      	ldr	r3, [r7, #0]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	2b10      	cmp	r3, #16
 800355c:	d111      	bne.n	8003582 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800355e:	4b10      	ldr	r3, [pc, #64]	@ (80035a0 <HAL_ADC_ConfigChannel+0x23c>)
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	4a10      	ldr	r2, [pc, #64]	@ (80035a4 <HAL_ADC_ConfigChannel+0x240>)
 8003564:	fba2 2303 	umull	r2, r3, r2, r3
 8003568:	0c9a      	lsrs	r2, r3, #18
 800356a:	4613      	mov	r3, r2
 800356c:	009b      	lsls	r3, r3, #2
 800356e:	4413      	add	r3, r2
 8003570:	005b      	lsls	r3, r3, #1
 8003572:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8003574:	e002      	b.n	800357c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8003576:	68bb      	ldr	r3, [r7, #8]
 8003578:	3b01      	subs	r3, #1
 800357a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 800357c:	68bb      	ldr	r3, [r7, #8]
 800357e:	2b00      	cmp	r3, #0
 8003580:	d1f9      	bne.n	8003576 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	2200      	movs	r2, #0
 8003586:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 800358a:	2300      	movs	r3, #0
}
 800358c:	4618      	mov	r0, r3
 800358e:	3714      	adds	r7, #20
 8003590:	46bd      	mov	sp, r7
 8003592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003596:	4770      	bx	lr
 8003598:	40012300 	.word	0x40012300
 800359c:	40012000 	.word	0x40012000
 80035a0:	20000000 	.word	0x20000000
 80035a4:	431bde83 	.word	0x431bde83

080035a8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80035a8:	b480      	push	{r7}
 80035aa:	b085      	sub	sp, #20
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80035b0:	4b79      	ldr	r3, [pc, #484]	@ (8003798 <ADC_Init+0x1f0>)
 80035b2:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	685b      	ldr	r3, [r3, #4]
 80035b8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	685a      	ldr	r2, [r3, #4]
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	685b      	ldr	r3, [r3, #4]
 80035c8:	431a      	orrs	r2, r3
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	685a      	ldr	r2, [r3, #4]
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80035dc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	6859      	ldr	r1, [r3, #4]
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	691b      	ldr	r3, [r3, #16]
 80035e8:	021a      	lsls	r2, r3, #8
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	430a      	orrs	r2, r1
 80035f0:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	685a      	ldr	r2, [r3, #4]
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8003600:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	6859      	ldr	r1, [r3, #4]
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	689a      	ldr	r2, [r3, #8]
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	430a      	orrs	r2, r1
 8003612:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	689a      	ldr	r2, [r3, #8]
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003622:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	6899      	ldr	r1, [r3, #8]
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	68da      	ldr	r2, [r3, #12]
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	430a      	orrs	r2, r1
 8003634:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800363a:	4a58      	ldr	r2, [pc, #352]	@ (800379c <ADC_Init+0x1f4>)
 800363c:	4293      	cmp	r3, r2
 800363e:	d022      	beq.n	8003686 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	689a      	ldr	r2, [r3, #8]
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800364e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	6899      	ldr	r1, [r3, #8]
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	430a      	orrs	r2, r1
 8003660:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	689a      	ldr	r2, [r3, #8]
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003670:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	6899      	ldr	r1, [r3, #8]
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	430a      	orrs	r2, r1
 8003682:	609a      	str	r2, [r3, #8]
 8003684:	e00f      	b.n	80036a6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	689a      	ldr	r2, [r3, #8]
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003694:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	689a      	ldr	r2, [r3, #8]
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80036a4:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	689a      	ldr	r2, [r3, #8]
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f022 0202 	bic.w	r2, r2, #2
 80036b4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	6899      	ldr	r1, [r3, #8]
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	7e1b      	ldrb	r3, [r3, #24]
 80036c0:	005a      	lsls	r2, r3, #1
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	430a      	orrs	r2, r1
 80036c8:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d01b      	beq.n	800370c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	685a      	ldr	r2, [r3, #4]
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80036e2:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	685a      	ldr	r2, [r3, #4]
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80036f2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	6859      	ldr	r1, [r3, #4]
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036fe:	3b01      	subs	r3, #1
 8003700:	035a      	lsls	r2, r3, #13
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	430a      	orrs	r2, r1
 8003708:	605a      	str	r2, [r3, #4]
 800370a:	e007      	b.n	800371c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	685a      	ldr	r2, [r3, #4]
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800371a:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800372a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	69db      	ldr	r3, [r3, #28]
 8003736:	3b01      	subs	r3, #1
 8003738:	051a      	lsls	r2, r3, #20
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	430a      	orrs	r2, r1
 8003740:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	689a      	ldr	r2, [r3, #8]
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8003750:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	6899      	ldr	r1, [r3, #8]
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800375e:	025a      	lsls	r2, r3, #9
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	430a      	orrs	r2, r1
 8003766:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	689a      	ldr	r2, [r3, #8]
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003776:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	6899      	ldr	r1, [r3, #8]
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	695b      	ldr	r3, [r3, #20]
 8003782:	029a      	lsls	r2, r3, #10
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	430a      	orrs	r2, r1
 800378a:	609a      	str	r2, [r3, #8]
}
 800378c:	bf00      	nop
 800378e:	3714      	adds	r7, #20
 8003790:	46bd      	mov	sp, r7
 8003792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003796:	4770      	bx	lr
 8003798:	40012300 	.word	0x40012300
 800379c:	0f000001 	.word	0x0f000001

080037a0 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b084      	sub	sp, #16
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037ac:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037b2:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d13c      	bne.n	8003834 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037be:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	689b      	ldr	r3, [r3, #8]
 80037cc:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d12b      	bne.n	800382c <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d127      	bne.n	800382c <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037e2:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d006      	beq.n	80037f8 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	689b      	ldr	r3, [r3, #8]
 80037f0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d119      	bne.n	800382c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	685a      	ldr	r2, [r3, #4]
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f022 0220 	bic.w	r2, r2, #32
 8003806:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800380c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003818:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800381c:	2b00      	cmp	r3, #0
 800381e:	d105      	bne.n	800382c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003824:	f043 0201 	orr.w	r2, r3, #1
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800382c:	68f8      	ldr	r0, [r7, #12]
 800382e:	f7fd fcb1 	bl	8001194 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003832:	e00e      	b.n	8003852 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003838:	f003 0310 	and.w	r3, r3, #16
 800383c:	2b00      	cmp	r3, #0
 800383e:	d003      	beq.n	8003848 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8003840:	68f8      	ldr	r0, [r7, #12]
 8003842:	f7fd fcd5 	bl	80011f0 <HAL_ADC_ErrorCallback>
}
 8003846:	e004      	b.n	8003852 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800384c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800384e:	6878      	ldr	r0, [r7, #4]
 8003850:	4798      	blx	r3
}
 8003852:	bf00      	nop
 8003854:	3710      	adds	r7, #16
 8003856:	46bd      	mov	sp, r7
 8003858:	bd80      	pop	{r7, pc}

0800385a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800385a:	b580      	push	{r7, lr}
 800385c:	b084      	sub	sp, #16
 800385e:	af00      	add	r7, sp, #0
 8003860:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003866:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003868:	68f8      	ldr	r0, [r7, #12]
 800386a:	f7ff fd66 	bl	800333a <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800386e:	bf00      	nop
 8003870:	3710      	adds	r7, #16
 8003872:	46bd      	mov	sp, r7
 8003874:	bd80      	pop	{r7, pc}

08003876 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003876:	b580      	push	{r7, lr}
 8003878:	b084      	sub	sp, #16
 800387a:	af00      	add	r7, sp, #0
 800387c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003882:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	2240      	movs	r2, #64	@ 0x40
 8003888:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800388e:	f043 0204 	orr.w	r2, r3, #4
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003896:	68f8      	ldr	r0, [r7, #12]
 8003898:	f7fd fcaa 	bl	80011f0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800389c:	bf00      	nop
 800389e:	3710      	adds	r7, #16
 80038a0:	46bd      	mov	sp, r7
 80038a2:	bd80      	pop	{r7, pc}

080038a4 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80038a4:	b480      	push	{r7}
 80038a6:	b083      	sub	sp, #12
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 80038ac:	bf00      	nop
 80038ae:	370c      	adds	r7, #12
 80038b0:	46bd      	mov	sp, r7
 80038b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b6:	4770      	bx	lr

080038b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80038b8:	b480      	push	{r7}
 80038ba:	b085      	sub	sp, #20
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	f003 0307 	and.w	r3, r3, #7
 80038c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80038c8:	4b0c      	ldr	r3, [pc, #48]	@ (80038fc <__NVIC_SetPriorityGrouping+0x44>)
 80038ca:	68db      	ldr	r3, [r3, #12]
 80038cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80038ce:	68ba      	ldr	r2, [r7, #8]
 80038d0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80038d4:	4013      	ands	r3, r2
 80038d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80038dc:	68bb      	ldr	r3, [r7, #8]
 80038de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80038e0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80038e4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80038e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80038ea:	4a04      	ldr	r2, [pc, #16]	@ (80038fc <__NVIC_SetPriorityGrouping+0x44>)
 80038ec:	68bb      	ldr	r3, [r7, #8]
 80038ee:	60d3      	str	r3, [r2, #12]
}
 80038f0:	bf00      	nop
 80038f2:	3714      	adds	r7, #20
 80038f4:	46bd      	mov	sp, r7
 80038f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fa:	4770      	bx	lr
 80038fc:	e000ed00 	.word	0xe000ed00

08003900 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003900:	b480      	push	{r7}
 8003902:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003904:	4b04      	ldr	r3, [pc, #16]	@ (8003918 <__NVIC_GetPriorityGrouping+0x18>)
 8003906:	68db      	ldr	r3, [r3, #12]
 8003908:	0a1b      	lsrs	r3, r3, #8
 800390a:	f003 0307 	and.w	r3, r3, #7
}
 800390e:	4618      	mov	r0, r3
 8003910:	46bd      	mov	sp, r7
 8003912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003916:	4770      	bx	lr
 8003918:	e000ed00 	.word	0xe000ed00

0800391c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800391c:	b480      	push	{r7}
 800391e:	b083      	sub	sp, #12
 8003920:	af00      	add	r7, sp, #0
 8003922:	4603      	mov	r3, r0
 8003924:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003926:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800392a:	2b00      	cmp	r3, #0
 800392c:	db0b      	blt.n	8003946 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800392e:	79fb      	ldrb	r3, [r7, #7]
 8003930:	f003 021f 	and.w	r2, r3, #31
 8003934:	4907      	ldr	r1, [pc, #28]	@ (8003954 <__NVIC_EnableIRQ+0x38>)
 8003936:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800393a:	095b      	lsrs	r3, r3, #5
 800393c:	2001      	movs	r0, #1
 800393e:	fa00 f202 	lsl.w	r2, r0, r2
 8003942:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003946:	bf00      	nop
 8003948:	370c      	adds	r7, #12
 800394a:	46bd      	mov	sp, r7
 800394c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003950:	4770      	bx	lr
 8003952:	bf00      	nop
 8003954:	e000e100 	.word	0xe000e100

08003958 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003958:	b480      	push	{r7}
 800395a:	b083      	sub	sp, #12
 800395c:	af00      	add	r7, sp, #0
 800395e:	4603      	mov	r3, r0
 8003960:	6039      	str	r1, [r7, #0]
 8003962:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003964:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003968:	2b00      	cmp	r3, #0
 800396a:	db0a      	blt.n	8003982 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	b2da      	uxtb	r2, r3
 8003970:	490c      	ldr	r1, [pc, #48]	@ (80039a4 <__NVIC_SetPriority+0x4c>)
 8003972:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003976:	0112      	lsls	r2, r2, #4
 8003978:	b2d2      	uxtb	r2, r2
 800397a:	440b      	add	r3, r1
 800397c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003980:	e00a      	b.n	8003998 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	b2da      	uxtb	r2, r3
 8003986:	4908      	ldr	r1, [pc, #32]	@ (80039a8 <__NVIC_SetPriority+0x50>)
 8003988:	79fb      	ldrb	r3, [r7, #7]
 800398a:	f003 030f 	and.w	r3, r3, #15
 800398e:	3b04      	subs	r3, #4
 8003990:	0112      	lsls	r2, r2, #4
 8003992:	b2d2      	uxtb	r2, r2
 8003994:	440b      	add	r3, r1
 8003996:	761a      	strb	r2, [r3, #24]
}
 8003998:	bf00      	nop
 800399a:	370c      	adds	r7, #12
 800399c:	46bd      	mov	sp, r7
 800399e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a2:	4770      	bx	lr
 80039a4:	e000e100 	.word	0xe000e100
 80039a8:	e000ed00 	.word	0xe000ed00

080039ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80039ac:	b480      	push	{r7}
 80039ae:	b089      	sub	sp, #36	@ 0x24
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	60f8      	str	r0, [r7, #12]
 80039b4:	60b9      	str	r1, [r7, #8]
 80039b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	f003 0307 	and.w	r3, r3, #7
 80039be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80039c0:	69fb      	ldr	r3, [r7, #28]
 80039c2:	f1c3 0307 	rsb	r3, r3, #7
 80039c6:	2b04      	cmp	r3, #4
 80039c8:	bf28      	it	cs
 80039ca:	2304      	movcs	r3, #4
 80039cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80039ce:	69fb      	ldr	r3, [r7, #28]
 80039d0:	3304      	adds	r3, #4
 80039d2:	2b06      	cmp	r3, #6
 80039d4:	d902      	bls.n	80039dc <NVIC_EncodePriority+0x30>
 80039d6:	69fb      	ldr	r3, [r7, #28]
 80039d8:	3b03      	subs	r3, #3
 80039da:	e000      	b.n	80039de <NVIC_EncodePriority+0x32>
 80039dc:	2300      	movs	r3, #0
 80039de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80039e0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80039e4:	69bb      	ldr	r3, [r7, #24]
 80039e6:	fa02 f303 	lsl.w	r3, r2, r3
 80039ea:	43da      	mvns	r2, r3
 80039ec:	68bb      	ldr	r3, [r7, #8]
 80039ee:	401a      	ands	r2, r3
 80039f0:	697b      	ldr	r3, [r7, #20]
 80039f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80039f4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80039f8:	697b      	ldr	r3, [r7, #20]
 80039fa:	fa01 f303 	lsl.w	r3, r1, r3
 80039fe:	43d9      	mvns	r1, r3
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a04:	4313      	orrs	r3, r2
         );
}
 8003a06:	4618      	mov	r0, r3
 8003a08:	3724      	adds	r7, #36	@ 0x24
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a10:	4770      	bx	lr
	...

08003a14 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003a14:	b580      	push	{r7, lr}
 8003a16:	b082      	sub	sp, #8
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	3b01      	subs	r3, #1
 8003a20:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003a24:	d301      	bcc.n	8003a2a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003a26:	2301      	movs	r3, #1
 8003a28:	e00f      	b.n	8003a4a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003a2a:	4a0a      	ldr	r2, [pc, #40]	@ (8003a54 <SysTick_Config+0x40>)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	3b01      	subs	r3, #1
 8003a30:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003a32:	210f      	movs	r1, #15
 8003a34:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003a38:	f7ff ff8e 	bl	8003958 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003a3c:	4b05      	ldr	r3, [pc, #20]	@ (8003a54 <SysTick_Config+0x40>)
 8003a3e:	2200      	movs	r2, #0
 8003a40:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003a42:	4b04      	ldr	r3, [pc, #16]	@ (8003a54 <SysTick_Config+0x40>)
 8003a44:	2207      	movs	r2, #7
 8003a46:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003a48:	2300      	movs	r3, #0
}
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	3708      	adds	r7, #8
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	bd80      	pop	{r7, pc}
 8003a52:	bf00      	nop
 8003a54:	e000e010 	.word	0xe000e010

08003a58 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b082      	sub	sp, #8
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003a60:	6878      	ldr	r0, [r7, #4]
 8003a62:	f7ff ff29 	bl	80038b8 <__NVIC_SetPriorityGrouping>
}
 8003a66:	bf00      	nop
 8003a68:	3708      	adds	r7, #8
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	bd80      	pop	{r7, pc}

08003a6e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003a6e:	b580      	push	{r7, lr}
 8003a70:	b086      	sub	sp, #24
 8003a72:	af00      	add	r7, sp, #0
 8003a74:	4603      	mov	r3, r0
 8003a76:	60b9      	str	r1, [r7, #8]
 8003a78:	607a      	str	r2, [r7, #4]
 8003a7a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003a7c:	2300      	movs	r3, #0
 8003a7e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003a80:	f7ff ff3e 	bl	8003900 <__NVIC_GetPriorityGrouping>
 8003a84:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003a86:	687a      	ldr	r2, [r7, #4]
 8003a88:	68b9      	ldr	r1, [r7, #8]
 8003a8a:	6978      	ldr	r0, [r7, #20]
 8003a8c:	f7ff ff8e 	bl	80039ac <NVIC_EncodePriority>
 8003a90:	4602      	mov	r2, r0
 8003a92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a96:	4611      	mov	r1, r2
 8003a98:	4618      	mov	r0, r3
 8003a9a:	f7ff ff5d 	bl	8003958 <__NVIC_SetPriority>
}
 8003a9e:	bf00      	nop
 8003aa0:	3718      	adds	r7, #24
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	bd80      	pop	{r7, pc}

08003aa6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003aa6:	b580      	push	{r7, lr}
 8003aa8:	b082      	sub	sp, #8
 8003aaa:	af00      	add	r7, sp, #0
 8003aac:	4603      	mov	r3, r0
 8003aae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003ab0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	f7ff ff31 	bl	800391c <__NVIC_EnableIRQ>
}
 8003aba:	bf00      	nop
 8003abc:	3708      	adds	r7, #8
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	bd80      	pop	{r7, pc}

08003ac2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003ac2:	b580      	push	{r7, lr}
 8003ac4:	b082      	sub	sp, #8
 8003ac6:	af00      	add	r7, sp, #0
 8003ac8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003aca:	6878      	ldr	r0, [r7, #4]
 8003acc:	f7ff ffa2 	bl	8003a14 <SysTick_Config>
 8003ad0:	4603      	mov	r3, r0
}
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	3708      	adds	r7, #8
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	bd80      	pop	{r7, pc}
	...

08003adc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b086      	sub	sp, #24
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003ae4:	2300      	movs	r3, #0
 8003ae6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003ae8:	f7fe ff40 	bl	800296c <HAL_GetTick>
 8003aec:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d101      	bne.n	8003af8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003af4:	2301      	movs	r3, #1
 8003af6:	e099      	b.n	8003c2c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2202      	movs	r2, #2
 8003afc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2200      	movs	r2, #0
 8003b04:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	681a      	ldr	r2, [r3, #0]
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f022 0201 	bic.w	r2, r2, #1
 8003b16:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003b18:	e00f      	b.n	8003b3a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003b1a:	f7fe ff27 	bl	800296c <HAL_GetTick>
 8003b1e:	4602      	mov	r2, r0
 8003b20:	693b      	ldr	r3, [r7, #16]
 8003b22:	1ad3      	subs	r3, r2, r3
 8003b24:	2b05      	cmp	r3, #5
 8003b26:	d908      	bls.n	8003b3a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2220      	movs	r2, #32
 8003b2c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	2203      	movs	r2, #3
 8003b32:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8003b36:	2303      	movs	r3, #3
 8003b38:	e078      	b.n	8003c2c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f003 0301 	and.w	r3, r3, #1
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d1e8      	bne.n	8003b1a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003b50:	697a      	ldr	r2, [r7, #20]
 8003b52:	4b38      	ldr	r3, [pc, #224]	@ (8003c34 <HAL_DMA_Init+0x158>)
 8003b54:	4013      	ands	r3, r2
 8003b56:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	685a      	ldr	r2, [r3, #4]
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	689b      	ldr	r3, [r3, #8]
 8003b60:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003b66:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	691b      	ldr	r3, [r3, #16]
 8003b6c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003b72:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	699b      	ldr	r3, [r3, #24]
 8003b78:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003b7e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	6a1b      	ldr	r3, [r3, #32]
 8003b84:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003b86:	697a      	ldr	r2, [r7, #20]
 8003b88:	4313      	orrs	r3, r2
 8003b8a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b90:	2b04      	cmp	r3, #4
 8003b92:	d107      	bne.n	8003ba4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b9c:	4313      	orrs	r3, r2
 8003b9e:	697a      	ldr	r2, [r7, #20]
 8003ba0:	4313      	orrs	r3, r2
 8003ba2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	697a      	ldr	r2, [r7, #20]
 8003baa:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	695b      	ldr	r3, [r3, #20]
 8003bb2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003bb4:	697b      	ldr	r3, [r7, #20]
 8003bb6:	f023 0307 	bic.w	r3, r3, #7
 8003bba:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bc0:	697a      	ldr	r2, [r7, #20]
 8003bc2:	4313      	orrs	r3, r2
 8003bc4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bca:	2b04      	cmp	r3, #4
 8003bcc:	d117      	bne.n	8003bfe <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bd2:	697a      	ldr	r2, [r7, #20]
 8003bd4:	4313      	orrs	r3, r2
 8003bd6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d00e      	beq.n	8003bfe <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003be0:	6878      	ldr	r0, [r7, #4]
 8003be2:	f000 fb01 	bl	80041e8 <DMA_CheckFifoParam>
 8003be6:	4603      	mov	r3, r0
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d008      	beq.n	8003bfe <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2240      	movs	r2, #64	@ 0x40
 8003bf0:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	2201      	movs	r2, #1
 8003bf6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8003bfa:	2301      	movs	r3, #1
 8003bfc:	e016      	b.n	8003c2c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	697a      	ldr	r2, [r7, #20]
 8003c04:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003c06:	6878      	ldr	r0, [r7, #4]
 8003c08:	f000 fab8 	bl	800417c <DMA_CalcBaseAndBitshift>
 8003c0c:	4603      	mov	r3, r0
 8003c0e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c14:	223f      	movs	r2, #63	@ 0x3f
 8003c16:	409a      	lsls	r2, r3
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2200      	movs	r2, #0
 8003c20:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	2201      	movs	r2, #1
 8003c26:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8003c2a:	2300      	movs	r3, #0
}
 8003c2c:	4618      	mov	r0, r3
 8003c2e:	3718      	adds	r7, #24
 8003c30:	46bd      	mov	sp, r7
 8003c32:	bd80      	pop	{r7, pc}
 8003c34:	f010803f 	.word	0xf010803f

08003c38 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	b086      	sub	sp, #24
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	60f8      	str	r0, [r7, #12]
 8003c40:	60b9      	str	r1, [r7, #8]
 8003c42:	607a      	str	r2, [r7, #4]
 8003c44:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003c46:	2300      	movs	r3, #0
 8003c48:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c4e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003c56:	2b01      	cmp	r3, #1
 8003c58:	d101      	bne.n	8003c5e <HAL_DMA_Start_IT+0x26>
 8003c5a:	2302      	movs	r3, #2
 8003c5c:	e040      	b.n	8003ce0 <HAL_DMA_Start_IT+0xa8>
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	2201      	movs	r2, #1
 8003c62:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003c6c:	b2db      	uxtb	r3, r3
 8003c6e:	2b01      	cmp	r3, #1
 8003c70:	d12f      	bne.n	8003cd2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	2202      	movs	r2, #2
 8003c76:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	687a      	ldr	r2, [r7, #4]
 8003c84:	68b9      	ldr	r1, [r7, #8]
 8003c86:	68f8      	ldr	r0, [r7, #12]
 8003c88:	f000 fa4a 	bl	8004120 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c90:	223f      	movs	r2, #63	@ 0x3f
 8003c92:	409a      	lsls	r2, r3
 8003c94:	693b      	ldr	r3, [r7, #16]
 8003c96:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	681a      	ldr	r2, [r3, #0]
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f042 0216 	orr.w	r2, r2, #22
 8003ca6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d007      	beq.n	8003cc0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	681a      	ldr	r2, [r3, #0]
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f042 0208 	orr.w	r2, r2, #8
 8003cbe:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	681a      	ldr	r2, [r3, #0]
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f042 0201 	orr.w	r2, r2, #1
 8003cce:	601a      	str	r2, [r3, #0]
 8003cd0:	e005      	b.n	8003cde <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003cda:	2302      	movs	r3, #2
 8003cdc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003cde:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	3718      	adds	r7, #24
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	bd80      	pop	{r7, pc}

08003ce8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	b084      	sub	sp, #16
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003cf4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003cf6:	f7fe fe39 	bl	800296c <HAL_GetTick>
 8003cfa:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003d02:	b2db      	uxtb	r3, r3
 8003d04:	2b02      	cmp	r3, #2
 8003d06:	d008      	beq.n	8003d1a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2280      	movs	r2, #128	@ 0x80
 8003d0c:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	2200      	movs	r2, #0
 8003d12:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8003d16:	2301      	movs	r3, #1
 8003d18:	e052      	b.n	8003dc0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	681a      	ldr	r2, [r3, #0]
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f022 0216 	bic.w	r2, r2, #22
 8003d28:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	695a      	ldr	r2, [r3, #20]
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003d38:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d103      	bne.n	8003d4a <HAL_DMA_Abort+0x62>
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d007      	beq.n	8003d5a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	681a      	ldr	r2, [r3, #0]
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f022 0208 	bic.w	r2, r2, #8
 8003d58:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	681a      	ldr	r2, [r3, #0]
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f022 0201 	bic.w	r2, r2, #1
 8003d68:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003d6a:	e013      	b.n	8003d94 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003d6c:	f7fe fdfe 	bl	800296c <HAL_GetTick>
 8003d70:	4602      	mov	r2, r0
 8003d72:	68bb      	ldr	r3, [r7, #8]
 8003d74:	1ad3      	subs	r3, r2, r3
 8003d76:	2b05      	cmp	r3, #5
 8003d78:	d90c      	bls.n	8003d94 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	2220      	movs	r2, #32
 8003d7e:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2203      	movs	r2, #3
 8003d84:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8003d90:	2303      	movs	r3, #3
 8003d92:	e015      	b.n	8003dc0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f003 0301 	and.w	r3, r3, #1
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d1e4      	bne.n	8003d6c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003da6:	223f      	movs	r2, #63	@ 0x3f
 8003da8:	409a      	lsls	r2, r3
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	2201      	movs	r2, #1
 8003db2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	2200      	movs	r2, #0
 8003dba:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8003dbe:	2300      	movs	r3, #0
}
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	3710      	adds	r7, #16
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	bd80      	pop	{r7, pc}

08003dc8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003dc8:	b480      	push	{r7}
 8003dca:	b083      	sub	sp, #12
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003dd6:	b2db      	uxtb	r3, r3
 8003dd8:	2b02      	cmp	r3, #2
 8003dda:	d004      	beq.n	8003de6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2280      	movs	r2, #128	@ 0x80
 8003de0:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8003de2:	2301      	movs	r3, #1
 8003de4:	e00c      	b.n	8003e00 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	2205      	movs	r2, #5
 8003dea:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	681a      	ldr	r2, [r3, #0]
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f022 0201 	bic.w	r2, r2, #1
 8003dfc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003dfe:	2300      	movs	r3, #0
}
 8003e00:	4618      	mov	r0, r3
 8003e02:	370c      	adds	r7, #12
 8003e04:	46bd      	mov	sp, r7
 8003e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0a:	4770      	bx	lr

08003e0c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b086      	sub	sp, #24
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003e14:	2300      	movs	r3, #0
 8003e16:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003e18:	4b8e      	ldr	r3, [pc, #568]	@ (8004054 <HAL_DMA_IRQHandler+0x248>)
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	4a8e      	ldr	r2, [pc, #568]	@ (8004058 <HAL_DMA_IRQHandler+0x24c>)
 8003e1e:	fba2 2303 	umull	r2, r3, r2, r3
 8003e22:	0a9b      	lsrs	r3, r3, #10
 8003e24:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e2a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003e2c:	693b      	ldr	r3, [r7, #16]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e36:	2208      	movs	r2, #8
 8003e38:	409a      	lsls	r2, r3
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	4013      	ands	r3, r2
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d01a      	beq.n	8003e78 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f003 0304 	and.w	r3, r3, #4
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d013      	beq.n	8003e78 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	681a      	ldr	r2, [r3, #0]
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f022 0204 	bic.w	r2, r2, #4
 8003e5e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e64:	2208      	movs	r2, #8
 8003e66:	409a      	lsls	r2, r3
 8003e68:	693b      	ldr	r3, [r7, #16]
 8003e6a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e70:	f043 0201 	orr.w	r2, r3, #1
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e7c:	2201      	movs	r2, #1
 8003e7e:	409a      	lsls	r2, r3
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	4013      	ands	r3, r2
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d012      	beq.n	8003eae <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	695b      	ldr	r3, [r3, #20]
 8003e8e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d00b      	beq.n	8003eae <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e9a:	2201      	movs	r2, #1
 8003e9c:	409a      	lsls	r2, r3
 8003e9e:	693b      	ldr	r3, [r7, #16]
 8003ea0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ea6:	f043 0202 	orr.w	r2, r3, #2
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003eb2:	2204      	movs	r2, #4
 8003eb4:	409a      	lsls	r2, r3
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	4013      	ands	r3, r2
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d012      	beq.n	8003ee4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f003 0302 	and.w	r3, r3, #2
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d00b      	beq.n	8003ee4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ed0:	2204      	movs	r2, #4
 8003ed2:	409a      	lsls	r2, r3
 8003ed4:	693b      	ldr	r3, [r7, #16]
 8003ed6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003edc:	f043 0204 	orr.w	r2, r3, #4
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ee8:	2210      	movs	r2, #16
 8003eea:	409a      	lsls	r2, r3
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	4013      	ands	r3, r2
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d043      	beq.n	8003f7c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f003 0308 	and.w	r3, r3, #8
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d03c      	beq.n	8003f7c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f06:	2210      	movs	r2, #16
 8003f08:	409a      	lsls	r2, r3
 8003f0a:	693b      	ldr	r3, [r7, #16]
 8003f0c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d018      	beq.n	8003f4e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d108      	bne.n	8003f3c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d024      	beq.n	8003f7c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f36:	6878      	ldr	r0, [r7, #4]
 8003f38:	4798      	blx	r3
 8003f3a:	e01f      	b.n	8003f7c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d01b      	beq.n	8003f7c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003f48:	6878      	ldr	r0, [r7, #4]
 8003f4a:	4798      	blx	r3
 8003f4c:	e016      	b.n	8003f7c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d107      	bne.n	8003f6c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	681a      	ldr	r2, [r3, #0]
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f022 0208 	bic.w	r2, r2, #8
 8003f6a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d003      	beq.n	8003f7c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f78:	6878      	ldr	r0, [r7, #4]
 8003f7a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f80:	2220      	movs	r2, #32
 8003f82:	409a      	lsls	r2, r3
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	4013      	ands	r3, r2
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	f000 808f 	beq.w	80040ac <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f003 0310 	and.w	r3, r3, #16
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	f000 8087 	beq.w	80040ac <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003fa2:	2220      	movs	r2, #32
 8003fa4:	409a      	lsls	r2, r3
 8003fa6:	693b      	ldr	r3, [r7, #16]
 8003fa8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003fb0:	b2db      	uxtb	r3, r3
 8003fb2:	2b05      	cmp	r3, #5
 8003fb4:	d136      	bne.n	8004024 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	681a      	ldr	r2, [r3, #0]
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f022 0216 	bic.w	r2, r2, #22
 8003fc4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	695a      	ldr	r2, [r3, #20]
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003fd4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d103      	bne.n	8003fe6 <HAL_DMA_IRQHandler+0x1da>
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d007      	beq.n	8003ff6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	681a      	ldr	r2, [r3, #0]
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f022 0208 	bic.w	r2, r2, #8
 8003ff4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ffa:	223f      	movs	r2, #63	@ 0x3f
 8003ffc:	409a      	lsls	r2, r3
 8003ffe:	693b      	ldr	r3, [r7, #16]
 8004000:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	2201      	movs	r2, #1
 8004006:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	2200      	movs	r2, #0
 800400e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004016:	2b00      	cmp	r3, #0
 8004018:	d07e      	beq.n	8004118 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800401e:	6878      	ldr	r0, [r7, #4]
 8004020:	4798      	blx	r3
        }
        return;
 8004022:	e079      	b.n	8004118 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800402e:	2b00      	cmp	r3, #0
 8004030:	d01d      	beq.n	800406e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800403c:	2b00      	cmp	r3, #0
 800403e:	d10d      	bne.n	800405c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004044:	2b00      	cmp	r3, #0
 8004046:	d031      	beq.n	80040ac <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800404c:	6878      	ldr	r0, [r7, #4]
 800404e:	4798      	blx	r3
 8004050:	e02c      	b.n	80040ac <HAL_DMA_IRQHandler+0x2a0>
 8004052:	bf00      	nop
 8004054:	20000000 	.word	0x20000000
 8004058:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004060:	2b00      	cmp	r3, #0
 8004062:	d023      	beq.n	80040ac <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004068:	6878      	ldr	r0, [r7, #4]
 800406a:	4798      	blx	r3
 800406c:	e01e      	b.n	80040ac <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004078:	2b00      	cmp	r3, #0
 800407a:	d10f      	bne.n	800409c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	681a      	ldr	r2, [r3, #0]
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f022 0210 	bic.w	r2, r2, #16
 800408a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2201      	movs	r2, #1
 8004090:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2200      	movs	r2, #0
 8004098:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d003      	beq.n	80040ac <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040a8:	6878      	ldr	r0, [r7, #4]
 80040aa:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d032      	beq.n	800411a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80040b8:	f003 0301 	and.w	r3, r3, #1
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d022      	beq.n	8004106 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2205      	movs	r2, #5
 80040c4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	681a      	ldr	r2, [r3, #0]
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f022 0201 	bic.w	r2, r2, #1
 80040d6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80040d8:	68bb      	ldr	r3, [r7, #8]
 80040da:	3301      	adds	r3, #1
 80040dc:	60bb      	str	r3, [r7, #8]
 80040de:	697a      	ldr	r2, [r7, #20]
 80040e0:	429a      	cmp	r2, r3
 80040e2:	d307      	bcc.n	80040f4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f003 0301 	and.w	r3, r3, #1
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d1f2      	bne.n	80040d8 <HAL_DMA_IRQHandler+0x2cc>
 80040f2:	e000      	b.n	80040f6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80040f4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	2201      	movs	r2, #1
 80040fa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	2200      	movs	r2, #0
 8004102:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800410a:	2b00      	cmp	r3, #0
 800410c:	d005      	beq.n	800411a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004112:	6878      	ldr	r0, [r7, #4]
 8004114:	4798      	blx	r3
 8004116:	e000      	b.n	800411a <HAL_DMA_IRQHandler+0x30e>
        return;
 8004118:	bf00      	nop
    }
  }
}
 800411a:	3718      	adds	r7, #24
 800411c:	46bd      	mov	sp, r7
 800411e:	bd80      	pop	{r7, pc}

08004120 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004120:	b480      	push	{r7}
 8004122:	b085      	sub	sp, #20
 8004124:	af00      	add	r7, sp, #0
 8004126:	60f8      	str	r0, [r7, #12]
 8004128:	60b9      	str	r1, [r7, #8]
 800412a:	607a      	str	r2, [r7, #4]
 800412c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	681a      	ldr	r2, [r3, #0]
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800413c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	683a      	ldr	r2, [r7, #0]
 8004144:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	689b      	ldr	r3, [r3, #8]
 800414a:	2b40      	cmp	r3, #64	@ 0x40
 800414c:	d108      	bne.n	8004160 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	687a      	ldr	r2, [r7, #4]
 8004154:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	68ba      	ldr	r2, [r7, #8]
 800415c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800415e:	e007      	b.n	8004170 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	68ba      	ldr	r2, [r7, #8]
 8004166:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	687a      	ldr	r2, [r7, #4]
 800416e:	60da      	str	r2, [r3, #12]
}
 8004170:	bf00      	nop
 8004172:	3714      	adds	r7, #20
 8004174:	46bd      	mov	sp, r7
 8004176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417a:	4770      	bx	lr

0800417c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800417c:	b480      	push	{r7}
 800417e:	b085      	sub	sp, #20
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	b2db      	uxtb	r3, r3
 800418a:	3b10      	subs	r3, #16
 800418c:	4a14      	ldr	r2, [pc, #80]	@ (80041e0 <DMA_CalcBaseAndBitshift+0x64>)
 800418e:	fba2 2303 	umull	r2, r3, r2, r3
 8004192:	091b      	lsrs	r3, r3, #4
 8004194:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004196:	4a13      	ldr	r2, [pc, #76]	@ (80041e4 <DMA_CalcBaseAndBitshift+0x68>)
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	4413      	add	r3, r2
 800419c:	781b      	ldrb	r3, [r3, #0]
 800419e:	461a      	mov	r2, r3
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	2b03      	cmp	r3, #3
 80041a8:	d909      	bls.n	80041be <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80041b2:	f023 0303 	bic.w	r3, r3, #3
 80041b6:	1d1a      	adds	r2, r3, #4
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	659a      	str	r2, [r3, #88]	@ 0x58
 80041bc:	e007      	b.n	80041ce <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80041c6:	f023 0303 	bic.w	r3, r3, #3
 80041ca:	687a      	ldr	r2, [r7, #4]
 80041cc:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80041d2:	4618      	mov	r0, r3
 80041d4:	3714      	adds	r7, #20
 80041d6:	46bd      	mov	sp, r7
 80041d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041dc:	4770      	bx	lr
 80041de:	bf00      	nop
 80041e0:	aaaaaaab 	.word	0xaaaaaaab
 80041e4:	0800bc98 	.word	0x0800bc98

080041e8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80041e8:	b480      	push	{r7}
 80041ea:	b085      	sub	sp, #20
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80041f0:	2300      	movs	r3, #0
 80041f2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041f8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	699b      	ldr	r3, [r3, #24]
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d11f      	bne.n	8004242 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004202:	68bb      	ldr	r3, [r7, #8]
 8004204:	2b03      	cmp	r3, #3
 8004206:	d856      	bhi.n	80042b6 <DMA_CheckFifoParam+0xce>
 8004208:	a201      	add	r2, pc, #4	@ (adr r2, 8004210 <DMA_CheckFifoParam+0x28>)
 800420a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800420e:	bf00      	nop
 8004210:	08004221 	.word	0x08004221
 8004214:	08004233 	.word	0x08004233
 8004218:	08004221 	.word	0x08004221
 800421c:	080042b7 	.word	0x080042b7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004224:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004228:	2b00      	cmp	r3, #0
 800422a:	d046      	beq.n	80042ba <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800422c:	2301      	movs	r3, #1
 800422e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004230:	e043      	b.n	80042ba <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004236:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800423a:	d140      	bne.n	80042be <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800423c:	2301      	movs	r3, #1
 800423e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004240:	e03d      	b.n	80042be <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	699b      	ldr	r3, [r3, #24]
 8004246:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800424a:	d121      	bne.n	8004290 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800424c:	68bb      	ldr	r3, [r7, #8]
 800424e:	2b03      	cmp	r3, #3
 8004250:	d837      	bhi.n	80042c2 <DMA_CheckFifoParam+0xda>
 8004252:	a201      	add	r2, pc, #4	@ (adr r2, 8004258 <DMA_CheckFifoParam+0x70>)
 8004254:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004258:	08004269 	.word	0x08004269
 800425c:	0800426f 	.word	0x0800426f
 8004260:	08004269 	.word	0x08004269
 8004264:	08004281 	.word	0x08004281
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004268:	2301      	movs	r3, #1
 800426a:	73fb      	strb	r3, [r7, #15]
      break;
 800426c:	e030      	b.n	80042d0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004272:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004276:	2b00      	cmp	r3, #0
 8004278:	d025      	beq.n	80042c6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800427a:	2301      	movs	r3, #1
 800427c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800427e:	e022      	b.n	80042c6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004284:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004288:	d11f      	bne.n	80042ca <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800428a:	2301      	movs	r3, #1
 800428c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800428e:	e01c      	b.n	80042ca <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004290:	68bb      	ldr	r3, [r7, #8]
 8004292:	2b02      	cmp	r3, #2
 8004294:	d903      	bls.n	800429e <DMA_CheckFifoParam+0xb6>
 8004296:	68bb      	ldr	r3, [r7, #8]
 8004298:	2b03      	cmp	r3, #3
 800429a:	d003      	beq.n	80042a4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800429c:	e018      	b.n	80042d0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800429e:	2301      	movs	r3, #1
 80042a0:	73fb      	strb	r3, [r7, #15]
      break;
 80042a2:	e015      	b.n	80042d0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042a8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d00e      	beq.n	80042ce <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80042b0:	2301      	movs	r3, #1
 80042b2:	73fb      	strb	r3, [r7, #15]
      break;
 80042b4:	e00b      	b.n	80042ce <DMA_CheckFifoParam+0xe6>
      break;
 80042b6:	bf00      	nop
 80042b8:	e00a      	b.n	80042d0 <DMA_CheckFifoParam+0xe8>
      break;
 80042ba:	bf00      	nop
 80042bc:	e008      	b.n	80042d0 <DMA_CheckFifoParam+0xe8>
      break;
 80042be:	bf00      	nop
 80042c0:	e006      	b.n	80042d0 <DMA_CheckFifoParam+0xe8>
      break;
 80042c2:	bf00      	nop
 80042c4:	e004      	b.n	80042d0 <DMA_CheckFifoParam+0xe8>
      break;
 80042c6:	bf00      	nop
 80042c8:	e002      	b.n	80042d0 <DMA_CheckFifoParam+0xe8>
      break;   
 80042ca:	bf00      	nop
 80042cc:	e000      	b.n	80042d0 <DMA_CheckFifoParam+0xe8>
      break;
 80042ce:	bf00      	nop
    }
  } 
  
  return status; 
 80042d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80042d2:	4618      	mov	r0, r3
 80042d4:	3714      	adds	r7, #20
 80042d6:	46bd      	mov	sp, r7
 80042d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042dc:	4770      	bx	lr
 80042de:	bf00      	nop

080042e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80042e0:	b480      	push	{r7}
 80042e2:	b089      	sub	sp, #36	@ 0x24
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	6078      	str	r0, [r7, #4]
 80042e8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80042ea:	2300      	movs	r3, #0
 80042ec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80042ee:	2300      	movs	r3, #0
 80042f0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80042f2:	2300      	movs	r3, #0
 80042f4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80042f6:	2300      	movs	r3, #0
 80042f8:	61fb      	str	r3, [r7, #28]
 80042fa:	e159      	b.n	80045b0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80042fc:	2201      	movs	r2, #1
 80042fe:	69fb      	ldr	r3, [r7, #28]
 8004300:	fa02 f303 	lsl.w	r3, r2, r3
 8004304:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004306:	683b      	ldr	r3, [r7, #0]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	697a      	ldr	r2, [r7, #20]
 800430c:	4013      	ands	r3, r2
 800430e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004310:	693a      	ldr	r2, [r7, #16]
 8004312:	697b      	ldr	r3, [r7, #20]
 8004314:	429a      	cmp	r2, r3
 8004316:	f040 8148 	bne.w	80045aa <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800431a:	683b      	ldr	r3, [r7, #0]
 800431c:	685b      	ldr	r3, [r3, #4]
 800431e:	f003 0303 	and.w	r3, r3, #3
 8004322:	2b01      	cmp	r3, #1
 8004324:	d005      	beq.n	8004332 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004326:	683b      	ldr	r3, [r7, #0]
 8004328:	685b      	ldr	r3, [r3, #4]
 800432a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800432e:	2b02      	cmp	r3, #2
 8004330:	d130      	bne.n	8004394 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	689b      	ldr	r3, [r3, #8]
 8004336:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004338:	69fb      	ldr	r3, [r7, #28]
 800433a:	005b      	lsls	r3, r3, #1
 800433c:	2203      	movs	r2, #3
 800433e:	fa02 f303 	lsl.w	r3, r2, r3
 8004342:	43db      	mvns	r3, r3
 8004344:	69ba      	ldr	r2, [r7, #24]
 8004346:	4013      	ands	r3, r2
 8004348:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800434a:	683b      	ldr	r3, [r7, #0]
 800434c:	68da      	ldr	r2, [r3, #12]
 800434e:	69fb      	ldr	r3, [r7, #28]
 8004350:	005b      	lsls	r3, r3, #1
 8004352:	fa02 f303 	lsl.w	r3, r2, r3
 8004356:	69ba      	ldr	r2, [r7, #24]
 8004358:	4313      	orrs	r3, r2
 800435a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	69ba      	ldr	r2, [r7, #24]
 8004360:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	685b      	ldr	r3, [r3, #4]
 8004366:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004368:	2201      	movs	r2, #1
 800436a:	69fb      	ldr	r3, [r7, #28]
 800436c:	fa02 f303 	lsl.w	r3, r2, r3
 8004370:	43db      	mvns	r3, r3
 8004372:	69ba      	ldr	r2, [r7, #24]
 8004374:	4013      	ands	r3, r2
 8004376:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004378:	683b      	ldr	r3, [r7, #0]
 800437a:	685b      	ldr	r3, [r3, #4]
 800437c:	091b      	lsrs	r3, r3, #4
 800437e:	f003 0201 	and.w	r2, r3, #1
 8004382:	69fb      	ldr	r3, [r7, #28]
 8004384:	fa02 f303 	lsl.w	r3, r2, r3
 8004388:	69ba      	ldr	r2, [r7, #24]
 800438a:	4313      	orrs	r3, r2
 800438c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	69ba      	ldr	r2, [r7, #24]
 8004392:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004394:	683b      	ldr	r3, [r7, #0]
 8004396:	685b      	ldr	r3, [r3, #4]
 8004398:	f003 0303 	and.w	r3, r3, #3
 800439c:	2b03      	cmp	r3, #3
 800439e:	d017      	beq.n	80043d0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	68db      	ldr	r3, [r3, #12]
 80043a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80043a6:	69fb      	ldr	r3, [r7, #28]
 80043a8:	005b      	lsls	r3, r3, #1
 80043aa:	2203      	movs	r2, #3
 80043ac:	fa02 f303 	lsl.w	r3, r2, r3
 80043b0:	43db      	mvns	r3, r3
 80043b2:	69ba      	ldr	r2, [r7, #24]
 80043b4:	4013      	ands	r3, r2
 80043b6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80043b8:	683b      	ldr	r3, [r7, #0]
 80043ba:	689a      	ldr	r2, [r3, #8]
 80043bc:	69fb      	ldr	r3, [r7, #28]
 80043be:	005b      	lsls	r3, r3, #1
 80043c0:	fa02 f303 	lsl.w	r3, r2, r3
 80043c4:	69ba      	ldr	r2, [r7, #24]
 80043c6:	4313      	orrs	r3, r2
 80043c8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	69ba      	ldr	r2, [r7, #24]
 80043ce:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	685b      	ldr	r3, [r3, #4]
 80043d4:	f003 0303 	and.w	r3, r3, #3
 80043d8:	2b02      	cmp	r3, #2
 80043da:	d123      	bne.n	8004424 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80043dc:	69fb      	ldr	r3, [r7, #28]
 80043de:	08da      	lsrs	r2, r3, #3
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	3208      	adds	r2, #8
 80043e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80043e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80043ea:	69fb      	ldr	r3, [r7, #28]
 80043ec:	f003 0307 	and.w	r3, r3, #7
 80043f0:	009b      	lsls	r3, r3, #2
 80043f2:	220f      	movs	r2, #15
 80043f4:	fa02 f303 	lsl.w	r3, r2, r3
 80043f8:	43db      	mvns	r3, r3
 80043fa:	69ba      	ldr	r2, [r7, #24]
 80043fc:	4013      	ands	r3, r2
 80043fe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004400:	683b      	ldr	r3, [r7, #0]
 8004402:	691a      	ldr	r2, [r3, #16]
 8004404:	69fb      	ldr	r3, [r7, #28]
 8004406:	f003 0307 	and.w	r3, r3, #7
 800440a:	009b      	lsls	r3, r3, #2
 800440c:	fa02 f303 	lsl.w	r3, r2, r3
 8004410:	69ba      	ldr	r2, [r7, #24]
 8004412:	4313      	orrs	r3, r2
 8004414:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004416:	69fb      	ldr	r3, [r7, #28]
 8004418:	08da      	lsrs	r2, r3, #3
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	3208      	adds	r2, #8
 800441e:	69b9      	ldr	r1, [r7, #24]
 8004420:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800442a:	69fb      	ldr	r3, [r7, #28]
 800442c:	005b      	lsls	r3, r3, #1
 800442e:	2203      	movs	r2, #3
 8004430:	fa02 f303 	lsl.w	r3, r2, r3
 8004434:	43db      	mvns	r3, r3
 8004436:	69ba      	ldr	r2, [r7, #24]
 8004438:	4013      	ands	r3, r2
 800443a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800443c:	683b      	ldr	r3, [r7, #0]
 800443e:	685b      	ldr	r3, [r3, #4]
 8004440:	f003 0203 	and.w	r2, r3, #3
 8004444:	69fb      	ldr	r3, [r7, #28]
 8004446:	005b      	lsls	r3, r3, #1
 8004448:	fa02 f303 	lsl.w	r3, r2, r3
 800444c:	69ba      	ldr	r2, [r7, #24]
 800444e:	4313      	orrs	r3, r2
 8004450:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	69ba      	ldr	r2, [r7, #24]
 8004456:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004458:	683b      	ldr	r3, [r7, #0]
 800445a:	685b      	ldr	r3, [r3, #4]
 800445c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004460:	2b00      	cmp	r3, #0
 8004462:	f000 80a2 	beq.w	80045aa <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004466:	2300      	movs	r3, #0
 8004468:	60fb      	str	r3, [r7, #12]
 800446a:	4b57      	ldr	r3, [pc, #348]	@ (80045c8 <HAL_GPIO_Init+0x2e8>)
 800446c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800446e:	4a56      	ldr	r2, [pc, #344]	@ (80045c8 <HAL_GPIO_Init+0x2e8>)
 8004470:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004474:	6453      	str	r3, [r2, #68]	@ 0x44
 8004476:	4b54      	ldr	r3, [pc, #336]	@ (80045c8 <HAL_GPIO_Init+0x2e8>)
 8004478:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800447a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800447e:	60fb      	str	r3, [r7, #12]
 8004480:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004482:	4a52      	ldr	r2, [pc, #328]	@ (80045cc <HAL_GPIO_Init+0x2ec>)
 8004484:	69fb      	ldr	r3, [r7, #28]
 8004486:	089b      	lsrs	r3, r3, #2
 8004488:	3302      	adds	r3, #2
 800448a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800448e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004490:	69fb      	ldr	r3, [r7, #28]
 8004492:	f003 0303 	and.w	r3, r3, #3
 8004496:	009b      	lsls	r3, r3, #2
 8004498:	220f      	movs	r2, #15
 800449a:	fa02 f303 	lsl.w	r3, r2, r3
 800449e:	43db      	mvns	r3, r3
 80044a0:	69ba      	ldr	r2, [r7, #24]
 80044a2:	4013      	ands	r3, r2
 80044a4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	4a49      	ldr	r2, [pc, #292]	@ (80045d0 <HAL_GPIO_Init+0x2f0>)
 80044aa:	4293      	cmp	r3, r2
 80044ac:	d019      	beq.n	80044e2 <HAL_GPIO_Init+0x202>
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	4a48      	ldr	r2, [pc, #288]	@ (80045d4 <HAL_GPIO_Init+0x2f4>)
 80044b2:	4293      	cmp	r3, r2
 80044b4:	d013      	beq.n	80044de <HAL_GPIO_Init+0x1fe>
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	4a47      	ldr	r2, [pc, #284]	@ (80045d8 <HAL_GPIO_Init+0x2f8>)
 80044ba:	4293      	cmp	r3, r2
 80044bc:	d00d      	beq.n	80044da <HAL_GPIO_Init+0x1fa>
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	4a46      	ldr	r2, [pc, #280]	@ (80045dc <HAL_GPIO_Init+0x2fc>)
 80044c2:	4293      	cmp	r3, r2
 80044c4:	d007      	beq.n	80044d6 <HAL_GPIO_Init+0x1f6>
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	4a45      	ldr	r2, [pc, #276]	@ (80045e0 <HAL_GPIO_Init+0x300>)
 80044ca:	4293      	cmp	r3, r2
 80044cc:	d101      	bne.n	80044d2 <HAL_GPIO_Init+0x1f2>
 80044ce:	2304      	movs	r3, #4
 80044d0:	e008      	b.n	80044e4 <HAL_GPIO_Init+0x204>
 80044d2:	2307      	movs	r3, #7
 80044d4:	e006      	b.n	80044e4 <HAL_GPIO_Init+0x204>
 80044d6:	2303      	movs	r3, #3
 80044d8:	e004      	b.n	80044e4 <HAL_GPIO_Init+0x204>
 80044da:	2302      	movs	r3, #2
 80044dc:	e002      	b.n	80044e4 <HAL_GPIO_Init+0x204>
 80044de:	2301      	movs	r3, #1
 80044e0:	e000      	b.n	80044e4 <HAL_GPIO_Init+0x204>
 80044e2:	2300      	movs	r3, #0
 80044e4:	69fa      	ldr	r2, [r7, #28]
 80044e6:	f002 0203 	and.w	r2, r2, #3
 80044ea:	0092      	lsls	r2, r2, #2
 80044ec:	4093      	lsls	r3, r2
 80044ee:	69ba      	ldr	r2, [r7, #24]
 80044f0:	4313      	orrs	r3, r2
 80044f2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80044f4:	4935      	ldr	r1, [pc, #212]	@ (80045cc <HAL_GPIO_Init+0x2ec>)
 80044f6:	69fb      	ldr	r3, [r7, #28]
 80044f8:	089b      	lsrs	r3, r3, #2
 80044fa:	3302      	adds	r3, #2
 80044fc:	69ba      	ldr	r2, [r7, #24]
 80044fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004502:	4b38      	ldr	r3, [pc, #224]	@ (80045e4 <HAL_GPIO_Init+0x304>)
 8004504:	689b      	ldr	r3, [r3, #8]
 8004506:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004508:	693b      	ldr	r3, [r7, #16]
 800450a:	43db      	mvns	r3, r3
 800450c:	69ba      	ldr	r2, [r7, #24]
 800450e:	4013      	ands	r3, r2
 8004510:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004512:	683b      	ldr	r3, [r7, #0]
 8004514:	685b      	ldr	r3, [r3, #4]
 8004516:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800451a:	2b00      	cmp	r3, #0
 800451c:	d003      	beq.n	8004526 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800451e:	69ba      	ldr	r2, [r7, #24]
 8004520:	693b      	ldr	r3, [r7, #16]
 8004522:	4313      	orrs	r3, r2
 8004524:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004526:	4a2f      	ldr	r2, [pc, #188]	@ (80045e4 <HAL_GPIO_Init+0x304>)
 8004528:	69bb      	ldr	r3, [r7, #24]
 800452a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800452c:	4b2d      	ldr	r3, [pc, #180]	@ (80045e4 <HAL_GPIO_Init+0x304>)
 800452e:	68db      	ldr	r3, [r3, #12]
 8004530:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004532:	693b      	ldr	r3, [r7, #16]
 8004534:	43db      	mvns	r3, r3
 8004536:	69ba      	ldr	r2, [r7, #24]
 8004538:	4013      	ands	r3, r2
 800453a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800453c:	683b      	ldr	r3, [r7, #0]
 800453e:	685b      	ldr	r3, [r3, #4]
 8004540:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004544:	2b00      	cmp	r3, #0
 8004546:	d003      	beq.n	8004550 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8004548:	69ba      	ldr	r2, [r7, #24]
 800454a:	693b      	ldr	r3, [r7, #16]
 800454c:	4313      	orrs	r3, r2
 800454e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004550:	4a24      	ldr	r2, [pc, #144]	@ (80045e4 <HAL_GPIO_Init+0x304>)
 8004552:	69bb      	ldr	r3, [r7, #24]
 8004554:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004556:	4b23      	ldr	r3, [pc, #140]	@ (80045e4 <HAL_GPIO_Init+0x304>)
 8004558:	685b      	ldr	r3, [r3, #4]
 800455a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800455c:	693b      	ldr	r3, [r7, #16]
 800455e:	43db      	mvns	r3, r3
 8004560:	69ba      	ldr	r2, [r7, #24]
 8004562:	4013      	ands	r3, r2
 8004564:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004566:	683b      	ldr	r3, [r7, #0]
 8004568:	685b      	ldr	r3, [r3, #4]
 800456a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800456e:	2b00      	cmp	r3, #0
 8004570:	d003      	beq.n	800457a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8004572:	69ba      	ldr	r2, [r7, #24]
 8004574:	693b      	ldr	r3, [r7, #16]
 8004576:	4313      	orrs	r3, r2
 8004578:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800457a:	4a1a      	ldr	r2, [pc, #104]	@ (80045e4 <HAL_GPIO_Init+0x304>)
 800457c:	69bb      	ldr	r3, [r7, #24]
 800457e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004580:	4b18      	ldr	r3, [pc, #96]	@ (80045e4 <HAL_GPIO_Init+0x304>)
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004586:	693b      	ldr	r3, [r7, #16]
 8004588:	43db      	mvns	r3, r3
 800458a:	69ba      	ldr	r2, [r7, #24]
 800458c:	4013      	ands	r3, r2
 800458e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004590:	683b      	ldr	r3, [r7, #0]
 8004592:	685b      	ldr	r3, [r3, #4]
 8004594:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004598:	2b00      	cmp	r3, #0
 800459a:	d003      	beq.n	80045a4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800459c:	69ba      	ldr	r2, [r7, #24]
 800459e:	693b      	ldr	r3, [r7, #16]
 80045a0:	4313      	orrs	r3, r2
 80045a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80045a4:	4a0f      	ldr	r2, [pc, #60]	@ (80045e4 <HAL_GPIO_Init+0x304>)
 80045a6:	69bb      	ldr	r3, [r7, #24]
 80045a8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80045aa:	69fb      	ldr	r3, [r7, #28]
 80045ac:	3301      	adds	r3, #1
 80045ae:	61fb      	str	r3, [r7, #28]
 80045b0:	69fb      	ldr	r3, [r7, #28]
 80045b2:	2b0f      	cmp	r3, #15
 80045b4:	f67f aea2 	bls.w	80042fc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80045b8:	bf00      	nop
 80045ba:	bf00      	nop
 80045bc:	3724      	adds	r7, #36	@ 0x24
 80045be:	46bd      	mov	sp, r7
 80045c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c4:	4770      	bx	lr
 80045c6:	bf00      	nop
 80045c8:	40023800 	.word	0x40023800
 80045cc:	40013800 	.word	0x40013800
 80045d0:	40020000 	.word	0x40020000
 80045d4:	40020400 	.word	0x40020400
 80045d8:	40020800 	.word	0x40020800
 80045dc:	40020c00 	.word	0x40020c00
 80045e0:	40021000 	.word	0x40021000
 80045e4:	40013c00 	.word	0x40013c00

080045e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80045e8:	b480      	push	{r7}
 80045ea:	b083      	sub	sp, #12
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
 80045f0:	460b      	mov	r3, r1
 80045f2:	807b      	strh	r3, [r7, #2]
 80045f4:	4613      	mov	r3, r2
 80045f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80045f8:	787b      	ldrb	r3, [r7, #1]
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d003      	beq.n	8004606 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80045fe:	887a      	ldrh	r2, [r7, #2]
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004604:	e003      	b.n	800460e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004606:	887b      	ldrh	r3, [r7, #2]
 8004608:	041a      	lsls	r2, r3, #16
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	619a      	str	r2, [r3, #24]
}
 800460e:	bf00      	nop
 8004610:	370c      	adds	r7, #12
 8004612:	46bd      	mov	sp, r7
 8004614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004618:	4770      	bx	lr
	...

0800461c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800461c:	b580      	push	{r7, lr}
 800461e:	b086      	sub	sp, #24
 8004620:	af00      	add	r7, sp, #0
 8004622:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2b00      	cmp	r3, #0
 8004628:	d101      	bne.n	800462e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800462a:	2301      	movs	r3, #1
 800462c:	e267      	b.n	8004afe <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f003 0301 	and.w	r3, r3, #1
 8004636:	2b00      	cmp	r3, #0
 8004638:	d075      	beq.n	8004726 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800463a:	4b88      	ldr	r3, [pc, #544]	@ (800485c <HAL_RCC_OscConfig+0x240>)
 800463c:	689b      	ldr	r3, [r3, #8]
 800463e:	f003 030c 	and.w	r3, r3, #12
 8004642:	2b04      	cmp	r3, #4
 8004644:	d00c      	beq.n	8004660 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004646:	4b85      	ldr	r3, [pc, #532]	@ (800485c <HAL_RCC_OscConfig+0x240>)
 8004648:	689b      	ldr	r3, [r3, #8]
 800464a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800464e:	2b08      	cmp	r3, #8
 8004650:	d112      	bne.n	8004678 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004652:	4b82      	ldr	r3, [pc, #520]	@ (800485c <HAL_RCC_OscConfig+0x240>)
 8004654:	685b      	ldr	r3, [r3, #4]
 8004656:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800465a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800465e:	d10b      	bne.n	8004678 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004660:	4b7e      	ldr	r3, [pc, #504]	@ (800485c <HAL_RCC_OscConfig+0x240>)
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004668:	2b00      	cmp	r3, #0
 800466a:	d05b      	beq.n	8004724 <HAL_RCC_OscConfig+0x108>
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	685b      	ldr	r3, [r3, #4]
 8004670:	2b00      	cmp	r3, #0
 8004672:	d157      	bne.n	8004724 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004674:	2301      	movs	r3, #1
 8004676:	e242      	b.n	8004afe <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	685b      	ldr	r3, [r3, #4]
 800467c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004680:	d106      	bne.n	8004690 <HAL_RCC_OscConfig+0x74>
 8004682:	4b76      	ldr	r3, [pc, #472]	@ (800485c <HAL_RCC_OscConfig+0x240>)
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	4a75      	ldr	r2, [pc, #468]	@ (800485c <HAL_RCC_OscConfig+0x240>)
 8004688:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800468c:	6013      	str	r3, [r2, #0]
 800468e:	e01d      	b.n	80046cc <HAL_RCC_OscConfig+0xb0>
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	685b      	ldr	r3, [r3, #4]
 8004694:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004698:	d10c      	bne.n	80046b4 <HAL_RCC_OscConfig+0x98>
 800469a:	4b70      	ldr	r3, [pc, #448]	@ (800485c <HAL_RCC_OscConfig+0x240>)
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	4a6f      	ldr	r2, [pc, #444]	@ (800485c <HAL_RCC_OscConfig+0x240>)
 80046a0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80046a4:	6013      	str	r3, [r2, #0]
 80046a6:	4b6d      	ldr	r3, [pc, #436]	@ (800485c <HAL_RCC_OscConfig+0x240>)
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	4a6c      	ldr	r2, [pc, #432]	@ (800485c <HAL_RCC_OscConfig+0x240>)
 80046ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80046b0:	6013      	str	r3, [r2, #0]
 80046b2:	e00b      	b.n	80046cc <HAL_RCC_OscConfig+0xb0>
 80046b4:	4b69      	ldr	r3, [pc, #420]	@ (800485c <HAL_RCC_OscConfig+0x240>)
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	4a68      	ldr	r2, [pc, #416]	@ (800485c <HAL_RCC_OscConfig+0x240>)
 80046ba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80046be:	6013      	str	r3, [r2, #0]
 80046c0:	4b66      	ldr	r3, [pc, #408]	@ (800485c <HAL_RCC_OscConfig+0x240>)
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	4a65      	ldr	r2, [pc, #404]	@ (800485c <HAL_RCC_OscConfig+0x240>)
 80046c6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80046ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	685b      	ldr	r3, [r3, #4]
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d013      	beq.n	80046fc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046d4:	f7fe f94a 	bl	800296c <HAL_GetTick>
 80046d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80046da:	e008      	b.n	80046ee <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80046dc:	f7fe f946 	bl	800296c <HAL_GetTick>
 80046e0:	4602      	mov	r2, r0
 80046e2:	693b      	ldr	r3, [r7, #16]
 80046e4:	1ad3      	subs	r3, r2, r3
 80046e6:	2b64      	cmp	r3, #100	@ 0x64
 80046e8:	d901      	bls.n	80046ee <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80046ea:	2303      	movs	r3, #3
 80046ec:	e207      	b.n	8004afe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80046ee:	4b5b      	ldr	r3, [pc, #364]	@ (800485c <HAL_RCC_OscConfig+0x240>)
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d0f0      	beq.n	80046dc <HAL_RCC_OscConfig+0xc0>
 80046fa:	e014      	b.n	8004726 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046fc:	f7fe f936 	bl	800296c <HAL_GetTick>
 8004700:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004702:	e008      	b.n	8004716 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004704:	f7fe f932 	bl	800296c <HAL_GetTick>
 8004708:	4602      	mov	r2, r0
 800470a:	693b      	ldr	r3, [r7, #16]
 800470c:	1ad3      	subs	r3, r2, r3
 800470e:	2b64      	cmp	r3, #100	@ 0x64
 8004710:	d901      	bls.n	8004716 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004712:	2303      	movs	r3, #3
 8004714:	e1f3      	b.n	8004afe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004716:	4b51      	ldr	r3, [pc, #324]	@ (800485c <HAL_RCC_OscConfig+0x240>)
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800471e:	2b00      	cmp	r3, #0
 8004720:	d1f0      	bne.n	8004704 <HAL_RCC_OscConfig+0xe8>
 8004722:	e000      	b.n	8004726 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004724:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f003 0302 	and.w	r3, r3, #2
 800472e:	2b00      	cmp	r3, #0
 8004730:	d063      	beq.n	80047fa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004732:	4b4a      	ldr	r3, [pc, #296]	@ (800485c <HAL_RCC_OscConfig+0x240>)
 8004734:	689b      	ldr	r3, [r3, #8]
 8004736:	f003 030c 	and.w	r3, r3, #12
 800473a:	2b00      	cmp	r3, #0
 800473c:	d00b      	beq.n	8004756 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800473e:	4b47      	ldr	r3, [pc, #284]	@ (800485c <HAL_RCC_OscConfig+0x240>)
 8004740:	689b      	ldr	r3, [r3, #8]
 8004742:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004746:	2b08      	cmp	r3, #8
 8004748:	d11c      	bne.n	8004784 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800474a:	4b44      	ldr	r3, [pc, #272]	@ (800485c <HAL_RCC_OscConfig+0x240>)
 800474c:	685b      	ldr	r3, [r3, #4]
 800474e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004752:	2b00      	cmp	r3, #0
 8004754:	d116      	bne.n	8004784 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004756:	4b41      	ldr	r3, [pc, #260]	@ (800485c <HAL_RCC_OscConfig+0x240>)
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f003 0302 	and.w	r3, r3, #2
 800475e:	2b00      	cmp	r3, #0
 8004760:	d005      	beq.n	800476e <HAL_RCC_OscConfig+0x152>
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	68db      	ldr	r3, [r3, #12]
 8004766:	2b01      	cmp	r3, #1
 8004768:	d001      	beq.n	800476e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800476a:	2301      	movs	r3, #1
 800476c:	e1c7      	b.n	8004afe <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800476e:	4b3b      	ldr	r3, [pc, #236]	@ (800485c <HAL_RCC_OscConfig+0x240>)
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	691b      	ldr	r3, [r3, #16]
 800477a:	00db      	lsls	r3, r3, #3
 800477c:	4937      	ldr	r1, [pc, #220]	@ (800485c <HAL_RCC_OscConfig+0x240>)
 800477e:	4313      	orrs	r3, r2
 8004780:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004782:	e03a      	b.n	80047fa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	68db      	ldr	r3, [r3, #12]
 8004788:	2b00      	cmp	r3, #0
 800478a:	d020      	beq.n	80047ce <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800478c:	4b34      	ldr	r3, [pc, #208]	@ (8004860 <HAL_RCC_OscConfig+0x244>)
 800478e:	2201      	movs	r2, #1
 8004790:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004792:	f7fe f8eb 	bl	800296c <HAL_GetTick>
 8004796:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004798:	e008      	b.n	80047ac <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800479a:	f7fe f8e7 	bl	800296c <HAL_GetTick>
 800479e:	4602      	mov	r2, r0
 80047a0:	693b      	ldr	r3, [r7, #16]
 80047a2:	1ad3      	subs	r3, r2, r3
 80047a4:	2b02      	cmp	r3, #2
 80047a6:	d901      	bls.n	80047ac <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80047a8:	2303      	movs	r3, #3
 80047aa:	e1a8      	b.n	8004afe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047ac:	4b2b      	ldr	r3, [pc, #172]	@ (800485c <HAL_RCC_OscConfig+0x240>)
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f003 0302 	and.w	r3, r3, #2
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d0f0      	beq.n	800479a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80047b8:	4b28      	ldr	r3, [pc, #160]	@ (800485c <HAL_RCC_OscConfig+0x240>)
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	691b      	ldr	r3, [r3, #16]
 80047c4:	00db      	lsls	r3, r3, #3
 80047c6:	4925      	ldr	r1, [pc, #148]	@ (800485c <HAL_RCC_OscConfig+0x240>)
 80047c8:	4313      	orrs	r3, r2
 80047ca:	600b      	str	r3, [r1, #0]
 80047cc:	e015      	b.n	80047fa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80047ce:	4b24      	ldr	r3, [pc, #144]	@ (8004860 <HAL_RCC_OscConfig+0x244>)
 80047d0:	2200      	movs	r2, #0
 80047d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047d4:	f7fe f8ca 	bl	800296c <HAL_GetTick>
 80047d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80047da:	e008      	b.n	80047ee <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80047dc:	f7fe f8c6 	bl	800296c <HAL_GetTick>
 80047e0:	4602      	mov	r2, r0
 80047e2:	693b      	ldr	r3, [r7, #16]
 80047e4:	1ad3      	subs	r3, r2, r3
 80047e6:	2b02      	cmp	r3, #2
 80047e8:	d901      	bls.n	80047ee <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80047ea:	2303      	movs	r3, #3
 80047ec:	e187      	b.n	8004afe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80047ee:	4b1b      	ldr	r3, [pc, #108]	@ (800485c <HAL_RCC_OscConfig+0x240>)
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f003 0302 	and.w	r3, r3, #2
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d1f0      	bne.n	80047dc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f003 0308 	and.w	r3, r3, #8
 8004802:	2b00      	cmp	r3, #0
 8004804:	d036      	beq.n	8004874 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	695b      	ldr	r3, [r3, #20]
 800480a:	2b00      	cmp	r3, #0
 800480c:	d016      	beq.n	800483c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800480e:	4b15      	ldr	r3, [pc, #84]	@ (8004864 <HAL_RCC_OscConfig+0x248>)
 8004810:	2201      	movs	r2, #1
 8004812:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004814:	f7fe f8aa 	bl	800296c <HAL_GetTick>
 8004818:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800481a:	e008      	b.n	800482e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800481c:	f7fe f8a6 	bl	800296c <HAL_GetTick>
 8004820:	4602      	mov	r2, r0
 8004822:	693b      	ldr	r3, [r7, #16]
 8004824:	1ad3      	subs	r3, r2, r3
 8004826:	2b02      	cmp	r3, #2
 8004828:	d901      	bls.n	800482e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800482a:	2303      	movs	r3, #3
 800482c:	e167      	b.n	8004afe <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800482e:	4b0b      	ldr	r3, [pc, #44]	@ (800485c <HAL_RCC_OscConfig+0x240>)
 8004830:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004832:	f003 0302 	and.w	r3, r3, #2
 8004836:	2b00      	cmp	r3, #0
 8004838:	d0f0      	beq.n	800481c <HAL_RCC_OscConfig+0x200>
 800483a:	e01b      	b.n	8004874 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800483c:	4b09      	ldr	r3, [pc, #36]	@ (8004864 <HAL_RCC_OscConfig+0x248>)
 800483e:	2200      	movs	r2, #0
 8004840:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004842:	f7fe f893 	bl	800296c <HAL_GetTick>
 8004846:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004848:	e00e      	b.n	8004868 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800484a:	f7fe f88f 	bl	800296c <HAL_GetTick>
 800484e:	4602      	mov	r2, r0
 8004850:	693b      	ldr	r3, [r7, #16]
 8004852:	1ad3      	subs	r3, r2, r3
 8004854:	2b02      	cmp	r3, #2
 8004856:	d907      	bls.n	8004868 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004858:	2303      	movs	r3, #3
 800485a:	e150      	b.n	8004afe <HAL_RCC_OscConfig+0x4e2>
 800485c:	40023800 	.word	0x40023800
 8004860:	42470000 	.word	0x42470000
 8004864:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004868:	4b88      	ldr	r3, [pc, #544]	@ (8004a8c <HAL_RCC_OscConfig+0x470>)
 800486a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800486c:	f003 0302 	and.w	r3, r3, #2
 8004870:	2b00      	cmp	r3, #0
 8004872:	d1ea      	bne.n	800484a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f003 0304 	and.w	r3, r3, #4
 800487c:	2b00      	cmp	r3, #0
 800487e:	f000 8097 	beq.w	80049b0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004882:	2300      	movs	r3, #0
 8004884:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004886:	4b81      	ldr	r3, [pc, #516]	@ (8004a8c <HAL_RCC_OscConfig+0x470>)
 8004888:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800488a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800488e:	2b00      	cmp	r3, #0
 8004890:	d10f      	bne.n	80048b2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004892:	2300      	movs	r3, #0
 8004894:	60bb      	str	r3, [r7, #8]
 8004896:	4b7d      	ldr	r3, [pc, #500]	@ (8004a8c <HAL_RCC_OscConfig+0x470>)
 8004898:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800489a:	4a7c      	ldr	r2, [pc, #496]	@ (8004a8c <HAL_RCC_OscConfig+0x470>)
 800489c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80048a0:	6413      	str	r3, [r2, #64]	@ 0x40
 80048a2:	4b7a      	ldr	r3, [pc, #488]	@ (8004a8c <HAL_RCC_OscConfig+0x470>)
 80048a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80048aa:	60bb      	str	r3, [r7, #8]
 80048ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80048ae:	2301      	movs	r3, #1
 80048b0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048b2:	4b77      	ldr	r3, [pc, #476]	@ (8004a90 <HAL_RCC_OscConfig+0x474>)
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d118      	bne.n	80048f0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80048be:	4b74      	ldr	r3, [pc, #464]	@ (8004a90 <HAL_RCC_OscConfig+0x474>)
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	4a73      	ldr	r2, [pc, #460]	@ (8004a90 <HAL_RCC_OscConfig+0x474>)
 80048c4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80048c8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80048ca:	f7fe f84f 	bl	800296c <HAL_GetTick>
 80048ce:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048d0:	e008      	b.n	80048e4 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80048d2:	f7fe f84b 	bl	800296c <HAL_GetTick>
 80048d6:	4602      	mov	r2, r0
 80048d8:	693b      	ldr	r3, [r7, #16]
 80048da:	1ad3      	subs	r3, r2, r3
 80048dc:	2b02      	cmp	r3, #2
 80048de:	d901      	bls.n	80048e4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80048e0:	2303      	movs	r3, #3
 80048e2:	e10c      	b.n	8004afe <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048e4:	4b6a      	ldr	r3, [pc, #424]	@ (8004a90 <HAL_RCC_OscConfig+0x474>)
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d0f0      	beq.n	80048d2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	689b      	ldr	r3, [r3, #8]
 80048f4:	2b01      	cmp	r3, #1
 80048f6:	d106      	bne.n	8004906 <HAL_RCC_OscConfig+0x2ea>
 80048f8:	4b64      	ldr	r3, [pc, #400]	@ (8004a8c <HAL_RCC_OscConfig+0x470>)
 80048fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048fc:	4a63      	ldr	r2, [pc, #396]	@ (8004a8c <HAL_RCC_OscConfig+0x470>)
 80048fe:	f043 0301 	orr.w	r3, r3, #1
 8004902:	6713      	str	r3, [r2, #112]	@ 0x70
 8004904:	e01c      	b.n	8004940 <HAL_RCC_OscConfig+0x324>
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	689b      	ldr	r3, [r3, #8]
 800490a:	2b05      	cmp	r3, #5
 800490c:	d10c      	bne.n	8004928 <HAL_RCC_OscConfig+0x30c>
 800490e:	4b5f      	ldr	r3, [pc, #380]	@ (8004a8c <HAL_RCC_OscConfig+0x470>)
 8004910:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004912:	4a5e      	ldr	r2, [pc, #376]	@ (8004a8c <HAL_RCC_OscConfig+0x470>)
 8004914:	f043 0304 	orr.w	r3, r3, #4
 8004918:	6713      	str	r3, [r2, #112]	@ 0x70
 800491a:	4b5c      	ldr	r3, [pc, #368]	@ (8004a8c <HAL_RCC_OscConfig+0x470>)
 800491c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800491e:	4a5b      	ldr	r2, [pc, #364]	@ (8004a8c <HAL_RCC_OscConfig+0x470>)
 8004920:	f043 0301 	orr.w	r3, r3, #1
 8004924:	6713      	str	r3, [r2, #112]	@ 0x70
 8004926:	e00b      	b.n	8004940 <HAL_RCC_OscConfig+0x324>
 8004928:	4b58      	ldr	r3, [pc, #352]	@ (8004a8c <HAL_RCC_OscConfig+0x470>)
 800492a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800492c:	4a57      	ldr	r2, [pc, #348]	@ (8004a8c <HAL_RCC_OscConfig+0x470>)
 800492e:	f023 0301 	bic.w	r3, r3, #1
 8004932:	6713      	str	r3, [r2, #112]	@ 0x70
 8004934:	4b55      	ldr	r3, [pc, #340]	@ (8004a8c <HAL_RCC_OscConfig+0x470>)
 8004936:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004938:	4a54      	ldr	r2, [pc, #336]	@ (8004a8c <HAL_RCC_OscConfig+0x470>)
 800493a:	f023 0304 	bic.w	r3, r3, #4
 800493e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	689b      	ldr	r3, [r3, #8]
 8004944:	2b00      	cmp	r3, #0
 8004946:	d015      	beq.n	8004974 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004948:	f7fe f810 	bl	800296c <HAL_GetTick>
 800494c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800494e:	e00a      	b.n	8004966 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004950:	f7fe f80c 	bl	800296c <HAL_GetTick>
 8004954:	4602      	mov	r2, r0
 8004956:	693b      	ldr	r3, [r7, #16]
 8004958:	1ad3      	subs	r3, r2, r3
 800495a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800495e:	4293      	cmp	r3, r2
 8004960:	d901      	bls.n	8004966 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004962:	2303      	movs	r3, #3
 8004964:	e0cb      	b.n	8004afe <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004966:	4b49      	ldr	r3, [pc, #292]	@ (8004a8c <HAL_RCC_OscConfig+0x470>)
 8004968:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800496a:	f003 0302 	and.w	r3, r3, #2
 800496e:	2b00      	cmp	r3, #0
 8004970:	d0ee      	beq.n	8004950 <HAL_RCC_OscConfig+0x334>
 8004972:	e014      	b.n	800499e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004974:	f7fd fffa 	bl	800296c <HAL_GetTick>
 8004978:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800497a:	e00a      	b.n	8004992 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800497c:	f7fd fff6 	bl	800296c <HAL_GetTick>
 8004980:	4602      	mov	r2, r0
 8004982:	693b      	ldr	r3, [r7, #16]
 8004984:	1ad3      	subs	r3, r2, r3
 8004986:	f241 3288 	movw	r2, #5000	@ 0x1388
 800498a:	4293      	cmp	r3, r2
 800498c:	d901      	bls.n	8004992 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800498e:	2303      	movs	r3, #3
 8004990:	e0b5      	b.n	8004afe <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004992:	4b3e      	ldr	r3, [pc, #248]	@ (8004a8c <HAL_RCC_OscConfig+0x470>)
 8004994:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004996:	f003 0302 	and.w	r3, r3, #2
 800499a:	2b00      	cmp	r3, #0
 800499c:	d1ee      	bne.n	800497c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800499e:	7dfb      	ldrb	r3, [r7, #23]
 80049a0:	2b01      	cmp	r3, #1
 80049a2:	d105      	bne.n	80049b0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80049a4:	4b39      	ldr	r3, [pc, #228]	@ (8004a8c <HAL_RCC_OscConfig+0x470>)
 80049a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049a8:	4a38      	ldr	r2, [pc, #224]	@ (8004a8c <HAL_RCC_OscConfig+0x470>)
 80049aa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80049ae:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	699b      	ldr	r3, [r3, #24]
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	f000 80a1 	beq.w	8004afc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80049ba:	4b34      	ldr	r3, [pc, #208]	@ (8004a8c <HAL_RCC_OscConfig+0x470>)
 80049bc:	689b      	ldr	r3, [r3, #8]
 80049be:	f003 030c 	and.w	r3, r3, #12
 80049c2:	2b08      	cmp	r3, #8
 80049c4:	d05c      	beq.n	8004a80 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	699b      	ldr	r3, [r3, #24]
 80049ca:	2b02      	cmp	r3, #2
 80049cc:	d141      	bne.n	8004a52 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80049ce:	4b31      	ldr	r3, [pc, #196]	@ (8004a94 <HAL_RCC_OscConfig+0x478>)
 80049d0:	2200      	movs	r2, #0
 80049d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049d4:	f7fd ffca 	bl	800296c <HAL_GetTick>
 80049d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80049da:	e008      	b.n	80049ee <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80049dc:	f7fd ffc6 	bl	800296c <HAL_GetTick>
 80049e0:	4602      	mov	r2, r0
 80049e2:	693b      	ldr	r3, [r7, #16]
 80049e4:	1ad3      	subs	r3, r2, r3
 80049e6:	2b02      	cmp	r3, #2
 80049e8:	d901      	bls.n	80049ee <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80049ea:	2303      	movs	r3, #3
 80049ec:	e087      	b.n	8004afe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80049ee:	4b27      	ldr	r3, [pc, #156]	@ (8004a8c <HAL_RCC_OscConfig+0x470>)
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d1f0      	bne.n	80049dc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	69da      	ldr	r2, [r3, #28]
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	6a1b      	ldr	r3, [r3, #32]
 8004a02:	431a      	orrs	r2, r3
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a08:	019b      	lsls	r3, r3, #6
 8004a0a:	431a      	orrs	r2, r3
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a10:	085b      	lsrs	r3, r3, #1
 8004a12:	3b01      	subs	r3, #1
 8004a14:	041b      	lsls	r3, r3, #16
 8004a16:	431a      	orrs	r2, r3
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a1c:	061b      	lsls	r3, r3, #24
 8004a1e:	491b      	ldr	r1, [pc, #108]	@ (8004a8c <HAL_RCC_OscConfig+0x470>)
 8004a20:	4313      	orrs	r3, r2
 8004a22:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004a24:	4b1b      	ldr	r3, [pc, #108]	@ (8004a94 <HAL_RCC_OscConfig+0x478>)
 8004a26:	2201      	movs	r2, #1
 8004a28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a2a:	f7fd ff9f 	bl	800296c <HAL_GetTick>
 8004a2e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a30:	e008      	b.n	8004a44 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a32:	f7fd ff9b 	bl	800296c <HAL_GetTick>
 8004a36:	4602      	mov	r2, r0
 8004a38:	693b      	ldr	r3, [r7, #16]
 8004a3a:	1ad3      	subs	r3, r2, r3
 8004a3c:	2b02      	cmp	r3, #2
 8004a3e:	d901      	bls.n	8004a44 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004a40:	2303      	movs	r3, #3
 8004a42:	e05c      	b.n	8004afe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a44:	4b11      	ldr	r3, [pc, #68]	@ (8004a8c <HAL_RCC_OscConfig+0x470>)
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d0f0      	beq.n	8004a32 <HAL_RCC_OscConfig+0x416>
 8004a50:	e054      	b.n	8004afc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a52:	4b10      	ldr	r3, [pc, #64]	@ (8004a94 <HAL_RCC_OscConfig+0x478>)
 8004a54:	2200      	movs	r2, #0
 8004a56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a58:	f7fd ff88 	bl	800296c <HAL_GetTick>
 8004a5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a5e:	e008      	b.n	8004a72 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a60:	f7fd ff84 	bl	800296c <HAL_GetTick>
 8004a64:	4602      	mov	r2, r0
 8004a66:	693b      	ldr	r3, [r7, #16]
 8004a68:	1ad3      	subs	r3, r2, r3
 8004a6a:	2b02      	cmp	r3, #2
 8004a6c:	d901      	bls.n	8004a72 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004a6e:	2303      	movs	r3, #3
 8004a70:	e045      	b.n	8004afe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a72:	4b06      	ldr	r3, [pc, #24]	@ (8004a8c <HAL_RCC_OscConfig+0x470>)
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d1f0      	bne.n	8004a60 <HAL_RCC_OscConfig+0x444>
 8004a7e:	e03d      	b.n	8004afc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	699b      	ldr	r3, [r3, #24]
 8004a84:	2b01      	cmp	r3, #1
 8004a86:	d107      	bne.n	8004a98 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004a88:	2301      	movs	r3, #1
 8004a8a:	e038      	b.n	8004afe <HAL_RCC_OscConfig+0x4e2>
 8004a8c:	40023800 	.word	0x40023800
 8004a90:	40007000 	.word	0x40007000
 8004a94:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004a98:	4b1b      	ldr	r3, [pc, #108]	@ (8004b08 <HAL_RCC_OscConfig+0x4ec>)
 8004a9a:	685b      	ldr	r3, [r3, #4]
 8004a9c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	699b      	ldr	r3, [r3, #24]
 8004aa2:	2b01      	cmp	r3, #1
 8004aa4:	d028      	beq.n	8004af8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004ab0:	429a      	cmp	r2, r3
 8004ab2:	d121      	bne.n	8004af8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004abe:	429a      	cmp	r2, r3
 8004ac0:	d11a      	bne.n	8004af8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004ac2:	68fa      	ldr	r2, [r7, #12]
 8004ac4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004ac8:	4013      	ands	r3, r2
 8004aca:	687a      	ldr	r2, [r7, #4]
 8004acc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004ace:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004ad0:	4293      	cmp	r3, r2
 8004ad2:	d111      	bne.n	8004af8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ade:	085b      	lsrs	r3, r3, #1
 8004ae0:	3b01      	subs	r3, #1
 8004ae2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004ae4:	429a      	cmp	r2, r3
 8004ae6:	d107      	bne.n	8004af8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004af2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004af4:	429a      	cmp	r2, r3
 8004af6:	d001      	beq.n	8004afc <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004af8:	2301      	movs	r3, #1
 8004afa:	e000      	b.n	8004afe <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004afc:	2300      	movs	r3, #0
}
 8004afe:	4618      	mov	r0, r3
 8004b00:	3718      	adds	r7, #24
 8004b02:	46bd      	mov	sp, r7
 8004b04:	bd80      	pop	{r7, pc}
 8004b06:	bf00      	nop
 8004b08:	40023800 	.word	0x40023800

08004b0c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004b0c:	b580      	push	{r7, lr}
 8004b0e:	b084      	sub	sp, #16
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	6078      	str	r0, [r7, #4]
 8004b14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d101      	bne.n	8004b20 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004b1c:	2301      	movs	r3, #1
 8004b1e:	e0cc      	b.n	8004cba <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004b20:	4b68      	ldr	r3, [pc, #416]	@ (8004cc4 <HAL_RCC_ClockConfig+0x1b8>)
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f003 0307 	and.w	r3, r3, #7
 8004b28:	683a      	ldr	r2, [r7, #0]
 8004b2a:	429a      	cmp	r2, r3
 8004b2c:	d90c      	bls.n	8004b48 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b2e:	4b65      	ldr	r3, [pc, #404]	@ (8004cc4 <HAL_RCC_ClockConfig+0x1b8>)
 8004b30:	683a      	ldr	r2, [r7, #0]
 8004b32:	b2d2      	uxtb	r2, r2
 8004b34:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b36:	4b63      	ldr	r3, [pc, #396]	@ (8004cc4 <HAL_RCC_ClockConfig+0x1b8>)
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f003 0307 	and.w	r3, r3, #7
 8004b3e:	683a      	ldr	r2, [r7, #0]
 8004b40:	429a      	cmp	r2, r3
 8004b42:	d001      	beq.n	8004b48 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004b44:	2301      	movs	r3, #1
 8004b46:	e0b8      	b.n	8004cba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f003 0302 	and.w	r3, r3, #2
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d020      	beq.n	8004b96 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f003 0304 	and.w	r3, r3, #4
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d005      	beq.n	8004b6c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004b60:	4b59      	ldr	r3, [pc, #356]	@ (8004cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8004b62:	689b      	ldr	r3, [r3, #8]
 8004b64:	4a58      	ldr	r2, [pc, #352]	@ (8004cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8004b66:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004b6a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f003 0308 	and.w	r3, r3, #8
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d005      	beq.n	8004b84 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004b78:	4b53      	ldr	r3, [pc, #332]	@ (8004cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8004b7a:	689b      	ldr	r3, [r3, #8]
 8004b7c:	4a52      	ldr	r2, [pc, #328]	@ (8004cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8004b7e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004b82:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004b84:	4b50      	ldr	r3, [pc, #320]	@ (8004cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8004b86:	689b      	ldr	r3, [r3, #8]
 8004b88:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	689b      	ldr	r3, [r3, #8]
 8004b90:	494d      	ldr	r1, [pc, #308]	@ (8004cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8004b92:	4313      	orrs	r3, r2
 8004b94:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f003 0301 	and.w	r3, r3, #1
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d044      	beq.n	8004c2c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	685b      	ldr	r3, [r3, #4]
 8004ba6:	2b01      	cmp	r3, #1
 8004ba8:	d107      	bne.n	8004bba <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004baa:	4b47      	ldr	r3, [pc, #284]	@ (8004cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d119      	bne.n	8004bea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004bb6:	2301      	movs	r3, #1
 8004bb8:	e07f      	b.n	8004cba <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	685b      	ldr	r3, [r3, #4]
 8004bbe:	2b02      	cmp	r3, #2
 8004bc0:	d003      	beq.n	8004bca <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004bc6:	2b03      	cmp	r3, #3
 8004bc8:	d107      	bne.n	8004bda <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004bca:	4b3f      	ldr	r3, [pc, #252]	@ (8004cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d109      	bne.n	8004bea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004bd6:	2301      	movs	r3, #1
 8004bd8:	e06f      	b.n	8004cba <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004bda:	4b3b      	ldr	r3, [pc, #236]	@ (8004cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f003 0302 	and.w	r3, r3, #2
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d101      	bne.n	8004bea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004be6:	2301      	movs	r3, #1
 8004be8:	e067      	b.n	8004cba <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004bea:	4b37      	ldr	r3, [pc, #220]	@ (8004cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8004bec:	689b      	ldr	r3, [r3, #8]
 8004bee:	f023 0203 	bic.w	r2, r3, #3
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	685b      	ldr	r3, [r3, #4]
 8004bf6:	4934      	ldr	r1, [pc, #208]	@ (8004cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8004bf8:	4313      	orrs	r3, r2
 8004bfa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004bfc:	f7fd feb6 	bl	800296c <HAL_GetTick>
 8004c00:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c02:	e00a      	b.n	8004c1a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c04:	f7fd feb2 	bl	800296c <HAL_GetTick>
 8004c08:	4602      	mov	r2, r0
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	1ad3      	subs	r3, r2, r3
 8004c0e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004c12:	4293      	cmp	r3, r2
 8004c14:	d901      	bls.n	8004c1a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004c16:	2303      	movs	r3, #3
 8004c18:	e04f      	b.n	8004cba <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c1a:	4b2b      	ldr	r3, [pc, #172]	@ (8004cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8004c1c:	689b      	ldr	r3, [r3, #8]
 8004c1e:	f003 020c 	and.w	r2, r3, #12
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	685b      	ldr	r3, [r3, #4]
 8004c26:	009b      	lsls	r3, r3, #2
 8004c28:	429a      	cmp	r2, r3
 8004c2a:	d1eb      	bne.n	8004c04 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004c2c:	4b25      	ldr	r3, [pc, #148]	@ (8004cc4 <HAL_RCC_ClockConfig+0x1b8>)
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f003 0307 	and.w	r3, r3, #7
 8004c34:	683a      	ldr	r2, [r7, #0]
 8004c36:	429a      	cmp	r2, r3
 8004c38:	d20c      	bcs.n	8004c54 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c3a:	4b22      	ldr	r3, [pc, #136]	@ (8004cc4 <HAL_RCC_ClockConfig+0x1b8>)
 8004c3c:	683a      	ldr	r2, [r7, #0]
 8004c3e:	b2d2      	uxtb	r2, r2
 8004c40:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c42:	4b20      	ldr	r3, [pc, #128]	@ (8004cc4 <HAL_RCC_ClockConfig+0x1b8>)
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f003 0307 	and.w	r3, r3, #7
 8004c4a:	683a      	ldr	r2, [r7, #0]
 8004c4c:	429a      	cmp	r2, r3
 8004c4e:	d001      	beq.n	8004c54 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004c50:	2301      	movs	r3, #1
 8004c52:	e032      	b.n	8004cba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f003 0304 	and.w	r3, r3, #4
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d008      	beq.n	8004c72 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004c60:	4b19      	ldr	r3, [pc, #100]	@ (8004cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8004c62:	689b      	ldr	r3, [r3, #8]
 8004c64:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	68db      	ldr	r3, [r3, #12]
 8004c6c:	4916      	ldr	r1, [pc, #88]	@ (8004cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8004c6e:	4313      	orrs	r3, r2
 8004c70:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f003 0308 	and.w	r3, r3, #8
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d009      	beq.n	8004c92 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004c7e:	4b12      	ldr	r3, [pc, #72]	@ (8004cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8004c80:	689b      	ldr	r3, [r3, #8]
 8004c82:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	691b      	ldr	r3, [r3, #16]
 8004c8a:	00db      	lsls	r3, r3, #3
 8004c8c:	490e      	ldr	r1, [pc, #56]	@ (8004cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8004c8e:	4313      	orrs	r3, r2
 8004c90:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004c92:	f000 f821 	bl	8004cd8 <HAL_RCC_GetSysClockFreq>
 8004c96:	4602      	mov	r2, r0
 8004c98:	4b0b      	ldr	r3, [pc, #44]	@ (8004cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8004c9a:	689b      	ldr	r3, [r3, #8]
 8004c9c:	091b      	lsrs	r3, r3, #4
 8004c9e:	f003 030f 	and.w	r3, r3, #15
 8004ca2:	490a      	ldr	r1, [pc, #40]	@ (8004ccc <HAL_RCC_ClockConfig+0x1c0>)
 8004ca4:	5ccb      	ldrb	r3, [r1, r3]
 8004ca6:	fa22 f303 	lsr.w	r3, r2, r3
 8004caa:	4a09      	ldr	r2, [pc, #36]	@ (8004cd0 <HAL_RCC_ClockConfig+0x1c4>)
 8004cac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004cae:	4b09      	ldr	r3, [pc, #36]	@ (8004cd4 <HAL_RCC_ClockConfig+0x1c8>)
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	4618      	mov	r0, r3
 8004cb4:	f7fd fe16 	bl	80028e4 <HAL_InitTick>

  return HAL_OK;
 8004cb8:	2300      	movs	r3, #0
}
 8004cba:	4618      	mov	r0, r3
 8004cbc:	3710      	adds	r7, #16
 8004cbe:	46bd      	mov	sp, r7
 8004cc0:	bd80      	pop	{r7, pc}
 8004cc2:	bf00      	nop
 8004cc4:	40023c00 	.word	0x40023c00
 8004cc8:	40023800 	.word	0x40023800
 8004ccc:	0800bc80 	.word	0x0800bc80
 8004cd0:	20000000 	.word	0x20000000
 8004cd4:	20000004 	.word	0x20000004

08004cd8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004cd8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004cdc:	b094      	sub	sp, #80	@ 0x50
 8004cde:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004ce0:	2300      	movs	r3, #0
 8004ce2:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8004ce4:	2300      	movs	r3, #0
 8004ce6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8004ce8:	2300      	movs	r3, #0
 8004cea:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8004cec:	2300      	movs	r3, #0
 8004cee:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004cf0:	4b79      	ldr	r3, [pc, #484]	@ (8004ed8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004cf2:	689b      	ldr	r3, [r3, #8]
 8004cf4:	f003 030c 	and.w	r3, r3, #12
 8004cf8:	2b08      	cmp	r3, #8
 8004cfa:	d00d      	beq.n	8004d18 <HAL_RCC_GetSysClockFreq+0x40>
 8004cfc:	2b08      	cmp	r3, #8
 8004cfe:	f200 80e1 	bhi.w	8004ec4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d002      	beq.n	8004d0c <HAL_RCC_GetSysClockFreq+0x34>
 8004d06:	2b04      	cmp	r3, #4
 8004d08:	d003      	beq.n	8004d12 <HAL_RCC_GetSysClockFreq+0x3a>
 8004d0a:	e0db      	b.n	8004ec4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004d0c:	4b73      	ldr	r3, [pc, #460]	@ (8004edc <HAL_RCC_GetSysClockFreq+0x204>)
 8004d0e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004d10:	e0db      	b.n	8004eca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004d12:	4b73      	ldr	r3, [pc, #460]	@ (8004ee0 <HAL_RCC_GetSysClockFreq+0x208>)
 8004d14:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004d16:	e0d8      	b.n	8004eca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004d18:	4b6f      	ldr	r3, [pc, #444]	@ (8004ed8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004d1a:	685b      	ldr	r3, [r3, #4]
 8004d1c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004d20:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004d22:	4b6d      	ldr	r3, [pc, #436]	@ (8004ed8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004d24:	685b      	ldr	r3, [r3, #4]
 8004d26:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d063      	beq.n	8004df6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004d2e:	4b6a      	ldr	r3, [pc, #424]	@ (8004ed8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004d30:	685b      	ldr	r3, [r3, #4]
 8004d32:	099b      	lsrs	r3, r3, #6
 8004d34:	2200      	movs	r2, #0
 8004d36:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004d38:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004d3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d3c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d40:	633b      	str	r3, [r7, #48]	@ 0x30
 8004d42:	2300      	movs	r3, #0
 8004d44:	637b      	str	r3, [r7, #52]	@ 0x34
 8004d46:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004d4a:	4622      	mov	r2, r4
 8004d4c:	462b      	mov	r3, r5
 8004d4e:	f04f 0000 	mov.w	r0, #0
 8004d52:	f04f 0100 	mov.w	r1, #0
 8004d56:	0159      	lsls	r1, r3, #5
 8004d58:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004d5c:	0150      	lsls	r0, r2, #5
 8004d5e:	4602      	mov	r2, r0
 8004d60:	460b      	mov	r3, r1
 8004d62:	4621      	mov	r1, r4
 8004d64:	1a51      	subs	r1, r2, r1
 8004d66:	6139      	str	r1, [r7, #16]
 8004d68:	4629      	mov	r1, r5
 8004d6a:	eb63 0301 	sbc.w	r3, r3, r1
 8004d6e:	617b      	str	r3, [r7, #20]
 8004d70:	f04f 0200 	mov.w	r2, #0
 8004d74:	f04f 0300 	mov.w	r3, #0
 8004d78:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004d7c:	4659      	mov	r1, fp
 8004d7e:	018b      	lsls	r3, r1, #6
 8004d80:	4651      	mov	r1, sl
 8004d82:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004d86:	4651      	mov	r1, sl
 8004d88:	018a      	lsls	r2, r1, #6
 8004d8a:	4651      	mov	r1, sl
 8004d8c:	ebb2 0801 	subs.w	r8, r2, r1
 8004d90:	4659      	mov	r1, fp
 8004d92:	eb63 0901 	sbc.w	r9, r3, r1
 8004d96:	f04f 0200 	mov.w	r2, #0
 8004d9a:	f04f 0300 	mov.w	r3, #0
 8004d9e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004da2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004da6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004daa:	4690      	mov	r8, r2
 8004dac:	4699      	mov	r9, r3
 8004dae:	4623      	mov	r3, r4
 8004db0:	eb18 0303 	adds.w	r3, r8, r3
 8004db4:	60bb      	str	r3, [r7, #8]
 8004db6:	462b      	mov	r3, r5
 8004db8:	eb49 0303 	adc.w	r3, r9, r3
 8004dbc:	60fb      	str	r3, [r7, #12]
 8004dbe:	f04f 0200 	mov.w	r2, #0
 8004dc2:	f04f 0300 	mov.w	r3, #0
 8004dc6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004dca:	4629      	mov	r1, r5
 8004dcc:	024b      	lsls	r3, r1, #9
 8004dce:	4621      	mov	r1, r4
 8004dd0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004dd4:	4621      	mov	r1, r4
 8004dd6:	024a      	lsls	r2, r1, #9
 8004dd8:	4610      	mov	r0, r2
 8004dda:	4619      	mov	r1, r3
 8004ddc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004dde:	2200      	movs	r2, #0
 8004de0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004de2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004de4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004de8:	f7fb ff66 	bl	8000cb8 <__aeabi_uldivmod>
 8004dec:	4602      	mov	r2, r0
 8004dee:	460b      	mov	r3, r1
 8004df0:	4613      	mov	r3, r2
 8004df2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004df4:	e058      	b.n	8004ea8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004df6:	4b38      	ldr	r3, [pc, #224]	@ (8004ed8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004df8:	685b      	ldr	r3, [r3, #4]
 8004dfa:	099b      	lsrs	r3, r3, #6
 8004dfc:	2200      	movs	r2, #0
 8004dfe:	4618      	mov	r0, r3
 8004e00:	4611      	mov	r1, r2
 8004e02:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004e06:	623b      	str	r3, [r7, #32]
 8004e08:	2300      	movs	r3, #0
 8004e0a:	627b      	str	r3, [r7, #36]	@ 0x24
 8004e0c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004e10:	4642      	mov	r2, r8
 8004e12:	464b      	mov	r3, r9
 8004e14:	f04f 0000 	mov.w	r0, #0
 8004e18:	f04f 0100 	mov.w	r1, #0
 8004e1c:	0159      	lsls	r1, r3, #5
 8004e1e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004e22:	0150      	lsls	r0, r2, #5
 8004e24:	4602      	mov	r2, r0
 8004e26:	460b      	mov	r3, r1
 8004e28:	4641      	mov	r1, r8
 8004e2a:	ebb2 0a01 	subs.w	sl, r2, r1
 8004e2e:	4649      	mov	r1, r9
 8004e30:	eb63 0b01 	sbc.w	fp, r3, r1
 8004e34:	f04f 0200 	mov.w	r2, #0
 8004e38:	f04f 0300 	mov.w	r3, #0
 8004e3c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004e40:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004e44:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004e48:	ebb2 040a 	subs.w	r4, r2, sl
 8004e4c:	eb63 050b 	sbc.w	r5, r3, fp
 8004e50:	f04f 0200 	mov.w	r2, #0
 8004e54:	f04f 0300 	mov.w	r3, #0
 8004e58:	00eb      	lsls	r3, r5, #3
 8004e5a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004e5e:	00e2      	lsls	r2, r4, #3
 8004e60:	4614      	mov	r4, r2
 8004e62:	461d      	mov	r5, r3
 8004e64:	4643      	mov	r3, r8
 8004e66:	18e3      	adds	r3, r4, r3
 8004e68:	603b      	str	r3, [r7, #0]
 8004e6a:	464b      	mov	r3, r9
 8004e6c:	eb45 0303 	adc.w	r3, r5, r3
 8004e70:	607b      	str	r3, [r7, #4]
 8004e72:	f04f 0200 	mov.w	r2, #0
 8004e76:	f04f 0300 	mov.w	r3, #0
 8004e7a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004e7e:	4629      	mov	r1, r5
 8004e80:	028b      	lsls	r3, r1, #10
 8004e82:	4621      	mov	r1, r4
 8004e84:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004e88:	4621      	mov	r1, r4
 8004e8a:	028a      	lsls	r2, r1, #10
 8004e8c:	4610      	mov	r0, r2
 8004e8e:	4619      	mov	r1, r3
 8004e90:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004e92:	2200      	movs	r2, #0
 8004e94:	61bb      	str	r3, [r7, #24]
 8004e96:	61fa      	str	r2, [r7, #28]
 8004e98:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004e9c:	f7fb ff0c 	bl	8000cb8 <__aeabi_uldivmod>
 8004ea0:	4602      	mov	r2, r0
 8004ea2:	460b      	mov	r3, r1
 8004ea4:	4613      	mov	r3, r2
 8004ea6:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004ea8:	4b0b      	ldr	r3, [pc, #44]	@ (8004ed8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004eaa:	685b      	ldr	r3, [r3, #4]
 8004eac:	0c1b      	lsrs	r3, r3, #16
 8004eae:	f003 0303 	and.w	r3, r3, #3
 8004eb2:	3301      	adds	r3, #1
 8004eb4:	005b      	lsls	r3, r3, #1
 8004eb6:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8004eb8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004eba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004ebc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ec0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004ec2:	e002      	b.n	8004eca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004ec4:	4b05      	ldr	r3, [pc, #20]	@ (8004edc <HAL_RCC_GetSysClockFreq+0x204>)
 8004ec6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004ec8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004eca:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004ecc:	4618      	mov	r0, r3
 8004ece:	3750      	adds	r7, #80	@ 0x50
 8004ed0:	46bd      	mov	sp, r7
 8004ed2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004ed6:	bf00      	nop
 8004ed8:	40023800 	.word	0x40023800
 8004edc:	00f42400 	.word	0x00f42400
 8004ee0:	007a1200 	.word	0x007a1200

08004ee4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004ee4:	b480      	push	{r7}
 8004ee6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004ee8:	4b03      	ldr	r3, [pc, #12]	@ (8004ef8 <HAL_RCC_GetHCLKFreq+0x14>)
 8004eea:	681b      	ldr	r3, [r3, #0]
}
 8004eec:	4618      	mov	r0, r3
 8004eee:	46bd      	mov	sp, r7
 8004ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef4:	4770      	bx	lr
 8004ef6:	bf00      	nop
 8004ef8:	20000000 	.word	0x20000000

08004efc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004efc:	b580      	push	{r7, lr}
 8004efe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004f00:	f7ff fff0 	bl	8004ee4 <HAL_RCC_GetHCLKFreq>
 8004f04:	4602      	mov	r2, r0
 8004f06:	4b05      	ldr	r3, [pc, #20]	@ (8004f1c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004f08:	689b      	ldr	r3, [r3, #8]
 8004f0a:	0a9b      	lsrs	r3, r3, #10
 8004f0c:	f003 0307 	and.w	r3, r3, #7
 8004f10:	4903      	ldr	r1, [pc, #12]	@ (8004f20 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004f12:	5ccb      	ldrb	r3, [r1, r3]
 8004f14:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004f18:	4618      	mov	r0, r3
 8004f1a:	bd80      	pop	{r7, pc}
 8004f1c:	40023800 	.word	0x40023800
 8004f20:	0800bc90 	.word	0x0800bc90

08004f24 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004f24:	b580      	push	{r7, lr}
 8004f26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004f28:	f7ff ffdc 	bl	8004ee4 <HAL_RCC_GetHCLKFreq>
 8004f2c:	4602      	mov	r2, r0
 8004f2e:	4b05      	ldr	r3, [pc, #20]	@ (8004f44 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004f30:	689b      	ldr	r3, [r3, #8]
 8004f32:	0b5b      	lsrs	r3, r3, #13
 8004f34:	f003 0307 	and.w	r3, r3, #7
 8004f38:	4903      	ldr	r1, [pc, #12]	@ (8004f48 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004f3a:	5ccb      	ldrb	r3, [r1, r3]
 8004f3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004f40:	4618      	mov	r0, r3
 8004f42:	bd80      	pop	{r7, pc}
 8004f44:	40023800 	.word	0x40023800
 8004f48:	0800bc90 	.word	0x0800bc90

08004f4c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004f4c:	b580      	push	{r7, lr}
 8004f4e:	b082      	sub	sp, #8
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d101      	bne.n	8004f5e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004f5a:	2301      	movs	r3, #1
 8004f5c:	e041      	b.n	8004fe2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004f64:	b2db      	uxtb	r3, r3
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d106      	bne.n	8004f78 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	2200      	movs	r2, #0
 8004f6e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004f72:	6878      	ldr	r0, [r7, #4]
 8004f74:	f7fd fa74 	bl	8002460 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	2202      	movs	r2, #2
 8004f7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681a      	ldr	r2, [r3, #0]
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	3304      	adds	r3, #4
 8004f88:	4619      	mov	r1, r3
 8004f8a:	4610      	mov	r0, r2
 8004f8c:	f000 fa9e 	bl	80054cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2201      	movs	r2, #1
 8004f94:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2201      	movs	r2, #1
 8004f9c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2201      	movs	r2, #1
 8004fa4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	2201      	movs	r2, #1
 8004fac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	2201      	movs	r2, #1
 8004fb4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	2201      	movs	r2, #1
 8004fbc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	2201      	movs	r2, #1
 8004fc4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	2201      	movs	r2, #1
 8004fcc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2201      	movs	r2, #1
 8004fd4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	2201      	movs	r2, #1
 8004fdc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004fe0:	2300      	movs	r3, #0
}
 8004fe2:	4618      	mov	r0, r3
 8004fe4:	3708      	adds	r7, #8
 8004fe6:	46bd      	mov	sp, r7
 8004fe8:	bd80      	pop	{r7, pc}
	...

08004fec <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004fec:	b480      	push	{r7}
 8004fee:	b085      	sub	sp, #20
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004ffa:	b2db      	uxtb	r3, r3
 8004ffc:	2b01      	cmp	r3, #1
 8004ffe:	d001      	beq.n	8005004 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005000:	2301      	movs	r3, #1
 8005002:	e044      	b.n	800508e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	2202      	movs	r2, #2
 8005008:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	68da      	ldr	r2, [r3, #12]
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	f042 0201 	orr.w	r2, r2, #1
 800501a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	4a1e      	ldr	r2, [pc, #120]	@ (800509c <HAL_TIM_Base_Start_IT+0xb0>)
 8005022:	4293      	cmp	r3, r2
 8005024:	d018      	beq.n	8005058 <HAL_TIM_Base_Start_IT+0x6c>
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800502e:	d013      	beq.n	8005058 <HAL_TIM_Base_Start_IT+0x6c>
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	4a1a      	ldr	r2, [pc, #104]	@ (80050a0 <HAL_TIM_Base_Start_IT+0xb4>)
 8005036:	4293      	cmp	r3, r2
 8005038:	d00e      	beq.n	8005058 <HAL_TIM_Base_Start_IT+0x6c>
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	4a19      	ldr	r2, [pc, #100]	@ (80050a4 <HAL_TIM_Base_Start_IT+0xb8>)
 8005040:	4293      	cmp	r3, r2
 8005042:	d009      	beq.n	8005058 <HAL_TIM_Base_Start_IT+0x6c>
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	4a17      	ldr	r2, [pc, #92]	@ (80050a8 <HAL_TIM_Base_Start_IT+0xbc>)
 800504a:	4293      	cmp	r3, r2
 800504c:	d004      	beq.n	8005058 <HAL_TIM_Base_Start_IT+0x6c>
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	4a16      	ldr	r2, [pc, #88]	@ (80050ac <HAL_TIM_Base_Start_IT+0xc0>)
 8005054:	4293      	cmp	r3, r2
 8005056:	d111      	bne.n	800507c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	689b      	ldr	r3, [r3, #8]
 800505e:	f003 0307 	and.w	r3, r3, #7
 8005062:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	2b06      	cmp	r3, #6
 8005068:	d010      	beq.n	800508c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	681a      	ldr	r2, [r3, #0]
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f042 0201 	orr.w	r2, r2, #1
 8005078:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800507a:	e007      	b.n	800508c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	681a      	ldr	r2, [r3, #0]
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f042 0201 	orr.w	r2, r2, #1
 800508a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800508c:	2300      	movs	r3, #0
}
 800508e:	4618      	mov	r0, r3
 8005090:	3714      	adds	r7, #20
 8005092:	46bd      	mov	sp, r7
 8005094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005098:	4770      	bx	lr
 800509a:	bf00      	nop
 800509c:	40010000 	.word	0x40010000
 80050a0:	40000400 	.word	0x40000400
 80050a4:	40000800 	.word	0x40000800
 80050a8:	40000c00 	.word	0x40000c00
 80050ac:	40014000 	.word	0x40014000

080050b0 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80050b0:	b480      	push	{r7}
 80050b2:	b083      	sub	sp, #12
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	68da      	ldr	r2, [r3, #12]
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f022 0201 	bic.w	r2, r2, #1
 80050c6:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	6a1a      	ldr	r2, [r3, #32]
 80050ce:	f241 1311 	movw	r3, #4369	@ 0x1111
 80050d2:	4013      	ands	r3, r2
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d10f      	bne.n	80050f8 <HAL_TIM_Base_Stop_IT+0x48>
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	6a1a      	ldr	r2, [r3, #32]
 80050de:	f240 4344 	movw	r3, #1092	@ 0x444
 80050e2:	4013      	ands	r3, r2
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d107      	bne.n	80050f8 <HAL_TIM_Base_Stop_IT+0x48>
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	681a      	ldr	r2, [r3, #0]
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f022 0201 	bic.w	r2, r2, #1
 80050f6:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2201      	movs	r2, #1
 80050fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8005100:	2300      	movs	r3, #0
}
 8005102:	4618      	mov	r0, r3
 8005104:	370c      	adds	r7, #12
 8005106:	46bd      	mov	sp, r7
 8005108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510c:	4770      	bx	lr

0800510e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800510e:	b580      	push	{r7, lr}
 8005110:	b084      	sub	sp, #16
 8005112:	af00      	add	r7, sp, #0
 8005114:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	68db      	ldr	r3, [r3, #12]
 800511c:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	691b      	ldr	r3, [r3, #16]
 8005124:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005126:	68bb      	ldr	r3, [r7, #8]
 8005128:	f003 0302 	and.w	r3, r3, #2
 800512c:	2b00      	cmp	r3, #0
 800512e:	d020      	beq.n	8005172 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	f003 0302 	and.w	r3, r3, #2
 8005136:	2b00      	cmp	r3, #0
 8005138:	d01b      	beq.n	8005172 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f06f 0202 	mvn.w	r2, #2
 8005142:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2201      	movs	r2, #1
 8005148:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	699b      	ldr	r3, [r3, #24]
 8005150:	f003 0303 	and.w	r3, r3, #3
 8005154:	2b00      	cmp	r3, #0
 8005156:	d003      	beq.n	8005160 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005158:	6878      	ldr	r0, [r7, #4]
 800515a:	f000 f999 	bl	8005490 <HAL_TIM_IC_CaptureCallback>
 800515e:	e005      	b.n	800516c <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005160:	6878      	ldr	r0, [r7, #4]
 8005162:	f000 f98b 	bl	800547c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005166:	6878      	ldr	r0, [r7, #4]
 8005168:	f000 f99c 	bl	80054a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2200      	movs	r2, #0
 8005170:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005172:	68bb      	ldr	r3, [r7, #8]
 8005174:	f003 0304 	and.w	r3, r3, #4
 8005178:	2b00      	cmp	r3, #0
 800517a:	d020      	beq.n	80051be <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	f003 0304 	and.w	r3, r3, #4
 8005182:	2b00      	cmp	r3, #0
 8005184:	d01b      	beq.n	80051be <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	f06f 0204 	mvn.w	r2, #4
 800518e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	2202      	movs	r2, #2
 8005194:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	699b      	ldr	r3, [r3, #24]
 800519c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d003      	beq.n	80051ac <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80051a4:	6878      	ldr	r0, [r7, #4]
 80051a6:	f000 f973 	bl	8005490 <HAL_TIM_IC_CaptureCallback>
 80051aa:	e005      	b.n	80051b8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80051ac:	6878      	ldr	r0, [r7, #4]
 80051ae:	f000 f965 	bl	800547c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051b2:	6878      	ldr	r0, [r7, #4]
 80051b4:	f000 f976 	bl	80054a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2200      	movs	r2, #0
 80051bc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80051be:	68bb      	ldr	r3, [r7, #8]
 80051c0:	f003 0308 	and.w	r3, r3, #8
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d020      	beq.n	800520a <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	f003 0308 	and.w	r3, r3, #8
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d01b      	beq.n	800520a <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f06f 0208 	mvn.w	r2, #8
 80051da:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	2204      	movs	r2, #4
 80051e0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	69db      	ldr	r3, [r3, #28]
 80051e8:	f003 0303 	and.w	r3, r3, #3
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d003      	beq.n	80051f8 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80051f0:	6878      	ldr	r0, [r7, #4]
 80051f2:	f000 f94d 	bl	8005490 <HAL_TIM_IC_CaptureCallback>
 80051f6:	e005      	b.n	8005204 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80051f8:	6878      	ldr	r0, [r7, #4]
 80051fa:	f000 f93f 	bl	800547c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051fe:	6878      	ldr	r0, [r7, #4]
 8005200:	f000 f950 	bl	80054a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2200      	movs	r2, #0
 8005208:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800520a:	68bb      	ldr	r3, [r7, #8]
 800520c:	f003 0310 	and.w	r3, r3, #16
 8005210:	2b00      	cmp	r3, #0
 8005212:	d020      	beq.n	8005256 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	f003 0310 	and.w	r3, r3, #16
 800521a:	2b00      	cmp	r3, #0
 800521c:	d01b      	beq.n	8005256 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	f06f 0210 	mvn.w	r2, #16
 8005226:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	2208      	movs	r2, #8
 800522c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	69db      	ldr	r3, [r3, #28]
 8005234:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005238:	2b00      	cmp	r3, #0
 800523a:	d003      	beq.n	8005244 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800523c:	6878      	ldr	r0, [r7, #4]
 800523e:	f000 f927 	bl	8005490 <HAL_TIM_IC_CaptureCallback>
 8005242:	e005      	b.n	8005250 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005244:	6878      	ldr	r0, [r7, #4]
 8005246:	f000 f919 	bl	800547c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800524a:	6878      	ldr	r0, [r7, #4]
 800524c:	f000 f92a 	bl	80054a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2200      	movs	r2, #0
 8005254:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005256:	68bb      	ldr	r3, [r7, #8]
 8005258:	f003 0301 	and.w	r3, r3, #1
 800525c:	2b00      	cmp	r3, #0
 800525e:	d00c      	beq.n	800527a <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	f003 0301 	and.w	r3, r3, #1
 8005266:	2b00      	cmp	r3, #0
 8005268:	d007      	beq.n	800527a <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f06f 0201 	mvn.w	r2, #1
 8005272:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005274:	6878      	ldr	r0, [r7, #4]
 8005276:	f7fc fc45 	bl	8001b04 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800527a:	68bb      	ldr	r3, [r7, #8]
 800527c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005280:	2b00      	cmp	r3, #0
 8005282:	d00c      	beq.n	800529e <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800528a:	2b00      	cmp	r3, #0
 800528c:	d007      	beq.n	800529e <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005296:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005298:	6878      	ldr	r0, [r7, #4]
 800529a:	f000 fab5 	bl	8005808 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800529e:	68bb      	ldr	r3, [r7, #8]
 80052a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d00c      	beq.n	80052c2 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d007      	beq.n	80052c2 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80052ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80052bc:	6878      	ldr	r0, [r7, #4]
 80052be:	f000 f8fb 	bl	80054b8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80052c2:	68bb      	ldr	r3, [r7, #8]
 80052c4:	f003 0320 	and.w	r3, r3, #32
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d00c      	beq.n	80052e6 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	f003 0320 	and.w	r3, r3, #32
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d007      	beq.n	80052e6 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f06f 0220 	mvn.w	r2, #32
 80052de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80052e0:	6878      	ldr	r0, [r7, #4]
 80052e2:	f000 fa87 	bl	80057f4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80052e6:	bf00      	nop
 80052e8:	3710      	adds	r7, #16
 80052ea:	46bd      	mov	sp, r7
 80052ec:	bd80      	pop	{r7, pc}

080052ee <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80052ee:	b580      	push	{r7, lr}
 80052f0:	b084      	sub	sp, #16
 80052f2:	af00      	add	r7, sp, #0
 80052f4:	6078      	str	r0, [r7, #4]
 80052f6:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80052f8:	2300      	movs	r3, #0
 80052fa:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005302:	2b01      	cmp	r3, #1
 8005304:	d101      	bne.n	800530a <HAL_TIM_ConfigClockSource+0x1c>
 8005306:	2302      	movs	r3, #2
 8005308:	e0b4      	b.n	8005474 <HAL_TIM_ConfigClockSource+0x186>
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	2201      	movs	r2, #1
 800530e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	2202      	movs	r2, #2
 8005316:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	689b      	ldr	r3, [r3, #8]
 8005320:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005322:	68bb      	ldr	r3, [r7, #8]
 8005324:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005328:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800532a:	68bb      	ldr	r3, [r7, #8]
 800532c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005330:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	68ba      	ldr	r2, [r7, #8]
 8005338:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800533a:	683b      	ldr	r3, [r7, #0]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005342:	d03e      	beq.n	80053c2 <HAL_TIM_ConfigClockSource+0xd4>
 8005344:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005348:	f200 8087 	bhi.w	800545a <HAL_TIM_ConfigClockSource+0x16c>
 800534c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005350:	f000 8086 	beq.w	8005460 <HAL_TIM_ConfigClockSource+0x172>
 8005354:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005358:	d87f      	bhi.n	800545a <HAL_TIM_ConfigClockSource+0x16c>
 800535a:	2b70      	cmp	r3, #112	@ 0x70
 800535c:	d01a      	beq.n	8005394 <HAL_TIM_ConfigClockSource+0xa6>
 800535e:	2b70      	cmp	r3, #112	@ 0x70
 8005360:	d87b      	bhi.n	800545a <HAL_TIM_ConfigClockSource+0x16c>
 8005362:	2b60      	cmp	r3, #96	@ 0x60
 8005364:	d050      	beq.n	8005408 <HAL_TIM_ConfigClockSource+0x11a>
 8005366:	2b60      	cmp	r3, #96	@ 0x60
 8005368:	d877      	bhi.n	800545a <HAL_TIM_ConfigClockSource+0x16c>
 800536a:	2b50      	cmp	r3, #80	@ 0x50
 800536c:	d03c      	beq.n	80053e8 <HAL_TIM_ConfigClockSource+0xfa>
 800536e:	2b50      	cmp	r3, #80	@ 0x50
 8005370:	d873      	bhi.n	800545a <HAL_TIM_ConfigClockSource+0x16c>
 8005372:	2b40      	cmp	r3, #64	@ 0x40
 8005374:	d058      	beq.n	8005428 <HAL_TIM_ConfigClockSource+0x13a>
 8005376:	2b40      	cmp	r3, #64	@ 0x40
 8005378:	d86f      	bhi.n	800545a <HAL_TIM_ConfigClockSource+0x16c>
 800537a:	2b30      	cmp	r3, #48	@ 0x30
 800537c:	d064      	beq.n	8005448 <HAL_TIM_ConfigClockSource+0x15a>
 800537e:	2b30      	cmp	r3, #48	@ 0x30
 8005380:	d86b      	bhi.n	800545a <HAL_TIM_ConfigClockSource+0x16c>
 8005382:	2b20      	cmp	r3, #32
 8005384:	d060      	beq.n	8005448 <HAL_TIM_ConfigClockSource+0x15a>
 8005386:	2b20      	cmp	r3, #32
 8005388:	d867      	bhi.n	800545a <HAL_TIM_ConfigClockSource+0x16c>
 800538a:	2b00      	cmp	r3, #0
 800538c:	d05c      	beq.n	8005448 <HAL_TIM_ConfigClockSource+0x15a>
 800538e:	2b10      	cmp	r3, #16
 8005390:	d05a      	beq.n	8005448 <HAL_TIM_ConfigClockSource+0x15a>
 8005392:	e062      	b.n	800545a <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005398:	683b      	ldr	r3, [r7, #0]
 800539a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800539c:	683b      	ldr	r3, [r7, #0]
 800539e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80053a0:	683b      	ldr	r3, [r7, #0]
 80053a2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80053a4:	f000 f998 	bl	80056d8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	689b      	ldr	r3, [r3, #8]
 80053ae:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80053b0:	68bb      	ldr	r3, [r7, #8]
 80053b2:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80053b6:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	68ba      	ldr	r2, [r7, #8]
 80053be:	609a      	str	r2, [r3, #8]
      break;
 80053c0:	e04f      	b.n	8005462 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80053c6:	683b      	ldr	r3, [r7, #0]
 80053c8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80053ca:	683b      	ldr	r3, [r7, #0]
 80053cc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80053ce:	683b      	ldr	r3, [r7, #0]
 80053d0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80053d2:	f000 f981 	bl	80056d8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	689a      	ldr	r2, [r3, #8]
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80053e4:	609a      	str	r2, [r3, #8]
      break;
 80053e6:	e03c      	b.n	8005462 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80053ec:	683b      	ldr	r3, [r7, #0]
 80053ee:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80053f0:	683b      	ldr	r3, [r7, #0]
 80053f2:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80053f4:	461a      	mov	r2, r3
 80053f6:	f000 f8f5 	bl	80055e4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	2150      	movs	r1, #80	@ 0x50
 8005400:	4618      	mov	r0, r3
 8005402:	f000 f94e 	bl	80056a2 <TIM_ITRx_SetConfig>
      break;
 8005406:	e02c      	b.n	8005462 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800540c:	683b      	ldr	r3, [r7, #0]
 800540e:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005410:	683b      	ldr	r3, [r7, #0]
 8005412:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005414:	461a      	mov	r2, r3
 8005416:	f000 f914 	bl	8005642 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	2160      	movs	r1, #96	@ 0x60
 8005420:	4618      	mov	r0, r3
 8005422:	f000 f93e 	bl	80056a2 <TIM_ITRx_SetConfig>
      break;
 8005426:	e01c      	b.n	8005462 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800542c:	683b      	ldr	r3, [r7, #0]
 800542e:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005430:	683b      	ldr	r3, [r7, #0]
 8005432:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005434:	461a      	mov	r2, r3
 8005436:	f000 f8d5 	bl	80055e4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	2140      	movs	r1, #64	@ 0x40
 8005440:	4618      	mov	r0, r3
 8005442:	f000 f92e 	bl	80056a2 <TIM_ITRx_SetConfig>
      break;
 8005446:	e00c      	b.n	8005462 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681a      	ldr	r2, [r3, #0]
 800544c:	683b      	ldr	r3, [r7, #0]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	4619      	mov	r1, r3
 8005452:	4610      	mov	r0, r2
 8005454:	f000 f925 	bl	80056a2 <TIM_ITRx_SetConfig>
      break;
 8005458:	e003      	b.n	8005462 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800545a:	2301      	movs	r3, #1
 800545c:	73fb      	strb	r3, [r7, #15]
      break;
 800545e:	e000      	b.n	8005462 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005460:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	2201      	movs	r2, #1
 8005466:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	2200      	movs	r2, #0
 800546e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005472:	7bfb      	ldrb	r3, [r7, #15]
}
 8005474:	4618      	mov	r0, r3
 8005476:	3710      	adds	r7, #16
 8005478:	46bd      	mov	sp, r7
 800547a:	bd80      	pop	{r7, pc}

0800547c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800547c:	b480      	push	{r7}
 800547e:	b083      	sub	sp, #12
 8005480:	af00      	add	r7, sp, #0
 8005482:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005484:	bf00      	nop
 8005486:	370c      	adds	r7, #12
 8005488:	46bd      	mov	sp, r7
 800548a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548e:	4770      	bx	lr

08005490 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005490:	b480      	push	{r7}
 8005492:	b083      	sub	sp, #12
 8005494:	af00      	add	r7, sp, #0
 8005496:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005498:	bf00      	nop
 800549a:	370c      	adds	r7, #12
 800549c:	46bd      	mov	sp, r7
 800549e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a2:	4770      	bx	lr

080054a4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80054a4:	b480      	push	{r7}
 80054a6:	b083      	sub	sp, #12
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80054ac:	bf00      	nop
 80054ae:	370c      	adds	r7, #12
 80054b0:	46bd      	mov	sp, r7
 80054b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b6:	4770      	bx	lr

080054b8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80054b8:	b480      	push	{r7}
 80054ba:	b083      	sub	sp, #12
 80054bc:	af00      	add	r7, sp, #0
 80054be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80054c0:	bf00      	nop
 80054c2:	370c      	adds	r7, #12
 80054c4:	46bd      	mov	sp, r7
 80054c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ca:	4770      	bx	lr

080054cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80054cc:	b480      	push	{r7}
 80054ce:	b085      	sub	sp, #20
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	6078      	str	r0, [r7, #4]
 80054d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	4a3a      	ldr	r2, [pc, #232]	@ (80055c8 <TIM_Base_SetConfig+0xfc>)
 80054e0:	4293      	cmp	r3, r2
 80054e2:	d00f      	beq.n	8005504 <TIM_Base_SetConfig+0x38>
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80054ea:	d00b      	beq.n	8005504 <TIM_Base_SetConfig+0x38>
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	4a37      	ldr	r2, [pc, #220]	@ (80055cc <TIM_Base_SetConfig+0x100>)
 80054f0:	4293      	cmp	r3, r2
 80054f2:	d007      	beq.n	8005504 <TIM_Base_SetConfig+0x38>
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	4a36      	ldr	r2, [pc, #216]	@ (80055d0 <TIM_Base_SetConfig+0x104>)
 80054f8:	4293      	cmp	r3, r2
 80054fa:	d003      	beq.n	8005504 <TIM_Base_SetConfig+0x38>
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	4a35      	ldr	r2, [pc, #212]	@ (80055d4 <TIM_Base_SetConfig+0x108>)
 8005500:	4293      	cmp	r3, r2
 8005502:	d108      	bne.n	8005516 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800550a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800550c:	683b      	ldr	r3, [r7, #0]
 800550e:	685b      	ldr	r3, [r3, #4]
 8005510:	68fa      	ldr	r2, [r7, #12]
 8005512:	4313      	orrs	r3, r2
 8005514:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	4a2b      	ldr	r2, [pc, #172]	@ (80055c8 <TIM_Base_SetConfig+0xfc>)
 800551a:	4293      	cmp	r3, r2
 800551c:	d01b      	beq.n	8005556 <TIM_Base_SetConfig+0x8a>
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005524:	d017      	beq.n	8005556 <TIM_Base_SetConfig+0x8a>
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	4a28      	ldr	r2, [pc, #160]	@ (80055cc <TIM_Base_SetConfig+0x100>)
 800552a:	4293      	cmp	r3, r2
 800552c:	d013      	beq.n	8005556 <TIM_Base_SetConfig+0x8a>
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	4a27      	ldr	r2, [pc, #156]	@ (80055d0 <TIM_Base_SetConfig+0x104>)
 8005532:	4293      	cmp	r3, r2
 8005534:	d00f      	beq.n	8005556 <TIM_Base_SetConfig+0x8a>
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	4a26      	ldr	r2, [pc, #152]	@ (80055d4 <TIM_Base_SetConfig+0x108>)
 800553a:	4293      	cmp	r3, r2
 800553c:	d00b      	beq.n	8005556 <TIM_Base_SetConfig+0x8a>
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	4a25      	ldr	r2, [pc, #148]	@ (80055d8 <TIM_Base_SetConfig+0x10c>)
 8005542:	4293      	cmp	r3, r2
 8005544:	d007      	beq.n	8005556 <TIM_Base_SetConfig+0x8a>
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	4a24      	ldr	r2, [pc, #144]	@ (80055dc <TIM_Base_SetConfig+0x110>)
 800554a:	4293      	cmp	r3, r2
 800554c:	d003      	beq.n	8005556 <TIM_Base_SetConfig+0x8a>
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	4a23      	ldr	r2, [pc, #140]	@ (80055e0 <TIM_Base_SetConfig+0x114>)
 8005552:	4293      	cmp	r3, r2
 8005554:	d108      	bne.n	8005568 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800555c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800555e:	683b      	ldr	r3, [r7, #0]
 8005560:	68db      	ldr	r3, [r3, #12]
 8005562:	68fa      	ldr	r2, [r7, #12]
 8005564:	4313      	orrs	r3, r2
 8005566:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800556e:	683b      	ldr	r3, [r7, #0]
 8005570:	695b      	ldr	r3, [r3, #20]
 8005572:	4313      	orrs	r3, r2
 8005574:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	68fa      	ldr	r2, [r7, #12]
 800557a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800557c:	683b      	ldr	r3, [r7, #0]
 800557e:	689a      	ldr	r2, [r3, #8]
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005584:	683b      	ldr	r3, [r7, #0]
 8005586:	681a      	ldr	r2, [r3, #0]
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	4a0e      	ldr	r2, [pc, #56]	@ (80055c8 <TIM_Base_SetConfig+0xfc>)
 8005590:	4293      	cmp	r3, r2
 8005592:	d103      	bne.n	800559c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005594:	683b      	ldr	r3, [r7, #0]
 8005596:	691a      	ldr	r2, [r3, #16]
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	2201      	movs	r2, #1
 80055a0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	691b      	ldr	r3, [r3, #16]
 80055a6:	f003 0301 	and.w	r3, r3, #1
 80055aa:	2b01      	cmp	r3, #1
 80055ac:	d105      	bne.n	80055ba <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	691b      	ldr	r3, [r3, #16]
 80055b2:	f023 0201 	bic.w	r2, r3, #1
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	611a      	str	r2, [r3, #16]
  }
}
 80055ba:	bf00      	nop
 80055bc:	3714      	adds	r7, #20
 80055be:	46bd      	mov	sp, r7
 80055c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c4:	4770      	bx	lr
 80055c6:	bf00      	nop
 80055c8:	40010000 	.word	0x40010000
 80055cc:	40000400 	.word	0x40000400
 80055d0:	40000800 	.word	0x40000800
 80055d4:	40000c00 	.word	0x40000c00
 80055d8:	40014000 	.word	0x40014000
 80055dc:	40014400 	.word	0x40014400
 80055e0:	40014800 	.word	0x40014800

080055e4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80055e4:	b480      	push	{r7}
 80055e6:	b087      	sub	sp, #28
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	60f8      	str	r0, [r7, #12]
 80055ec:	60b9      	str	r1, [r7, #8]
 80055ee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	6a1b      	ldr	r3, [r3, #32]
 80055f4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	6a1b      	ldr	r3, [r3, #32]
 80055fa:	f023 0201 	bic.w	r2, r3, #1
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	699b      	ldr	r3, [r3, #24]
 8005606:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005608:	693b      	ldr	r3, [r7, #16]
 800560a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800560e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	011b      	lsls	r3, r3, #4
 8005614:	693a      	ldr	r2, [r7, #16]
 8005616:	4313      	orrs	r3, r2
 8005618:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800561a:	697b      	ldr	r3, [r7, #20]
 800561c:	f023 030a 	bic.w	r3, r3, #10
 8005620:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005622:	697a      	ldr	r2, [r7, #20]
 8005624:	68bb      	ldr	r3, [r7, #8]
 8005626:	4313      	orrs	r3, r2
 8005628:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	693a      	ldr	r2, [r7, #16]
 800562e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	697a      	ldr	r2, [r7, #20]
 8005634:	621a      	str	r2, [r3, #32]
}
 8005636:	bf00      	nop
 8005638:	371c      	adds	r7, #28
 800563a:	46bd      	mov	sp, r7
 800563c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005640:	4770      	bx	lr

08005642 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005642:	b480      	push	{r7}
 8005644:	b087      	sub	sp, #28
 8005646:	af00      	add	r7, sp, #0
 8005648:	60f8      	str	r0, [r7, #12]
 800564a:	60b9      	str	r1, [r7, #8]
 800564c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	6a1b      	ldr	r3, [r3, #32]
 8005652:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	6a1b      	ldr	r3, [r3, #32]
 8005658:	f023 0210 	bic.w	r2, r3, #16
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	699b      	ldr	r3, [r3, #24]
 8005664:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005666:	693b      	ldr	r3, [r7, #16]
 8005668:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800566c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	031b      	lsls	r3, r3, #12
 8005672:	693a      	ldr	r2, [r7, #16]
 8005674:	4313      	orrs	r3, r2
 8005676:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005678:	697b      	ldr	r3, [r7, #20]
 800567a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800567e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005680:	68bb      	ldr	r3, [r7, #8]
 8005682:	011b      	lsls	r3, r3, #4
 8005684:	697a      	ldr	r2, [r7, #20]
 8005686:	4313      	orrs	r3, r2
 8005688:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	693a      	ldr	r2, [r7, #16]
 800568e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	697a      	ldr	r2, [r7, #20]
 8005694:	621a      	str	r2, [r3, #32]
}
 8005696:	bf00      	nop
 8005698:	371c      	adds	r7, #28
 800569a:	46bd      	mov	sp, r7
 800569c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a0:	4770      	bx	lr

080056a2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80056a2:	b480      	push	{r7}
 80056a4:	b085      	sub	sp, #20
 80056a6:	af00      	add	r7, sp, #0
 80056a8:	6078      	str	r0, [r7, #4]
 80056aa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	689b      	ldr	r3, [r3, #8]
 80056b0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80056b8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80056ba:	683a      	ldr	r2, [r7, #0]
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	4313      	orrs	r3, r2
 80056c0:	f043 0307 	orr.w	r3, r3, #7
 80056c4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	68fa      	ldr	r2, [r7, #12]
 80056ca:	609a      	str	r2, [r3, #8]
}
 80056cc:	bf00      	nop
 80056ce:	3714      	adds	r7, #20
 80056d0:	46bd      	mov	sp, r7
 80056d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d6:	4770      	bx	lr

080056d8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80056d8:	b480      	push	{r7}
 80056da:	b087      	sub	sp, #28
 80056dc:	af00      	add	r7, sp, #0
 80056de:	60f8      	str	r0, [r7, #12]
 80056e0:	60b9      	str	r1, [r7, #8]
 80056e2:	607a      	str	r2, [r7, #4]
 80056e4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	689b      	ldr	r3, [r3, #8]
 80056ea:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80056ec:	697b      	ldr	r3, [r7, #20]
 80056ee:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80056f2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80056f4:	683b      	ldr	r3, [r7, #0]
 80056f6:	021a      	lsls	r2, r3, #8
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	431a      	orrs	r2, r3
 80056fc:	68bb      	ldr	r3, [r7, #8]
 80056fe:	4313      	orrs	r3, r2
 8005700:	697a      	ldr	r2, [r7, #20]
 8005702:	4313      	orrs	r3, r2
 8005704:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	697a      	ldr	r2, [r7, #20]
 800570a:	609a      	str	r2, [r3, #8]
}
 800570c:	bf00      	nop
 800570e:	371c      	adds	r7, #28
 8005710:	46bd      	mov	sp, r7
 8005712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005716:	4770      	bx	lr

08005718 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005718:	b480      	push	{r7}
 800571a:	b085      	sub	sp, #20
 800571c:	af00      	add	r7, sp, #0
 800571e:	6078      	str	r0, [r7, #4]
 8005720:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005728:	2b01      	cmp	r3, #1
 800572a:	d101      	bne.n	8005730 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800572c:	2302      	movs	r3, #2
 800572e:	e050      	b.n	80057d2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	2201      	movs	r2, #1
 8005734:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	2202      	movs	r2, #2
 800573c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	685b      	ldr	r3, [r3, #4]
 8005746:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	689b      	ldr	r3, [r3, #8]
 800574e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005756:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005758:	683b      	ldr	r3, [r7, #0]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	68fa      	ldr	r2, [r7, #12]
 800575e:	4313      	orrs	r3, r2
 8005760:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	68fa      	ldr	r2, [r7, #12]
 8005768:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	4a1c      	ldr	r2, [pc, #112]	@ (80057e0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005770:	4293      	cmp	r3, r2
 8005772:	d018      	beq.n	80057a6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800577c:	d013      	beq.n	80057a6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	4a18      	ldr	r2, [pc, #96]	@ (80057e4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005784:	4293      	cmp	r3, r2
 8005786:	d00e      	beq.n	80057a6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	4a16      	ldr	r2, [pc, #88]	@ (80057e8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800578e:	4293      	cmp	r3, r2
 8005790:	d009      	beq.n	80057a6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	4a15      	ldr	r2, [pc, #84]	@ (80057ec <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005798:	4293      	cmp	r3, r2
 800579a:	d004      	beq.n	80057a6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	4a13      	ldr	r2, [pc, #76]	@ (80057f0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80057a2:	4293      	cmp	r3, r2
 80057a4:	d10c      	bne.n	80057c0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80057a6:	68bb      	ldr	r3, [r7, #8]
 80057a8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80057ac:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80057ae:	683b      	ldr	r3, [r7, #0]
 80057b0:	685b      	ldr	r3, [r3, #4]
 80057b2:	68ba      	ldr	r2, [r7, #8]
 80057b4:	4313      	orrs	r3, r2
 80057b6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	68ba      	ldr	r2, [r7, #8]
 80057be:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	2201      	movs	r2, #1
 80057c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	2200      	movs	r2, #0
 80057cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80057d0:	2300      	movs	r3, #0
}
 80057d2:	4618      	mov	r0, r3
 80057d4:	3714      	adds	r7, #20
 80057d6:	46bd      	mov	sp, r7
 80057d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057dc:	4770      	bx	lr
 80057de:	bf00      	nop
 80057e0:	40010000 	.word	0x40010000
 80057e4:	40000400 	.word	0x40000400
 80057e8:	40000800 	.word	0x40000800
 80057ec:	40000c00 	.word	0x40000c00
 80057f0:	40014000 	.word	0x40014000

080057f4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80057f4:	b480      	push	{r7}
 80057f6:	b083      	sub	sp, #12
 80057f8:	af00      	add	r7, sp, #0
 80057fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80057fc:	bf00      	nop
 80057fe:	370c      	adds	r7, #12
 8005800:	46bd      	mov	sp, r7
 8005802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005806:	4770      	bx	lr

08005808 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005808:	b480      	push	{r7}
 800580a:	b083      	sub	sp, #12
 800580c:	af00      	add	r7, sp, #0
 800580e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005810:	bf00      	nop
 8005812:	370c      	adds	r7, #12
 8005814:	46bd      	mov	sp, r7
 8005816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581a:	4770      	bx	lr

0800581c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800581c:	b580      	push	{r7, lr}
 800581e:	b082      	sub	sp, #8
 8005820:	af00      	add	r7, sp, #0
 8005822:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	2b00      	cmp	r3, #0
 8005828:	d101      	bne.n	800582e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800582a:	2301      	movs	r3, #1
 800582c:	e042      	b.n	80058b4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005834:	b2db      	uxtb	r3, r3
 8005836:	2b00      	cmp	r3, #0
 8005838:	d106      	bne.n	8005848 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	2200      	movs	r2, #0
 800583e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005842:	6878      	ldr	r0, [r7, #4]
 8005844:	f7fc fe6e 	bl	8002524 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	2224      	movs	r2, #36	@ 0x24
 800584c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	68da      	ldr	r2, [r3, #12]
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800585e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005860:	6878      	ldr	r0, [r7, #4]
 8005862:	f000 fdbd 	bl	80063e0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	691a      	ldr	r2, [r3, #16]
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005874:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	695a      	ldr	r2, [r3, #20]
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005884:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	68da      	ldr	r2, [r3, #12]
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005894:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	2200      	movs	r2, #0
 800589a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	2220      	movs	r2, #32
 80058a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	2220      	movs	r2, #32
 80058a8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	2200      	movs	r2, #0
 80058b0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80058b2:	2300      	movs	r3, #0
}
 80058b4:	4618      	mov	r0, r3
 80058b6:	3708      	adds	r7, #8
 80058b8:	46bd      	mov	sp, r7
 80058ba:	bd80      	pop	{r7, pc}

080058bc <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80058bc:	b580      	push	{r7, lr}
 80058be:	b08a      	sub	sp, #40	@ 0x28
 80058c0:	af02      	add	r7, sp, #8
 80058c2:	60f8      	str	r0, [r7, #12]
 80058c4:	60b9      	str	r1, [r7, #8]
 80058c6:	603b      	str	r3, [r7, #0]
 80058c8:	4613      	mov	r3, r2
 80058ca:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80058cc:	2300      	movs	r3, #0
 80058ce:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80058d6:	b2db      	uxtb	r3, r3
 80058d8:	2b20      	cmp	r3, #32
 80058da:	d175      	bne.n	80059c8 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80058dc:	68bb      	ldr	r3, [r7, #8]
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d002      	beq.n	80058e8 <HAL_UART_Transmit+0x2c>
 80058e2:	88fb      	ldrh	r3, [r7, #6]
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d101      	bne.n	80058ec <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80058e8:	2301      	movs	r3, #1
 80058ea:	e06e      	b.n	80059ca <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	2200      	movs	r2, #0
 80058f0:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	2221      	movs	r2, #33	@ 0x21
 80058f6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80058fa:	f7fd f837 	bl	800296c <HAL_GetTick>
 80058fe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	88fa      	ldrh	r2, [r7, #6]
 8005904:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	88fa      	ldrh	r2, [r7, #6]
 800590a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	689b      	ldr	r3, [r3, #8]
 8005910:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005914:	d108      	bne.n	8005928 <HAL_UART_Transmit+0x6c>
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	691b      	ldr	r3, [r3, #16]
 800591a:	2b00      	cmp	r3, #0
 800591c:	d104      	bne.n	8005928 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800591e:	2300      	movs	r3, #0
 8005920:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005922:	68bb      	ldr	r3, [r7, #8]
 8005924:	61bb      	str	r3, [r7, #24]
 8005926:	e003      	b.n	8005930 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005928:	68bb      	ldr	r3, [r7, #8]
 800592a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800592c:	2300      	movs	r3, #0
 800592e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005930:	e02e      	b.n	8005990 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005932:	683b      	ldr	r3, [r7, #0]
 8005934:	9300      	str	r3, [sp, #0]
 8005936:	697b      	ldr	r3, [r7, #20]
 8005938:	2200      	movs	r2, #0
 800593a:	2180      	movs	r1, #128	@ 0x80
 800593c:	68f8      	ldr	r0, [r7, #12]
 800593e:	f000 fb1f 	bl	8005f80 <UART_WaitOnFlagUntilTimeout>
 8005942:	4603      	mov	r3, r0
 8005944:	2b00      	cmp	r3, #0
 8005946:	d005      	beq.n	8005954 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	2220      	movs	r2, #32
 800594c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8005950:	2303      	movs	r3, #3
 8005952:	e03a      	b.n	80059ca <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8005954:	69fb      	ldr	r3, [r7, #28]
 8005956:	2b00      	cmp	r3, #0
 8005958:	d10b      	bne.n	8005972 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800595a:	69bb      	ldr	r3, [r7, #24]
 800595c:	881b      	ldrh	r3, [r3, #0]
 800595e:	461a      	mov	r2, r3
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005968:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800596a:	69bb      	ldr	r3, [r7, #24]
 800596c:	3302      	adds	r3, #2
 800596e:	61bb      	str	r3, [r7, #24]
 8005970:	e007      	b.n	8005982 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005972:	69fb      	ldr	r3, [r7, #28]
 8005974:	781a      	ldrb	r2, [r3, #0]
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800597c:	69fb      	ldr	r3, [r7, #28]
 800597e:	3301      	adds	r3, #1
 8005980:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005986:	b29b      	uxth	r3, r3
 8005988:	3b01      	subs	r3, #1
 800598a:	b29a      	uxth	r2, r3
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005994:	b29b      	uxth	r3, r3
 8005996:	2b00      	cmp	r3, #0
 8005998:	d1cb      	bne.n	8005932 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800599a:	683b      	ldr	r3, [r7, #0]
 800599c:	9300      	str	r3, [sp, #0]
 800599e:	697b      	ldr	r3, [r7, #20]
 80059a0:	2200      	movs	r2, #0
 80059a2:	2140      	movs	r1, #64	@ 0x40
 80059a4:	68f8      	ldr	r0, [r7, #12]
 80059a6:	f000 faeb 	bl	8005f80 <UART_WaitOnFlagUntilTimeout>
 80059aa:	4603      	mov	r3, r0
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d005      	beq.n	80059bc <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	2220      	movs	r2, #32
 80059b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80059b8:	2303      	movs	r3, #3
 80059ba:	e006      	b.n	80059ca <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	2220      	movs	r2, #32
 80059c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80059c4:	2300      	movs	r3, #0
 80059c6:	e000      	b.n	80059ca <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80059c8:	2302      	movs	r3, #2
  }
}
 80059ca:	4618      	mov	r0, r3
 80059cc:	3720      	adds	r7, #32
 80059ce:	46bd      	mov	sp, r7
 80059d0:	bd80      	pop	{r7, pc}

080059d2 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80059d2:	b580      	push	{r7, lr}
 80059d4:	b084      	sub	sp, #16
 80059d6:	af00      	add	r7, sp, #0
 80059d8:	60f8      	str	r0, [r7, #12]
 80059da:	60b9      	str	r1, [r7, #8]
 80059dc:	4613      	mov	r3, r2
 80059de:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80059e6:	b2db      	uxtb	r3, r3
 80059e8:	2b20      	cmp	r3, #32
 80059ea:	d112      	bne.n	8005a12 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80059ec:	68bb      	ldr	r3, [r7, #8]
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d002      	beq.n	80059f8 <HAL_UART_Receive_IT+0x26>
 80059f2:	88fb      	ldrh	r3, [r7, #6]
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d101      	bne.n	80059fc <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80059f8:	2301      	movs	r3, #1
 80059fa:	e00b      	b.n	8005a14 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	2200      	movs	r2, #0
 8005a00:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005a02:	88fb      	ldrh	r3, [r7, #6]
 8005a04:	461a      	mov	r2, r3
 8005a06:	68b9      	ldr	r1, [r7, #8]
 8005a08:	68f8      	ldr	r0, [r7, #12]
 8005a0a:	f000 fb12 	bl	8006032 <UART_Start_Receive_IT>
 8005a0e:	4603      	mov	r3, r0
 8005a10:	e000      	b.n	8005a14 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8005a12:	2302      	movs	r3, #2
  }
}
 8005a14:	4618      	mov	r0, r3
 8005a16:	3710      	adds	r7, #16
 8005a18:	46bd      	mov	sp, r7
 8005a1a:	bd80      	pop	{r7, pc}

08005a1c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005a1c:	b580      	push	{r7, lr}
 8005a1e:	b0ba      	sub	sp, #232	@ 0xe8
 8005a20:	af00      	add	r7, sp, #0
 8005a22:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	68db      	ldr	r3, [r3, #12]
 8005a34:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	695b      	ldr	r3, [r3, #20]
 8005a3e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8005a42:	2300      	movs	r3, #0
 8005a44:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8005a48:	2300      	movs	r3, #0
 8005a4a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005a4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005a52:	f003 030f 	and.w	r3, r3, #15
 8005a56:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8005a5a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d10f      	bne.n	8005a82 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005a62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005a66:	f003 0320 	and.w	r3, r3, #32
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d009      	beq.n	8005a82 <HAL_UART_IRQHandler+0x66>
 8005a6e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005a72:	f003 0320 	and.w	r3, r3, #32
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d003      	beq.n	8005a82 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005a7a:	6878      	ldr	r0, [r7, #4]
 8005a7c:	f000 fbf2 	bl	8006264 <UART_Receive_IT>
      return;
 8005a80:	e25b      	b.n	8005f3a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005a82:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	f000 80de 	beq.w	8005c48 <HAL_UART_IRQHandler+0x22c>
 8005a8c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005a90:	f003 0301 	and.w	r3, r3, #1
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d106      	bne.n	8005aa6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005a98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005a9c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	f000 80d1 	beq.w	8005c48 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005aa6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005aaa:	f003 0301 	and.w	r3, r3, #1
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d00b      	beq.n	8005aca <HAL_UART_IRQHandler+0xae>
 8005ab2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005ab6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d005      	beq.n	8005aca <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ac2:	f043 0201 	orr.w	r2, r3, #1
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005aca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005ace:	f003 0304 	and.w	r3, r3, #4
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d00b      	beq.n	8005aee <HAL_UART_IRQHandler+0xd2>
 8005ad6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005ada:	f003 0301 	and.w	r3, r3, #1
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d005      	beq.n	8005aee <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ae6:	f043 0202 	orr.w	r2, r3, #2
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005aee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005af2:	f003 0302 	and.w	r3, r3, #2
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d00b      	beq.n	8005b12 <HAL_UART_IRQHandler+0xf6>
 8005afa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005afe:	f003 0301 	and.w	r3, r3, #1
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d005      	beq.n	8005b12 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b0a:	f043 0204 	orr.w	r2, r3, #4
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005b12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005b16:	f003 0308 	and.w	r3, r3, #8
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d011      	beq.n	8005b42 <HAL_UART_IRQHandler+0x126>
 8005b1e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005b22:	f003 0320 	and.w	r3, r3, #32
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d105      	bne.n	8005b36 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005b2a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005b2e:	f003 0301 	and.w	r3, r3, #1
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d005      	beq.n	8005b42 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b3a:	f043 0208 	orr.w	r2, r3, #8
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	f000 81f2 	beq.w	8005f30 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005b4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005b50:	f003 0320 	and.w	r3, r3, #32
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d008      	beq.n	8005b6a <HAL_UART_IRQHandler+0x14e>
 8005b58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005b5c:	f003 0320 	and.w	r3, r3, #32
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d002      	beq.n	8005b6a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005b64:	6878      	ldr	r0, [r7, #4]
 8005b66:	f000 fb7d 	bl	8006264 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	695b      	ldr	r3, [r3, #20]
 8005b70:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b74:	2b40      	cmp	r3, #64	@ 0x40
 8005b76:	bf0c      	ite	eq
 8005b78:	2301      	moveq	r3, #1
 8005b7a:	2300      	movne	r3, #0
 8005b7c:	b2db      	uxtb	r3, r3
 8005b7e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b86:	f003 0308 	and.w	r3, r3, #8
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d103      	bne.n	8005b96 <HAL_UART_IRQHandler+0x17a>
 8005b8e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d04f      	beq.n	8005c36 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005b96:	6878      	ldr	r0, [r7, #4]
 8005b98:	f000 fa85 	bl	80060a6 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	695b      	ldr	r3, [r3, #20]
 8005ba2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ba6:	2b40      	cmp	r3, #64	@ 0x40
 8005ba8:	d141      	bne.n	8005c2e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	3314      	adds	r3, #20
 8005bb0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bb4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005bb8:	e853 3f00 	ldrex	r3, [r3]
 8005bbc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005bc0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005bc4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005bc8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	3314      	adds	r3, #20
 8005bd2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005bd6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8005bda:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bde:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005be2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005be6:	e841 2300 	strex	r3, r2, [r1]
 8005bea:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8005bee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d1d9      	bne.n	8005baa <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d013      	beq.n	8005c26 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c02:	4a7e      	ldr	r2, [pc, #504]	@ (8005dfc <HAL_UART_IRQHandler+0x3e0>)
 8005c04:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c0a:	4618      	mov	r0, r3
 8005c0c:	f7fe f8dc 	bl	8003dc8 <HAL_DMA_Abort_IT>
 8005c10:	4603      	mov	r3, r0
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d016      	beq.n	8005c44 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c1a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005c1c:	687a      	ldr	r2, [r7, #4]
 8005c1e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005c20:	4610      	mov	r0, r2
 8005c22:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c24:	e00e      	b.n	8005c44 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005c26:	6878      	ldr	r0, [r7, #4]
 8005c28:	f000 f994 	bl	8005f54 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c2c:	e00a      	b.n	8005c44 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005c2e:	6878      	ldr	r0, [r7, #4]
 8005c30:	f000 f990 	bl	8005f54 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c34:	e006      	b.n	8005c44 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005c36:	6878      	ldr	r0, [r7, #4]
 8005c38:	f000 f98c 	bl	8005f54 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	2200      	movs	r2, #0
 8005c40:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8005c42:	e175      	b.n	8005f30 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c44:	bf00      	nop
    return;
 8005c46:	e173      	b.n	8005f30 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c4c:	2b01      	cmp	r3, #1
 8005c4e:	f040 814f 	bne.w	8005ef0 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005c52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005c56:	f003 0310 	and.w	r3, r3, #16
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	f000 8148 	beq.w	8005ef0 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005c60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005c64:	f003 0310 	and.w	r3, r3, #16
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	f000 8141 	beq.w	8005ef0 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005c6e:	2300      	movs	r3, #0
 8005c70:	60bb      	str	r3, [r7, #8]
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	60bb      	str	r3, [r7, #8]
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	685b      	ldr	r3, [r3, #4]
 8005c80:	60bb      	str	r3, [r7, #8]
 8005c82:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	695b      	ldr	r3, [r3, #20]
 8005c8a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c8e:	2b40      	cmp	r3, #64	@ 0x40
 8005c90:	f040 80b6 	bne.w	8005e00 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	685b      	ldr	r3, [r3, #4]
 8005c9c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005ca0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	f000 8145 	beq.w	8005f34 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005cae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005cb2:	429a      	cmp	r2, r3
 8005cb4:	f080 813e 	bcs.w	8005f34 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005cbe:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005cc4:	69db      	ldr	r3, [r3, #28]
 8005cc6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005cca:	f000 8088 	beq.w	8005dde <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	330c      	adds	r3, #12
 8005cd4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cd8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005cdc:	e853 3f00 	ldrex	r3, [r3]
 8005ce0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005ce4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005ce8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005cec:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	330c      	adds	r3, #12
 8005cf6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8005cfa:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005cfe:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d02:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005d06:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005d0a:	e841 2300 	strex	r3, r2, [r1]
 8005d0e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005d12:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d1d9      	bne.n	8005cce <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	3314      	adds	r3, #20
 8005d20:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d22:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005d24:	e853 3f00 	ldrex	r3, [r3]
 8005d28:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005d2a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005d2c:	f023 0301 	bic.w	r3, r3, #1
 8005d30:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	3314      	adds	r3, #20
 8005d3a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005d3e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005d42:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d44:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005d46:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005d4a:	e841 2300 	strex	r3, r2, [r1]
 8005d4e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005d50:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d1e1      	bne.n	8005d1a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	3314      	adds	r3, #20
 8005d5c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d5e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005d60:	e853 3f00 	ldrex	r3, [r3]
 8005d64:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005d66:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005d68:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005d6c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	3314      	adds	r3, #20
 8005d76:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005d7a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005d7c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d7e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005d80:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005d82:	e841 2300 	strex	r3, r2, [r1]
 8005d86:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005d88:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d1e3      	bne.n	8005d56 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	2220      	movs	r2, #32
 8005d92:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	2200      	movs	r2, #0
 8005d9a:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	330c      	adds	r3, #12
 8005da2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005da4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005da6:	e853 3f00 	ldrex	r3, [r3]
 8005daa:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005dac:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005dae:	f023 0310 	bic.w	r3, r3, #16
 8005db2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	330c      	adds	r3, #12
 8005dbc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8005dc0:	65ba      	str	r2, [r7, #88]	@ 0x58
 8005dc2:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dc4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005dc6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005dc8:	e841 2300 	strex	r3, r2, [r1]
 8005dcc:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005dce:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d1e3      	bne.n	8005d9c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005dd8:	4618      	mov	r0, r3
 8005dda:	f7fd ff85 	bl	8003ce8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	2202      	movs	r2, #2
 8005de2:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005dec:	b29b      	uxth	r3, r3
 8005dee:	1ad3      	subs	r3, r2, r3
 8005df0:	b29b      	uxth	r3, r3
 8005df2:	4619      	mov	r1, r3
 8005df4:	6878      	ldr	r0, [r7, #4]
 8005df6:	f000 f8b7 	bl	8005f68 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005dfa:	e09b      	b.n	8005f34 <HAL_UART_IRQHandler+0x518>
 8005dfc:	0800616d 	.word	0x0800616d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005e08:	b29b      	uxth	r3, r3
 8005e0a:	1ad3      	subs	r3, r2, r3
 8005e0c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005e14:	b29b      	uxth	r3, r3
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	f000 808e 	beq.w	8005f38 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8005e1c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	f000 8089 	beq.w	8005f38 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	330c      	adds	r3, #12
 8005e2c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e30:	e853 3f00 	ldrex	r3, [r3]
 8005e34:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005e36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e38:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005e3c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	330c      	adds	r3, #12
 8005e46:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8005e4a:	647a      	str	r2, [r7, #68]	@ 0x44
 8005e4c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e4e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005e50:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005e52:	e841 2300 	strex	r3, r2, [r1]
 8005e56:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005e58:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d1e3      	bne.n	8005e26 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	3314      	adds	r3, #20
 8005e64:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e68:	e853 3f00 	ldrex	r3, [r3]
 8005e6c:	623b      	str	r3, [r7, #32]
   return(result);
 8005e6e:	6a3b      	ldr	r3, [r7, #32]
 8005e70:	f023 0301 	bic.w	r3, r3, #1
 8005e74:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	3314      	adds	r3, #20
 8005e7e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005e82:	633a      	str	r2, [r7, #48]	@ 0x30
 8005e84:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e86:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005e88:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005e8a:	e841 2300 	strex	r3, r2, [r1]
 8005e8e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005e90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d1e3      	bne.n	8005e5e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	2220      	movs	r2, #32
 8005e9a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	2200      	movs	r2, #0
 8005ea2:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	330c      	adds	r3, #12
 8005eaa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005eac:	693b      	ldr	r3, [r7, #16]
 8005eae:	e853 3f00 	ldrex	r3, [r3]
 8005eb2:	60fb      	str	r3, [r7, #12]
   return(result);
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	f023 0310 	bic.w	r3, r3, #16
 8005eba:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	330c      	adds	r3, #12
 8005ec4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8005ec8:	61fa      	str	r2, [r7, #28]
 8005eca:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ecc:	69b9      	ldr	r1, [r7, #24]
 8005ece:	69fa      	ldr	r2, [r7, #28]
 8005ed0:	e841 2300 	strex	r3, r2, [r1]
 8005ed4:	617b      	str	r3, [r7, #20]
   return(result);
 8005ed6:	697b      	ldr	r3, [r7, #20]
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d1e3      	bne.n	8005ea4 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	2202      	movs	r2, #2
 8005ee0:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005ee2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005ee6:	4619      	mov	r1, r3
 8005ee8:	6878      	ldr	r0, [r7, #4]
 8005eea:	f000 f83d 	bl	8005f68 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005eee:	e023      	b.n	8005f38 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005ef0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005ef4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d009      	beq.n	8005f10 <HAL_UART_IRQHandler+0x4f4>
 8005efc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005f00:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d003      	beq.n	8005f10 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8005f08:	6878      	ldr	r0, [r7, #4]
 8005f0a:	f000 f943 	bl	8006194 <UART_Transmit_IT>
    return;
 8005f0e:	e014      	b.n	8005f3a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005f10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005f14:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d00e      	beq.n	8005f3a <HAL_UART_IRQHandler+0x51e>
 8005f1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005f20:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d008      	beq.n	8005f3a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8005f28:	6878      	ldr	r0, [r7, #4]
 8005f2a:	f000 f983 	bl	8006234 <UART_EndTransmit_IT>
    return;
 8005f2e:	e004      	b.n	8005f3a <HAL_UART_IRQHandler+0x51e>
    return;
 8005f30:	bf00      	nop
 8005f32:	e002      	b.n	8005f3a <HAL_UART_IRQHandler+0x51e>
      return;
 8005f34:	bf00      	nop
 8005f36:	e000      	b.n	8005f3a <HAL_UART_IRQHandler+0x51e>
      return;
 8005f38:	bf00      	nop
  }
}
 8005f3a:	37e8      	adds	r7, #232	@ 0xe8
 8005f3c:	46bd      	mov	sp, r7
 8005f3e:	bd80      	pop	{r7, pc}

08005f40 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005f40:	b480      	push	{r7}
 8005f42:	b083      	sub	sp, #12
 8005f44:	af00      	add	r7, sp, #0
 8005f46:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005f48:	bf00      	nop
 8005f4a:	370c      	adds	r7, #12
 8005f4c:	46bd      	mov	sp, r7
 8005f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f52:	4770      	bx	lr

08005f54 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005f54:	b480      	push	{r7}
 8005f56:	b083      	sub	sp, #12
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005f5c:	bf00      	nop
 8005f5e:	370c      	adds	r7, #12
 8005f60:	46bd      	mov	sp, r7
 8005f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f66:	4770      	bx	lr

08005f68 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005f68:	b480      	push	{r7}
 8005f6a:	b083      	sub	sp, #12
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	6078      	str	r0, [r7, #4]
 8005f70:	460b      	mov	r3, r1
 8005f72:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005f74:	bf00      	nop
 8005f76:	370c      	adds	r7, #12
 8005f78:	46bd      	mov	sp, r7
 8005f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f7e:	4770      	bx	lr

08005f80 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005f80:	b580      	push	{r7, lr}
 8005f82:	b086      	sub	sp, #24
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	60f8      	str	r0, [r7, #12]
 8005f88:	60b9      	str	r1, [r7, #8]
 8005f8a:	603b      	str	r3, [r7, #0]
 8005f8c:	4613      	mov	r3, r2
 8005f8e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005f90:	e03b      	b.n	800600a <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005f92:	6a3b      	ldr	r3, [r7, #32]
 8005f94:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005f98:	d037      	beq.n	800600a <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f9a:	f7fc fce7 	bl	800296c <HAL_GetTick>
 8005f9e:	4602      	mov	r2, r0
 8005fa0:	683b      	ldr	r3, [r7, #0]
 8005fa2:	1ad3      	subs	r3, r2, r3
 8005fa4:	6a3a      	ldr	r2, [r7, #32]
 8005fa6:	429a      	cmp	r2, r3
 8005fa8:	d302      	bcc.n	8005fb0 <UART_WaitOnFlagUntilTimeout+0x30>
 8005faa:	6a3b      	ldr	r3, [r7, #32]
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d101      	bne.n	8005fb4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005fb0:	2303      	movs	r3, #3
 8005fb2:	e03a      	b.n	800602a <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	68db      	ldr	r3, [r3, #12]
 8005fba:	f003 0304 	and.w	r3, r3, #4
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d023      	beq.n	800600a <UART_WaitOnFlagUntilTimeout+0x8a>
 8005fc2:	68bb      	ldr	r3, [r7, #8]
 8005fc4:	2b80      	cmp	r3, #128	@ 0x80
 8005fc6:	d020      	beq.n	800600a <UART_WaitOnFlagUntilTimeout+0x8a>
 8005fc8:	68bb      	ldr	r3, [r7, #8]
 8005fca:	2b40      	cmp	r3, #64	@ 0x40
 8005fcc:	d01d      	beq.n	800600a <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	f003 0308 	and.w	r3, r3, #8
 8005fd8:	2b08      	cmp	r3, #8
 8005fda:	d116      	bne.n	800600a <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005fdc:	2300      	movs	r3, #0
 8005fde:	617b      	str	r3, [r7, #20]
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	617b      	str	r3, [r7, #20]
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	685b      	ldr	r3, [r3, #4]
 8005fee:	617b      	str	r3, [r7, #20]
 8005ff0:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005ff2:	68f8      	ldr	r0, [r7, #12]
 8005ff4:	f000 f857 	bl	80060a6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	2208      	movs	r2, #8
 8005ffc:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	2200      	movs	r2, #0
 8006002:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8006006:	2301      	movs	r3, #1
 8006008:	e00f      	b.n	800602a <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	681a      	ldr	r2, [r3, #0]
 8006010:	68bb      	ldr	r3, [r7, #8]
 8006012:	4013      	ands	r3, r2
 8006014:	68ba      	ldr	r2, [r7, #8]
 8006016:	429a      	cmp	r2, r3
 8006018:	bf0c      	ite	eq
 800601a:	2301      	moveq	r3, #1
 800601c:	2300      	movne	r3, #0
 800601e:	b2db      	uxtb	r3, r3
 8006020:	461a      	mov	r2, r3
 8006022:	79fb      	ldrb	r3, [r7, #7]
 8006024:	429a      	cmp	r2, r3
 8006026:	d0b4      	beq.n	8005f92 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006028:	2300      	movs	r3, #0
}
 800602a:	4618      	mov	r0, r3
 800602c:	3718      	adds	r7, #24
 800602e:	46bd      	mov	sp, r7
 8006030:	bd80      	pop	{r7, pc}

08006032 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006032:	b480      	push	{r7}
 8006034:	b085      	sub	sp, #20
 8006036:	af00      	add	r7, sp, #0
 8006038:	60f8      	str	r0, [r7, #12]
 800603a:	60b9      	str	r1, [r7, #8]
 800603c:	4613      	mov	r3, r2
 800603e:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	68ba      	ldr	r2, [r7, #8]
 8006044:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	88fa      	ldrh	r2, [r7, #6]
 800604a:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	88fa      	ldrh	r2, [r7, #6]
 8006050:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	2200      	movs	r2, #0
 8006056:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	2222      	movs	r2, #34	@ 0x22
 800605c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	691b      	ldr	r3, [r3, #16]
 8006064:	2b00      	cmp	r3, #0
 8006066:	d007      	beq.n	8006078 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	68da      	ldr	r2, [r3, #12]
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006076:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	695a      	ldr	r2, [r3, #20]
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	f042 0201 	orr.w	r2, r2, #1
 8006086:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	68da      	ldr	r2, [r3, #12]
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	f042 0220 	orr.w	r2, r2, #32
 8006096:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006098:	2300      	movs	r3, #0
}
 800609a:	4618      	mov	r0, r3
 800609c:	3714      	adds	r7, #20
 800609e:	46bd      	mov	sp, r7
 80060a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a4:	4770      	bx	lr

080060a6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80060a6:	b480      	push	{r7}
 80060a8:	b095      	sub	sp, #84	@ 0x54
 80060aa:	af00      	add	r7, sp, #0
 80060ac:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	330c      	adds	r3, #12
 80060b4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80060b8:	e853 3f00 	ldrex	r3, [r3]
 80060bc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80060be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060c0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80060c4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	330c      	adds	r3, #12
 80060cc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80060ce:	643a      	str	r2, [r7, #64]	@ 0x40
 80060d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060d2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80060d4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80060d6:	e841 2300 	strex	r3, r2, [r1]
 80060da:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80060dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d1e5      	bne.n	80060ae <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	3314      	adds	r3, #20
 80060e8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060ea:	6a3b      	ldr	r3, [r7, #32]
 80060ec:	e853 3f00 	ldrex	r3, [r3]
 80060f0:	61fb      	str	r3, [r7, #28]
   return(result);
 80060f2:	69fb      	ldr	r3, [r7, #28]
 80060f4:	f023 0301 	bic.w	r3, r3, #1
 80060f8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	3314      	adds	r3, #20
 8006100:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006102:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006104:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006106:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006108:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800610a:	e841 2300 	strex	r3, r2, [r1]
 800610e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006110:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006112:	2b00      	cmp	r3, #0
 8006114:	d1e5      	bne.n	80060e2 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800611a:	2b01      	cmp	r3, #1
 800611c:	d119      	bne.n	8006152 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	330c      	adds	r3, #12
 8006124:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	e853 3f00 	ldrex	r3, [r3]
 800612c:	60bb      	str	r3, [r7, #8]
   return(result);
 800612e:	68bb      	ldr	r3, [r7, #8]
 8006130:	f023 0310 	bic.w	r3, r3, #16
 8006134:	647b      	str	r3, [r7, #68]	@ 0x44
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	330c      	adds	r3, #12
 800613c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800613e:	61ba      	str	r2, [r7, #24]
 8006140:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006142:	6979      	ldr	r1, [r7, #20]
 8006144:	69ba      	ldr	r2, [r7, #24]
 8006146:	e841 2300 	strex	r3, r2, [r1]
 800614a:	613b      	str	r3, [r7, #16]
   return(result);
 800614c:	693b      	ldr	r3, [r7, #16]
 800614e:	2b00      	cmp	r3, #0
 8006150:	d1e5      	bne.n	800611e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	2220      	movs	r2, #32
 8006156:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	2200      	movs	r2, #0
 800615e:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8006160:	bf00      	nop
 8006162:	3754      	adds	r7, #84	@ 0x54
 8006164:	46bd      	mov	sp, r7
 8006166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800616a:	4770      	bx	lr

0800616c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800616c:	b580      	push	{r7, lr}
 800616e:	b084      	sub	sp, #16
 8006170:	af00      	add	r7, sp, #0
 8006172:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006178:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	2200      	movs	r2, #0
 800617e:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	2200      	movs	r2, #0
 8006184:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006186:	68f8      	ldr	r0, [r7, #12]
 8006188:	f7ff fee4 	bl	8005f54 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800618c:	bf00      	nop
 800618e:	3710      	adds	r7, #16
 8006190:	46bd      	mov	sp, r7
 8006192:	bd80      	pop	{r7, pc}

08006194 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006194:	b480      	push	{r7}
 8006196:	b085      	sub	sp, #20
 8006198:	af00      	add	r7, sp, #0
 800619a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80061a2:	b2db      	uxtb	r3, r3
 80061a4:	2b21      	cmp	r3, #33	@ 0x21
 80061a6:	d13e      	bne.n	8006226 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	689b      	ldr	r3, [r3, #8]
 80061ac:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80061b0:	d114      	bne.n	80061dc <UART_Transmit_IT+0x48>
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	691b      	ldr	r3, [r3, #16]
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d110      	bne.n	80061dc <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	6a1b      	ldr	r3, [r3, #32]
 80061be:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	881b      	ldrh	r3, [r3, #0]
 80061c4:	461a      	mov	r2, r3
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80061ce:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	6a1b      	ldr	r3, [r3, #32]
 80061d4:	1c9a      	adds	r2, r3, #2
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	621a      	str	r2, [r3, #32]
 80061da:	e008      	b.n	80061ee <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	6a1b      	ldr	r3, [r3, #32]
 80061e0:	1c59      	adds	r1, r3, #1
 80061e2:	687a      	ldr	r2, [r7, #4]
 80061e4:	6211      	str	r1, [r2, #32]
 80061e6:	781a      	ldrb	r2, [r3, #0]
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80061f2:	b29b      	uxth	r3, r3
 80061f4:	3b01      	subs	r3, #1
 80061f6:	b29b      	uxth	r3, r3
 80061f8:	687a      	ldr	r2, [r7, #4]
 80061fa:	4619      	mov	r1, r3
 80061fc:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d10f      	bne.n	8006222 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	68da      	ldr	r2, [r3, #12]
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006210:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	68da      	ldr	r2, [r3, #12]
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006220:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006222:	2300      	movs	r3, #0
 8006224:	e000      	b.n	8006228 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006226:	2302      	movs	r3, #2
  }
}
 8006228:	4618      	mov	r0, r3
 800622a:	3714      	adds	r7, #20
 800622c:	46bd      	mov	sp, r7
 800622e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006232:	4770      	bx	lr

08006234 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006234:	b580      	push	{r7, lr}
 8006236:	b082      	sub	sp, #8
 8006238:	af00      	add	r7, sp, #0
 800623a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	68da      	ldr	r2, [r3, #12]
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800624a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	2220      	movs	r2, #32
 8006250:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006254:	6878      	ldr	r0, [r7, #4]
 8006256:	f7ff fe73 	bl	8005f40 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800625a:	2300      	movs	r3, #0
}
 800625c:	4618      	mov	r0, r3
 800625e:	3708      	adds	r7, #8
 8006260:	46bd      	mov	sp, r7
 8006262:	bd80      	pop	{r7, pc}

08006264 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006264:	b580      	push	{r7, lr}
 8006266:	b08c      	sub	sp, #48	@ 0x30
 8006268:	af00      	add	r7, sp, #0
 800626a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006272:	b2db      	uxtb	r3, r3
 8006274:	2b22      	cmp	r3, #34	@ 0x22
 8006276:	f040 80ae 	bne.w	80063d6 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	689b      	ldr	r3, [r3, #8]
 800627e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006282:	d117      	bne.n	80062b4 <UART_Receive_IT+0x50>
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	691b      	ldr	r3, [r3, #16]
 8006288:	2b00      	cmp	r3, #0
 800628a:	d113      	bne.n	80062b4 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800628c:	2300      	movs	r3, #0
 800628e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006294:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	685b      	ldr	r3, [r3, #4]
 800629c:	b29b      	uxth	r3, r3
 800629e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80062a2:	b29a      	uxth	r2, r3
 80062a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062a6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062ac:	1c9a      	adds	r2, r3, #2
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	629a      	str	r2, [r3, #40]	@ 0x28
 80062b2:	e026      	b.n	8006302 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80062ba:	2300      	movs	r3, #0
 80062bc:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	689b      	ldr	r3, [r3, #8]
 80062c2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80062c6:	d007      	beq.n	80062d8 <UART_Receive_IT+0x74>
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	689b      	ldr	r3, [r3, #8]
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d10a      	bne.n	80062e6 <UART_Receive_IT+0x82>
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	691b      	ldr	r3, [r3, #16]
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d106      	bne.n	80062e6 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	685b      	ldr	r3, [r3, #4]
 80062de:	b2da      	uxtb	r2, r3
 80062e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062e2:	701a      	strb	r2, [r3, #0]
 80062e4:	e008      	b.n	80062f8 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	685b      	ldr	r3, [r3, #4]
 80062ec:	b2db      	uxtb	r3, r3
 80062ee:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80062f2:	b2da      	uxtb	r2, r3
 80062f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062f6:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062fc:	1c5a      	adds	r2, r3, #1
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006306:	b29b      	uxth	r3, r3
 8006308:	3b01      	subs	r3, #1
 800630a:	b29b      	uxth	r3, r3
 800630c:	687a      	ldr	r2, [r7, #4]
 800630e:	4619      	mov	r1, r3
 8006310:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8006312:	2b00      	cmp	r3, #0
 8006314:	d15d      	bne.n	80063d2 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	68da      	ldr	r2, [r3, #12]
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	f022 0220 	bic.w	r2, r2, #32
 8006324:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	68da      	ldr	r2, [r3, #12]
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006334:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	695a      	ldr	r2, [r3, #20]
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	f022 0201 	bic.w	r2, r2, #1
 8006344:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	2220      	movs	r2, #32
 800634a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	2200      	movs	r2, #0
 8006352:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006358:	2b01      	cmp	r3, #1
 800635a:	d135      	bne.n	80063c8 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	2200      	movs	r2, #0
 8006360:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	330c      	adds	r3, #12
 8006368:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800636a:	697b      	ldr	r3, [r7, #20]
 800636c:	e853 3f00 	ldrex	r3, [r3]
 8006370:	613b      	str	r3, [r7, #16]
   return(result);
 8006372:	693b      	ldr	r3, [r7, #16]
 8006374:	f023 0310 	bic.w	r3, r3, #16
 8006378:	627b      	str	r3, [r7, #36]	@ 0x24
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	330c      	adds	r3, #12
 8006380:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006382:	623a      	str	r2, [r7, #32]
 8006384:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006386:	69f9      	ldr	r1, [r7, #28]
 8006388:	6a3a      	ldr	r2, [r7, #32]
 800638a:	e841 2300 	strex	r3, r2, [r1]
 800638e:	61bb      	str	r3, [r7, #24]
   return(result);
 8006390:	69bb      	ldr	r3, [r7, #24]
 8006392:	2b00      	cmp	r3, #0
 8006394:	d1e5      	bne.n	8006362 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	f003 0310 	and.w	r3, r3, #16
 80063a0:	2b10      	cmp	r3, #16
 80063a2:	d10a      	bne.n	80063ba <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80063a4:	2300      	movs	r3, #0
 80063a6:	60fb      	str	r3, [r7, #12]
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	60fb      	str	r3, [r7, #12]
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	685b      	ldr	r3, [r3, #4]
 80063b6:	60fb      	str	r3, [r7, #12]
 80063b8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80063be:	4619      	mov	r1, r3
 80063c0:	6878      	ldr	r0, [r7, #4]
 80063c2:	f7ff fdd1 	bl	8005f68 <HAL_UARTEx_RxEventCallback>
 80063c6:	e002      	b.n	80063ce <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80063c8:	6878      	ldr	r0, [r7, #4]
 80063ca:	f7fb f8b1 	bl	8001530 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80063ce:	2300      	movs	r3, #0
 80063d0:	e002      	b.n	80063d8 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80063d2:	2300      	movs	r3, #0
 80063d4:	e000      	b.n	80063d8 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80063d6:	2302      	movs	r3, #2
  }
}
 80063d8:	4618      	mov	r0, r3
 80063da:	3730      	adds	r7, #48	@ 0x30
 80063dc:	46bd      	mov	sp, r7
 80063de:	bd80      	pop	{r7, pc}

080063e0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80063e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80063e4:	b0c0      	sub	sp, #256	@ 0x100
 80063e6:	af00      	add	r7, sp, #0
 80063e8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80063ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	691b      	ldr	r3, [r3, #16]
 80063f4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80063f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80063fc:	68d9      	ldr	r1, [r3, #12]
 80063fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006402:	681a      	ldr	r2, [r3, #0]
 8006404:	ea40 0301 	orr.w	r3, r0, r1
 8006408:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800640a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800640e:	689a      	ldr	r2, [r3, #8]
 8006410:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006414:	691b      	ldr	r3, [r3, #16]
 8006416:	431a      	orrs	r2, r3
 8006418:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800641c:	695b      	ldr	r3, [r3, #20]
 800641e:	431a      	orrs	r2, r3
 8006420:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006424:	69db      	ldr	r3, [r3, #28]
 8006426:	4313      	orrs	r3, r2
 8006428:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800642c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	68db      	ldr	r3, [r3, #12]
 8006434:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8006438:	f021 010c 	bic.w	r1, r1, #12
 800643c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006440:	681a      	ldr	r2, [r3, #0]
 8006442:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006446:	430b      	orrs	r3, r1
 8006448:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800644a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	695b      	ldr	r3, [r3, #20]
 8006452:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8006456:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800645a:	6999      	ldr	r1, [r3, #24]
 800645c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006460:	681a      	ldr	r2, [r3, #0]
 8006462:	ea40 0301 	orr.w	r3, r0, r1
 8006466:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006468:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800646c:	681a      	ldr	r2, [r3, #0]
 800646e:	4b8f      	ldr	r3, [pc, #572]	@ (80066ac <UART_SetConfig+0x2cc>)
 8006470:	429a      	cmp	r2, r3
 8006472:	d005      	beq.n	8006480 <UART_SetConfig+0xa0>
 8006474:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006478:	681a      	ldr	r2, [r3, #0]
 800647a:	4b8d      	ldr	r3, [pc, #564]	@ (80066b0 <UART_SetConfig+0x2d0>)
 800647c:	429a      	cmp	r2, r3
 800647e:	d104      	bne.n	800648a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006480:	f7fe fd50 	bl	8004f24 <HAL_RCC_GetPCLK2Freq>
 8006484:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8006488:	e003      	b.n	8006492 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800648a:	f7fe fd37 	bl	8004efc <HAL_RCC_GetPCLK1Freq>
 800648e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006492:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006496:	69db      	ldr	r3, [r3, #28]
 8006498:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800649c:	f040 810c 	bne.w	80066b8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80064a0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80064a4:	2200      	movs	r2, #0
 80064a6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80064aa:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80064ae:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80064b2:	4622      	mov	r2, r4
 80064b4:	462b      	mov	r3, r5
 80064b6:	1891      	adds	r1, r2, r2
 80064b8:	65b9      	str	r1, [r7, #88]	@ 0x58
 80064ba:	415b      	adcs	r3, r3
 80064bc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80064be:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80064c2:	4621      	mov	r1, r4
 80064c4:	eb12 0801 	adds.w	r8, r2, r1
 80064c8:	4629      	mov	r1, r5
 80064ca:	eb43 0901 	adc.w	r9, r3, r1
 80064ce:	f04f 0200 	mov.w	r2, #0
 80064d2:	f04f 0300 	mov.w	r3, #0
 80064d6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80064da:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80064de:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80064e2:	4690      	mov	r8, r2
 80064e4:	4699      	mov	r9, r3
 80064e6:	4623      	mov	r3, r4
 80064e8:	eb18 0303 	adds.w	r3, r8, r3
 80064ec:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80064f0:	462b      	mov	r3, r5
 80064f2:	eb49 0303 	adc.w	r3, r9, r3
 80064f6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80064fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80064fe:	685b      	ldr	r3, [r3, #4]
 8006500:	2200      	movs	r2, #0
 8006502:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006506:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800650a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800650e:	460b      	mov	r3, r1
 8006510:	18db      	adds	r3, r3, r3
 8006512:	653b      	str	r3, [r7, #80]	@ 0x50
 8006514:	4613      	mov	r3, r2
 8006516:	eb42 0303 	adc.w	r3, r2, r3
 800651a:	657b      	str	r3, [r7, #84]	@ 0x54
 800651c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8006520:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8006524:	f7fa fbc8 	bl	8000cb8 <__aeabi_uldivmod>
 8006528:	4602      	mov	r2, r0
 800652a:	460b      	mov	r3, r1
 800652c:	4b61      	ldr	r3, [pc, #388]	@ (80066b4 <UART_SetConfig+0x2d4>)
 800652e:	fba3 2302 	umull	r2, r3, r3, r2
 8006532:	095b      	lsrs	r3, r3, #5
 8006534:	011c      	lsls	r4, r3, #4
 8006536:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800653a:	2200      	movs	r2, #0
 800653c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006540:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8006544:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8006548:	4642      	mov	r2, r8
 800654a:	464b      	mov	r3, r9
 800654c:	1891      	adds	r1, r2, r2
 800654e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8006550:	415b      	adcs	r3, r3
 8006552:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006554:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8006558:	4641      	mov	r1, r8
 800655a:	eb12 0a01 	adds.w	sl, r2, r1
 800655e:	4649      	mov	r1, r9
 8006560:	eb43 0b01 	adc.w	fp, r3, r1
 8006564:	f04f 0200 	mov.w	r2, #0
 8006568:	f04f 0300 	mov.w	r3, #0
 800656c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006570:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006574:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006578:	4692      	mov	sl, r2
 800657a:	469b      	mov	fp, r3
 800657c:	4643      	mov	r3, r8
 800657e:	eb1a 0303 	adds.w	r3, sl, r3
 8006582:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006586:	464b      	mov	r3, r9
 8006588:	eb4b 0303 	adc.w	r3, fp, r3
 800658c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006590:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006594:	685b      	ldr	r3, [r3, #4]
 8006596:	2200      	movs	r2, #0
 8006598:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800659c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80065a0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80065a4:	460b      	mov	r3, r1
 80065a6:	18db      	adds	r3, r3, r3
 80065a8:	643b      	str	r3, [r7, #64]	@ 0x40
 80065aa:	4613      	mov	r3, r2
 80065ac:	eb42 0303 	adc.w	r3, r2, r3
 80065b0:	647b      	str	r3, [r7, #68]	@ 0x44
 80065b2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80065b6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80065ba:	f7fa fb7d 	bl	8000cb8 <__aeabi_uldivmod>
 80065be:	4602      	mov	r2, r0
 80065c0:	460b      	mov	r3, r1
 80065c2:	4611      	mov	r1, r2
 80065c4:	4b3b      	ldr	r3, [pc, #236]	@ (80066b4 <UART_SetConfig+0x2d4>)
 80065c6:	fba3 2301 	umull	r2, r3, r3, r1
 80065ca:	095b      	lsrs	r3, r3, #5
 80065cc:	2264      	movs	r2, #100	@ 0x64
 80065ce:	fb02 f303 	mul.w	r3, r2, r3
 80065d2:	1acb      	subs	r3, r1, r3
 80065d4:	00db      	lsls	r3, r3, #3
 80065d6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80065da:	4b36      	ldr	r3, [pc, #216]	@ (80066b4 <UART_SetConfig+0x2d4>)
 80065dc:	fba3 2302 	umull	r2, r3, r3, r2
 80065e0:	095b      	lsrs	r3, r3, #5
 80065e2:	005b      	lsls	r3, r3, #1
 80065e4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80065e8:	441c      	add	r4, r3
 80065ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80065ee:	2200      	movs	r2, #0
 80065f0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80065f4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80065f8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80065fc:	4642      	mov	r2, r8
 80065fe:	464b      	mov	r3, r9
 8006600:	1891      	adds	r1, r2, r2
 8006602:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006604:	415b      	adcs	r3, r3
 8006606:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006608:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800660c:	4641      	mov	r1, r8
 800660e:	1851      	adds	r1, r2, r1
 8006610:	6339      	str	r1, [r7, #48]	@ 0x30
 8006612:	4649      	mov	r1, r9
 8006614:	414b      	adcs	r3, r1
 8006616:	637b      	str	r3, [r7, #52]	@ 0x34
 8006618:	f04f 0200 	mov.w	r2, #0
 800661c:	f04f 0300 	mov.w	r3, #0
 8006620:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8006624:	4659      	mov	r1, fp
 8006626:	00cb      	lsls	r3, r1, #3
 8006628:	4651      	mov	r1, sl
 800662a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800662e:	4651      	mov	r1, sl
 8006630:	00ca      	lsls	r2, r1, #3
 8006632:	4610      	mov	r0, r2
 8006634:	4619      	mov	r1, r3
 8006636:	4603      	mov	r3, r0
 8006638:	4642      	mov	r2, r8
 800663a:	189b      	adds	r3, r3, r2
 800663c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006640:	464b      	mov	r3, r9
 8006642:	460a      	mov	r2, r1
 8006644:	eb42 0303 	adc.w	r3, r2, r3
 8006648:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800664c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006650:	685b      	ldr	r3, [r3, #4]
 8006652:	2200      	movs	r2, #0
 8006654:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006658:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800665c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006660:	460b      	mov	r3, r1
 8006662:	18db      	adds	r3, r3, r3
 8006664:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006666:	4613      	mov	r3, r2
 8006668:	eb42 0303 	adc.w	r3, r2, r3
 800666c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800666e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006672:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8006676:	f7fa fb1f 	bl	8000cb8 <__aeabi_uldivmod>
 800667a:	4602      	mov	r2, r0
 800667c:	460b      	mov	r3, r1
 800667e:	4b0d      	ldr	r3, [pc, #52]	@ (80066b4 <UART_SetConfig+0x2d4>)
 8006680:	fba3 1302 	umull	r1, r3, r3, r2
 8006684:	095b      	lsrs	r3, r3, #5
 8006686:	2164      	movs	r1, #100	@ 0x64
 8006688:	fb01 f303 	mul.w	r3, r1, r3
 800668c:	1ad3      	subs	r3, r2, r3
 800668e:	00db      	lsls	r3, r3, #3
 8006690:	3332      	adds	r3, #50	@ 0x32
 8006692:	4a08      	ldr	r2, [pc, #32]	@ (80066b4 <UART_SetConfig+0x2d4>)
 8006694:	fba2 2303 	umull	r2, r3, r2, r3
 8006698:	095b      	lsrs	r3, r3, #5
 800669a:	f003 0207 	and.w	r2, r3, #7
 800669e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	4422      	add	r2, r4
 80066a6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80066a8:	e106      	b.n	80068b8 <UART_SetConfig+0x4d8>
 80066aa:	bf00      	nop
 80066ac:	40011000 	.word	0x40011000
 80066b0:	40011400 	.word	0x40011400
 80066b4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80066b8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80066bc:	2200      	movs	r2, #0
 80066be:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80066c2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80066c6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80066ca:	4642      	mov	r2, r8
 80066cc:	464b      	mov	r3, r9
 80066ce:	1891      	adds	r1, r2, r2
 80066d0:	6239      	str	r1, [r7, #32]
 80066d2:	415b      	adcs	r3, r3
 80066d4:	627b      	str	r3, [r7, #36]	@ 0x24
 80066d6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80066da:	4641      	mov	r1, r8
 80066dc:	1854      	adds	r4, r2, r1
 80066de:	4649      	mov	r1, r9
 80066e0:	eb43 0501 	adc.w	r5, r3, r1
 80066e4:	f04f 0200 	mov.w	r2, #0
 80066e8:	f04f 0300 	mov.w	r3, #0
 80066ec:	00eb      	lsls	r3, r5, #3
 80066ee:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80066f2:	00e2      	lsls	r2, r4, #3
 80066f4:	4614      	mov	r4, r2
 80066f6:	461d      	mov	r5, r3
 80066f8:	4643      	mov	r3, r8
 80066fa:	18e3      	adds	r3, r4, r3
 80066fc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006700:	464b      	mov	r3, r9
 8006702:	eb45 0303 	adc.w	r3, r5, r3
 8006706:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800670a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800670e:	685b      	ldr	r3, [r3, #4]
 8006710:	2200      	movs	r2, #0
 8006712:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006716:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800671a:	f04f 0200 	mov.w	r2, #0
 800671e:	f04f 0300 	mov.w	r3, #0
 8006722:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8006726:	4629      	mov	r1, r5
 8006728:	008b      	lsls	r3, r1, #2
 800672a:	4621      	mov	r1, r4
 800672c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006730:	4621      	mov	r1, r4
 8006732:	008a      	lsls	r2, r1, #2
 8006734:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8006738:	f7fa fabe 	bl	8000cb8 <__aeabi_uldivmod>
 800673c:	4602      	mov	r2, r0
 800673e:	460b      	mov	r3, r1
 8006740:	4b60      	ldr	r3, [pc, #384]	@ (80068c4 <UART_SetConfig+0x4e4>)
 8006742:	fba3 2302 	umull	r2, r3, r3, r2
 8006746:	095b      	lsrs	r3, r3, #5
 8006748:	011c      	lsls	r4, r3, #4
 800674a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800674e:	2200      	movs	r2, #0
 8006750:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006754:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8006758:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800675c:	4642      	mov	r2, r8
 800675e:	464b      	mov	r3, r9
 8006760:	1891      	adds	r1, r2, r2
 8006762:	61b9      	str	r1, [r7, #24]
 8006764:	415b      	adcs	r3, r3
 8006766:	61fb      	str	r3, [r7, #28]
 8006768:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800676c:	4641      	mov	r1, r8
 800676e:	1851      	adds	r1, r2, r1
 8006770:	6139      	str	r1, [r7, #16]
 8006772:	4649      	mov	r1, r9
 8006774:	414b      	adcs	r3, r1
 8006776:	617b      	str	r3, [r7, #20]
 8006778:	f04f 0200 	mov.w	r2, #0
 800677c:	f04f 0300 	mov.w	r3, #0
 8006780:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006784:	4659      	mov	r1, fp
 8006786:	00cb      	lsls	r3, r1, #3
 8006788:	4651      	mov	r1, sl
 800678a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800678e:	4651      	mov	r1, sl
 8006790:	00ca      	lsls	r2, r1, #3
 8006792:	4610      	mov	r0, r2
 8006794:	4619      	mov	r1, r3
 8006796:	4603      	mov	r3, r0
 8006798:	4642      	mov	r2, r8
 800679a:	189b      	adds	r3, r3, r2
 800679c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80067a0:	464b      	mov	r3, r9
 80067a2:	460a      	mov	r2, r1
 80067a4:	eb42 0303 	adc.w	r3, r2, r3
 80067a8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80067ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80067b0:	685b      	ldr	r3, [r3, #4]
 80067b2:	2200      	movs	r2, #0
 80067b4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80067b6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80067b8:	f04f 0200 	mov.w	r2, #0
 80067bc:	f04f 0300 	mov.w	r3, #0
 80067c0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80067c4:	4649      	mov	r1, r9
 80067c6:	008b      	lsls	r3, r1, #2
 80067c8:	4641      	mov	r1, r8
 80067ca:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80067ce:	4641      	mov	r1, r8
 80067d0:	008a      	lsls	r2, r1, #2
 80067d2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80067d6:	f7fa fa6f 	bl	8000cb8 <__aeabi_uldivmod>
 80067da:	4602      	mov	r2, r0
 80067dc:	460b      	mov	r3, r1
 80067de:	4611      	mov	r1, r2
 80067e0:	4b38      	ldr	r3, [pc, #224]	@ (80068c4 <UART_SetConfig+0x4e4>)
 80067e2:	fba3 2301 	umull	r2, r3, r3, r1
 80067e6:	095b      	lsrs	r3, r3, #5
 80067e8:	2264      	movs	r2, #100	@ 0x64
 80067ea:	fb02 f303 	mul.w	r3, r2, r3
 80067ee:	1acb      	subs	r3, r1, r3
 80067f0:	011b      	lsls	r3, r3, #4
 80067f2:	3332      	adds	r3, #50	@ 0x32
 80067f4:	4a33      	ldr	r2, [pc, #204]	@ (80068c4 <UART_SetConfig+0x4e4>)
 80067f6:	fba2 2303 	umull	r2, r3, r2, r3
 80067fa:	095b      	lsrs	r3, r3, #5
 80067fc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006800:	441c      	add	r4, r3
 8006802:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006806:	2200      	movs	r2, #0
 8006808:	673b      	str	r3, [r7, #112]	@ 0x70
 800680a:	677a      	str	r2, [r7, #116]	@ 0x74
 800680c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8006810:	4642      	mov	r2, r8
 8006812:	464b      	mov	r3, r9
 8006814:	1891      	adds	r1, r2, r2
 8006816:	60b9      	str	r1, [r7, #8]
 8006818:	415b      	adcs	r3, r3
 800681a:	60fb      	str	r3, [r7, #12]
 800681c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006820:	4641      	mov	r1, r8
 8006822:	1851      	adds	r1, r2, r1
 8006824:	6039      	str	r1, [r7, #0]
 8006826:	4649      	mov	r1, r9
 8006828:	414b      	adcs	r3, r1
 800682a:	607b      	str	r3, [r7, #4]
 800682c:	f04f 0200 	mov.w	r2, #0
 8006830:	f04f 0300 	mov.w	r3, #0
 8006834:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006838:	4659      	mov	r1, fp
 800683a:	00cb      	lsls	r3, r1, #3
 800683c:	4651      	mov	r1, sl
 800683e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006842:	4651      	mov	r1, sl
 8006844:	00ca      	lsls	r2, r1, #3
 8006846:	4610      	mov	r0, r2
 8006848:	4619      	mov	r1, r3
 800684a:	4603      	mov	r3, r0
 800684c:	4642      	mov	r2, r8
 800684e:	189b      	adds	r3, r3, r2
 8006850:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006852:	464b      	mov	r3, r9
 8006854:	460a      	mov	r2, r1
 8006856:	eb42 0303 	adc.w	r3, r2, r3
 800685a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800685c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006860:	685b      	ldr	r3, [r3, #4]
 8006862:	2200      	movs	r2, #0
 8006864:	663b      	str	r3, [r7, #96]	@ 0x60
 8006866:	667a      	str	r2, [r7, #100]	@ 0x64
 8006868:	f04f 0200 	mov.w	r2, #0
 800686c:	f04f 0300 	mov.w	r3, #0
 8006870:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8006874:	4649      	mov	r1, r9
 8006876:	008b      	lsls	r3, r1, #2
 8006878:	4641      	mov	r1, r8
 800687a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800687e:	4641      	mov	r1, r8
 8006880:	008a      	lsls	r2, r1, #2
 8006882:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8006886:	f7fa fa17 	bl	8000cb8 <__aeabi_uldivmod>
 800688a:	4602      	mov	r2, r0
 800688c:	460b      	mov	r3, r1
 800688e:	4b0d      	ldr	r3, [pc, #52]	@ (80068c4 <UART_SetConfig+0x4e4>)
 8006890:	fba3 1302 	umull	r1, r3, r3, r2
 8006894:	095b      	lsrs	r3, r3, #5
 8006896:	2164      	movs	r1, #100	@ 0x64
 8006898:	fb01 f303 	mul.w	r3, r1, r3
 800689c:	1ad3      	subs	r3, r2, r3
 800689e:	011b      	lsls	r3, r3, #4
 80068a0:	3332      	adds	r3, #50	@ 0x32
 80068a2:	4a08      	ldr	r2, [pc, #32]	@ (80068c4 <UART_SetConfig+0x4e4>)
 80068a4:	fba2 2303 	umull	r2, r3, r2, r3
 80068a8:	095b      	lsrs	r3, r3, #5
 80068aa:	f003 020f 	and.w	r2, r3, #15
 80068ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	4422      	add	r2, r4
 80068b6:	609a      	str	r2, [r3, #8]
}
 80068b8:	bf00      	nop
 80068ba:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80068be:	46bd      	mov	sp, r7
 80068c0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80068c4:	51eb851f 	.word	0x51eb851f

080068c8 <_strtoul_l.constprop.0>:
 80068c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80068cc:	4e34      	ldr	r6, [pc, #208]	@ (80069a0 <_strtoul_l.constprop.0+0xd8>)
 80068ce:	4686      	mov	lr, r0
 80068d0:	460d      	mov	r5, r1
 80068d2:	4628      	mov	r0, r5
 80068d4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80068d8:	5d37      	ldrb	r7, [r6, r4]
 80068da:	f017 0708 	ands.w	r7, r7, #8
 80068de:	d1f8      	bne.n	80068d2 <_strtoul_l.constprop.0+0xa>
 80068e0:	2c2d      	cmp	r4, #45	@ 0x2d
 80068e2:	d12f      	bne.n	8006944 <_strtoul_l.constprop.0+0x7c>
 80068e4:	782c      	ldrb	r4, [r5, #0]
 80068e6:	2701      	movs	r7, #1
 80068e8:	1c85      	adds	r5, r0, #2
 80068ea:	f033 0010 	bics.w	r0, r3, #16
 80068ee:	d109      	bne.n	8006904 <_strtoul_l.constprop.0+0x3c>
 80068f0:	2c30      	cmp	r4, #48	@ 0x30
 80068f2:	d12c      	bne.n	800694e <_strtoul_l.constprop.0+0x86>
 80068f4:	7828      	ldrb	r0, [r5, #0]
 80068f6:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 80068fa:	2858      	cmp	r0, #88	@ 0x58
 80068fc:	d127      	bne.n	800694e <_strtoul_l.constprop.0+0x86>
 80068fe:	786c      	ldrb	r4, [r5, #1]
 8006900:	2310      	movs	r3, #16
 8006902:	3502      	adds	r5, #2
 8006904:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 8006908:	2600      	movs	r6, #0
 800690a:	fbb8 f8f3 	udiv	r8, r8, r3
 800690e:	fb03 f908 	mul.w	r9, r3, r8
 8006912:	ea6f 0909 	mvn.w	r9, r9
 8006916:	4630      	mov	r0, r6
 8006918:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 800691c:	f1bc 0f09 	cmp.w	ip, #9
 8006920:	d81c      	bhi.n	800695c <_strtoul_l.constprop.0+0x94>
 8006922:	4664      	mov	r4, ip
 8006924:	42a3      	cmp	r3, r4
 8006926:	dd2a      	ble.n	800697e <_strtoul_l.constprop.0+0xb6>
 8006928:	f1b6 3fff 	cmp.w	r6, #4294967295	@ 0xffffffff
 800692c:	d007      	beq.n	800693e <_strtoul_l.constprop.0+0x76>
 800692e:	4580      	cmp	r8, r0
 8006930:	d322      	bcc.n	8006978 <_strtoul_l.constprop.0+0xb0>
 8006932:	d101      	bne.n	8006938 <_strtoul_l.constprop.0+0x70>
 8006934:	45a1      	cmp	r9, r4
 8006936:	db1f      	blt.n	8006978 <_strtoul_l.constprop.0+0xb0>
 8006938:	fb00 4003 	mla	r0, r0, r3, r4
 800693c:	2601      	movs	r6, #1
 800693e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006942:	e7e9      	b.n	8006918 <_strtoul_l.constprop.0+0x50>
 8006944:	2c2b      	cmp	r4, #43	@ 0x2b
 8006946:	bf04      	itt	eq
 8006948:	782c      	ldrbeq	r4, [r5, #0]
 800694a:	1c85      	addeq	r5, r0, #2
 800694c:	e7cd      	b.n	80068ea <_strtoul_l.constprop.0+0x22>
 800694e:	2b00      	cmp	r3, #0
 8006950:	d1d8      	bne.n	8006904 <_strtoul_l.constprop.0+0x3c>
 8006952:	2c30      	cmp	r4, #48	@ 0x30
 8006954:	bf0c      	ite	eq
 8006956:	2308      	moveq	r3, #8
 8006958:	230a      	movne	r3, #10
 800695a:	e7d3      	b.n	8006904 <_strtoul_l.constprop.0+0x3c>
 800695c:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8006960:	f1bc 0f19 	cmp.w	ip, #25
 8006964:	d801      	bhi.n	800696a <_strtoul_l.constprop.0+0xa2>
 8006966:	3c37      	subs	r4, #55	@ 0x37
 8006968:	e7dc      	b.n	8006924 <_strtoul_l.constprop.0+0x5c>
 800696a:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 800696e:	f1bc 0f19 	cmp.w	ip, #25
 8006972:	d804      	bhi.n	800697e <_strtoul_l.constprop.0+0xb6>
 8006974:	3c57      	subs	r4, #87	@ 0x57
 8006976:	e7d5      	b.n	8006924 <_strtoul_l.constprop.0+0x5c>
 8006978:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 800697c:	e7df      	b.n	800693e <_strtoul_l.constprop.0+0x76>
 800697e:	1c73      	adds	r3, r6, #1
 8006980:	d106      	bne.n	8006990 <_strtoul_l.constprop.0+0xc8>
 8006982:	2322      	movs	r3, #34	@ 0x22
 8006984:	f8ce 3000 	str.w	r3, [lr]
 8006988:	4630      	mov	r0, r6
 800698a:	b932      	cbnz	r2, 800699a <_strtoul_l.constprop.0+0xd2>
 800698c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006990:	b107      	cbz	r7, 8006994 <_strtoul_l.constprop.0+0xcc>
 8006992:	4240      	negs	r0, r0
 8006994:	2a00      	cmp	r2, #0
 8006996:	d0f9      	beq.n	800698c <_strtoul_l.constprop.0+0xc4>
 8006998:	b106      	cbz	r6, 800699c <_strtoul_l.constprop.0+0xd4>
 800699a:	1e69      	subs	r1, r5, #1
 800699c:	6011      	str	r1, [r2, #0]
 800699e:	e7f5      	b.n	800698c <_strtoul_l.constprop.0+0xc4>
 80069a0:	0800bca1 	.word	0x0800bca1

080069a4 <_strtoul_r>:
 80069a4:	f7ff bf90 	b.w	80068c8 <_strtoul_l.constprop.0>

080069a8 <strtoul>:
 80069a8:	4613      	mov	r3, r2
 80069aa:	460a      	mov	r2, r1
 80069ac:	4601      	mov	r1, r0
 80069ae:	4802      	ldr	r0, [pc, #8]	@ (80069b8 <strtoul+0x10>)
 80069b0:	6800      	ldr	r0, [r0, #0]
 80069b2:	f7ff bf89 	b.w	80068c8 <_strtoul_l.constprop.0>
 80069b6:	bf00      	nop
 80069b8:	20000018 	.word	0x20000018

080069bc <__cvt>:
 80069bc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80069c0:	ec57 6b10 	vmov	r6, r7, d0
 80069c4:	2f00      	cmp	r7, #0
 80069c6:	460c      	mov	r4, r1
 80069c8:	4619      	mov	r1, r3
 80069ca:	463b      	mov	r3, r7
 80069cc:	bfbb      	ittet	lt
 80069ce:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80069d2:	461f      	movlt	r7, r3
 80069d4:	2300      	movge	r3, #0
 80069d6:	232d      	movlt	r3, #45	@ 0x2d
 80069d8:	700b      	strb	r3, [r1, #0]
 80069da:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80069dc:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80069e0:	4691      	mov	r9, r2
 80069e2:	f023 0820 	bic.w	r8, r3, #32
 80069e6:	bfbc      	itt	lt
 80069e8:	4632      	movlt	r2, r6
 80069ea:	4616      	movlt	r6, r2
 80069ec:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80069f0:	d005      	beq.n	80069fe <__cvt+0x42>
 80069f2:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80069f6:	d100      	bne.n	80069fa <__cvt+0x3e>
 80069f8:	3401      	adds	r4, #1
 80069fa:	2102      	movs	r1, #2
 80069fc:	e000      	b.n	8006a00 <__cvt+0x44>
 80069fe:	2103      	movs	r1, #3
 8006a00:	ab03      	add	r3, sp, #12
 8006a02:	9301      	str	r3, [sp, #4]
 8006a04:	ab02      	add	r3, sp, #8
 8006a06:	9300      	str	r3, [sp, #0]
 8006a08:	ec47 6b10 	vmov	d0, r6, r7
 8006a0c:	4653      	mov	r3, sl
 8006a0e:	4622      	mov	r2, r4
 8006a10:	f001 fa0e 	bl	8007e30 <_dtoa_r>
 8006a14:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8006a18:	4605      	mov	r5, r0
 8006a1a:	d119      	bne.n	8006a50 <__cvt+0x94>
 8006a1c:	f019 0f01 	tst.w	r9, #1
 8006a20:	d00e      	beq.n	8006a40 <__cvt+0x84>
 8006a22:	eb00 0904 	add.w	r9, r0, r4
 8006a26:	2200      	movs	r2, #0
 8006a28:	2300      	movs	r3, #0
 8006a2a:	4630      	mov	r0, r6
 8006a2c:	4639      	mov	r1, r7
 8006a2e:	f7fa f863 	bl	8000af8 <__aeabi_dcmpeq>
 8006a32:	b108      	cbz	r0, 8006a38 <__cvt+0x7c>
 8006a34:	f8cd 900c 	str.w	r9, [sp, #12]
 8006a38:	2230      	movs	r2, #48	@ 0x30
 8006a3a:	9b03      	ldr	r3, [sp, #12]
 8006a3c:	454b      	cmp	r3, r9
 8006a3e:	d31e      	bcc.n	8006a7e <__cvt+0xc2>
 8006a40:	9b03      	ldr	r3, [sp, #12]
 8006a42:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006a44:	1b5b      	subs	r3, r3, r5
 8006a46:	4628      	mov	r0, r5
 8006a48:	6013      	str	r3, [r2, #0]
 8006a4a:	b004      	add	sp, #16
 8006a4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a50:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006a54:	eb00 0904 	add.w	r9, r0, r4
 8006a58:	d1e5      	bne.n	8006a26 <__cvt+0x6a>
 8006a5a:	7803      	ldrb	r3, [r0, #0]
 8006a5c:	2b30      	cmp	r3, #48	@ 0x30
 8006a5e:	d10a      	bne.n	8006a76 <__cvt+0xba>
 8006a60:	2200      	movs	r2, #0
 8006a62:	2300      	movs	r3, #0
 8006a64:	4630      	mov	r0, r6
 8006a66:	4639      	mov	r1, r7
 8006a68:	f7fa f846 	bl	8000af8 <__aeabi_dcmpeq>
 8006a6c:	b918      	cbnz	r0, 8006a76 <__cvt+0xba>
 8006a6e:	f1c4 0401 	rsb	r4, r4, #1
 8006a72:	f8ca 4000 	str.w	r4, [sl]
 8006a76:	f8da 3000 	ldr.w	r3, [sl]
 8006a7a:	4499      	add	r9, r3
 8006a7c:	e7d3      	b.n	8006a26 <__cvt+0x6a>
 8006a7e:	1c59      	adds	r1, r3, #1
 8006a80:	9103      	str	r1, [sp, #12]
 8006a82:	701a      	strb	r2, [r3, #0]
 8006a84:	e7d9      	b.n	8006a3a <__cvt+0x7e>

08006a86 <__exponent>:
 8006a86:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006a88:	2900      	cmp	r1, #0
 8006a8a:	bfba      	itte	lt
 8006a8c:	4249      	neglt	r1, r1
 8006a8e:	232d      	movlt	r3, #45	@ 0x2d
 8006a90:	232b      	movge	r3, #43	@ 0x2b
 8006a92:	2909      	cmp	r1, #9
 8006a94:	7002      	strb	r2, [r0, #0]
 8006a96:	7043      	strb	r3, [r0, #1]
 8006a98:	dd29      	ble.n	8006aee <__exponent+0x68>
 8006a9a:	f10d 0307 	add.w	r3, sp, #7
 8006a9e:	461d      	mov	r5, r3
 8006aa0:	270a      	movs	r7, #10
 8006aa2:	461a      	mov	r2, r3
 8006aa4:	fbb1 f6f7 	udiv	r6, r1, r7
 8006aa8:	fb07 1416 	mls	r4, r7, r6, r1
 8006aac:	3430      	adds	r4, #48	@ 0x30
 8006aae:	f802 4c01 	strb.w	r4, [r2, #-1]
 8006ab2:	460c      	mov	r4, r1
 8006ab4:	2c63      	cmp	r4, #99	@ 0x63
 8006ab6:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8006aba:	4631      	mov	r1, r6
 8006abc:	dcf1      	bgt.n	8006aa2 <__exponent+0x1c>
 8006abe:	3130      	adds	r1, #48	@ 0x30
 8006ac0:	1e94      	subs	r4, r2, #2
 8006ac2:	f803 1c01 	strb.w	r1, [r3, #-1]
 8006ac6:	1c41      	adds	r1, r0, #1
 8006ac8:	4623      	mov	r3, r4
 8006aca:	42ab      	cmp	r3, r5
 8006acc:	d30a      	bcc.n	8006ae4 <__exponent+0x5e>
 8006ace:	f10d 0309 	add.w	r3, sp, #9
 8006ad2:	1a9b      	subs	r3, r3, r2
 8006ad4:	42ac      	cmp	r4, r5
 8006ad6:	bf88      	it	hi
 8006ad8:	2300      	movhi	r3, #0
 8006ada:	3302      	adds	r3, #2
 8006adc:	4403      	add	r3, r0
 8006ade:	1a18      	subs	r0, r3, r0
 8006ae0:	b003      	add	sp, #12
 8006ae2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006ae4:	f813 6b01 	ldrb.w	r6, [r3], #1
 8006ae8:	f801 6f01 	strb.w	r6, [r1, #1]!
 8006aec:	e7ed      	b.n	8006aca <__exponent+0x44>
 8006aee:	2330      	movs	r3, #48	@ 0x30
 8006af0:	3130      	adds	r1, #48	@ 0x30
 8006af2:	7083      	strb	r3, [r0, #2]
 8006af4:	70c1      	strb	r1, [r0, #3]
 8006af6:	1d03      	adds	r3, r0, #4
 8006af8:	e7f1      	b.n	8006ade <__exponent+0x58>
	...

08006afc <_printf_float>:
 8006afc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b00:	b08d      	sub	sp, #52	@ 0x34
 8006b02:	460c      	mov	r4, r1
 8006b04:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8006b08:	4616      	mov	r6, r2
 8006b0a:	461f      	mov	r7, r3
 8006b0c:	4605      	mov	r5, r0
 8006b0e:	f001 f889 	bl	8007c24 <_localeconv_r>
 8006b12:	6803      	ldr	r3, [r0, #0]
 8006b14:	9304      	str	r3, [sp, #16]
 8006b16:	4618      	mov	r0, r3
 8006b18:	f7f9 fbc2 	bl	80002a0 <strlen>
 8006b1c:	2300      	movs	r3, #0
 8006b1e:	930a      	str	r3, [sp, #40]	@ 0x28
 8006b20:	f8d8 3000 	ldr.w	r3, [r8]
 8006b24:	9005      	str	r0, [sp, #20]
 8006b26:	3307      	adds	r3, #7
 8006b28:	f023 0307 	bic.w	r3, r3, #7
 8006b2c:	f103 0208 	add.w	r2, r3, #8
 8006b30:	f894 a018 	ldrb.w	sl, [r4, #24]
 8006b34:	f8d4 b000 	ldr.w	fp, [r4]
 8006b38:	f8c8 2000 	str.w	r2, [r8]
 8006b3c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006b40:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8006b44:	9307      	str	r3, [sp, #28]
 8006b46:	f8cd 8018 	str.w	r8, [sp, #24]
 8006b4a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8006b4e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006b52:	4b9c      	ldr	r3, [pc, #624]	@ (8006dc4 <_printf_float+0x2c8>)
 8006b54:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006b58:	f7fa f800 	bl	8000b5c <__aeabi_dcmpun>
 8006b5c:	bb70      	cbnz	r0, 8006bbc <_printf_float+0xc0>
 8006b5e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006b62:	4b98      	ldr	r3, [pc, #608]	@ (8006dc4 <_printf_float+0x2c8>)
 8006b64:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006b68:	f7f9 ffda 	bl	8000b20 <__aeabi_dcmple>
 8006b6c:	bb30      	cbnz	r0, 8006bbc <_printf_float+0xc0>
 8006b6e:	2200      	movs	r2, #0
 8006b70:	2300      	movs	r3, #0
 8006b72:	4640      	mov	r0, r8
 8006b74:	4649      	mov	r1, r9
 8006b76:	f7f9 ffc9 	bl	8000b0c <__aeabi_dcmplt>
 8006b7a:	b110      	cbz	r0, 8006b82 <_printf_float+0x86>
 8006b7c:	232d      	movs	r3, #45	@ 0x2d
 8006b7e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006b82:	4a91      	ldr	r2, [pc, #580]	@ (8006dc8 <_printf_float+0x2cc>)
 8006b84:	4b91      	ldr	r3, [pc, #580]	@ (8006dcc <_printf_float+0x2d0>)
 8006b86:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8006b8a:	bf94      	ite	ls
 8006b8c:	4690      	movls	r8, r2
 8006b8e:	4698      	movhi	r8, r3
 8006b90:	2303      	movs	r3, #3
 8006b92:	6123      	str	r3, [r4, #16]
 8006b94:	f02b 0304 	bic.w	r3, fp, #4
 8006b98:	6023      	str	r3, [r4, #0]
 8006b9a:	f04f 0900 	mov.w	r9, #0
 8006b9e:	9700      	str	r7, [sp, #0]
 8006ba0:	4633      	mov	r3, r6
 8006ba2:	aa0b      	add	r2, sp, #44	@ 0x2c
 8006ba4:	4621      	mov	r1, r4
 8006ba6:	4628      	mov	r0, r5
 8006ba8:	f000 f9d2 	bl	8006f50 <_printf_common>
 8006bac:	3001      	adds	r0, #1
 8006bae:	f040 808d 	bne.w	8006ccc <_printf_float+0x1d0>
 8006bb2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006bb6:	b00d      	add	sp, #52	@ 0x34
 8006bb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006bbc:	4642      	mov	r2, r8
 8006bbe:	464b      	mov	r3, r9
 8006bc0:	4640      	mov	r0, r8
 8006bc2:	4649      	mov	r1, r9
 8006bc4:	f7f9 ffca 	bl	8000b5c <__aeabi_dcmpun>
 8006bc8:	b140      	cbz	r0, 8006bdc <_printf_float+0xe0>
 8006bca:	464b      	mov	r3, r9
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	bfbc      	itt	lt
 8006bd0:	232d      	movlt	r3, #45	@ 0x2d
 8006bd2:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8006bd6:	4a7e      	ldr	r2, [pc, #504]	@ (8006dd0 <_printf_float+0x2d4>)
 8006bd8:	4b7e      	ldr	r3, [pc, #504]	@ (8006dd4 <_printf_float+0x2d8>)
 8006bda:	e7d4      	b.n	8006b86 <_printf_float+0x8a>
 8006bdc:	6863      	ldr	r3, [r4, #4]
 8006bde:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8006be2:	9206      	str	r2, [sp, #24]
 8006be4:	1c5a      	adds	r2, r3, #1
 8006be6:	d13b      	bne.n	8006c60 <_printf_float+0x164>
 8006be8:	2306      	movs	r3, #6
 8006bea:	6063      	str	r3, [r4, #4]
 8006bec:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8006bf0:	2300      	movs	r3, #0
 8006bf2:	6022      	str	r2, [r4, #0]
 8006bf4:	9303      	str	r3, [sp, #12]
 8006bf6:	ab0a      	add	r3, sp, #40	@ 0x28
 8006bf8:	e9cd a301 	strd	sl, r3, [sp, #4]
 8006bfc:	ab09      	add	r3, sp, #36	@ 0x24
 8006bfe:	9300      	str	r3, [sp, #0]
 8006c00:	6861      	ldr	r1, [r4, #4]
 8006c02:	ec49 8b10 	vmov	d0, r8, r9
 8006c06:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8006c0a:	4628      	mov	r0, r5
 8006c0c:	f7ff fed6 	bl	80069bc <__cvt>
 8006c10:	9b06      	ldr	r3, [sp, #24]
 8006c12:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006c14:	2b47      	cmp	r3, #71	@ 0x47
 8006c16:	4680      	mov	r8, r0
 8006c18:	d129      	bne.n	8006c6e <_printf_float+0x172>
 8006c1a:	1cc8      	adds	r0, r1, #3
 8006c1c:	db02      	blt.n	8006c24 <_printf_float+0x128>
 8006c1e:	6863      	ldr	r3, [r4, #4]
 8006c20:	4299      	cmp	r1, r3
 8006c22:	dd41      	ble.n	8006ca8 <_printf_float+0x1ac>
 8006c24:	f1aa 0a02 	sub.w	sl, sl, #2
 8006c28:	fa5f fa8a 	uxtb.w	sl, sl
 8006c2c:	3901      	subs	r1, #1
 8006c2e:	4652      	mov	r2, sl
 8006c30:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8006c34:	9109      	str	r1, [sp, #36]	@ 0x24
 8006c36:	f7ff ff26 	bl	8006a86 <__exponent>
 8006c3a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006c3c:	1813      	adds	r3, r2, r0
 8006c3e:	2a01      	cmp	r2, #1
 8006c40:	4681      	mov	r9, r0
 8006c42:	6123      	str	r3, [r4, #16]
 8006c44:	dc02      	bgt.n	8006c4c <_printf_float+0x150>
 8006c46:	6822      	ldr	r2, [r4, #0]
 8006c48:	07d2      	lsls	r2, r2, #31
 8006c4a:	d501      	bpl.n	8006c50 <_printf_float+0x154>
 8006c4c:	3301      	adds	r3, #1
 8006c4e:	6123      	str	r3, [r4, #16]
 8006c50:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d0a2      	beq.n	8006b9e <_printf_float+0xa2>
 8006c58:	232d      	movs	r3, #45	@ 0x2d
 8006c5a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006c5e:	e79e      	b.n	8006b9e <_printf_float+0xa2>
 8006c60:	9a06      	ldr	r2, [sp, #24]
 8006c62:	2a47      	cmp	r2, #71	@ 0x47
 8006c64:	d1c2      	bne.n	8006bec <_printf_float+0xf0>
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d1c0      	bne.n	8006bec <_printf_float+0xf0>
 8006c6a:	2301      	movs	r3, #1
 8006c6c:	e7bd      	b.n	8006bea <_printf_float+0xee>
 8006c6e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006c72:	d9db      	bls.n	8006c2c <_printf_float+0x130>
 8006c74:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8006c78:	d118      	bne.n	8006cac <_printf_float+0x1b0>
 8006c7a:	2900      	cmp	r1, #0
 8006c7c:	6863      	ldr	r3, [r4, #4]
 8006c7e:	dd0b      	ble.n	8006c98 <_printf_float+0x19c>
 8006c80:	6121      	str	r1, [r4, #16]
 8006c82:	b913      	cbnz	r3, 8006c8a <_printf_float+0x18e>
 8006c84:	6822      	ldr	r2, [r4, #0]
 8006c86:	07d0      	lsls	r0, r2, #31
 8006c88:	d502      	bpl.n	8006c90 <_printf_float+0x194>
 8006c8a:	3301      	adds	r3, #1
 8006c8c:	440b      	add	r3, r1
 8006c8e:	6123      	str	r3, [r4, #16]
 8006c90:	65a1      	str	r1, [r4, #88]	@ 0x58
 8006c92:	f04f 0900 	mov.w	r9, #0
 8006c96:	e7db      	b.n	8006c50 <_printf_float+0x154>
 8006c98:	b913      	cbnz	r3, 8006ca0 <_printf_float+0x1a4>
 8006c9a:	6822      	ldr	r2, [r4, #0]
 8006c9c:	07d2      	lsls	r2, r2, #31
 8006c9e:	d501      	bpl.n	8006ca4 <_printf_float+0x1a8>
 8006ca0:	3302      	adds	r3, #2
 8006ca2:	e7f4      	b.n	8006c8e <_printf_float+0x192>
 8006ca4:	2301      	movs	r3, #1
 8006ca6:	e7f2      	b.n	8006c8e <_printf_float+0x192>
 8006ca8:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8006cac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006cae:	4299      	cmp	r1, r3
 8006cb0:	db05      	blt.n	8006cbe <_printf_float+0x1c2>
 8006cb2:	6823      	ldr	r3, [r4, #0]
 8006cb4:	6121      	str	r1, [r4, #16]
 8006cb6:	07d8      	lsls	r0, r3, #31
 8006cb8:	d5ea      	bpl.n	8006c90 <_printf_float+0x194>
 8006cba:	1c4b      	adds	r3, r1, #1
 8006cbc:	e7e7      	b.n	8006c8e <_printf_float+0x192>
 8006cbe:	2900      	cmp	r1, #0
 8006cc0:	bfd4      	ite	le
 8006cc2:	f1c1 0202 	rsble	r2, r1, #2
 8006cc6:	2201      	movgt	r2, #1
 8006cc8:	4413      	add	r3, r2
 8006cca:	e7e0      	b.n	8006c8e <_printf_float+0x192>
 8006ccc:	6823      	ldr	r3, [r4, #0]
 8006cce:	055a      	lsls	r2, r3, #21
 8006cd0:	d407      	bmi.n	8006ce2 <_printf_float+0x1e6>
 8006cd2:	6923      	ldr	r3, [r4, #16]
 8006cd4:	4642      	mov	r2, r8
 8006cd6:	4631      	mov	r1, r6
 8006cd8:	4628      	mov	r0, r5
 8006cda:	47b8      	blx	r7
 8006cdc:	3001      	adds	r0, #1
 8006cde:	d12b      	bne.n	8006d38 <_printf_float+0x23c>
 8006ce0:	e767      	b.n	8006bb2 <_printf_float+0xb6>
 8006ce2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006ce6:	f240 80dd 	bls.w	8006ea4 <_printf_float+0x3a8>
 8006cea:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006cee:	2200      	movs	r2, #0
 8006cf0:	2300      	movs	r3, #0
 8006cf2:	f7f9 ff01 	bl	8000af8 <__aeabi_dcmpeq>
 8006cf6:	2800      	cmp	r0, #0
 8006cf8:	d033      	beq.n	8006d62 <_printf_float+0x266>
 8006cfa:	4a37      	ldr	r2, [pc, #220]	@ (8006dd8 <_printf_float+0x2dc>)
 8006cfc:	2301      	movs	r3, #1
 8006cfe:	4631      	mov	r1, r6
 8006d00:	4628      	mov	r0, r5
 8006d02:	47b8      	blx	r7
 8006d04:	3001      	adds	r0, #1
 8006d06:	f43f af54 	beq.w	8006bb2 <_printf_float+0xb6>
 8006d0a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8006d0e:	4543      	cmp	r3, r8
 8006d10:	db02      	blt.n	8006d18 <_printf_float+0x21c>
 8006d12:	6823      	ldr	r3, [r4, #0]
 8006d14:	07d8      	lsls	r0, r3, #31
 8006d16:	d50f      	bpl.n	8006d38 <_printf_float+0x23c>
 8006d18:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006d1c:	4631      	mov	r1, r6
 8006d1e:	4628      	mov	r0, r5
 8006d20:	47b8      	blx	r7
 8006d22:	3001      	adds	r0, #1
 8006d24:	f43f af45 	beq.w	8006bb2 <_printf_float+0xb6>
 8006d28:	f04f 0900 	mov.w	r9, #0
 8006d2c:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8006d30:	f104 0a1a 	add.w	sl, r4, #26
 8006d34:	45c8      	cmp	r8, r9
 8006d36:	dc09      	bgt.n	8006d4c <_printf_float+0x250>
 8006d38:	6823      	ldr	r3, [r4, #0]
 8006d3a:	079b      	lsls	r3, r3, #30
 8006d3c:	f100 8103 	bmi.w	8006f46 <_printf_float+0x44a>
 8006d40:	68e0      	ldr	r0, [r4, #12]
 8006d42:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006d44:	4298      	cmp	r0, r3
 8006d46:	bfb8      	it	lt
 8006d48:	4618      	movlt	r0, r3
 8006d4a:	e734      	b.n	8006bb6 <_printf_float+0xba>
 8006d4c:	2301      	movs	r3, #1
 8006d4e:	4652      	mov	r2, sl
 8006d50:	4631      	mov	r1, r6
 8006d52:	4628      	mov	r0, r5
 8006d54:	47b8      	blx	r7
 8006d56:	3001      	adds	r0, #1
 8006d58:	f43f af2b 	beq.w	8006bb2 <_printf_float+0xb6>
 8006d5c:	f109 0901 	add.w	r9, r9, #1
 8006d60:	e7e8      	b.n	8006d34 <_printf_float+0x238>
 8006d62:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	dc39      	bgt.n	8006ddc <_printf_float+0x2e0>
 8006d68:	4a1b      	ldr	r2, [pc, #108]	@ (8006dd8 <_printf_float+0x2dc>)
 8006d6a:	2301      	movs	r3, #1
 8006d6c:	4631      	mov	r1, r6
 8006d6e:	4628      	mov	r0, r5
 8006d70:	47b8      	blx	r7
 8006d72:	3001      	adds	r0, #1
 8006d74:	f43f af1d 	beq.w	8006bb2 <_printf_float+0xb6>
 8006d78:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8006d7c:	ea59 0303 	orrs.w	r3, r9, r3
 8006d80:	d102      	bne.n	8006d88 <_printf_float+0x28c>
 8006d82:	6823      	ldr	r3, [r4, #0]
 8006d84:	07d9      	lsls	r1, r3, #31
 8006d86:	d5d7      	bpl.n	8006d38 <_printf_float+0x23c>
 8006d88:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006d8c:	4631      	mov	r1, r6
 8006d8e:	4628      	mov	r0, r5
 8006d90:	47b8      	blx	r7
 8006d92:	3001      	adds	r0, #1
 8006d94:	f43f af0d 	beq.w	8006bb2 <_printf_float+0xb6>
 8006d98:	f04f 0a00 	mov.w	sl, #0
 8006d9c:	f104 0b1a 	add.w	fp, r4, #26
 8006da0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006da2:	425b      	negs	r3, r3
 8006da4:	4553      	cmp	r3, sl
 8006da6:	dc01      	bgt.n	8006dac <_printf_float+0x2b0>
 8006da8:	464b      	mov	r3, r9
 8006daa:	e793      	b.n	8006cd4 <_printf_float+0x1d8>
 8006dac:	2301      	movs	r3, #1
 8006dae:	465a      	mov	r2, fp
 8006db0:	4631      	mov	r1, r6
 8006db2:	4628      	mov	r0, r5
 8006db4:	47b8      	blx	r7
 8006db6:	3001      	adds	r0, #1
 8006db8:	f43f aefb 	beq.w	8006bb2 <_printf_float+0xb6>
 8006dbc:	f10a 0a01 	add.w	sl, sl, #1
 8006dc0:	e7ee      	b.n	8006da0 <_printf_float+0x2a4>
 8006dc2:	bf00      	nop
 8006dc4:	7fefffff 	.word	0x7fefffff
 8006dc8:	0800bda1 	.word	0x0800bda1
 8006dcc:	0800bda5 	.word	0x0800bda5
 8006dd0:	0800bda9 	.word	0x0800bda9
 8006dd4:	0800bdad 	.word	0x0800bdad
 8006dd8:	0800c03f 	.word	0x0800c03f
 8006ddc:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006dde:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006de2:	4553      	cmp	r3, sl
 8006de4:	bfa8      	it	ge
 8006de6:	4653      	movge	r3, sl
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	4699      	mov	r9, r3
 8006dec:	dc36      	bgt.n	8006e5c <_printf_float+0x360>
 8006dee:	f04f 0b00 	mov.w	fp, #0
 8006df2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006df6:	f104 021a 	add.w	r2, r4, #26
 8006dfa:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006dfc:	9306      	str	r3, [sp, #24]
 8006dfe:	eba3 0309 	sub.w	r3, r3, r9
 8006e02:	455b      	cmp	r3, fp
 8006e04:	dc31      	bgt.n	8006e6a <_printf_float+0x36e>
 8006e06:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006e08:	459a      	cmp	sl, r3
 8006e0a:	dc3a      	bgt.n	8006e82 <_printf_float+0x386>
 8006e0c:	6823      	ldr	r3, [r4, #0]
 8006e0e:	07da      	lsls	r2, r3, #31
 8006e10:	d437      	bmi.n	8006e82 <_printf_float+0x386>
 8006e12:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006e14:	ebaa 0903 	sub.w	r9, sl, r3
 8006e18:	9b06      	ldr	r3, [sp, #24]
 8006e1a:	ebaa 0303 	sub.w	r3, sl, r3
 8006e1e:	4599      	cmp	r9, r3
 8006e20:	bfa8      	it	ge
 8006e22:	4699      	movge	r9, r3
 8006e24:	f1b9 0f00 	cmp.w	r9, #0
 8006e28:	dc33      	bgt.n	8006e92 <_printf_float+0x396>
 8006e2a:	f04f 0800 	mov.w	r8, #0
 8006e2e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006e32:	f104 0b1a 	add.w	fp, r4, #26
 8006e36:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006e38:	ebaa 0303 	sub.w	r3, sl, r3
 8006e3c:	eba3 0309 	sub.w	r3, r3, r9
 8006e40:	4543      	cmp	r3, r8
 8006e42:	f77f af79 	ble.w	8006d38 <_printf_float+0x23c>
 8006e46:	2301      	movs	r3, #1
 8006e48:	465a      	mov	r2, fp
 8006e4a:	4631      	mov	r1, r6
 8006e4c:	4628      	mov	r0, r5
 8006e4e:	47b8      	blx	r7
 8006e50:	3001      	adds	r0, #1
 8006e52:	f43f aeae 	beq.w	8006bb2 <_printf_float+0xb6>
 8006e56:	f108 0801 	add.w	r8, r8, #1
 8006e5a:	e7ec      	b.n	8006e36 <_printf_float+0x33a>
 8006e5c:	4642      	mov	r2, r8
 8006e5e:	4631      	mov	r1, r6
 8006e60:	4628      	mov	r0, r5
 8006e62:	47b8      	blx	r7
 8006e64:	3001      	adds	r0, #1
 8006e66:	d1c2      	bne.n	8006dee <_printf_float+0x2f2>
 8006e68:	e6a3      	b.n	8006bb2 <_printf_float+0xb6>
 8006e6a:	2301      	movs	r3, #1
 8006e6c:	4631      	mov	r1, r6
 8006e6e:	4628      	mov	r0, r5
 8006e70:	9206      	str	r2, [sp, #24]
 8006e72:	47b8      	blx	r7
 8006e74:	3001      	adds	r0, #1
 8006e76:	f43f ae9c 	beq.w	8006bb2 <_printf_float+0xb6>
 8006e7a:	9a06      	ldr	r2, [sp, #24]
 8006e7c:	f10b 0b01 	add.w	fp, fp, #1
 8006e80:	e7bb      	b.n	8006dfa <_printf_float+0x2fe>
 8006e82:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006e86:	4631      	mov	r1, r6
 8006e88:	4628      	mov	r0, r5
 8006e8a:	47b8      	blx	r7
 8006e8c:	3001      	adds	r0, #1
 8006e8e:	d1c0      	bne.n	8006e12 <_printf_float+0x316>
 8006e90:	e68f      	b.n	8006bb2 <_printf_float+0xb6>
 8006e92:	9a06      	ldr	r2, [sp, #24]
 8006e94:	464b      	mov	r3, r9
 8006e96:	4442      	add	r2, r8
 8006e98:	4631      	mov	r1, r6
 8006e9a:	4628      	mov	r0, r5
 8006e9c:	47b8      	blx	r7
 8006e9e:	3001      	adds	r0, #1
 8006ea0:	d1c3      	bne.n	8006e2a <_printf_float+0x32e>
 8006ea2:	e686      	b.n	8006bb2 <_printf_float+0xb6>
 8006ea4:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006ea8:	f1ba 0f01 	cmp.w	sl, #1
 8006eac:	dc01      	bgt.n	8006eb2 <_printf_float+0x3b6>
 8006eae:	07db      	lsls	r3, r3, #31
 8006eb0:	d536      	bpl.n	8006f20 <_printf_float+0x424>
 8006eb2:	2301      	movs	r3, #1
 8006eb4:	4642      	mov	r2, r8
 8006eb6:	4631      	mov	r1, r6
 8006eb8:	4628      	mov	r0, r5
 8006eba:	47b8      	blx	r7
 8006ebc:	3001      	adds	r0, #1
 8006ebe:	f43f ae78 	beq.w	8006bb2 <_printf_float+0xb6>
 8006ec2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006ec6:	4631      	mov	r1, r6
 8006ec8:	4628      	mov	r0, r5
 8006eca:	47b8      	blx	r7
 8006ecc:	3001      	adds	r0, #1
 8006ece:	f43f ae70 	beq.w	8006bb2 <_printf_float+0xb6>
 8006ed2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006ed6:	2200      	movs	r2, #0
 8006ed8:	2300      	movs	r3, #0
 8006eda:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8006ede:	f7f9 fe0b 	bl	8000af8 <__aeabi_dcmpeq>
 8006ee2:	b9c0      	cbnz	r0, 8006f16 <_printf_float+0x41a>
 8006ee4:	4653      	mov	r3, sl
 8006ee6:	f108 0201 	add.w	r2, r8, #1
 8006eea:	4631      	mov	r1, r6
 8006eec:	4628      	mov	r0, r5
 8006eee:	47b8      	blx	r7
 8006ef0:	3001      	adds	r0, #1
 8006ef2:	d10c      	bne.n	8006f0e <_printf_float+0x412>
 8006ef4:	e65d      	b.n	8006bb2 <_printf_float+0xb6>
 8006ef6:	2301      	movs	r3, #1
 8006ef8:	465a      	mov	r2, fp
 8006efa:	4631      	mov	r1, r6
 8006efc:	4628      	mov	r0, r5
 8006efe:	47b8      	blx	r7
 8006f00:	3001      	adds	r0, #1
 8006f02:	f43f ae56 	beq.w	8006bb2 <_printf_float+0xb6>
 8006f06:	f108 0801 	add.w	r8, r8, #1
 8006f0a:	45d0      	cmp	r8, sl
 8006f0c:	dbf3      	blt.n	8006ef6 <_printf_float+0x3fa>
 8006f0e:	464b      	mov	r3, r9
 8006f10:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8006f14:	e6df      	b.n	8006cd6 <_printf_float+0x1da>
 8006f16:	f04f 0800 	mov.w	r8, #0
 8006f1a:	f104 0b1a 	add.w	fp, r4, #26
 8006f1e:	e7f4      	b.n	8006f0a <_printf_float+0x40e>
 8006f20:	2301      	movs	r3, #1
 8006f22:	4642      	mov	r2, r8
 8006f24:	e7e1      	b.n	8006eea <_printf_float+0x3ee>
 8006f26:	2301      	movs	r3, #1
 8006f28:	464a      	mov	r2, r9
 8006f2a:	4631      	mov	r1, r6
 8006f2c:	4628      	mov	r0, r5
 8006f2e:	47b8      	blx	r7
 8006f30:	3001      	adds	r0, #1
 8006f32:	f43f ae3e 	beq.w	8006bb2 <_printf_float+0xb6>
 8006f36:	f108 0801 	add.w	r8, r8, #1
 8006f3a:	68e3      	ldr	r3, [r4, #12]
 8006f3c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006f3e:	1a5b      	subs	r3, r3, r1
 8006f40:	4543      	cmp	r3, r8
 8006f42:	dcf0      	bgt.n	8006f26 <_printf_float+0x42a>
 8006f44:	e6fc      	b.n	8006d40 <_printf_float+0x244>
 8006f46:	f04f 0800 	mov.w	r8, #0
 8006f4a:	f104 0919 	add.w	r9, r4, #25
 8006f4e:	e7f4      	b.n	8006f3a <_printf_float+0x43e>

08006f50 <_printf_common>:
 8006f50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006f54:	4616      	mov	r6, r2
 8006f56:	4698      	mov	r8, r3
 8006f58:	688a      	ldr	r2, [r1, #8]
 8006f5a:	690b      	ldr	r3, [r1, #16]
 8006f5c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006f60:	4293      	cmp	r3, r2
 8006f62:	bfb8      	it	lt
 8006f64:	4613      	movlt	r3, r2
 8006f66:	6033      	str	r3, [r6, #0]
 8006f68:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006f6c:	4607      	mov	r7, r0
 8006f6e:	460c      	mov	r4, r1
 8006f70:	b10a      	cbz	r2, 8006f76 <_printf_common+0x26>
 8006f72:	3301      	adds	r3, #1
 8006f74:	6033      	str	r3, [r6, #0]
 8006f76:	6823      	ldr	r3, [r4, #0]
 8006f78:	0699      	lsls	r1, r3, #26
 8006f7a:	bf42      	ittt	mi
 8006f7c:	6833      	ldrmi	r3, [r6, #0]
 8006f7e:	3302      	addmi	r3, #2
 8006f80:	6033      	strmi	r3, [r6, #0]
 8006f82:	6825      	ldr	r5, [r4, #0]
 8006f84:	f015 0506 	ands.w	r5, r5, #6
 8006f88:	d106      	bne.n	8006f98 <_printf_common+0x48>
 8006f8a:	f104 0a19 	add.w	sl, r4, #25
 8006f8e:	68e3      	ldr	r3, [r4, #12]
 8006f90:	6832      	ldr	r2, [r6, #0]
 8006f92:	1a9b      	subs	r3, r3, r2
 8006f94:	42ab      	cmp	r3, r5
 8006f96:	dc26      	bgt.n	8006fe6 <_printf_common+0x96>
 8006f98:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006f9c:	6822      	ldr	r2, [r4, #0]
 8006f9e:	3b00      	subs	r3, #0
 8006fa0:	bf18      	it	ne
 8006fa2:	2301      	movne	r3, #1
 8006fa4:	0692      	lsls	r2, r2, #26
 8006fa6:	d42b      	bmi.n	8007000 <_printf_common+0xb0>
 8006fa8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006fac:	4641      	mov	r1, r8
 8006fae:	4638      	mov	r0, r7
 8006fb0:	47c8      	blx	r9
 8006fb2:	3001      	adds	r0, #1
 8006fb4:	d01e      	beq.n	8006ff4 <_printf_common+0xa4>
 8006fb6:	6823      	ldr	r3, [r4, #0]
 8006fb8:	6922      	ldr	r2, [r4, #16]
 8006fba:	f003 0306 	and.w	r3, r3, #6
 8006fbe:	2b04      	cmp	r3, #4
 8006fc0:	bf02      	ittt	eq
 8006fc2:	68e5      	ldreq	r5, [r4, #12]
 8006fc4:	6833      	ldreq	r3, [r6, #0]
 8006fc6:	1aed      	subeq	r5, r5, r3
 8006fc8:	68a3      	ldr	r3, [r4, #8]
 8006fca:	bf0c      	ite	eq
 8006fcc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006fd0:	2500      	movne	r5, #0
 8006fd2:	4293      	cmp	r3, r2
 8006fd4:	bfc4      	itt	gt
 8006fd6:	1a9b      	subgt	r3, r3, r2
 8006fd8:	18ed      	addgt	r5, r5, r3
 8006fda:	2600      	movs	r6, #0
 8006fdc:	341a      	adds	r4, #26
 8006fde:	42b5      	cmp	r5, r6
 8006fe0:	d11a      	bne.n	8007018 <_printf_common+0xc8>
 8006fe2:	2000      	movs	r0, #0
 8006fe4:	e008      	b.n	8006ff8 <_printf_common+0xa8>
 8006fe6:	2301      	movs	r3, #1
 8006fe8:	4652      	mov	r2, sl
 8006fea:	4641      	mov	r1, r8
 8006fec:	4638      	mov	r0, r7
 8006fee:	47c8      	blx	r9
 8006ff0:	3001      	adds	r0, #1
 8006ff2:	d103      	bne.n	8006ffc <_printf_common+0xac>
 8006ff4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006ff8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ffc:	3501      	adds	r5, #1
 8006ffe:	e7c6      	b.n	8006f8e <_printf_common+0x3e>
 8007000:	18e1      	adds	r1, r4, r3
 8007002:	1c5a      	adds	r2, r3, #1
 8007004:	2030      	movs	r0, #48	@ 0x30
 8007006:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800700a:	4422      	add	r2, r4
 800700c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007010:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007014:	3302      	adds	r3, #2
 8007016:	e7c7      	b.n	8006fa8 <_printf_common+0x58>
 8007018:	2301      	movs	r3, #1
 800701a:	4622      	mov	r2, r4
 800701c:	4641      	mov	r1, r8
 800701e:	4638      	mov	r0, r7
 8007020:	47c8      	blx	r9
 8007022:	3001      	adds	r0, #1
 8007024:	d0e6      	beq.n	8006ff4 <_printf_common+0xa4>
 8007026:	3601      	adds	r6, #1
 8007028:	e7d9      	b.n	8006fde <_printf_common+0x8e>
	...

0800702c <_printf_i>:
 800702c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007030:	7e0f      	ldrb	r7, [r1, #24]
 8007032:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007034:	2f78      	cmp	r7, #120	@ 0x78
 8007036:	4691      	mov	r9, r2
 8007038:	4680      	mov	r8, r0
 800703a:	460c      	mov	r4, r1
 800703c:	469a      	mov	sl, r3
 800703e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007042:	d807      	bhi.n	8007054 <_printf_i+0x28>
 8007044:	2f62      	cmp	r7, #98	@ 0x62
 8007046:	d80a      	bhi.n	800705e <_printf_i+0x32>
 8007048:	2f00      	cmp	r7, #0
 800704a:	f000 80d2 	beq.w	80071f2 <_printf_i+0x1c6>
 800704e:	2f58      	cmp	r7, #88	@ 0x58
 8007050:	f000 80b9 	beq.w	80071c6 <_printf_i+0x19a>
 8007054:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007058:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800705c:	e03a      	b.n	80070d4 <_printf_i+0xa8>
 800705e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007062:	2b15      	cmp	r3, #21
 8007064:	d8f6      	bhi.n	8007054 <_printf_i+0x28>
 8007066:	a101      	add	r1, pc, #4	@ (adr r1, 800706c <_printf_i+0x40>)
 8007068:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800706c:	080070c5 	.word	0x080070c5
 8007070:	080070d9 	.word	0x080070d9
 8007074:	08007055 	.word	0x08007055
 8007078:	08007055 	.word	0x08007055
 800707c:	08007055 	.word	0x08007055
 8007080:	08007055 	.word	0x08007055
 8007084:	080070d9 	.word	0x080070d9
 8007088:	08007055 	.word	0x08007055
 800708c:	08007055 	.word	0x08007055
 8007090:	08007055 	.word	0x08007055
 8007094:	08007055 	.word	0x08007055
 8007098:	080071d9 	.word	0x080071d9
 800709c:	08007103 	.word	0x08007103
 80070a0:	08007193 	.word	0x08007193
 80070a4:	08007055 	.word	0x08007055
 80070a8:	08007055 	.word	0x08007055
 80070ac:	080071fb 	.word	0x080071fb
 80070b0:	08007055 	.word	0x08007055
 80070b4:	08007103 	.word	0x08007103
 80070b8:	08007055 	.word	0x08007055
 80070bc:	08007055 	.word	0x08007055
 80070c0:	0800719b 	.word	0x0800719b
 80070c4:	6833      	ldr	r3, [r6, #0]
 80070c6:	1d1a      	adds	r2, r3, #4
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	6032      	str	r2, [r6, #0]
 80070cc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80070d0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80070d4:	2301      	movs	r3, #1
 80070d6:	e09d      	b.n	8007214 <_printf_i+0x1e8>
 80070d8:	6833      	ldr	r3, [r6, #0]
 80070da:	6820      	ldr	r0, [r4, #0]
 80070dc:	1d19      	adds	r1, r3, #4
 80070de:	6031      	str	r1, [r6, #0]
 80070e0:	0606      	lsls	r6, r0, #24
 80070e2:	d501      	bpl.n	80070e8 <_printf_i+0xbc>
 80070e4:	681d      	ldr	r5, [r3, #0]
 80070e6:	e003      	b.n	80070f0 <_printf_i+0xc4>
 80070e8:	0645      	lsls	r5, r0, #25
 80070ea:	d5fb      	bpl.n	80070e4 <_printf_i+0xb8>
 80070ec:	f9b3 5000 	ldrsh.w	r5, [r3]
 80070f0:	2d00      	cmp	r5, #0
 80070f2:	da03      	bge.n	80070fc <_printf_i+0xd0>
 80070f4:	232d      	movs	r3, #45	@ 0x2d
 80070f6:	426d      	negs	r5, r5
 80070f8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80070fc:	4859      	ldr	r0, [pc, #356]	@ (8007264 <_printf_i+0x238>)
 80070fe:	230a      	movs	r3, #10
 8007100:	e011      	b.n	8007126 <_printf_i+0xfa>
 8007102:	6821      	ldr	r1, [r4, #0]
 8007104:	6833      	ldr	r3, [r6, #0]
 8007106:	0608      	lsls	r0, r1, #24
 8007108:	f853 5b04 	ldr.w	r5, [r3], #4
 800710c:	d402      	bmi.n	8007114 <_printf_i+0xe8>
 800710e:	0649      	lsls	r1, r1, #25
 8007110:	bf48      	it	mi
 8007112:	b2ad      	uxthmi	r5, r5
 8007114:	2f6f      	cmp	r7, #111	@ 0x6f
 8007116:	4853      	ldr	r0, [pc, #332]	@ (8007264 <_printf_i+0x238>)
 8007118:	6033      	str	r3, [r6, #0]
 800711a:	bf14      	ite	ne
 800711c:	230a      	movne	r3, #10
 800711e:	2308      	moveq	r3, #8
 8007120:	2100      	movs	r1, #0
 8007122:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007126:	6866      	ldr	r6, [r4, #4]
 8007128:	60a6      	str	r6, [r4, #8]
 800712a:	2e00      	cmp	r6, #0
 800712c:	bfa2      	ittt	ge
 800712e:	6821      	ldrge	r1, [r4, #0]
 8007130:	f021 0104 	bicge.w	r1, r1, #4
 8007134:	6021      	strge	r1, [r4, #0]
 8007136:	b90d      	cbnz	r5, 800713c <_printf_i+0x110>
 8007138:	2e00      	cmp	r6, #0
 800713a:	d04b      	beq.n	80071d4 <_printf_i+0x1a8>
 800713c:	4616      	mov	r6, r2
 800713e:	fbb5 f1f3 	udiv	r1, r5, r3
 8007142:	fb03 5711 	mls	r7, r3, r1, r5
 8007146:	5dc7      	ldrb	r7, [r0, r7]
 8007148:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800714c:	462f      	mov	r7, r5
 800714e:	42bb      	cmp	r3, r7
 8007150:	460d      	mov	r5, r1
 8007152:	d9f4      	bls.n	800713e <_printf_i+0x112>
 8007154:	2b08      	cmp	r3, #8
 8007156:	d10b      	bne.n	8007170 <_printf_i+0x144>
 8007158:	6823      	ldr	r3, [r4, #0]
 800715a:	07df      	lsls	r7, r3, #31
 800715c:	d508      	bpl.n	8007170 <_printf_i+0x144>
 800715e:	6923      	ldr	r3, [r4, #16]
 8007160:	6861      	ldr	r1, [r4, #4]
 8007162:	4299      	cmp	r1, r3
 8007164:	bfde      	ittt	le
 8007166:	2330      	movle	r3, #48	@ 0x30
 8007168:	f806 3c01 	strble.w	r3, [r6, #-1]
 800716c:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8007170:	1b92      	subs	r2, r2, r6
 8007172:	6122      	str	r2, [r4, #16]
 8007174:	f8cd a000 	str.w	sl, [sp]
 8007178:	464b      	mov	r3, r9
 800717a:	aa03      	add	r2, sp, #12
 800717c:	4621      	mov	r1, r4
 800717e:	4640      	mov	r0, r8
 8007180:	f7ff fee6 	bl	8006f50 <_printf_common>
 8007184:	3001      	adds	r0, #1
 8007186:	d14a      	bne.n	800721e <_printf_i+0x1f2>
 8007188:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800718c:	b004      	add	sp, #16
 800718e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007192:	6823      	ldr	r3, [r4, #0]
 8007194:	f043 0320 	orr.w	r3, r3, #32
 8007198:	6023      	str	r3, [r4, #0]
 800719a:	4833      	ldr	r0, [pc, #204]	@ (8007268 <_printf_i+0x23c>)
 800719c:	2778      	movs	r7, #120	@ 0x78
 800719e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80071a2:	6823      	ldr	r3, [r4, #0]
 80071a4:	6831      	ldr	r1, [r6, #0]
 80071a6:	061f      	lsls	r7, r3, #24
 80071a8:	f851 5b04 	ldr.w	r5, [r1], #4
 80071ac:	d402      	bmi.n	80071b4 <_printf_i+0x188>
 80071ae:	065f      	lsls	r7, r3, #25
 80071b0:	bf48      	it	mi
 80071b2:	b2ad      	uxthmi	r5, r5
 80071b4:	6031      	str	r1, [r6, #0]
 80071b6:	07d9      	lsls	r1, r3, #31
 80071b8:	bf44      	itt	mi
 80071ba:	f043 0320 	orrmi.w	r3, r3, #32
 80071be:	6023      	strmi	r3, [r4, #0]
 80071c0:	b11d      	cbz	r5, 80071ca <_printf_i+0x19e>
 80071c2:	2310      	movs	r3, #16
 80071c4:	e7ac      	b.n	8007120 <_printf_i+0xf4>
 80071c6:	4827      	ldr	r0, [pc, #156]	@ (8007264 <_printf_i+0x238>)
 80071c8:	e7e9      	b.n	800719e <_printf_i+0x172>
 80071ca:	6823      	ldr	r3, [r4, #0]
 80071cc:	f023 0320 	bic.w	r3, r3, #32
 80071d0:	6023      	str	r3, [r4, #0]
 80071d2:	e7f6      	b.n	80071c2 <_printf_i+0x196>
 80071d4:	4616      	mov	r6, r2
 80071d6:	e7bd      	b.n	8007154 <_printf_i+0x128>
 80071d8:	6833      	ldr	r3, [r6, #0]
 80071da:	6825      	ldr	r5, [r4, #0]
 80071dc:	6961      	ldr	r1, [r4, #20]
 80071de:	1d18      	adds	r0, r3, #4
 80071e0:	6030      	str	r0, [r6, #0]
 80071e2:	062e      	lsls	r6, r5, #24
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	d501      	bpl.n	80071ec <_printf_i+0x1c0>
 80071e8:	6019      	str	r1, [r3, #0]
 80071ea:	e002      	b.n	80071f2 <_printf_i+0x1c6>
 80071ec:	0668      	lsls	r0, r5, #25
 80071ee:	d5fb      	bpl.n	80071e8 <_printf_i+0x1bc>
 80071f0:	8019      	strh	r1, [r3, #0]
 80071f2:	2300      	movs	r3, #0
 80071f4:	6123      	str	r3, [r4, #16]
 80071f6:	4616      	mov	r6, r2
 80071f8:	e7bc      	b.n	8007174 <_printf_i+0x148>
 80071fa:	6833      	ldr	r3, [r6, #0]
 80071fc:	1d1a      	adds	r2, r3, #4
 80071fe:	6032      	str	r2, [r6, #0]
 8007200:	681e      	ldr	r6, [r3, #0]
 8007202:	6862      	ldr	r2, [r4, #4]
 8007204:	2100      	movs	r1, #0
 8007206:	4630      	mov	r0, r6
 8007208:	f7f8 fffa 	bl	8000200 <memchr>
 800720c:	b108      	cbz	r0, 8007212 <_printf_i+0x1e6>
 800720e:	1b80      	subs	r0, r0, r6
 8007210:	6060      	str	r0, [r4, #4]
 8007212:	6863      	ldr	r3, [r4, #4]
 8007214:	6123      	str	r3, [r4, #16]
 8007216:	2300      	movs	r3, #0
 8007218:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800721c:	e7aa      	b.n	8007174 <_printf_i+0x148>
 800721e:	6923      	ldr	r3, [r4, #16]
 8007220:	4632      	mov	r2, r6
 8007222:	4649      	mov	r1, r9
 8007224:	4640      	mov	r0, r8
 8007226:	47d0      	blx	sl
 8007228:	3001      	adds	r0, #1
 800722a:	d0ad      	beq.n	8007188 <_printf_i+0x15c>
 800722c:	6823      	ldr	r3, [r4, #0]
 800722e:	079b      	lsls	r3, r3, #30
 8007230:	d413      	bmi.n	800725a <_printf_i+0x22e>
 8007232:	68e0      	ldr	r0, [r4, #12]
 8007234:	9b03      	ldr	r3, [sp, #12]
 8007236:	4298      	cmp	r0, r3
 8007238:	bfb8      	it	lt
 800723a:	4618      	movlt	r0, r3
 800723c:	e7a6      	b.n	800718c <_printf_i+0x160>
 800723e:	2301      	movs	r3, #1
 8007240:	4632      	mov	r2, r6
 8007242:	4649      	mov	r1, r9
 8007244:	4640      	mov	r0, r8
 8007246:	47d0      	blx	sl
 8007248:	3001      	adds	r0, #1
 800724a:	d09d      	beq.n	8007188 <_printf_i+0x15c>
 800724c:	3501      	adds	r5, #1
 800724e:	68e3      	ldr	r3, [r4, #12]
 8007250:	9903      	ldr	r1, [sp, #12]
 8007252:	1a5b      	subs	r3, r3, r1
 8007254:	42ab      	cmp	r3, r5
 8007256:	dcf2      	bgt.n	800723e <_printf_i+0x212>
 8007258:	e7eb      	b.n	8007232 <_printf_i+0x206>
 800725a:	2500      	movs	r5, #0
 800725c:	f104 0619 	add.w	r6, r4, #25
 8007260:	e7f5      	b.n	800724e <_printf_i+0x222>
 8007262:	bf00      	nop
 8007264:	0800bdb1 	.word	0x0800bdb1
 8007268:	0800bdc2 	.word	0x0800bdc2

0800726c <_scanf_float>:
 800726c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007270:	b087      	sub	sp, #28
 8007272:	4617      	mov	r7, r2
 8007274:	9303      	str	r3, [sp, #12]
 8007276:	688b      	ldr	r3, [r1, #8]
 8007278:	1e5a      	subs	r2, r3, #1
 800727a:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800727e:	bf81      	itttt	hi
 8007280:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8007284:	eb03 0b05 	addhi.w	fp, r3, r5
 8007288:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800728c:	608b      	strhi	r3, [r1, #8]
 800728e:	680b      	ldr	r3, [r1, #0]
 8007290:	460a      	mov	r2, r1
 8007292:	f04f 0500 	mov.w	r5, #0
 8007296:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800729a:	f842 3b1c 	str.w	r3, [r2], #28
 800729e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80072a2:	4680      	mov	r8, r0
 80072a4:	460c      	mov	r4, r1
 80072a6:	bf98      	it	ls
 80072a8:	f04f 0b00 	movls.w	fp, #0
 80072ac:	9201      	str	r2, [sp, #4]
 80072ae:	4616      	mov	r6, r2
 80072b0:	46aa      	mov	sl, r5
 80072b2:	46a9      	mov	r9, r5
 80072b4:	9502      	str	r5, [sp, #8]
 80072b6:	68a2      	ldr	r2, [r4, #8]
 80072b8:	b152      	cbz	r2, 80072d0 <_scanf_float+0x64>
 80072ba:	683b      	ldr	r3, [r7, #0]
 80072bc:	781b      	ldrb	r3, [r3, #0]
 80072be:	2b4e      	cmp	r3, #78	@ 0x4e
 80072c0:	d864      	bhi.n	800738c <_scanf_float+0x120>
 80072c2:	2b40      	cmp	r3, #64	@ 0x40
 80072c4:	d83c      	bhi.n	8007340 <_scanf_float+0xd4>
 80072c6:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 80072ca:	b2c8      	uxtb	r0, r1
 80072cc:	280e      	cmp	r0, #14
 80072ce:	d93a      	bls.n	8007346 <_scanf_float+0xda>
 80072d0:	f1b9 0f00 	cmp.w	r9, #0
 80072d4:	d003      	beq.n	80072de <_scanf_float+0x72>
 80072d6:	6823      	ldr	r3, [r4, #0]
 80072d8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80072dc:	6023      	str	r3, [r4, #0]
 80072de:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 80072e2:	f1ba 0f01 	cmp.w	sl, #1
 80072e6:	f200 8117 	bhi.w	8007518 <_scanf_float+0x2ac>
 80072ea:	9b01      	ldr	r3, [sp, #4]
 80072ec:	429e      	cmp	r6, r3
 80072ee:	f200 8108 	bhi.w	8007502 <_scanf_float+0x296>
 80072f2:	2001      	movs	r0, #1
 80072f4:	b007      	add	sp, #28
 80072f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80072fa:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 80072fe:	2a0d      	cmp	r2, #13
 8007300:	d8e6      	bhi.n	80072d0 <_scanf_float+0x64>
 8007302:	a101      	add	r1, pc, #4	@ (adr r1, 8007308 <_scanf_float+0x9c>)
 8007304:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8007308:	0800744f 	.word	0x0800744f
 800730c:	080072d1 	.word	0x080072d1
 8007310:	080072d1 	.word	0x080072d1
 8007314:	080072d1 	.word	0x080072d1
 8007318:	080074af 	.word	0x080074af
 800731c:	08007487 	.word	0x08007487
 8007320:	080072d1 	.word	0x080072d1
 8007324:	080072d1 	.word	0x080072d1
 8007328:	0800745d 	.word	0x0800745d
 800732c:	080072d1 	.word	0x080072d1
 8007330:	080072d1 	.word	0x080072d1
 8007334:	080072d1 	.word	0x080072d1
 8007338:	080072d1 	.word	0x080072d1
 800733c:	08007415 	.word	0x08007415
 8007340:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8007344:	e7db      	b.n	80072fe <_scanf_float+0x92>
 8007346:	290e      	cmp	r1, #14
 8007348:	d8c2      	bhi.n	80072d0 <_scanf_float+0x64>
 800734a:	a001      	add	r0, pc, #4	@ (adr r0, 8007350 <_scanf_float+0xe4>)
 800734c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8007350:	08007405 	.word	0x08007405
 8007354:	080072d1 	.word	0x080072d1
 8007358:	08007405 	.word	0x08007405
 800735c:	0800749b 	.word	0x0800749b
 8007360:	080072d1 	.word	0x080072d1
 8007364:	080073ad 	.word	0x080073ad
 8007368:	080073eb 	.word	0x080073eb
 800736c:	080073eb 	.word	0x080073eb
 8007370:	080073eb 	.word	0x080073eb
 8007374:	080073eb 	.word	0x080073eb
 8007378:	080073eb 	.word	0x080073eb
 800737c:	080073eb 	.word	0x080073eb
 8007380:	080073eb 	.word	0x080073eb
 8007384:	080073eb 	.word	0x080073eb
 8007388:	080073eb 	.word	0x080073eb
 800738c:	2b6e      	cmp	r3, #110	@ 0x6e
 800738e:	d809      	bhi.n	80073a4 <_scanf_float+0x138>
 8007390:	2b60      	cmp	r3, #96	@ 0x60
 8007392:	d8b2      	bhi.n	80072fa <_scanf_float+0x8e>
 8007394:	2b54      	cmp	r3, #84	@ 0x54
 8007396:	d07b      	beq.n	8007490 <_scanf_float+0x224>
 8007398:	2b59      	cmp	r3, #89	@ 0x59
 800739a:	d199      	bne.n	80072d0 <_scanf_float+0x64>
 800739c:	2d07      	cmp	r5, #7
 800739e:	d197      	bne.n	80072d0 <_scanf_float+0x64>
 80073a0:	2508      	movs	r5, #8
 80073a2:	e02c      	b.n	80073fe <_scanf_float+0x192>
 80073a4:	2b74      	cmp	r3, #116	@ 0x74
 80073a6:	d073      	beq.n	8007490 <_scanf_float+0x224>
 80073a8:	2b79      	cmp	r3, #121	@ 0x79
 80073aa:	e7f6      	b.n	800739a <_scanf_float+0x12e>
 80073ac:	6821      	ldr	r1, [r4, #0]
 80073ae:	05c8      	lsls	r0, r1, #23
 80073b0:	d51b      	bpl.n	80073ea <_scanf_float+0x17e>
 80073b2:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 80073b6:	6021      	str	r1, [r4, #0]
 80073b8:	f109 0901 	add.w	r9, r9, #1
 80073bc:	f1bb 0f00 	cmp.w	fp, #0
 80073c0:	d003      	beq.n	80073ca <_scanf_float+0x15e>
 80073c2:	3201      	adds	r2, #1
 80073c4:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 80073c8:	60a2      	str	r2, [r4, #8]
 80073ca:	68a3      	ldr	r3, [r4, #8]
 80073cc:	3b01      	subs	r3, #1
 80073ce:	60a3      	str	r3, [r4, #8]
 80073d0:	6923      	ldr	r3, [r4, #16]
 80073d2:	3301      	adds	r3, #1
 80073d4:	6123      	str	r3, [r4, #16]
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	3b01      	subs	r3, #1
 80073da:	2b00      	cmp	r3, #0
 80073dc:	607b      	str	r3, [r7, #4]
 80073de:	f340 8087 	ble.w	80074f0 <_scanf_float+0x284>
 80073e2:	683b      	ldr	r3, [r7, #0]
 80073e4:	3301      	adds	r3, #1
 80073e6:	603b      	str	r3, [r7, #0]
 80073e8:	e765      	b.n	80072b6 <_scanf_float+0x4a>
 80073ea:	eb1a 0105 	adds.w	r1, sl, r5
 80073ee:	f47f af6f 	bne.w	80072d0 <_scanf_float+0x64>
 80073f2:	6822      	ldr	r2, [r4, #0]
 80073f4:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 80073f8:	6022      	str	r2, [r4, #0]
 80073fa:	460d      	mov	r5, r1
 80073fc:	468a      	mov	sl, r1
 80073fe:	f806 3b01 	strb.w	r3, [r6], #1
 8007402:	e7e2      	b.n	80073ca <_scanf_float+0x15e>
 8007404:	6822      	ldr	r2, [r4, #0]
 8007406:	0610      	lsls	r0, r2, #24
 8007408:	f57f af62 	bpl.w	80072d0 <_scanf_float+0x64>
 800740c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007410:	6022      	str	r2, [r4, #0]
 8007412:	e7f4      	b.n	80073fe <_scanf_float+0x192>
 8007414:	f1ba 0f00 	cmp.w	sl, #0
 8007418:	d10e      	bne.n	8007438 <_scanf_float+0x1cc>
 800741a:	f1b9 0f00 	cmp.w	r9, #0
 800741e:	d10e      	bne.n	800743e <_scanf_float+0x1d2>
 8007420:	6822      	ldr	r2, [r4, #0]
 8007422:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8007426:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800742a:	d108      	bne.n	800743e <_scanf_float+0x1d2>
 800742c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8007430:	6022      	str	r2, [r4, #0]
 8007432:	f04f 0a01 	mov.w	sl, #1
 8007436:	e7e2      	b.n	80073fe <_scanf_float+0x192>
 8007438:	f1ba 0f02 	cmp.w	sl, #2
 800743c:	d055      	beq.n	80074ea <_scanf_float+0x27e>
 800743e:	2d01      	cmp	r5, #1
 8007440:	d002      	beq.n	8007448 <_scanf_float+0x1dc>
 8007442:	2d04      	cmp	r5, #4
 8007444:	f47f af44 	bne.w	80072d0 <_scanf_float+0x64>
 8007448:	3501      	adds	r5, #1
 800744a:	b2ed      	uxtb	r5, r5
 800744c:	e7d7      	b.n	80073fe <_scanf_float+0x192>
 800744e:	f1ba 0f01 	cmp.w	sl, #1
 8007452:	f47f af3d 	bne.w	80072d0 <_scanf_float+0x64>
 8007456:	f04f 0a02 	mov.w	sl, #2
 800745a:	e7d0      	b.n	80073fe <_scanf_float+0x192>
 800745c:	b97d      	cbnz	r5, 800747e <_scanf_float+0x212>
 800745e:	f1b9 0f00 	cmp.w	r9, #0
 8007462:	f47f af38 	bne.w	80072d6 <_scanf_float+0x6a>
 8007466:	6822      	ldr	r2, [r4, #0]
 8007468:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800746c:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8007470:	f040 8108 	bne.w	8007684 <_scanf_float+0x418>
 8007474:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8007478:	6022      	str	r2, [r4, #0]
 800747a:	2501      	movs	r5, #1
 800747c:	e7bf      	b.n	80073fe <_scanf_float+0x192>
 800747e:	2d03      	cmp	r5, #3
 8007480:	d0e2      	beq.n	8007448 <_scanf_float+0x1dc>
 8007482:	2d05      	cmp	r5, #5
 8007484:	e7de      	b.n	8007444 <_scanf_float+0x1d8>
 8007486:	2d02      	cmp	r5, #2
 8007488:	f47f af22 	bne.w	80072d0 <_scanf_float+0x64>
 800748c:	2503      	movs	r5, #3
 800748e:	e7b6      	b.n	80073fe <_scanf_float+0x192>
 8007490:	2d06      	cmp	r5, #6
 8007492:	f47f af1d 	bne.w	80072d0 <_scanf_float+0x64>
 8007496:	2507      	movs	r5, #7
 8007498:	e7b1      	b.n	80073fe <_scanf_float+0x192>
 800749a:	6822      	ldr	r2, [r4, #0]
 800749c:	0591      	lsls	r1, r2, #22
 800749e:	f57f af17 	bpl.w	80072d0 <_scanf_float+0x64>
 80074a2:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 80074a6:	6022      	str	r2, [r4, #0]
 80074a8:	f8cd 9008 	str.w	r9, [sp, #8]
 80074ac:	e7a7      	b.n	80073fe <_scanf_float+0x192>
 80074ae:	6822      	ldr	r2, [r4, #0]
 80074b0:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 80074b4:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 80074b8:	d006      	beq.n	80074c8 <_scanf_float+0x25c>
 80074ba:	0550      	lsls	r0, r2, #21
 80074bc:	f57f af08 	bpl.w	80072d0 <_scanf_float+0x64>
 80074c0:	f1b9 0f00 	cmp.w	r9, #0
 80074c4:	f000 80de 	beq.w	8007684 <_scanf_float+0x418>
 80074c8:	0591      	lsls	r1, r2, #22
 80074ca:	bf58      	it	pl
 80074cc:	9902      	ldrpl	r1, [sp, #8]
 80074ce:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80074d2:	bf58      	it	pl
 80074d4:	eba9 0101 	subpl.w	r1, r9, r1
 80074d8:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 80074dc:	bf58      	it	pl
 80074de:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80074e2:	6022      	str	r2, [r4, #0]
 80074e4:	f04f 0900 	mov.w	r9, #0
 80074e8:	e789      	b.n	80073fe <_scanf_float+0x192>
 80074ea:	f04f 0a03 	mov.w	sl, #3
 80074ee:	e786      	b.n	80073fe <_scanf_float+0x192>
 80074f0:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80074f4:	4639      	mov	r1, r7
 80074f6:	4640      	mov	r0, r8
 80074f8:	4798      	blx	r3
 80074fa:	2800      	cmp	r0, #0
 80074fc:	f43f aedb 	beq.w	80072b6 <_scanf_float+0x4a>
 8007500:	e6e6      	b.n	80072d0 <_scanf_float+0x64>
 8007502:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007506:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800750a:	463a      	mov	r2, r7
 800750c:	4640      	mov	r0, r8
 800750e:	4798      	blx	r3
 8007510:	6923      	ldr	r3, [r4, #16]
 8007512:	3b01      	subs	r3, #1
 8007514:	6123      	str	r3, [r4, #16]
 8007516:	e6e8      	b.n	80072ea <_scanf_float+0x7e>
 8007518:	1e6b      	subs	r3, r5, #1
 800751a:	2b06      	cmp	r3, #6
 800751c:	d824      	bhi.n	8007568 <_scanf_float+0x2fc>
 800751e:	2d02      	cmp	r5, #2
 8007520:	d836      	bhi.n	8007590 <_scanf_float+0x324>
 8007522:	9b01      	ldr	r3, [sp, #4]
 8007524:	429e      	cmp	r6, r3
 8007526:	f67f aee4 	bls.w	80072f2 <_scanf_float+0x86>
 800752a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800752e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007532:	463a      	mov	r2, r7
 8007534:	4640      	mov	r0, r8
 8007536:	4798      	blx	r3
 8007538:	6923      	ldr	r3, [r4, #16]
 800753a:	3b01      	subs	r3, #1
 800753c:	6123      	str	r3, [r4, #16]
 800753e:	e7f0      	b.n	8007522 <_scanf_float+0x2b6>
 8007540:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007544:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8007548:	463a      	mov	r2, r7
 800754a:	4640      	mov	r0, r8
 800754c:	4798      	blx	r3
 800754e:	6923      	ldr	r3, [r4, #16]
 8007550:	3b01      	subs	r3, #1
 8007552:	6123      	str	r3, [r4, #16]
 8007554:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8007558:	fa5f fa8a 	uxtb.w	sl, sl
 800755c:	f1ba 0f02 	cmp.w	sl, #2
 8007560:	d1ee      	bne.n	8007540 <_scanf_float+0x2d4>
 8007562:	3d03      	subs	r5, #3
 8007564:	b2ed      	uxtb	r5, r5
 8007566:	1b76      	subs	r6, r6, r5
 8007568:	6823      	ldr	r3, [r4, #0]
 800756a:	05da      	lsls	r2, r3, #23
 800756c:	d530      	bpl.n	80075d0 <_scanf_float+0x364>
 800756e:	055b      	lsls	r3, r3, #21
 8007570:	d511      	bpl.n	8007596 <_scanf_float+0x32a>
 8007572:	9b01      	ldr	r3, [sp, #4]
 8007574:	429e      	cmp	r6, r3
 8007576:	f67f aebc 	bls.w	80072f2 <_scanf_float+0x86>
 800757a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800757e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007582:	463a      	mov	r2, r7
 8007584:	4640      	mov	r0, r8
 8007586:	4798      	blx	r3
 8007588:	6923      	ldr	r3, [r4, #16]
 800758a:	3b01      	subs	r3, #1
 800758c:	6123      	str	r3, [r4, #16]
 800758e:	e7f0      	b.n	8007572 <_scanf_float+0x306>
 8007590:	46aa      	mov	sl, r5
 8007592:	46b3      	mov	fp, r6
 8007594:	e7de      	b.n	8007554 <_scanf_float+0x2e8>
 8007596:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800759a:	6923      	ldr	r3, [r4, #16]
 800759c:	2965      	cmp	r1, #101	@ 0x65
 800759e:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 80075a2:	f106 35ff 	add.w	r5, r6, #4294967295	@ 0xffffffff
 80075a6:	6123      	str	r3, [r4, #16]
 80075a8:	d00c      	beq.n	80075c4 <_scanf_float+0x358>
 80075aa:	2945      	cmp	r1, #69	@ 0x45
 80075ac:	d00a      	beq.n	80075c4 <_scanf_float+0x358>
 80075ae:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80075b2:	463a      	mov	r2, r7
 80075b4:	4640      	mov	r0, r8
 80075b6:	4798      	blx	r3
 80075b8:	6923      	ldr	r3, [r4, #16]
 80075ba:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80075be:	3b01      	subs	r3, #1
 80075c0:	1eb5      	subs	r5, r6, #2
 80075c2:	6123      	str	r3, [r4, #16]
 80075c4:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80075c8:	463a      	mov	r2, r7
 80075ca:	4640      	mov	r0, r8
 80075cc:	4798      	blx	r3
 80075ce:	462e      	mov	r6, r5
 80075d0:	6822      	ldr	r2, [r4, #0]
 80075d2:	f012 0210 	ands.w	r2, r2, #16
 80075d6:	d001      	beq.n	80075dc <_scanf_float+0x370>
 80075d8:	2000      	movs	r0, #0
 80075da:	e68b      	b.n	80072f4 <_scanf_float+0x88>
 80075dc:	7032      	strb	r2, [r6, #0]
 80075de:	6823      	ldr	r3, [r4, #0]
 80075e0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80075e4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80075e8:	d11c      	bne.n	8007624 <_scanf_float+0x3b8>
 80075ea:	9b02      	ldr	r3, [sp, #8]
 80075ec:	454b      	cmp	r3, r9
 80075ee:	eba3 0209 	sub.w	r2, r3, r9
 80075f2:	d123      	bne.n	800763c <_scanf_float+0x3d0>
 80075f4:	9901      	ldr	r1, [sp, #4]
 80075f6:	2200      	movs	r2, #0
 80075f8:	4640      	mov	r0, r8
 80075fa:	f002 fd91 	bl	800a120 <_strtod_r>
 80075fe:	9b03      	ldr	r3, [sp, #12]
 8007600:	6821      	ldr	r1, [r4, #0]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	f011 0f02 	tst.w	r1, #2
 8007608:	ec57 6b10 	vmov	r6, r7, d0
 800760c:	f103 0204 	add.w	r2, r3, #4
 8007610:	d01f      	beq.n	8007652 <_scanf_float+0x3e6>
 8007612:	9903      	ldr	r1, [sp, #12]
 8007614:	600a      	str	r2, [r1, #0]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	e9c3 6700 	strd	r6, r7, [r3]
 800761c:	68e3      	ldr	r3, [r4, #12]
 800761e:	3301      	adds	r3, #1
 8007620:	60e3      	str	r3, [r4, #12]
 8007622:	e7d9      	b.n	80075d8 <_scanf_float+0x36c>
 8007624:	9b04      	ldr	r3, [sp, #16]
 8007626:	2b00      	cmp	r3, #0
 8007628:	d0e4      	beq.n	80075f4 <_scanf_float+0x388>
 800762a:	9905      	ldr	r1, [sp, #20]
 800762c:	230a      	movs	r3, #10
 800762e:	3101      	adds	r1, #1
 8007630:	4640      	mov	r0, r8
 8007632:	f002 fdf5 	bl	800a220 <_strtol_r>
 8007636:	9b04      	ldr	r3, [sp, #16]
 8007638:	9e05      	ldr	r6, [sp, #20]
 800763a:	1ac2      	subs	r2, r0, r3
 800763c:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8007640:	429e      	cmp	r6, r3
 8007642:	bf28      	it	cs
 8007644:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8007648:	4910      	ldr	r1, [pc, #64]	@ (800768c <_scanf_float+0x420>)
 800764a:	4630      	mov	r0, r6
 800764c:	f000 f988 	bl	8007960 <siprintf>
 8007650:	e7d0      	b.n	80075f4 <_scanf_float+0x388>
 8007652:	f011 0f04 	tst.w	r1, #4
 8007656:	9903      	ldr	r1, [sp, #12]
 8007658:	600a      	str	r2, [r1, #0]
 800765a:	d1dc      	bne.n	8007616 <_scanf_float+0x3aa>
 800765c:	681d      	ldr	r5, [r3, #0]
 800765e:	4632      	mov	r2, r6
 8007660:	463b      	mov	r3, r7
 8007662:	4630      	mov	r0, r6
 8007664:	4639      	mov	r1, r7
 8007666:	f7f9 fa79 	bl	8000b5c <__aeabi_dcmpun>
 800766a:	b128      	cbz	r0, 8007678 <_scanf_float+0x40c>
 800766c:	4808      	ldr	r0, [pc, #32]	@ (8007690 <_scanf_float+0x424>)
 800766e:	f000 fb51 	bl	8007d14 <nanf>
 8007672:	ed85 0a00 	vstr	s0, [r5]
 8007676:	e7d1      	b.n	800761c <_scanf_float+0x3b0>
 8007678:	4630      	mov	r0, r6
 800767a:	4639      	mov	r1, r7
 800767c:	f7f9 facc 	bl	8000c18 <__aeabi_d2f>
 8007680:	6028      	str	r0, [r5, #0]
 8007682:	e7cb      	b.n	800761c <_scanf_float+0x3b0>
 8007684:	f04f 0900 	mov.w	r9, #0
 8007688:	e629      	b.n	80072de <_scanf_float+0x72>
 800768a:	bf00      	nop
 800768c:	0800bdd3 	.word	0x0800bdd3
 8007690:	0800c087 	.word	0x0800c087

08007694 <std>:
 8007694:	2300      	movs	r3, #0
 8007696:	b510      	push	{r4, lr}
 8007698:	4604      	mov	r4, r0
 800769a:	e9c0 3300 	strd	r3, r3, [r0]
 800769e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80076a2:	6083      	str	r3, [r0, #8]
 80076a4:	8181      	strh	r1, [r0, #12]
 80076a6:	6643      	str	r3, [r0, #100]	@ 0x64
 80076a8:	81c2      	strh	r2, [r0, #14]
 80076aa:	6183      	str	r3, [r0, #24]
 80076ac:	4619      	mov	r1, r3
 80076ae:	2208      	movs	r2, #8
 80076b0:	305c      	adds	r0, #92	@ 0x5c
 80076b2:	f000 fa79 	bl	8007ba8 <memset>
 80076b6:	4b0d      	ldr	r3, [pc, #52]	@ (80076ec <std+0x58>)
 80076b8:	6263      	str	r3, [r4, #36]	@ 0x24
 80076ba:	4b0d      	ldr	r3, [pc, #52]	@ (80076f0 <std+0x5c>)
 80076bc:	62a3      	str	r3, [r4, #40]	@ 0x28
 80076be:	4b0d      	ldr	r3, [pc, #52]	@ (80076f4 <std+0x60>)
 80076c0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80076c2:	4b0d      	ldr	r3, [pc, #52]	@ (80076f8 <std+0x64>)
 80076c4:	6323      	str	r3, [r4, #48]	@ 0x30
 80076c6:	4b0d      	ldr	r3, [pc, #52]	@ (80076fc <std+0x68>)
 80076c8:	6224      	str	r4, [r4, #32]
 80076ca:	429c      	cmp	r4, r3
 80076cc:	d006      	beq.n	80076dc <std+0x48>
 80076ce:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80076d2:	4294      	cmp	r4, r2
 80076d4:	d002      	beq.n	80076dc <std+0x48>
 80076d6:	33d0      	adds	r3, #208	@ 0xd0
 80076d8:	429c      	cmp	r4, r3
 80076da:	d105      	bne.n	80076e8 <std+0x54>
 80076dc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80076e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80076e4:	f000 bb12 	b.w	8007d0c <__retarget_lock_init_recursive>
 80076e8:	bd10      	pop	{r4, pc}
 80076ea:	bf00      	nop
 80076ec:	080079f5 	.word	0x080079f5
 80076f0:	08007a1b 	.word	0x08007a1b
 80076f4:	08007a53 	.word	0x08007a53
 80076f8:	08007a77 	.word	0x08007a77
 80076fc:	2000530c 	.word	0x2000530c

08007700 <stdio_exit_handler>:
 8007700:	4a02      	ldr	r2, [pc, #8]	@ (800770c <stdio_exit_handler+0xc>)
 8007702:	4903      	ldr	r1, [pc, #12]	@ (8007710 <stdio_exit_handler+0x10>)
 8007704:	4803      	ldr	r0, [pc, #12]	@ (8007714 <stdio_exit_handler+0x14>)
 8007706:	f000 b869 	b.w	80077dc <_fwalk_sglue>
 800770a:	bf00      	nop
 800770c:	2000000c 	.word	0x2000000c
 8007710:	0800ae95 	.word	0x0800ae95
 8007714:	2000001c 	.word	0x2000001c

08007718 <cleanup_stdio>:
 8007718:	6841      	ldr	r1, [r0, #4]
 800771a:	4b0c      	ldr	r3, [pc, #48]	@ (800774c <cleanup_stdio+0x34>)
 800771c:	4299      	cmp	r1, r3
 800771e:	b510      	push	{r4, lr}
 8007720:	4604      	mov	r4, r0
 8007722:	d001      	beq.n	8007728 <cleanup_stdio+0x10>
 8007724:	f003 fbb6 	bl	800ae94 <_fflush_r>
 8007728:	68a1      	ldr	r1, [r4, #8]
 800772a:	4b09      	ldr	r3, [pc, #36]	@ (8007750 <cleanup_stdio+0x38>)
 800772c:	4299      	cmp	r1, r3
 800772e:	d002      	beq.n	8007736 <cleanup_stdio+0x1e>
 8007730:	4620      	mov	r0, r4
 8007732:	f003 fbaf 	bl	800ae94 <_fflush_r>
 8007736:	68e1      	ldr	r1, [r4, #12]
 8007738:	4b06      	ldr	r3, [pc, #24]	@ (8007754 <cleanup_stdio+0x3c>)
 800773a:	4299      	cmp	r1, r3
 800773c:	d004      	beq.n	8007748 <cleanup_stdio+0x30>
 800773e:	4620      	mov	r0, r4
 8007740:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007744:	f003 bba6 	b.w	800ae94 <_fflush_r>
 8007748:	bd10      	pop	{r4, pc}
 800774a:	bf00      	nop
 800774c:	2000530c 	.word	0x2000530c
 8007750:	20005374 	.word	0x20005374
 8007754:	200053dc 	.word	0x200053dc

08007758 <global_stdio_init.part.0>:
 8007758:	b510      	push	{r4, lr}
 800775a:	4b0b      	ldr	r3, [pc, #44]	@ (8007788 <global_stdio_init.part.0+0x30>)
 800775c:	4c0b      	ldr	r4, [pc, #44]	@ (800778c <global_stdio_init.part.0+0x34>)
 800775e:	4a0c      	ldr	r2, [pc, #48]	@ (8007790 <global_stdio_init.part.0+0x38>)
 8007760:	601a      	str	r2, [r3, #0]
 8007762:	4620      	mov	r0, r4
 8007764:	2200      	movs	r2, #0
 8007766:	2104      	movs	r1, #4
 8007768:	f7ff ff94 	bl	8007694 <std>
 800776c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007770:	2201      	movs	r2, #1
 8007772:	2109      	movs	r1, #9
 8007774:	f7ff ff8e 	bl	8007694 <std>
 8007778:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800777c:	2202      	movs	r2, #2
 800777e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007782:	2112      	movs	r1, #18
 8007784:	f7ff bf86 	b.w	8007694 <std>
 8007788:	20005444 	.word	0x20005444
 800778c:	2000530c 	.word	0x2000530c
 8007790:	08007701 	.word	0x08007701

08007794 <__sfp_lock_acquire>:
 8007794:	4801      	ldr	r0, [pc, #4]	@ (800779c <__sfp_lock_acquire+0x8>)
 8007796:	f000 baba 	b.w	8007d0e <__retarget_lock_acquire_recursive>
 800779a:	bf00      	nop
 800779c:	2000544d 	.word	0x2000544d

080077a0 <__sfp_lock_release>:
 80077a0:	4801      	ldr	r0, [pc, #4]	@ (80077a8 <__sfp_lock_release+0x8>)
 80077a2:	f000 bab5 	b.w	8007d10 <__retarget_lock_release_recursive>
 80077a6:	bf00      	nop
 80077a8:	2000544d 	.word	0x2000544d

080077ac <__sinit>:
 80077ac:	b510      	push	{r4, lr}
 80077ae:	4604      	mov	r4, r0
 80077b0:	f7ff fff0 	bl	8007794 <__sfp_lock_acquire>
 80077b4:	6a23      	ldr	r3, [r4, #32]
 80077b6:	b11b      	cbz	r3, 80077c0 <__sinit+0x14>
 80077b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80077bc:	f7ff bff0 	b.w	80077a0 <__sfp_lock_release>
 80077c0:	4b04      	ldr	r3, [pc, #16]	@ (80077d4 <__sinit+0x28>)
 80077c2:	6223      	str	r3, [r4, #32]
 80077c4:	4b04      	ldr	r3, [pc, #16]	@ (80077d8 <__sinit+0x2c>)
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d1f5      	bne.n	80077b8 <__sinit+0xc>
 80077cc:	f7ff ffc4 	bl	8007758 <global_stdio_init.part.0>
 80077d0:	e7f2      	b.n	80077b8 <__sinit+0xc>
 80077d2:	bf00      	nop
 80077d4:	08007719 	.word	0x08007719
 80077d8:	20005444 	.word	0x20005444

080077dc <_fwalk_sglue>:
 80077dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80077e0:	4607      	mov	r7, r0
 80077e2:	4688      	mov	r8, r1
 80077e4:	4614      	mov	r4, r2
 80077e6:	2600      	movs	r6, #0
 80077e8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80077ec:	f1b9 0901 	subs.w	r9, r9, #1
 80077f0:	d505      	bpl.n	80077fe <_fwalk_sglue+0x22>
 80077f2:	6824      	ldr	r4, [r4, #0]
 80077f4:	2c00      	cmp	r4, #0
 80077f6:	d1f7      	bne.n	80077e8 <_fwalk_sglue+0xc>
 80077f8:	4630      	mov	r0, r6
 80077fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80077fe:	89ab      	ldrh	r3, [r5, #12]
 8007800:	2b01      	cmp	r3, #1
 8007802:	d907      	bls.n	8007814 <_fwalk_sglue+0x38>
 8007804:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007808:	3301      	adds	r3, #1
 800780a:	d003      	beq.n	8007814 <_fwalk_sglue+0x38>
 800780c:	4629      	mov	r1, r5
 800780e:	4638      	mov	r0, r7
 8007810:	47c0      	blx	r8
 8007812:	4306      	orrs	r6, r0
 8007814:	3568      	adds	r5, #104	@ 0x68
 8007816:	e7e9      	b.n	80077ec <_fwalk_sglue+0x10>

08007818 <iprintf>:
 8007818:	b40f      	push	{r0, r1, r2, r3}
 800781a:	b507      	push	{r0, r1, r2, lr}
 800781c:	4906      	ldr	r1, [pc, #24]	@ (8007838 <iprintf+0x20>)
 800781e:	ab04      	add	r3, sp, #16
 8007820:	6808      	ldr	r0, [r1, #0]
 8007822:	f853 2b04 	ldr.w	r2, [r3], #4
 8007826:	6881      	ldr	r1, [r0, #8]
 8007828:	9301      	str	r3, [sp, #4]
 800782a:	f003 f849 	bl	800a8c0 <_vfiprintf_r>
 800782e:	b003      	add	sp, #12
 8007830:	f85d eb04 	ldr.w	lr, [sp], #4
 8007834:	b004      	add	sp, #16
 8007836:	4770      	bx	lr
 8007838:	20000018 	.word	0x20000018

0800783c <_puts_r>:
 800783c:	6a03      	ldr	r3, [r0, #32]
 800783e:	b570      	push	{r4, r5, r6, lr}
 8007840:	6884      	ldr	r4, [r0, #8]
 8007842:	4605      	mov	r5, r0
 8007844:	460e      	mov	r6, r1
 8007846:	b90b      	cbnz	r3, 800784c <_puts_r+0x10>
 8007848:	f7ff ffb0 	bl	80077ac <__sinit>
 800784c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800784e:	07db      	lsls	r3, r3, #31
 8007850:	d405      	bmi.n	800785e <_puts_r+0x22>
 8007852:	89a3      	ldrh	r3, [r4, #12]
 8007854:	0598      	lsls	r0, r3, #22
 8007856:	d402      	bmi.n	800785e <_puts_r+0x22>
 8007858:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800785a:	f000 fa58 	bl	8007d0e <__retarget_lock_acquire_recursive>
 800785e:	89a3      	ldrh	r3, [r4, #12]
 8007860:	0719      	lsls	r1, r3, #28
 8007862:	d502      	bpl.n	800786a <_puts_r+0x2e>
 8007864:	6923      	ldr	r3, [r4, #16]
 8007866:	2b00      	cmp	r3, #0
 8007868:	d135      	bne.n	80078d6 <_puts_r+0x9a>
 800786a:	4621      	mov	r1, r4
 800786c:	4628      	mov	r0, r5
 800786e:	f000 f945 	bl	8007afc <__swsetup_r>
 8007872:	b380      	cbz	r0, 80078d6 <_puts_r+0x9a>
 8007874:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8007878:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800787a:	07da      	lsls	r2, r3, #31
 800787c:	d405      	bmi.n	800788a <_puts_r+0x4e>
 800787e:	89a3      	ldrh	r3, [r4, #12]
 8007880:	059b      	lsls	r3, r3, #22
 8007882:	d402      	bmi.n	800788a <_puts_r+0x4e>
 8007884:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007886:	f000 fa43 	bl	8007d10 <__retarget_lock_release_recursive>
 800788a:	4628      	mov	r0, r5
 800788c:	bd70      	pop	{r4, r5, r6, pc}
 800788e:	2b00      	cmp	r3, #0
 8007890:	da04      	bge.n	800789c <_puts_r+0x60>
 8007892:	69a2      	ldr	r2, [r4, #24]
 8007894:	429a      	cmp	r2, r3
 8007896:	dc17      	bgt.n	80078c8 <_puts_r+0x8c>
 8007898:	290a      	cmp	r1, #10
 800789a:	d015      	beq.n	80078c8 <_puts_r+0x8c>
 800789c:	6823      	ldr	r3, [r4, #0]
 800789e:	1c5a      	adds	r2, r3, #1
 80078a0:	6022      	str	r2, [r4, #0]
 80078a2:	7019      	strb	r1, [r3, #0]
 80078a4:	68a3      	ldr	r3, [r4, #8]
 80078a6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80078aa:	3b01      	subs	r3, #1
 80078ac:	60a3      	str	r3, [r4, #8]
 80078ae:	2900      	cmp	r1, #0
 80078b0:	d1ed      	bne.n	800788e <_puts_r+0x52>
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	da11      	bge.n	80078da <_puts_r+0x9e>
 80078b6:	4622      	mov	r2, r4
 80078b8:	210a      	movs	r1, #10
 80078ba:	4628      	mov	r0, r5
 80078bc:	f000 f8df 	bl	8007a7e <__swbuf_r>
 80078c0:	3001      	adds	r0, #1
 80078c2:	d0d7      	beq.n	8007874 <_puts_r+0x38>
 80078c4:	250a      	movs	r5, #10
 80078c6:	e7d7      	b.n	8007878 <_puts_r+0x3c>
 80078c8:	4622      	mov	r2, r4
 80078ca:	4628      	mov	r0, r5
 80078cc:	f000 f8d7 	bl	8007a7e <__swbuf_r>
 80078d0:	3001      	adds	r0, #1
 80078d2:	d1e7      	bne.n	80078a4 <_puts_r+0x68>
 80078d4:	e7ce      	b.n	8007874 <_puts_r+0x38>
 80078d6:	3e01      	subs	r6, #1
 80078d8:	e7e4      	b.n	80078a4 <_puts_r+0x68>
 80078da:	6823      	ldr	r3, [r4, #0]
 80078dc:	1c5a      	adds	r2, r3, #1
 80078de:	6022      	str	r2, [r4, #0]
 80078e0:	220a      	movs	r2, #10
 80078e2:	701a      	strb	r2, [r3, #0]
 80078e4:	e7ee      	b.n	80078c4 <_puts_r+0x88>
	...

080078e8 <puts>:
 80078e8:	4b02      	ldr	r3, [pc, #8]	@ (80078f4 <puts+0xc>)
 80078ea:	4601      	mov	r1, r0
 80078ec:	6818      	ldr	r0, [r3, #0]
 80078ee:	f7ff bfa5 	b.w	800783c <_puts_r>
 80078f2:	bf00      	nop
 80078f4:	20000018 	.word	0x20000018

080078f8 <sniprintf>:
 80078f8:	b40c      	push	{r2, r3}
 80078fa:	b530      	push	{r4, r5, lr}
 80078fc:	4b17      	ldr	r3, [pc, #92]	@ (800795c <sniprintf+0x64>)
 80078fe:	1e0c      	subs	r4, r1, #0
 8007900:	681d      	ldr	r5, [r3, #0]
 8007902:	b09d      	sub	sp, #116	@ 0x74
 8007904:	da08      	bge.n	8007918 <sniprintf+0x20>
 8007906:	238b      	movs	r3, #139	@ 0x8b
 8007908:	602b      	str	r3, [r5, #0]
 800790a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800790e:	b01d      	add	sp, #116	@ 0x74
 8007910:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007914:	b002      	add	sp, #8
 8007916:	4770      	bx	lr
 8007918:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800791c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8007920:	bf14      	ite	ne
 8007922:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 8007926:	4623      	moveq	r3, r4
 8007928:	9304      	str	r3, [sp, #16]
 800792a:	9307      	str	r3, [sp, #28]
 800792c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8007930:	9002      	str	r0, [sp, #8]
 8007932:	9006      	str	r0, [sp, #24]
 8007934:	f8ad 3016 	strh.w	r3, [sp, #22]
 8007938:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800793a:	ab21      	add	r3, sp, #132	@ 0x84
 800793c:	a902      	add	r1, sp, #8
 800793e:	4628      	mov	r0, r5
 8007940:	9301      	str	r3, [sp, #4]
 8007942:	f002 fccb 	bl	800a2dc <_svfiprintf_r>
 8007946:	1c43      	adds	r3, r0, #1
 8007948:	bfbc      	itt	lt
 800794a:	238b      	movlt	r3, #139	@ 0x8b
 800794c:	602b      	strlt	r3, [r5, #0]
 800794e:	2c00      	cmp	r4, #0
 8007950:	d0dd      	beq.n	800790e <sniprintf+0x16>
 8007952:	9b02      	ldr	r3, [sp, #8]
 8007954:	2200      	movs	r2, #0
 8007956:	701a      	strb	r2, [r3, #0]
 8007958:	e7d9      	b.n	800790e <sniprintf+0x16>
 800795a:	bf00      	nop
 800795c:	20000018 	.word	0x20000018

08007960 <siprintf>:
 8007960:	b40e      	push	{r1, r2, r3}
 8007962:	b500      	push	{lr}
 8007964:	b09c      	sub	sp, #112	@ 0x70
 8007966:	ab1d      	add	r3, sp, #116	@ 0x74
 8007968:	9002      	str	r0, [sp, #8]
 800796a:	9006      	str	r0, [sp, #24]
 800796c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8007970:	4809      	ldr	r0, [pc, #36]	@ (8007998 <siprintf+0x38>)
 8007972:	9107      	str	r1, [sp, #28]
 8007974:	9104      	str	r1, [sp, #16]
 8007976:	4909      	ldr	r1, [pc, #36]	@ (800799c <siprintf+0x3c>)
 8007978:	f853 2b04 	ldr.w	r2, [r3], #4
 800797c:	9105      	str	r1, [sp, #20]
 800797e:	6800      	ldr	r0, [r0, #0]
 8007980:	9301      	str	r3, [sp, #4]
 8007982:	a902      	add	r1, sp, #8
 8007984:	f002 fcaa 	bl	800a2dc <_svfiprintf_r>
 8007988:	9b02      	ldr	r3, [sp, #8]
 800798a:	2200      	movs	r2, #0
 800798c:	701a      	strb	r2, [r3, #0]
 800798e:	b01c      	add	sp, #112	@ 0x70
 8007990:	f85d eb04 	ldr.w	lr, [sp], #4
 8007994:	b003      	add	sp, #12
 8007996:	4770      	bx	lr
 8007998:	20000018 	.word	0x20000018
 800799c:	ffff0208 	.word	0xffff0208

080079a0 <siscanf>:
 80079a0:	b40e      	push	{r1, r2, r3}
 80079a2:	b530      	push	{r4, r5, lr}
 80079a4:	b09c      	sub	sp, #112	@ 0x70
 80079a6:	ac1f      	add	r4, sp, #124	@ 0x7c
 80079a8:	f44f 7201 	mov.w	r2, #516	@ 0x204
 80079ac:	f854 5b04 	ldr.w	r5, [r4], #4
 80079b0:	f8ad 2014 	strh.w	r2, [sp, #20]
 80079b4:	9002      	str	r0, [sp, #8]
 80079b6:	9006      	str	r0, [sp, #24]
 80079b8:	f7f8 fc72 	bl	80002a0 <strlen>
 80079bc:	4b0b      	ldr	r3, [pc, #44]	@ (80079ec <siscanf+0x4c>)
 80079be:	9003      	str	r0, [sp, #12]
 80079c0:	9007      	str	r0, [sp, #28]
 80079c2:	930b      	str	r3, [sp, #44]	@ 0x2c
 80079c4:	480a      	ldr	r0, [pc, #40]	@ (80079f0 <siscanf+0x50>)
 80079c6:	9401      	str	r4, [sp, #4]
 80079c8:	2300      	movs	r3, #0
 80079ca:	930f      	str	r3, [sp, #60]	@ 0x3c
 80079cc:	9314      	str	r3, [sp, #80]	@ 0x50
 80079ce:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80079d2:	f8ad 3016 	strh.w	r3, [sp, #22]
 80079d6:	462a      	mov	r2, r5
 80079d8:	4623      	mov	r3, r4
 80079da:	a902      	add	r1, sp, #8
 80079dc:	6800      	ldr	r0, [r0, #0]
 80079de:	f002 fdd1 	bl	800a584 <__ssvfiscanf_r>
 80079e2:	b01c      	add	sp, #112	@ 0x70
 80079e4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80079e8:	b003      	add	sp, #12
 80079ea:	4770      	bx	lr
 80079ec:	08007a17 	.word	0x08007a17
 80079f0:	20000018 	.word	0x20000018

080079f4 <__sread>:
 80079f4:	b510      	push	{r4, lr}
 80079f6:	460c      	mov	r4, r1
 80079f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80079fc:	f000 f938 	bl	8007c70 <_read_r>
 8007a00:	2800      	cmp	r0, #0
 8007a02:	bfab      	itete	ge
 8007a04:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007a06:	89a3      	ldrhlt	r3, [r4, #12]
 8007a08:	181b      	addge	r3, r3, r0
 8007a0a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007a0e:	bfac      	ite	ge
 8007a10:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007a12:	81a3      	strhlt	r3, [r4, #12]
 8007a14:	bd10      	pop	{r4, pc}

08007a16 <__seofread>:
 8007a16:	2000      	movs	r0, #0
 8007a18:	4770      	bx	lr

08007a1a <__swrite>:
 8007a1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007a1e:	461f      	mov	r7, r3
 8007a20:	898b      	ldrh	r3, [r1, #12]
 8007a22:	05db      	lsls	r3, r3, #23
 8007a24:	4605      	mov	r5, r0
 8007a26:	460c      	mov	r4, r1
 8007a28:	4616      	mov	r6, r2
 8007a2a:	d505      	bpl.n	8007a38 <__swrite+0x1e>
 8007a2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a30:	2302      	movs	r3, #2
 8007a32:	2200      	movs	r2, #0
 8007a34:	f000 f90a 	bl	8007c4c <_lseek_r>
 8007a38:	89a3      	ldrh	r3, [r4, #12]
 8007a3a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007a3e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007a42:	81a3      	strh	r3, [r4, #12]
 8007a44:	4632      	mov	r2, r6
 8007a46:	463b      	mov	r3, r7
 8007a48:	4628      	mov	r0, r5
 8007a4a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007a4e:	f000 b921 	b.w	8007c94 <_write_r>

08007a52 <__sseek>:
 8007a52:	b510      	push	{r4, lr}
 8007a54:	460c      	mov	r4, r1
 8007a56:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a5a:	f000 f8f7 	bl	8007c4c <_lseek_r>
 8007a5e:	1c43      	adds	r3, r0, #1
 8007a60:	89a3      	ldrh	r3, [r4, #12]
 8007a62:	bf15      	itete	ne
 8007a64:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007a66:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007a6a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007a6e:	81a3      	strheq	r3, [r4, #12]
 8007a70:	bf18      	it	ne
 8007a72:	81a3      	strhne	r3, [r4, #12]
 8007a74:	bd10      	pop	{r4, pc}

08007a76 <__sclose>:
 8007a76:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a7a:	f000 b8d7 	b.w	8007c2c <_close_r>

08007a7e <__swbuf_r>:
 8007a7e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a80:	460e      	mov	r6, r1
 8007a82:	4614      	mov	r4, r2
 8007a84:	4605      	mov	r5, r0
 8007a86:	b118      	cbz	r0, 8007a90 <__swbuf_r+0x12>
 8007a88:	6a03      	ldr	r3, [r0, #32]
 8007a8a:	b90b      	cbnz	r3, 8007a90 <__swbuf_r+0x12>
 8007a8c:	f7ff fe8e 	bl	80077ac <__sinit>
 8007a90:	69a3      	ldr	r3, [r4, #24]
 8007a92:	60a3      	str	r3, [r4, #8]
 8007a94:	89a3      	ldrh	r3, [r4, #12]
 8007a96:	071a      	lsls	r2, r3, #28
 8007a98:	d501      	bpl.n	8007a9e <__swbuf_r+0x20>
 8007a9a:	6923      	ldr	r3, [r4, #16]
 8007a9c:	b943      	cbnz	r3, 8007ab0 <__swbuf_r+0x32>
 8007a9e:	4621      	mov	r1, r4
 8007aa0:	4628      	mov	r0, r5
 8007aa2:	f000 f82b 	bl	8007afc <__swsetup_r>
 8007aa6:	b118      	cbz	r0, 8007ab0 <__swbuf_r+0x32>
 8007aa8:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8007aac:	4638      	mov	r0, r7
 8007aae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007ab0:	6823      	ldr	r3, [r4, #0]
 8007ab2:	6922      	ldr	r2, [r4, #16]
 8007ab4:	1a98      	subs	r0, r3, r2
 8007ab6:	6963      	ldr	r3, [r4, #20]
 8007ab8:	b2f6      	uxtb	r6, r6
 8007aba:	4283      	cmp	r3, r0
 8007abc:	4637      	mov	r7, r6
 8007abe:	dc05      	bgt.n	8007acc <__swbuf_r+0x4e>
 8007ac0:	4621      	mov	r1, r4
 8007ac2:	4628      	mov	r0, r5
 8007ac4:	f003 f9e6 	bl	800ae94 <_fflush_r>
 8007ac8:	2800      	cmp	r0, #0
 8007aca:	d1ed      	bne.n	8007aa8 <__swbuf_r+0x2a>
 8007acc:	68a3      	ldr	r3, [r4, #8]
 8007ace:	3b01      	subs	r3, #1
 8007ad0:	60a3      	str	r3, [r4, #8]
 8007ad2:	6823      	ldr	r3, [r4, #0]
 8007ad4:	1c5a      	adds	r2, r3, #1
 8007ad6:	6022      	str	r2, [r4, #0]
 8007ad8:	701e      	strb	r6, [r3, #0]
 8007ada:	6962      	ldr	r2, [r4, #20]
 8007adc:	1c43      	adds	r3, r0, #1
 8007ade:	429a      	cmp	r2, r3
 8007ae0:	d004      	beq.n	8007aec <__swbuf_r+0x6e>
 8007ae2:	89a3      	ldrh	r3, [r4, #12]
 8007ae4:	07db      	lsls	r3, r3, #31
 8007ae6:	d5e1      	bpl.n	8007aac <__swbuf_r+0x2e>
 8007ae8:	2e0a      	cmp	r6, #10
 8007aea:	d1df      	bne.n	8007aac <__swbuf_r+0x2e>
 8007aec:	4621      	mov	r1, r4
 8007aee:	4628      	mov	r0, r5
 8007af0:	f003 f9d0 	bl	800ae94 <_fflush_r>
 8007af4:	2800      	cmp	r0, #0
 8007af6:	d0d9      	beq.n	8007aac <__swbuf_r+0x2e>
 8007af8:	e7d6      	b.n	8007aa8 <__swbuf_r+0x2a>
	...

08007afc <__swsetup_r>:
 8007afc:	b538      	push	{r3, r4, r5, lr}
 8007afe:	4b29      	ldr	r3, [pc, #164]	@ (8007ba4 <__swsetup_r+0xa8>)
 8007b00:	4605      	mov	r5, r0
 8007b02:	6818      	ldr	r0, [r3, #0]
 8007b04:	460c      	mov	r4, r1
 8007b06:	b118      	cbz	r0, 8007b10 <__swsetup_r+0x14>
 8007b08:	6a03      	ldr	r3, [r0, #32]
 8007b0a:	b90b      	cbnz	r3, 8007b10 <__swsetup_r+0x14>
 8007b0c:	f7ff fe4e 	bl	80077ac <__sinit>
 8007b10:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007b14:	0719      	lsls	r1, r3, #28
 8007b16:	d422      	bmi.n	8007b5e <__swsetup_r+0x62>
 8007b18:	06da      	lsls	r2, r3, #27
 8007b1a:	d407      	bmi.n	8007b2c <__swsetup_r+0x30>
 8007b1c:	2209      	movs	r2, #9
 8007b1e:	602a      	str	r2, [r5, #0]
 8007b20:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007b24:	81a3      	strh	r3, [r4, #12]
 8007b26:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007b2a:	e033      	b.n	8007b94 <__swsetup_r+0x98>
 8007b2c:	0758      	lsls	r0, r3, #29
 8007b2e:	d512      	bpl.n	8007b56 <__swsetup_r+0x5a>
 8007b30:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007b32:	b141      	cbz	r1, 8007b46 <__swsetup_r+0x4a>
 8007b34:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007b38:	4299      	cmp	r1, r3
 8007b3a:	d002      	beq.n	8007b42 <__swsetup_r+0x46>
 8007b3c:	4628      	mov	r0, r5
 8007b3e:	f000 ff3b 	bl	80089b8 <_free_r>
 8007b42:	2300      	movs	r3, #0
 8007b44:	6363      	str	r3, [r4, #52]	@ 0x34
 8007b46:	89a3      	ldrh	r3, [r4, #12]
 8007b48:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007b4c:	81a3      	strh	r3, [r4, #12]
 8007b4e:	2300      	movs	r3, #0
 8007b50:	6063      	str	r3, [r4, #4]
 8007b52:	6923      	ldr	r3, [r4, #16]
 8007b54:	6023      	str	r3, [r4, #0]
 8007b56:	89a3      	ldrh	r3, [r4, #12]
 8007b58:	f043 0308 	orr.w	r3, r3, #8
 8007b5c:	81a3      	strh	r3, [r4, #12]
 8007b5e:	6923      	ldr	r3, [r4, #16]
 8007b60:	b94b      	cbnz	r3, 8007b76 <__swsetup_r+0x7a>
 8007b62:	89a3      	ldrh	r3, [r4, #12]
 8007b64:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007b68:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007b6c:	d003      	beq.n	8007b76 <__swsetup_r+0x7a>
 8007b6e:	4621      	mov	r1, r4
 8007b70:	4628      	mov	r0, r5
 8007b72:	f003 f9dd 	bl	800af30 <__smakebuf_r>
 8007b76:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007b7a:	f013 0201 	ands.w	r2, r3, #1
 8007b7e:	d00a      	beq.n	8007b96 <__swsetup_r+0x9a>
 8007b80:	2200      	movs	r2, #0
 8007b82:	60a2      	str	r2, [r4, #8]
 8007b84:	6962      	ldr	r2, [r4, #20]
 8007b86:	4252      	negs	r2, r2
 8007b88:	61a2      	str	r2, [r4, #24]
 8007b8a:	6922      	ldr	r2, [r4, #16]
 8007b8c:	b942      	cbnz	r2, 8007ba0 <__swsetup_r+0xa4>
 8007b8e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8007b92:	d1c5      	bne.n	8007b20 <__swsetup_r+0x24>
 8007b94:	bd38      	pop	{r3, r4, r5, pc}
 8007b96:	0799      	lsls	r1, r3, #30
 8007b98:	bf58      	it	pl
 8007b9a:	6962      	ldrpl	r2, [r4, #20]
 8007b9c:	60a2      	str	r2, [r4, #8]
 8007b9e:	e7f4      	b.n	8007b8a <__swsetup_r+0x8e>
 8007ba0:	2000      	movs	r0, #0
 8007ba2:	e7f7      	b.n	8007b94 <__swsetup_r+0x98>
 8007ba4:	20000018 	.word	0x20000018

08007ba8 <memset>:
 8007ba8:	4402      	add	r2, r0
 8007baa:	4603      	mov	r3, r0
 8007bac:	4293      	cmp	r3, r2
 8007bae:	d100      	bne.n	8007bb2 <memset+0xa>
 8007bb0:	4770      	bx	lr
 8007bb2:	f803 1b01 	strb.w	r1, [r3], #1
 8007bb6:	e7f9      	b.n	8007bac <memset+0x4>

08007bb8 <strchr>:
 8007bb8:	b2c9      	uxtb	r1, r1
 8007bba:	4603      	mov	r3, r0
 8007bbc:	4618      	mov	r0, r3
 8007bbe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007bc2:	b112      	cbz	r2, 8007bca <strchr+0x12>
 8007bc4:	428a      	cmp	r2, r1
 8007bc6:	d1f9      	bne.n	8007bbc <strchr+0x4>
 8007bc8:	4770      	bx	lr
 8007bca:	2900      	cmp	r1, #0
 8007bcc:	bf18      	it	ne
 8007bce:	2000      	movne	r0, #0
 8007bd0:	4770      	bx	lr

08007bd2 <strncpy>:
 8007bd2:	b510      	push	{r4, lr}
 8007bd4:	3901      	subs	r1, #1
 8007bd6:	4603      	mov	r3, r0
 8007bd8:	b132      	cbz	r2, 8007be8 <strncpy+0x16>
 8007bda:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8007bde:	f803 4b01 	strb.w	r4, [r3], #1
 8007be2:	3a01      	subs	r2, #1
 8007be4:	2c00      	cmp	r4, #0
 8007be6:	d1f7      	bne.n	8007bd8 <strncpy+0x6>
 8007be8:	441a      	add	r2, r3
 8007bea:	2100      	movs	r1, #0
 8007bec:	4293      	cmp	r3, r2
 8007bee:	d100      	bne.n	8007bf2 <strncpy+0x20>
 8007bf0:	bd10      	pop	{r4, pc}
 8007bf2:	f803 1b01 	strb.w	r1, [r3], #1
 8007bf6:	e7f9      	b.n	8007bec <strncpy+0x1a>

08007bf8 <strstr>:
 8007bf8:	780a      	ldrb	r2, [r1, #0]
 8007bfa:	b570      	push	{r4, r5, r6, lr}
 8007bfc:	b96a      	cbnz	r2, 8007c1a <strstr+0x22>
 8007bfe:	bd70      	pop	{r4, r5, r6, pc}
 8007c00:	429a      	cmp	r2, r3
 8007c02:	d109      	bne.n	8007c18 <strstr+0x20>
 8007c04:	460c      	mov	r4, r1
 8007c06:	4605      	mov	r5, r0
 8007c08:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d0f6      	beq.n	8007bfe <strstr+0x6>
 8007c10:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8007c14:	429e      	cmp	r6, r3
 8007c16:	d0f7      	beq.n	8007c08 <strstr+0x10>
 8007c18:	3001      	adds	r0, #1
 8007c1a:	7803      	ldrb	r3, [r0, #0]
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d1ef      	bne.n	8007c00 <strstr+0x8>
 8007c20:	4618      	mov	r0, r3
 8007c22:	e7ec      	b.n	8007bfe <strstr+0x6>

08007c24 <_localeconv_r>:
 8007c24:	4800      	ldr	r0, [pc, #0]	@ (8007c28 <_localeconv_r+0x4>)
 8007c26:	4770      	bx	lr
 8007c28:	20000158 	.word	0x20000158

08007c2c <_close_r>:
 8007c2c:	b538      	push	{r3, r4, r5, lr}
 8007c2e:	4d06      	ldr	r5, [pc, #24]	@ (8007c48 <_close_r+0x1c>)
 8007c30:	2300      	movs	r3, #0
 8007c32:	4604      	mov	r4, r0
 8007c34:	4608      	mov	r0, r1
 8007c36:	602b      	str	r3, [r5, #0]
 8007c38:	f7fa fd8c 	bl	8002754 <_close>
 8007c3c:	1c43      	adds	r3, r0, #1
 8007c3e:	d102      	bne.n	8007c46 <_close_r+0x1a>
 8007c40:	682b      	ldr	r3, [r5, #0]
 8007c42:	b103      	cbz	r3, 8007c46 <_close_r+0x1a>
 8007c44:	6023      	str	r3, [r4, #0]
 8007c46:	bd38      	pop	{r3, r4, r5, pc}
 8007c48:	20005448 	.word	0x20005448

08007c4c <_lseek_r>:
 8007c4c:	b538      	push	{r3, r4, r5, lr}
 8007c4e:	4d07      	ldr	r5, [pc, #28]	@ (8007c6c <_lseek_r+0x20>)
 8007c50:	4604      	mov	r4, r0
 8007c52:	4608      	mov	r0, r1
 8007c54:	4611      	mov	r1, r2
 8007c56:	2200      	movs	r2, #0
 8007c58:	602a      	str	r2, [r5, #0]
 8007c5a:	461a      	mov	r2, r3
 8007c5c:	f7fa fda1 	bl	80027a2 <_lseek>
 8007c60:	1c43      	adds	r3, r0, #1
 8007c62:	d102      	bne.n	8007c6a <_lseek_r+0x1e>
 8007c64:	682b      	ldr	r3, [r5, #0]
 8007c66:	b103      	cbz	r3, 8007c6a <_lseek_r+0x1e>
 8007c68:	6023      	str	r3, [r4, #0]
 8007c6a:	bd38      	pop	{r3, r4, r5, pc}
 8007c6c:	20005448 	.word	0x20005448

08007c70 <_read_r>:
 8007c70:	b538      	push	{r3, r4, r5, lr}
 8007c72:	4d07      	ldr	r5, [pc, #28]	@ (8007c90 <_read_r+0x20>)
 8007c74:	4604      	mov	r4, r0
 8007c76:	4608      	mov	r0, r1
 8007c78:	4611      	mov	r1, r2
 8007c7a:	2200      	movs	r2, #0
 8007c7c:	602a      	str	r2, [r5, #0]
 8007c7e:	461a      	mov	r2, r3
 8007c80:	f7fa fd2f 	bl	80026e2 <_read>
 8007c84:	1c43      	adds	r3, r0, #1
 8007c86:	d102      	bne.n	8007c8e <_read_r+0x1e>
 8007c88:	682b      	ldr	r3, [r5, #0]
 8007c8a:	b103      	cbz	r3, 8007c8e <_read_r+0x1e>
 8007c8c:	6023      	str	r3, [r4, #0]
 8007c8e:	bd38      	pop	{r3, r4, r5, pc}
 8007c90:	20005448 	.word	0x20005448

08007c94 <_write_r>:
 8007c94:	b538      	push	{r3, r4, r5, lr}
 8007c96:	4d07      	ldr	r5, [pc, #28]	@ (8007cb4 <_write_r+0x20>)
 8007c98:	4604      	mov	r4, r0
 8007c9a:	4608      	mov	r0, r1
 8007c9c:	4611      	mov	r1, r2
 8007c9e:	2200      	movs	r2, #0
 8007ca0:	602a      	str	r2, [r5, #0]
 8007ca2:	461a      	mov	r2, r3
 8007ca4:	f7fa fd3a 	bl	800271c <_write>
 8007ca8:	1c43      	adds	r3, r0, #1
 8007caa:	d102      	bne.n	8007cb2 <_write_r+0x1e>
 8007cac:	682b      	ldr	r3, [r5, #0]
 8007cae:	b103      	cbz	r3, 8007cb2 <_write_r+0x1e>
 8007cb0:	6023      	str	r3, [r4, #0]
 8007cb2:	bd38      	pop	{r3, r4, r5, pc}
 8007cb4:	20005448 	.word	0x20005448

08007cb8 <__errno>:
 8007cb8:	4b01      	ldr	r3, [pc, #4]	@ (8007cc0 <__errno+0x8>)
 8007cba:	6818      	ldr	r0, [r3, #0]
 8007cbc:	4770      	bx	lr
 8007cbe:	bf00      	nop
 8007cc0:	20000018 	.word	0x20000018

08007cc4 <__libc_init_array>:
 8007cc4:	b570      	push	{r4, r5, r6, lr}
 8007cc6:	4d0d      	ldr	r5, [pc, #52]	@ (8007cfc <__libc_init_array+0x38>)
 8007cc8:	4c0d      	ldr	r4, [pc, #52]	@ (8007d00 <__libc_init_array+0x3c>)
 8007cca:	1b64      	subs	r4, r4, r5
 8007ccc:	10a4      	asrs	r4, r4, #2
 8007cce:	2600      	movs	r6, #0
 8007cd0:	42a6      	cmp	r6, r4
 8007cd2:	d109      	bne.n	8007ce8 <__libc_init_array+0x24>
 8007cd4:	4d0b      	ldr	r5, [pc, #44]	@ (8007d04 <__libc_init_array+0x40>)
 8007cd6:	4c0c      	ldr	r4, [pc, #48]	@ (8007d08 <__libc_init_array+0x44>)
 8007cd8:	f003 fe6c 	bl	800b9b4 <_init>
 8007cdc:	1b64      	subs	r4, r4, r5
 8007cde:	10a4      	asrs	r4, r4, #2
 8007ce0:	2600      	movs	r6, #0
 8007ce2:	42a6      	cmp	r6, r4
 8007ce4:	d105      	bne.n	8007cf2 <__libc_init_array+0x2e>
 8007ce6:	bd70      	pop	{r4, r5, r6, pc}
 8007ce8:	f855 3b04 	ldr.w	r3, [r5], #4
 8007cec:	4798      	blx	r3
 8007cee:	3601      	adds	r6, #1
 8007cf0:	e7ee      	b.n	8007cd0 <__libc_init_array+0xc>
 8007cf2:	f855 3b04 	ldr.w	r3, [r5], #4
 8007cf6:	4798      	blx	r3
 8007cf8:	3601      	adds	r6, #1
 8007cfa:	e7f2      	b.n	8007ce2 <__libc_init_array+0x1e>
 8007cfc:	0800c0f0 	.word	0x0800c0f0
 8007d00:	0800c0f0 	.word	0x0800c0f0
 8007d04:	0800c0f0 	.word	0x0800c0f0
 8007d08:	0800c0f4 	.word	0x0800c0f4

08007d0c <__retarget_lock_init_recursive>:
 8007d0c:	4770      	bx	lr

08007d0e <__retarget_lock_acquire_recursive>:
 8007d0e:	4770      	bx	lr

08007d10 <__retarget_lock_release_recursive>:
 8007d10:	4770      	bx	lr
	...

08007d14 <nanf>:
 8007d14:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8007d1c <nanf+0x8>
 8007d18:	4770      	bx	lr
 8007d1a:	bf00      	nop
 8007d1c:	7fc00000 	.word	0x7fc00000

08007d20 <quorem>:
 8007d20:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d24:	6903      	ldr	r3, [r0, #16]
 8007d26:	690c      	ldr	r4, [r1, #16]
 8007d28:	42a3      	cmp	r3, r4
 8007d2a:	4607      	mov	r7, r0
 8007d2c:	db7e      	blt.n	8007e2c <quorem+0x10c>
 8007d2e:	3c01      	subs	r4, #1
 8007d30:	f101 0814 	add.w	r8, r1, #20
 8007d34:	00a3      	lsls	r3, r4, #2
 8007d36:	f100 0514 	add.w	r5, r0, #20
 8007d3a:	9300      	str	r3, [sp, #0]
 8007d3c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007d40:	9301      	str	r3, [sp, #4]
 8007d42:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007d46:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007d4a:	3301      	adds	r3, #1
 8007d4c:	429a      	cmp	r2, r3
 8007d4e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007d52:	fbb2 f6f3 	udiv	r6, r2, r3
 8007d56:	d32e      	bcc.n	8007db6 <quorem+0x96>
 8007d58:	f04f 0a00 	mov.w	sl, #0
 8007d5c:	46c4      	mov	ip, r8
 8007d5e:	46ae      	mov	lr, r5
 8007d60:	46d3      	mov	fp, sl
 8007d62:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007d66:	b298      	uxth	r0, r3
 8007d68:	fb06 a000 	mla	r0, r6, r0, sl
 8007d6c:	0c02      	lsrs	r2, r0, #16
 8007d6e:	0c1b      	lsrs	r3, r3, #16
 8007d70:	fb06 2303 	mla	r3, r6, r3, r2
 8007d74:	f8de 2000 	ldr.w	r2, [lr]
 8007d78:	b280      	uxth	r0, r0
 8007d7a:	b292      	uxth	r2, r2
 8007d7c:	1a12      	subs	r2, r2, r0
 8007d7e:	445a      	add	r2, fp
 8007d80:	f8de 0000 	ldr.w	r0, [lr]
 8007d84:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007d88:	b29b      	uxth	r3, r3
 8007d8a:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8007d8e:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8007d92:	b292      	uxth	r2, r2
 8007d94:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8007d98:	45e1      	cmp	r9, ip
 8007d9a:	f84e 2b04 	str.w	r2, [lr], #4
 8007d9e:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8007da2:	d2de      	bcs.n	8007d62 <quorem+0x42>
 8007da4:	9b00      	ldr	r3, [sp, #0]
 8007da6:	58eb      	ldr	r3, [r5, r3]
 8007da8:	b92b      	cbnz	r3, 8007db6 <quorem+0x96>
 8007daa:	9b01      	ldr	r3, [sp, #4]
 8007dac:	3b04      	subs	r3, #4
 8007dae:	429d      	cmp	r5, r3
 8007db0:	461a      	mov	r2, r3
 8007db2:	d32f      	bcc.n	8007e14 <quorem+0xf4>
 8007db4:	613c      	str	r4, [r7, #16]
 8007db6:	4638      	mov	r0, r7
 8007db8:	f001 f9c2 	bl	8009140 <__mcmp>
 8007dbc:	2800      	cmp	r0, #0
 8007dbe:	db25      	blt.n	8007e0c <quorem+0xec>
 8007dc0:	4629      	mov	r1, r5
 8007dc2:	2000      	movs	r0, #0
 8007dc4:	f858 2b04 	ldr.w	r2, [r8], #4
 8007dc8:	f8d1 c000 	ldr.w	ip, [r1]
 8007dcc:	fa1f fe82 	uxth.w	lr, r2
 8007dd0:	fa1f f38c 	uxth.w	r3, ip
 8007dd4:	eba3 030e 	sub.w	r3, r3, lr
 8007dd8:	4403      	add	r3, r0
 8007dda:	0c12      	lsrs	r2, r2, #16
 8007ddc:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8007de0:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8007de4:	b29b      	uxth	r3, r3
 8007de6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007dea:	45c1      	cmp	r9, r8
 8007dec:	f841 3b04 	str.w	r3, [r1], #4
 8007df0:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007df4:	d2e6      	bcs.n	8007dc4 <quorem+0xa4>
 8007df6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007dfa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007dfe:	b922      	cbnz	r2, 8007e0a <quorem+0xea>
 8007e00:	3b04      	subs	r3, #4
 8007e02:	429d      	cmp	r5, r3
 8007e04:	461a      	mov	r2, r3
 8007e06:	d30b      	bcc.n	8007e20 <quorem+0x100>
 8007e08:	613c      	str	r4, [r7, #16]
 8007e0a:	3601      	adds	r6, #1
 8007e0c:	4630      	mov	r0, r6
 8007e0e:	b003      	add	sp, #12
 8007e10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e14:	6812      	ldr	r2, [r2, #0]
 8007e16:	3b04      	subs	r3, #4
 8007e18:	2a00      	cmp	r2, #0
 8007e1a:	d1cb      	bne.n	8007db4 <quorem+0x94>
 8007e1c:	3c01      	subs	r4, #1
 8007e1e:	e7c6      	b.n	8007dae <quorem+0x8e>
 8007e20:	6812      	ldr	r2, [r2, #0]
 8007e22:	3b04      	subs	r3, #4
 8007e24:	2a00      	cmp	r2, #0
 8007e26:	d1ef      	bne.n	8007e08 <quorem+0xe8>
 8007e28:	3c01      	subs	r4, #1
 8007e2a:	e7ea      	b.n	8007e02 <quorem+0xe2>
 8007e2c:	2000      	movs	r0, #0
 8007e2e:	e7ee      	b.n	8007e0e <quorem+0xee>

08007e30 <_dtoa_r>:
 8007e30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e34:	69c7      	ldr	r7, [r0, #28]
 8007e36:	b099      	sub	sp, #100	@ 0x64
 8007e38:	ed8d 0b02 	vstr	d0, [sp, #8]
 8007e3c:	ec55 4b10 	vmov	r4, r5, d0
 8007e40:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8007e42:	9109      	str	r1, [sp, #36]	@ 0x24
 8007e44:	4683      	mov	fp, r0
 8007e46:	920e      	str	r2, [sp, #56]	@ 0x38
 8007e48:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007e4a:	b97f      	cbnz	r7, 8007e6c <_dtoa_r+0x3c>
 8007e4c:	2010      	movs	r0, #16
 8007e4e:	f000 fdfd 	bl	8008a4c <malloc>
 8007e52:	4602      	mov	r2, r0
 8007e54:	f8cb 001c 	str.w	r0, [fp, #28]
 8007e58:	b920      	cbnz	r0, 8007e64 <_dtoa_r+0x34>
 8007e5a:	4ba7      	ldr	r3, [pc, #668]	@ (80080f8 <_dtoa_r+0x2c8>)
 8007e5c:	21ef      	movs	r1, #239	@ 0xef
 8007e5e:	48a7      	ldr	r0, [pc, #668]	@ (80080fc <_dtoa_r+0x2cc>)
 8007e60:	f003 f98a 	bl	800b178 <__assert_func>
 8007e64:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8007e68:	6007      	str	r7, [r0, #0]
 8007e6a:	60c7      	str	r7, [r0, #12]
 8007e6c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007e70:	6819      	ldr	r1, [r3, #0]
 8007e72:	b159      	cbz	r1, 8007e8c <_dtoa_r+0x5c>
 8007e74:	685a      	ldr	r2, [r3, #4]
 8007e76:	604a      	str	r2, [r1, #4]
 8007e78:	2301      	movs	r3, #1
 8007e7a:	4093      	lsls	r3, r2
 8007e7c:	608b      	str	r3, [r1, #8]
 8007e7e:	4658      	mov	r0, fp
 8007e80:	f000 feda 	bl	8008c38 <_Bfree>
 8007e84:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007e88:	2200      	movs	r2, #0
 8007e8a:	601a      	str	r2, [r3, #0]
 8007e8c:	1e2b      	subs	r3, r5, #0
 8007e8e:	bfb9      	ittee	lt
 8007e90:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8007e94:	9303      	strlt	r3, [sp, #12]
 8007e96:	2300      	movge	r3, #0
 8007e98:	6033      	strge	r3, [r6, #0]
 8007e9a:	9f03      	ldr	r7, [sp, #12]
 8007e9c:	4b98      	ldr	r3, [pc, #608]	@ (8008100 <_dtoa_r+0x2d0>)
 8007e9e:	bfbc      	itt	lt
 8007ea0:	2201      	movlt	r2, #1
 8007ea2:	6032      	strlt	r2, [r6, #0]
 8007ea4:	43bb      	bics	r3, r7
 8007ea6:	d112      	bne.n	8007ece <_dtoa_r+0x9e>
 8007ea8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8007eaa:	f242 730f 	movw	r3, #9999	@ 0x270f
 8007eae:	6013      	str	r3, [r2, #0]
 8007eb0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007eb4:	4323      	orrs	r3, r4
 8007eb6:	f000 854d 	beq.w	8008954 <_dtoa_r+0xb24>
 8007eba:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007ebc:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8008114 <_dtoa_r+0x2e4>
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	f000 854f 	beq.w	8008964 <_dtoa_r+0xb34>
 8007ec6:	f10a 0303 	add.w	r3, sl, #3
 8007eca:	f000 bd49 	b.w	8008960 <_dtoa_r+0xb30>
 8007ece:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007ed2:	2200      	movs	r2, #0
 8007ed4:	ec51 0b17 	vmov	r0, r1, d7
 8007ed8:	2300      	movs	r3, #0
 8007eda:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8007ede:	f7f8 fe0b 	bl	8000af8 <__aeabi_dcmpeq>
 8007ee2:	4680      	mov	r8, r0
 8007ee4:	b158      	cbz	r0, 8007efe <_dtoa_r+0xce>
 8007ee6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8007ee8:	2301      	movs	r3, #1
 8007eea:	6013      	str	r3, [r2, #0]
 8007eec:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007eee:	b113      	cbz	r3, 8007ef6 <_dtoa_r+0xc6>
 8007ef0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8007ef2:	4b84      	ldr	r3, [pc, #528]	@ (8008104 <_dtoa_r+0x2d4>)
 8007ef4:	6013      	str	r3, [r2, #0]
 8007ef6:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8008118 <_dtoa_r+0x2e8>
 8007efa:	f000 bd33 	b.w	8008964 <_dtoa_r+0xb34>
 8007efe:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8007f02:	aa16      	add	r2, sp, #88	@ 0x58
 8007f04:	a917      	add	r1, sp, #92	@ 0x5c
 8007f06:	4658      	mov	r0, fp
 8007f08:	f001 fa3a 	bl	8009380 <__d2b>
 8007f0c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8007f10:	4681      	mov	r9, r0
 8007f12:	2e00      	cmp	r6, #0
 8007f14:	d077      	beq.n	8008006 <_dtoa_r+0x1d6>
 8007f16:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007f18:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8007f1c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007f20:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007f24:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8007f28:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8007f2c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8007f30:	4619      	mov	r1, r3
 8007f32:	2200      	movs	r2, #0
 8007f34:	4b74      	ldr	r3, [pc, #464]	@ (8008108 <_dtoa_r+0x2d8>)
 8007f36:	f7f8 f9bf 	bl	80002b8 <__aeabi_dsub>
 8007f3a:	a369      	add	r3, pc, #420	@ (adr r3, 80080e0 <_dtoa_r+0x2b0>)
 8007f3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f40:	f7f8 fb72 	bl	8000628 <__aeabi_dmul>
 8007f44:	a368      	add	r3, pc, #416	@ (adr r3, 80080e8 <_dtoa_r+0x2b8>)
 8007f46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f4a:	f7f8 f9b7 	bl	80002bc <__adddf3>
 8007f4e:	4604      	mov	r4, r0
 8007f50:	4630      	mov	r0, r6
 8007f52:	460d      	mov	r5, r1
 8007f54:	f7f8 fafe 	bl	8000554 <__aeabi_i2d>
 8007f58:	a365      	add	r3, pc, #404	@ (adr r3, 80080f0 <_dtoa_r+0x2c0>)
 8007f5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f5e:	f7f8 fb63 	bl	8000628 <__aeabi_dmul>
 8007f62:	4602      	mov	r2, r0
 8007f64:	460b      	mov	r3, r1
 8007f66:	4620      	mov	r0, r4
 8007f68:	4629      	mov	r1, r5
 8007f6a:	f7f8 f9a7 	bl	80002bc <__adddf3>
 8007f6e:	4604      	mov	r4, r0
 8007f70:	460d      	mov	r5, r1
 8007f72:	f7f8 fe09 	bl	8000b88 <__aeabi_d2iz>
 8007f76:	2200      	movs	r2, #0
 8007f78:	4607      	mov	r7, r0
 8007f7a:	2300      	movs	r3, #0
 8007f7c:	4620      	mov	r0, r4
 8007f7e:	4629      	mov	r1, r5
 8007f80:	f7f8 fdc4 	bl	8000b0c <__aeabi_dcmplt>
 8007f84:	b140      	cbz	r0, 8007f98 <_dtoa_r+0x168>
 8007f86:	4638      	mov	r0, r7
 8007f88:	f7f8 fae4 	bl	8000554 <__aeabi_i2d>
 8007f8c:	4622      	mov	r2, r4
 8007f8e:	462b      	mov	r3, r5
 8007f90:	f7f8 fdb2 	bl	8000af8 <__aeabi_dcmpeq>
 8007f94:	b900      	cbnz	r0, 8007f98 <_dtoa_r+0x168>
 8007f96:	3f01      	subs	r7, #1
 8007f98:	2f16      	cmp	r7, #22
 8007f9a:	d851      	bhi.n	8008040 <_dtoa_r+0x210>
 8007f9c:	4b5b      	ldr	r3, [pc, #364]	@ (800810c <_dtoa_r+0x2dc>)
 8007f9e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007fa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fa6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007faa:	f7f8 fdaf 	bl	8000b0c <__aeabi_dcmplt>
 8007fae:	2800      	cmp	r0, #0
 8007fb0:	d048      	beq.n	8008044 <_dtoa_r+0x214>
 8007fb2:	3f01      	subs	r7, #1
 8007fb4:	2300      	movs	r3, #0
 8007fb6:	9312      	str	r3, [sp, #72]	@ 0x48
 8007fb8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8007fba:	1b9b      	subs	r3, r3, r6
 8007fbc:	1e5a      	subs	r2, r3, #1
 8007fbe:	bf44      	itt	mi
 8007fc0:	f1c3 0801 	rsbmi	r8, r3, #1
 8007fc4:	2300      	movmi	r3, #0
 8007fc6:	9208      	str	r2, [sp, #32]
 8007fc8:	bf54      	ite	pl
 8007fca:	f04f 0800 	movpl.w	r8, #0
 8007fce:	9308      	strmi	r3, [sp, #32]
 8007fd0:	2f00      	cmp	r7, #0
 8007fd2:	db39      	blt.n	8008048 <_dtoa_r+0x218>
 8007fd4:	9b08      	ldr	r3, [sp, #32]
 8007fd6:	970f      	str	r7, [sp, #60]	@ 0x3c
 8007fd8:	443b      	add	r3, r7
 8007fda:	9308      	str	r3, [sp, #32]
 8007fdc:	2300      	movs	r3, #0
 8007fde:	930a      	str	r3, [sp, #40]	@ 0x28
 8007fe0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007fe2:	2b09      	cmp	r3, #9
 8007fe4:	d864      	bhi.n	80080b0 <_dtoa_r+0x280>
 8007fe6:	2b05      	cmp	r3, #5
 8007fe8:	bfc4      	itt	gt
 8007fea:	3b04      	subgt	r3, #4
 8007fec:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8007fee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007ff0:	f1a3 0302 	sub.w	r3, r3, #2
 8007ff4:	bfcc      	ite	gt
 8007ff6:	2400      	movgt	r4, #0
 8007ff8:	2401      	movle	r4, #1
 8007ffa:	2b03      	cmp	r3, #3
 8007ffc:	d863      	bhi.n	80080c6 <_dtoa_r+0x296>
 8007ffe:	e8df f003 	tbb	[pc, r3]
 8008002:	372a      	.short	0x372a
 8008004:	5535      	.short	0x5535
 8008006:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800800a:	441e      	add	r6, r3
 800800c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8008010:	2b20      	cmp	r3, #32
 8008012:	bfc1      	itttt	gt
 8008014:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8008018:	409f      	lslgt	r7, r3
 800801a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800801e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8008022:	bfd6      	itet	le
 8008024:	f1c3 0320 	rsble	r3, r3, #32
 8008028:	ea47 0003 	orrgt.w	r0, r7, r3
 800802c:	fa04 f003 	lslle.w	r0, r4, r3
 8008030:	f7f8 fa80 	bl	8000534 <__aeabi_ui2d>
 8008034:	2201      	movs	r2, #1
 8008036:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800803a:	3e01      	subs	r6, #1
 800803c:	9214      	str	r2, [sp, #80]	@ 0x50
 800803e:	e777      	b.n	8007f30 <_dtoa_r+0x100>
 8008040:	2301      	movs	r3, #1
 8008042:	e7b8      	b.n	8007fb6 <_dtoa_r+0x186>
 8008044:	9012      	str	r0, [sp, #72]	@ 0x48
 8008046:	e7b7      	b.n	8007fb8 <_dtoa_r+0x188>
 8008048:	427b      	negs	r3, r7
 800804a:	930a      	str	r3, [sp, #40]	@ 0x28
 800804c:	2300      	movs	r3, #0
 800804e:	eba8 0807 	sub.w	r8, r8, r7
 8008052:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008054:	e7c4      	b.n	8007fe0 <_dtoa_r+0x1b0>
 8008056:	2300      	movs	r3, #0
 8008058:	930b      	str	r3, [sp, #44]	@ 0x2c
 800805a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800805c:	2b00      	cmp	r3, #0
 800805e:	dc35      	bgt.n	80080cc <_dtoa_r+0x29c>
 8008060:	2301      	movs	r3, #1
 8008062:	9300      	str	r3, [sp, #0]
 8008064:	9307      	str	r3, [sp, #28]
 8008066:	461a      	mov	r2, r3
 8008068:	920e      	str	r2, [sp, #56]	@ 0x38
 800806a:	e00b      	b.n	8008084 <_dtoa_r+0x254>
 800806c:	2301      	movs	r3, #1
 800806e:	e7f3      	b.n	8008058 <_dtoa_r+0x228>
 8008070:	2300      	movs	r3, #0
 8008072:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008074:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008076:	18fb      	adds	r3, r7, r3
 8008078:	9300      	str	r3, [sp, #0]
 800807a:	3301      	adds	r3, #1
 800807c:	2b01      	cmp	r3, #1
 800807e:	9307      	str	r3, [sp, #28]
 8008080:	bfb8      	it	lt
 8008082:	2301      	movlt	r3, #1
 8008084:	f8db 001c 	ldr.w	r0, [fp, #28]
 8008088:	2100      	movs	r1, #0
 800808a:	2204      	movs	r2, #4
 800808c:	f102 0514 	add.w	r5, r2, #20
 8008090:	429d      	cmp	r5, r3
 8008092:	d91f      	bls.n	80080d4 <_dtoa_r+0x2a4>
 8008094:	6041      	str	r1, [r0, #4]
 8008096:	4658      	mov	r0, fp
 8008098:	f000 fd8e 	bl	8008bb8 <_Balloc>
 800809c:	4682      	mov	sl, r0
 800809e:	2800      	cmp	r0, #0
 80080a0:	d13c      	bne.n	800811c <_dtoa_r+0x2ec>
 80080a2:	4b1b      	ldr	r3, [pc, #108]	@ (8008110 <_dtoa_r+0x2e0>)
 80080a4:	4602      	mov	r2, r0
 80080a6:	f240 11af 	movw	r1, #431	@ 0x1af
 80080aa:	e6d8      	b.n	8007e5e <_dtoa_r+0x2e>
 80080ac:	2301      	movs	r3, #1
 80080ae:	e7e0      	b.n	8008072 <_dtoa_r+0x242>
 80080b0:	2401      	movs	r4, #1
 80080b2:	2300      	movs	r3, #0
 80080b4:	9309      	str	r3, [sp, #36]	@ 0x24
 80080b6:	940b      	str	r4, [sp, #44]	@ 0x2c
 80080b8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80080bc:	9300      	str	r3, [sp, #0]
 80080be:	9307      	str	r3, [sp, #28]
 80080c0:	2200      	movs	r2, #0
 80080c2:	2312      	movs	r3, #18
 80080c4:	e7d0      	b.n	8008068 <_dtoa_r+0x238>
 80080c6:	2301      	movs	r3, #1
 80080c8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80080ca:	e7f5      	b.n	80080b8 <_dtoa_r+0x288>
 80080cc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80080ce:	9300      	str	r3, [sp, #0]
 80080d0:	9307      	str	r3, [sp, #28]
 80080d2:	e7d7      	b.n	8008084 <_dtoa_r+0x254>
 80080d4:	3101      	adds	r1, #1
 80080d6:	0052      	lsls	r2, r2, #1
 80080d8:	e7d8      	b.n	800808c <_dtoa_r+0x25c>
 80080da:	bf00      	nop
 80080dc:	f3af 8000 	nop.w
 80080e0:	636f4361 	.word	0x636f4361
 80080e4:	3fd287a7 	.word	0x3fd287a7
 80080e8:	8b60c8b3 	.word	0x8b60c8b3
 80080ec:	3fc68a28 	.word	0x3fc68a28
 80080f0:	509f79fb 	.word	0x509f79fb
 80080f4:	3fd34413 	.word	0x3fd34413
 80080f8:	0800bde5 	.word	0x0800bde5
 80080fc:	0800bdfc 	.word	0x0800bdfc
 8008100:	7ff00000 	.word	0x7ff00000
 8008104:	0800c040 	.word	0x0800c040
 8008108:	3ff80000 	.word	0x3ff80000
 800810c:	0800bef8 	.word	0x0800bef8
 8008110:	0800be54 	.word	0x0800be54
 8008114:	0800bde1 	.word	0x0800bde1
 8008118:	0800c03f 	.word	0x0800c03f
 800811c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008120:	6018      	str	r0, [r3, #0]
 8008122:	9b07      	ldr	r3, [sp, #28]
 8008124:	2b0e      	cmp	r3, #14
 8008126:	f200 80a4 	bhi.w	8008272 <_dtoa_r+0x442>
 800812a:	2c00      	cmp	r4, #0
 800812c:	f000 80a1 	beq.w	8008272 <_dtoa_r+0x442>
 8008130:	2f00      	cmp	r7, #0
 8008132:	dd33      	ble.n	800819c <_dtoa_r+0x36c>
 8008134:	4bad      	ldr	r3, [pc, #692]	@ (80083ec <_dtoa_r+0x5bc>)
 8008136:	f007 020f 	and.w	r2, r7, #15
 800813a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800813e:	ed93 7b00 	vldr	d7, [r3]
 8008142:	05f8      	lsls	r0, r7, #23
 8008144:	ed8d 7b04 	vstr	d7, [sp, #16]
 8008148:	ea4f 1427 	mov.w	r4, r7, asr #4
 800814c:	d516      	bpl.n	800817c <_dtoa_r+0x34c>
 800814e:	4ba8      	ldr	r3, [pc, #672]	@ (80083f0 <_dtoa_r+0x5c0>)
 8008150:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008154:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008158:	f7f8 fb90 	bl	800087c <__aeabi_ddiv>
 800815c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008160:	f004 040f 	and.w	r4, r4, #15
 8008164:	2603      	movs	r6, #3
 8008166:	4da2      	ldr	r5, [pc, #648]	@ (80083f0 <_dtoa_r+0x5c0>)
 8008168:	b954      	cbnz	r4, 8008180 <_dtoa_r+0x350>
 800816a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800816e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008172:	f7f8 fb83 	bl	800087c <__aeabi_ddiv>
 8008176:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800817a:	e028      	b.n	80081ce <_dtoa_r+0x39e>
 800817c:	2602      	movs	r6, #2
 800817e:	e7f2      	b.n	8008166 <_dtoa_r+0x336>
 8008180:	07e1      	lsls	r1, r4, #31
 8008182:	d508      	bpl.n	8008196 <_dtoa_r+0x366>
 8008184:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008188:	e9d5 2300 	ldrd	r2, r3, [r5]
 800818c:	f7f8 fa4c 	bl	8000628 <__aeabi_dmul>
 8008190:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008194:	3601      	adds	r6, #1
 8008196:	1064      	asrs	r4, r4, #1
 8008198:	3508      	adds	r5, #8
 800819a:	e7e5      	b.n	8008168 <_dtoa_r+0x338>
 800819c:	f000 80d2 	beq.w	8008344 <_dtoa_r+0x514>
 80081a0:	427c      	negs	r4, r7
 80081a2:	4b92      	ldr	r3, [pc, #584]	@ (80083ec <_dtoa_r+0x5bc>)
 80081a4:	4d92      	ldr	r5, [pc, #584]	@ (80083f0 <_dtoa_r+0x5c0>)
 80081a6:	f004 020f 	and.w	r2, r4, #15
 80081aa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80081ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081b2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80081b6:	f7f8 fa37 	bl	8000628 <__aeabi_dmul>
 80081ba:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80081be:	1124      	asrs	r4, r4, #4
 80081c0:	2300      	movs	r3, #0
 80081c2:	2602      	movs	r6, #2
 80081c4:	2c00      	cmp	r4, #0
 80081c6:	f040 80b2 	bne.w	800832e <_dtoa_r+0x4fe>
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d1d3      	bne.n	8008176 <_dtoa_r+0x346>
 80081ce:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80081d0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	f000 80b7 	beq.w	8008348 <_dtoa_r+0x518>
 80081da:	4b86      	ldr	r3, [pc, #536]	@ (80083f4 <_dtoa_r+0x5c4>)
 80081dc:	2200      	movs	r2, #0
 80081de:	4620      	mov	r0, r4
 80081e0:	4629      	mov	r1, r5
 80081e2:	f7f8 fc93 	bl	8000b0c <__aeabi_dcmplt>
 80081e6:	2800      	cmp	r0, #0
 80081e8:	f000 80ae 	beq.w	8008348 <_dtoa_r+0x518>
 80081ec:	9b07      	ldr	r3, [sp, #28]
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	f000 80aa 	beq.w	8008348 <_dtoa_r+0x518>
 80081f4:	9b00      	ldr	r3, [sp, #0]
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	dd37      	ble.n	800826a <_dtoa_r+0x43a>
 80081fa:	1e7b      	subs	r3, r7, #1
 80081fc:	9304      	str	r3, [sp, #16]
 80081fe:	4620      	mov	r0, r4
 8008200:	4b7d      	ldr	r3, [pc, #500]	@ (80083f8 <_dtoa_r+0x5c8>)
 8008202:	2200      	movs	r2, #0
 8008204:	4629      	mov	r1, r5
 8008206:	f7f8 fa0f 	bl	8000628 <__aeabi_dmul>
 800820a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800820e:	9c00      	ldr	r4, [sp, #0]
 8008210:	3601      	adds	r6, #1
 8008212:	4630      	mov	r0, r6
 8008214:	f7f8 f99e 	bl	8000554 <__aeabi_i2d>
 8008218:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800821c:	f7f8 fa04 	bl	8000628 <__aeabi_dmul>
 8008220:	4b76      	ldr	r3, [pc, #472]	@ (80083fc <_dtoa_r+0x5cc>)
 8008222:	2200      	movs	r2, #0
 8008224:	f7f8 f84a 	bl	80002bc <__adddf3>
 8008228:	4605      	mov	r5, r0
 800822a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800822e:	2c00      	cmp	r4, #0
 8008230:	f040 808d 	bne.w	800834e <_dtoa_r+0x51e>
 8008234:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008238:	4b71      	ldr	r3, [pc, #452]	@ (8008400 <_dtoa_r+0x5d0>)
 800823a:	2200      	movs	r2, #0
 800823c:	f7f8 f83c 	bl	80002b8 <__aeabi_dsub>
 8008240:	4602      	mov	r2, r0
 8008242:	460b      	mov	r3, r1
 8008244:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008248:	462a      	mov	r2, r5
 800824a:	4633      	mov	r3, r6
 800824c:	f7f8 fc7c 	bl	8000b48 <__aeabi_dcmpgt>
 8008250:	2800      	cmp	r0, #0
 8008252:	f040 828b 	bne.w	800876c <_dtoa_r+0x93c>
 8008256:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800825a:	462a      	mov	r2, r5
 800825c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8008260:	f7f8 fc54 	bl	8000b0c <__aeabi_dcmplt>
 8008264:	2800      	cmp	r0, #0
 8008266:	f040 8128 	bne.w	80084ba <_dtoa_r+0x68a>
 800826a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800826e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8008272:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8008274:	2b00      	cmp	r3, #0
 8008276:	f2c0 815a 	blt.w	800852e <_dtoa_r+0x6fe>
 800827a:	2f0e      	cmp	r7, #14
 800827c:	f300 8157 	bgt.w	800852e <_dtoa_r+0x6fe>
 8008280:	4b5a      	ldr	r3, [pc, #360]	@ (80083ec <_dtoa_r+0x5bc>)
 8008282:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008286:	ed93 7b00 	vldr	d7, [r3]
 800828a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800828c:	2b00      	cmp	r3, #0
 800828e:	ed8d 7b00 	vstr	d7, [sp]
 8008292:	da03      	bge.n	800829c <_dtoa_r+0x46c>
 8008294:	9b07      	ldr	r3, [sp, #28]
 8008296:	2b00      	cmp	r3, #0
 8008298:	f340 8101 	ble.w	800849e <_dtoa_r+0x66e>
 800829c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80082a0:	4656      	mov	r6, sl
 80082a2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80082a6:	4620      	mov	r0, r4
 80082a8:	4629      	mov	r1, r5
 80082aa:	f7f8 fae7 	bl	800087c <__aeabi_ddiv>
 80082ae:	f7f8 fc6b 	bl	8000b88 <__aeabi_d2iz>
 80082b2:	4680      	mov	r8, r0
 80082b4:	f7f8 f94e 	bl	8000554 <__aeabi_i2d>
 80082b8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80082bc:	f7f8 f9b4 	bl	8000628 <__aeabi_dmul>
 80082c0:	4602      	mov	r2, r0
 80082c2:	460b      	mov	r3, r1
 80082c4:	4620      	mov	r0, r4
 80082c6:	4629      	mov	r1, r5
 80082c8:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80082cc:	f7f7 fff4 	bl	80002b8 <__aeabi_dsub>
 80082d0:	f806 4b01 	strb.w	r4, [r6], #1
 80082d4:	9d07      	ldr	r5, [sp, #28]
 80082d6:	eba6 040a 	sub.w	r4, r6, sl
 80082da:	42a5      	cmp	r5, r4
 80082dc:	4602      	mov	r2, r0
 80082de:	460b      	mov	r3, r1
 80082e0:	f040 8117 	bne.w	8008512 <_dtoa_r+0x6e2>
 80082e4:	f7f7 ffea 	bl	80002bc <__adddf3>
 80082e8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80082ec:	4604      	mov	r4, r0
 80082ee:	460d      	mov	r5, r1
 80082f0:	f7f8 fc2a 	bl	8000b48 <__aeabi_dcmpgt>
 80082f4:	2800      	cmp	r0, #0
 80082f6:	f040 80f9 	bne.w	80084ec <_dtoa_r+0x6bc>
 80082fa:	e9dd 2300 	ldrd	r2, r3, [sp]
 80082fe:	4620      	mov	r0, r4
 8008300:	4629      	mov	r1, r5
 8008302:	f7f8 fbf9 	bl	8000af8 <__aeabi_dcmpeq>
 8008306:	b118      	cbz	r0, 8008310 <_dtoa_r+0x4e0>
 8008308:	f018 0f01 	tst.w	r8, #1
 800830c:	f040 80ee 	bne.w	80084ec <_dtoa_r+0x6bc>
 8008310:	4649      	mov	r1, r9
 8008312:	4658      	mov	r0, fp
 8008314:	f000 fc90 	bl	8008c38 <_Bfree>
 8008318:	2300      	movs	r3, #0
 800831a:	7033      	strb	r3, [r6, #0]
 800831c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800831e:	3701      	adds	r7, #1
 8008320:	601f      	str	r7, [r3, #0]
 8008322:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008324:	2b00      	cmp	r3, #0
 8008326:	f000 831d 	beq.w	8008964 <_dtoa_r+0xb34>
 800832a:	601e      	str	r6, [r3, #0]
 800832c:	e31a      	b.n	8008964 <_dtoa_r+0xb34>
 800832e:	07e2      	lsls	r2, r4, #31
 8008330:	d505      	bpl.n	800833e <_dtoa_r+0x50e>
 8008332:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008336:	f7f8 f977 	bl	8000628 <__aeabi_dmul>
 800833a:	3601      	adds	r6, #1
 800833c:	2301      	movs	r3, #1
 800833e:	1064      	asrs	r4, r4, #1
 8008340:	3508      	adds	r5, #8
 8008342:	e73f      	b.n	80081c4 <_dtoa_r+0x394>
 8008344:	2602      	movs	r6, #2
 8008346:	e742      	b.n	80081ce <_dtoa_r+0x39e>
 8008348:	9c07      	ldr	r4, [sp, #28]
 800834a:	9704      	str	r7, [sp, #16]
 800834c:	e761      	b.n	8008212 <_dtoa_r+0x3e2>
 800834e:	4b27      	ldr	r3, [pc, #156]	@ (80083ec <_dtoa_r+0x5bc>)
 8008350:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008352:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008356:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800835a:	4454      	add	r4, sl
 800835c:	2900      	cmp	r1, #0
 800835e:	d053      	beq.n	8008408 <_dtoa_r+0x5d8>
 8008360:	4928      	ldr	r1, [pc, #160]	@ (8008404 <_dtoa_r+0x5d4>)
 8008362:	2000      	movs	r0, #0
 8008364:	f7f8 fa8a 	bl	800087c <__aeabi_ddiv>
 8008368:	4633      	mov	r3, r6
 800836a:	462a      	mov	r2, r5
 800836c:	f7f7 ffa4 	bl	80002b8 <__aeabi_dsub>
 8008370:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008374:	4656      	mov	r6, sl
 8008376:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800837a:	f7f8 fc05 	bl	8000b88 <__aeabi_d2iz>
 800837e:	4605      	mov	r5, r0
 8008380:	f7f8 f8e8 	bl	8000554 <__aeabi_i2d>
 8008384:	4602      	mov	r2, r0
 8008386:	460b      	mov	r3, r1
 8008388:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800838c:	f7f7 ff94 	bl	80002b8 <__aeabi_dsub>
 8008390:	3530      	adds	r5, #48	@ 0x30
 8008392:	4602      	mov	r2, r0
 8008394:	460b      	mov	r3, r1
 8008396:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800839a:	f806 5b01 	strb.w	r5, [r6], #1
 800839e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80083a2:	f7f8 fbb3 	bl	8000b0c <__aeabi_dcmplt>
 80083a6:	2800      	cmp	r0, #0
 80083a8:	d171      	bne.n	800848e <_dtoa_r+0x65e>
 80083aa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80083ae:	4911      	ldr	r1, [pc, #68]	@ (80083f4 <_dtoa_r+0x5c4>)
 80083b0:	2000      	movs	r0, #0
 80083b2:	f7f7 ff81 	bl	80002b8 <__aeabi_dsub>
 80083b6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80083ba:	f7f8 fba7 	bl	8000b0c <__aeabi_dcmplt>
 80083be:	2800      	cmp	r0, #0
 80083c0:	f040 8095 	bne.w	80084ee <_dtoa_r+0x6be>
 80083c4:	42a6      	cmp	r6, r4
 80083c6:	f43f af50 	beq.w	800826a <_dtoa_r+0x43a>
 80083ca:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80083ce:	4b0a      	ldr	r3, [pc, #40]	@ (80083f8 <_dtoa_r+0x5c8>)
 80083d0:	2200      	movs	r2, #0
 80083d2:	f7f8 f929 	bl	8000628 <__aeabi_dmul>
 80083d6:	4b08      	ldr	r3, [pc, #32]	@ (80083f8 <_dtoa_r+0x5c8>)
 80083d8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80083dc:	2200      	movs	r2, #0
 80083de:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80083e2:	f7f8 f921 	bl	8000628 <__aeabi_dmul>
 80083e6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80083ea:	e7c4      	b.n	8008376 <_dtoa_r+0x546>
 80083ec:	0800bef8 	.word	0x0800bef8
 80083f0:	0800bed0 	.word	0x0800bed0
 80083f4:	3ff00000 	.word	0x3ff00000
 80083f8:	40240000 	.word	0x40240000
 80083fc:	401c0000 	.word	0x401c0000
 8008400:	40140000 	.word	0x40140000
 8008404:	3fe00000 	.word	0x3fe00000
 8008408:	4631      	mov	r1, r6
 800840a:	4628      	mov	r0, r5
 800840c:	f7f8 f90c 	bl	8000628 <__aeabi_dmul>
 8008410:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008414:	9415      	str	r4, [sp, #84]	@ 0x54
 8008416:	4656      	mov	r6, sl
 8008418:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800841c:	f7f8 fbb4 	bl	8000b88 <__aeabi_d2iz>
 8008420:	4605      	mov	r5, r0
 8008422:	f7f8 f897 	bl	8000554 <__aeabi_i2d>
 8008426:	4602      	mov	r2, r0
 8008428:	460b      	mov	r3, r1
 800842a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800842e:	f7f7 ff43 	bl	80002b8 <__aeabi_dsub>
 8008432:	3530      	adds	r5, #48	@ 0x30
 8008434:	f806 5b01 	strb.w	r5, [r6], #1
 8008438:	4602      	mov	r2, r0
 800843a:	460b      	mov	r3, r1
 800843c:	42a6      	cmp	r6, r4
 800843e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008442:	f04f 0200 	mov.w	r2, #0
 8008446:	d124      	bne.n	8008492 <_dtoa_r+0x662>
 8008448:	4bac      	ldr	r3, [pc, #688]	@ (80086fc <_dtoa_r+0x8cc>)
 800844a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800844e:	f7f7 ff35 	bl	80002bc <__adddf3>
 8008452:	4602      	mov	r2, r0
 8008454:	460b      	mov	r3, r1
 8008456:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800845a:	f7f8 fb75 	bl	8000b48 <__aeabi_dcmpgt>
 800845e:	2800      	cmp	r0, #0
 8008460:	d145      	bne.n	80084ee <_dtoa_r+0x6be>
 8008462:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008466:	49a5      	ldr	r1, [pc, #660]	@ (80086fc <_dtoa_r+0x8cc>)
 8008468:	2000      	movs	r0, #0
 800846a:	f7f7 ff25 	bl	80002b8 <__aeabi_dsub>
 800846e:	4602      	mov	r2, r0
 8008470:	460b      	mov	r3, r1
 8008472:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008476:	f7f8 fb49 	bl	8000b0c <__aeabi_dcmplt>
 800847a:	2800      	cmp	r0, #0
 800847c:	f43f aef5 	beq.w	800826a <_dtoa_r+0x43a>
 8008480:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8008482:	1e73      	subs	r3, r6, #1
 8008484:	9315      	str	r3, [sp, #84]	@ 0x54
 8008486:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800848a:	2b30      	cmp	r3, #48	@ 0x30
 800848c:	d0f8      	beq.n	8008480 <_dtoa_r+0x650>
 800848e:	9f04      	ldr	r7, [sp, #16]
 8008490:	e73e      	b.n	8008310 <_dtoa_r+0x4e0>
 8008492:	4b9b      	ldr	r3, [pc, #620]	@ (8008700 <_dtoa_r+0x8d0>)
 8008494:	f7f8 f8c8 	bl	8000628 <__aeabi_dmul>
 8008498:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800849c:	e7bc      	b.n	8008418 <_dtoa_r+0x5e8>
 800849e:	d10c      	bne.n	80084ba <_dtoa_r+0x68a>
 80084a0:	4b98      	ldr	r3, [pc, #608]	@ (8008704 <_dtoa_r+0x8d4>)
 80084a2:	2200      	movs	r2, #0
 80084a4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80084a8:	f7f8 f8be 	bl	8000628 <__aeabi_dmul>
 80084ac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80084b0:	f7f8 fb40 	bl	8000b34 <__aeabi_dcmpge>
 80084b4:	2800      	cmp	r0, #0
 80084b6:	f000 8157 	beq.w	8008768 <_dtoa_r+0x938>
 80084ba:	2400      	movs	r4, #0
 80084bc:	4625      	mov	r5, r4
 80084be:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80084c0:	43db      	mvns	r3, r3
 80084c2:	9304      	str	r3, [sp, #16]
 80084c4:	4656      	mov	r6, sl
 80084c6:	2700      	movs	r7, #0
 80084c8:	4621      	mov	r1, r4
 80084ca:	4658      	mov	r0, fp
 80084cc:	f000 fbb4 	bl	8008c38 <_Bfree>
 80084d0:	2d00      	cmp	r5, #0
 80084d2:	d0dc      	beq.n	800848e <_dtoa_r+0x65e>
 80084d4:	b12f      	cbz	r7, 80084e2 <_dtoa_r+0x6b2>
 80084d6:	42af      	cmp	r7, r5
 80084d8:	d003      	beq.n	80084e2 <_dtoa_r+0x6b2>
 80084da:	4639      	mov	r1, r7
 80084dc:	4658      	mov	r0, fp
 80084de:	f000 fbab 	bl	8008c38 <_Bfree>
 80084e2:	4629      	mov	r1, r5
 80084e4:	4658      	mov	r0, fp
 80084e6:	f000 fba7 	bl	8008c38 <_Bfree>
 80084ea:	e7d0      	b.n	800848e <_dtoa_r+0x65e>
 80084ec:	9704      	str	r7, [sp, #16]
 80084ee:	4633      	mov	r3, r6
 80084f0:	461e      	mov	r6, r3
 80084f2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80084f6:	2a39      	cmp	r2, #57	@ 0x39
 80084f8:	d107      	bne.n	800850a <_dtoa_r+0x6da>
 80084fa:	459a      	cmp	sl, r3
 80084fc:	d1f8      	bne.n	80084f0 <_dtoa_r+0x6c0>
 80084fe:	9a04      	ldr	r2, [sp, #16]
 8008500:	3201      	adds	r2, #1
 8008502:	9204      	str	r2, [sp, #16]
 8008504:	2230      	movs	r2, #48	@ 0x30
 8008506:	f88a 2000 	strb.w	r2, [sl]
 800850a:	781a      	ldrb	r2, [r3, #0]
 800850c:	3201      	adds	r2, #1
 800850e:	701a      	strb	r2, [r3, #0]
 8008510:	e7bd      	b.n	800848e <_dtoa_r+0x65e>
 8008512:	4b7b      	ldr	r3, [pc, #492]	@ (8008700 <_dtoa_r+0x8d0>)
 8008514:	2200      	movs	r2, #0
 8008516:	f7f8 f887 	bl	8000628 <__aeabi_dmul>
 800851a:	2200      	movs	r2, #0
 800851c:	2300      	movs	r3, #0
 800851e:	4604      	mov	r4, r0
 8008520:	460d      	mov	r5, r1
 8008522:	f7f8 fae9 	bl	8000af8 <__aeabi_dcmpeq>
 8008526:	2800      	cmp	r0, #0
 8008528:	f43f aebb 	beq.w	80082a2 <_dtoa_r+0x472>
 800852c:	e6f0      	b.n	8008310 <_dtoa_r+0x4e0>
 800852e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8008530:	2a00      	cmp	r2, #0
 8008532:	f000 80db 	beq.w	80086ec <_dtoa_r+0x8bc>
 8008536:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008538:	2a01      	cmp	r2, #1
 800853a:	f300 80bf 	bgt.w	80086bc <_dtoa_r+0x88c>
 800853e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8008540:	2a00      	cmp	r2, #0
 8008542:	f000 80b7 	beq.w	80086b4 <_dtoa_r+0x884>
 8008546:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800854a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800854c:	4646      	mov	r6, r8
 800854e:	9a08      	ldr	r2, [sp, #32]
 8008550:	2101      	movs	r1, #1
 8008552:	441a      	add	r2, r3
 8008554:	4658      	mov	r0, fp
 8008556:	4498      	add	r8, r3
 8008558:	9208      	str	r2, [sp, #32]
 800855a:	f000 fc6b 	bl	8008e34 <__i2b>
 800855e:	4605      	mov	r5, r0
 8008560:	b15e      	cbz	r6, 800857a <_dtoa_r+0x74a>
 8008562:	9b08      	ldr	r3, [sp, #32]
 8008564:	2b00      	cmp	r3, #0
 8008566:	dd08      	ble.n	800857a <_dtoa_r+0x74a>
 8008568:	42b3      	cmp	r3, r6
 800856a:	9a08      	ldr	r2, [sp, #32]
 800856c:	bfa8      	it	ge
 800856e:	4633      	movge	r3, r6
 8008570:	eba8 0803 	sub.w	r8, r8, r3
 8008574:	1af6      	subs	r6, r6, r3
 8008576:	1ad3      	subs	r3, r2, r3
 8008578:	9308      	str	r3, [sp, #32]
 800857a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800857c:	b1f3      	cbz	r3, 80085bc <_dtoa_r+0x78c>
 800857e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008580:	2b00      	cmp	r3, #0
 8008582:	f000 80b7 	beq.w	80086f4 <_dtoa_r+0x8c4>
 8008586:	b18c      	cbz	r4, 80085ac <_dtoa_r+0x77c>
 8008588:	4629      	mov	r1, r5
 800858a:	4622      	mov	r2, r4
 800858c:	4658      	mov	r0, fp
 800858e:	f000 fd11 	bl	8008fb4 <__pow5mult>
 8008592:	464a      	mov	r2, r9
 8008594:	4601      	mov	r1, r0
 8008596:	4605      	mov	r5, r0
 8008598:	4658      	mov	r0, fp
 800859a:	f000 fc61 	bl	8008e60 <__multiply>
 800859e:	4649      	mov	r1, r9
 80085a0:	9004      	str	r0, [sp, #16]
 80085a2:	4658      	mov	r0, fp
 80085a4:	f000 fb48 	bl	8008c38 <_Bfree>
 80085a8:	9b04      	ldr	r3, [sp, #16]
 80085aa:	4699      	mov	r9, r3
 80085ac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80085ae:	1b1a      	subs	r2, r3, r4
 80085b0:	d004      	beq.n	80085bc <_dtoa_r+0x78c>
 80085b2:	4649      	mov	r1, r9
 80085b4:	4658      	mov	r0, fp
 80085b6:	f000 fcfd 	bl	8008fb4 <__pow5mult>
 80085ba:	4681      	mov	r9, r0
 80085bc:	2101      	movs	r1, #1
 80085be:	4658      	mov	r0, fp
 80085c0:	f000 fc38 	bl	8008e34 <__i2b>
 80085c4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80085c6:	4604      	mov	r4, r0
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	f000 81cf 	beq.w	800896c <_dtoa_r+0xb3c>
 80085ce:	461a      	mov	r2, r3
 80085d0:	4601      	mov	r1, r0
 80085d2:	4658      	mov	r0, fp
 80085d4:	f000 fcee 	bl	8008fb4 <__pow5mult>
 80085d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80085da:	2b01      	cmp	r3, #1
 80085dc:	4604      	mov	r4, r0
 80085de:	f300 8095 	bgt.w	800870c <_dtoa_r+0x8dc>
 80085e2:	9b02      	ldr	r3, [sp, #8]
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	f040 8087 	bne.w	80086f8 <_dtoa_r+0x8c8>
 80085ea:	9b03      	ldr	r3, [sp, #12]
 80085ec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	f040 8089 	bne.w	8008708 <_dtoa_r+0x8d8>
 80085f6:	9b03      	ldr	r3, [sp, #12]
 80085f8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80085fc:	0d1b      	lsrs	r3, r3, #20
 80085fe:	051b      	lsls	r3, r3, #20
 8008600:	b12b      	cbz	r3, 800860e <_dtoa_r+0x7de>
 8008602:	9b08      	ldr	r3, [sp, #32]
 8008604:	3301      	adds	r3, #1
 8008606:	9308      	str	r3, [sp, #32]
 8008608:	f108 0801 	add.w	r8, r8, #1
 800860c:	2301      	movs	r3, #1
 800860e:	930a      	str	r3, [sp, #40]	@ 0x28
 8008610:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008612:	2b00      	cmp	r3, #0
 8008614:	f000 81b0 	beq.w	8008978 <_dtoa_r+0xb48>
 8008618:	6923      	ldr	r3, [r4, #16]
 800861a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800861e:	6918      	ldr	r0, [r3, #16]
 8008620:	f000 fbbc 	bl	8008d9c <__hi0bits>
 8008624:	f1c0 0020 	rsb	r0, r0, #32
 8008628:	9b08      	ldr	r3, [sp, #32]
 800862a:	4418      	add	r0, r3
 800862c:	f010 001f 	ands.w	r0, r0, #31
 8008630:	d077      	beq.n	8008722 <_dtoa_r+0x8f2>
 8008632:	f1c0 0320 	rsb	r3, r0, #32
 8008636:	2b04      	cmp	r3, #4
 8008638:	dd6b      	ble.n	8008712 <_dtoa_r+0x8e2>
 800863a:	9b08      	ldr	r3, [sp, #32]
 800863c:	f1c0 001c 	rsb	r0, r0, #28
 8008640:	4403      	add	r3, r0
 8008642:	4480      	add	r8, r0
 8008644:	4406      	add	r6, r0
 8008646:	9308      	str	r3, [sp, #32]
 8008648:	f1b8 0f00 	cmp.w	r8, #0
 800864c:	dd05      	ble.n	800865a <_dtoa_r+0x82a>
 800864e:	4649      	mov	r1, r9
 8008650:	4642      	mov	r2, r8
 8008652:	4658      	mov	r0, fp
 8008654:	f000 fd08 	bl	8009068 <__lshift>
 8008658:	4681      	mov	r9, r0
 800865a:	9b08      	ldr	r3, [sp, #32]
 800865c:	2b00      	cmp	r3, #0
 800865e:	dd05      	ble.n	800866c <_dtoa_r+0x83c>
 8008660:	4621      	mov	r1, r4
 8008662:	461a      	mov	r2, r3
 8008664:	4658      	mov	r0, fp
 8008666:	f000 fcff 	bl	8009068 <__lshift>
 800866a:	4604      	mov	r4, r0
 800866c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800866e:	2b00      	cmp	r3, #0
 8008670:	d059      	beq.n	8008726 <_dtoa_r+0x8f6>
 8008672:	4621      	mov	r1, r4
 8008674:	4648      	mov	r0, r9
 8008676:	f000 fd63 	bl	8009140 <__mcmp>
 800867a:	2800      	cmp	r0, #0
 800867c:	da53      	bge.n	8008726 <_dtoa_r+0x8f6>
 800867e:	1e7b      	subs	r3, r7, #1
 8008680:	9304      	str	r3, [sp, #16]
 8008682:	4649      	mov	r1, r9
 8008684:	2300      	movs	r3, #0
 8008686:	220a      	movs	r2, #10
 8008688:	4658      	mov	r0, fp
 800868a:	f000 faf7 	bl	8008c7c <__multadd>
 800868e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008690:	4681      	mov	r9, r0
 8008692:	2b00      	cmp	r3, #0
 8008694:	f000 8172 	beq.w	800897c <_dtoa_r+0xb4c>
 8008698:	2300      	movs	r3, #0
 800869a:	4629      	mov	r1, r5
 800869c:	220a      	movs	r2, #10
 800869e:	4658      	mov	r0, fp
 80086a0:	f000 faec 	bl	8008c7c <__multadd>
 80086a4:	9b00      	ldr	r3, [sp, #0]
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	4605      	mov	r5, r0
 80086aa:	dc67      	bgt.n	800877c <_dtoa_r+0x94c>
 80086ac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80086ae:	2b02      	cmp	r3, #2
 80086b0:	dc41      	bgt.n	8008736 <_dtoa_r+0x906>
 80086b2:	e063      	b.n	800877c <_dtoa_r+0x94c>
 80086b4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80086b6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80086ba:	e746      	b.n	800854a <_dtoa_r+0x71a>
 80086bc:	9b07      	ldr	r3, [sp, #28]
 80086be:	1e5c      	subs	r4, r3, #1
 80086c0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80086c2:	42a3      	cmp	r3, r4
 80086c4:	bfbf      	itttt	lt
 80086c6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80086c8:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 80086ca:	940a      	strlt	r4, [sp, #40]	@ 0x28
 80086cc:	1ae3      	sublt	r3, r4, r3
 80086ce:	bfb4      	ite	lt
 80086d0:	18d2      	addlt	r2, r2, r3
 80086d2:	1b1c      	subge	r4, r3, r4
 80086d4:	9b07      	ldr	r3, [sp, #28]
 80086d6:	bfbc      	itt	lt
 80086d8:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 80086da:	2400      	movlt	r4, #0
 80086dc:	2b00      	cmp	r3, #0
 80086de:	bfb5      	itete	lt
 80086e0:	eba8 0603 	sublt.w	r6, r8, r3
 80086e4:	9b07      	ldrge	r3, [sp, #28]
 80086e6:	2300      	movlt	r3, #0
 80086e8:	4646      	movge	r6, r8
 80086ea:	e730      	b.n	800854e <_dtoa_r+0x71e>
 80086ec:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80086ee:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80086f0:	4646      	mov	r6, r8
 80086f2:	e735      	b.n	8008560 <_dtoa_r+0x730>
 80086f4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80086f6:	e75c      	b.n	80085b2 <_dtoa_r+0x782>
 80086f8:	2300      	movs	r3, #0
 80086fa:	e788      	b.n	800860e <_dtoa_r+0x7de>
 80086fc:	3fe00000 	.word	0x3fe00000
 8008700:	40240000 	.word	0x40240000
 8008704:	40140000 	.word	0x40140000
 8008708:	9b02      	ldr	r3, [sp, #8]
 800870a:	e780      	b.n	800860e <_dtoa_r+0x7de>
 800870c:	2300      	movs	r3, #0
 800870e:	930a      	str	r3, [sp, #40]	@ 0x28
 8008710:	e782      	b.n	8008618 <_dtoa_r+0x7e8>
 8008712:	d099      	beq.n	8008648 <_dtoa_r+0x818>
 8008714:	9a08      	ldr	r2, [sp, #32]
 8008716:	331c      	adds	r3, #28
 8008718:	441a      	add	r2, r3
 800871a:	4498      	add	r8, r3
 800871c:	441e      	add	r6, r3
 800871e:	9208      	str	r2, [sp, #32]
 8008720:	e792      	b.n	8008648 <_dtoa_r+0x818>
 8008722:	4603      	mov	r3, r0
 8008724:	e7f6      	b.n	8008714 <_dtoa_r+0x8e4>
 8008726:	9b07      	ldr	r3, [sp, #28]
 8008728:	9704      	str	r7, [sp, #16]
 800872a:	2b00      	cmp	r3, #0
 800872c:	dc20      	bgt.n	8008770 <_dtoa_r+0x940>
 800872e:	9300      	str	r3, [sp, #0]
 8008730:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008732:	2b02      	cmp	r3, #2
 8008734:	dd1e      	ble.n	8008774 <_dtoa_r+0x944>
 8008736:	9b00      	ldr	r3, [sp, #0]
 8008738:	2b00      	cmp	r3, #0
 800873a:	f47f aec0 	bne.w	80084be <_dtoa_r+0x68e>
 800873e:	4621      	mov	r1, r4
 8008740:	2205      	movs	r2, #5
 8008742:	4658      	mov	r0, fp
 8008744:	f000 fa9a 	bl	8008c7c <__multadd>
 8008748:	4601      	mov	r1, r0
 800874a:	4604      	mov	r4, r0
 800874c:	4648      	mov	r0, r9
 800874e:	f000 fcf7 	bl	8009140 <__mcmp>
 8008752:	2800      	cmp	r0, #0
 8008754:	f77f aeb3 	ble.w	80084be <_dtoa_r+0x68e>
 8008758:	4656      	mov	r6, sl
 800875a:	2331      	movs	r3, #49	@ 0x31
 800875c:	f806 3b01 	strb.w	r3, [r6], #1
 8008760:	9b04      	ldr	r3, [sp, #16]
 8008762:	3301      	adds	r3, #1
 8008764:	9304      	str	r3, [sp, #16]
 8008766:	e6ae      	b.n	80084c6 <_dtoa_r+0x696>
 8008768:	9c07      	ldr	r4, [sp, #28]
 800876a:	9704      	str	r7, [sp, #16]
 800876c:	4625      	mov	r5, r4
 800876e:	e7f3      	b.n	8008758 <_dtoa_r+0x928>
 8008770:	9b07      	ldr	r3, [sp, #28]
 8008772:	9300      	str	r3, [sp, #0]
 8008774:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008776:	2b00      	cmp	r3, #0
 8008778:	f000 8104 	beq.w	8008984 <_dtoa_r+0xb54>
 800877c:	2e00      	cmp	r6, #0
 800877e:	dd05      	ble.n	800878c <_dtoa_r+0x95c>
 8008780:	4629      	mov	r1, r5
 8008782:	4632      	mov	r2, r6
 8008784:	4658      	mov	r0, fp
 8008786:	f000 fc6f 	bl	8009068 <__lshift>
 800878a:	4605      	mov	r5, r0
 800878c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800878e:	2b00      	cmp	r3, #0
 8008790:	d05a      	beq.n	8008848 <_dtoa_r+0xa18>
 8008792:	6869      	ldr	r1, [r5, #4]
 8008794:	4658      	mov	r0, fp
 8008796:	f000 fa0f 	bl	8008bb8 <_Balloc>
 800879a:	4606      	mov	r6, r0
 800879c:	b928      	cbnz	r0, 80087aa <_dtoa_r+0x97a>
 800879e:	4b84      	ldr	r3, [pc, #528]	@ (80089b0 <_dtoa_r+0xb80>)
 80087a0:	4602      	mov	r2, r0
 80087a2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80087a6:	f7ff bb5a 	b.w	8007e5e <_dtoa_r+0x2e>
 80087aa:	692a      	ldr	r2, [r5, #16]
 80087ac:	3202      	adds	r2, #2
 80087ae:	0092      	lsls	r2, r2, #2
 80087b0:	f105 010c 	add.w	r1, r5, #12
 80087b4:	300c      	adds	r0, #12
 80087b6:	f002 fcc9 	bl	800b14c <memcpy>
 80087ba:	2201      	movs	r2, #1
 80087bc:	4631      	mov	r1, r6
 80087be:	4658      	mov	r0, fp
 80087c0:	f000 fc52 	bl	8009068 <__lshift>
 80087c4:	f10a 0301 	add.w	r3, sl, #1
 80087c8:	9307      	str	r3, [sp, #28]
 80087ca:	9b00      	ldr	r3, [sp, #0]
 80087cc:	4453      	add	r3, sl
 80087ce:	930b      	str	r3, [sp, #44]	@ 0x2c
 80087d0:	9b02      	ldr	r3, [sp, #8]
 80087d2:	f003 0301 	and.w	r3, r3, #1
 80087d6:	462f      	mov	r7, r5
 80087d8:	930a      	str	r3, [sp, #40]	@ 0x28
 80087da:	4605      	mov	r5, r0
 80087dc:	9b07      	ldr	r3, [sp, #28]
 80087de:	4621      	mov	r1, r4
 80087e0:	3b01      	subs	r3, #1
 80087e2:	4648      	mov	r0, r9
 80087e4:	9300      	str	r3, [sp, #0]
 80087e6:	f7ff fa9b 	bl	8007d20 <quorem>
 80087ea:	4639      	mov	r1, r7
 80087ec:	9002      	str	r0, [sp, #8]
 80087ee:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80087f2:	4648      	mov	r0, r9
 80087f4:	f000 fca4 	bl	8009140 <__mcmp>
 80087f8:	462a      	mov	r2, r5
 80087fa:	9008      	str	r0, [sp, #32]
 80087fc:	4621      	mov	r1, r4
 80087fe:	4658      	mov	r0, fp
 8008800:	f000 fcba 	bl	8009178 <__mdiff>
 8008804:	68c2      	ldr	r2, [r0, #12]
 8008806:	4606      	mov	r6, r0
 8008808:	bb02      	cbnz	r2, 800884c <_dtoa_r+0xa1c>
 800880a:	4601      	mov	r1, r0
 800880c:	4648      	mov	r0, r9
 800880e:	f000 fc97 	bl	8009140 <__mcmp>
 8008812:	4602      	mov	r2, r0
 8008814:	4631      	mov	r1, r6
 8008816:	4658      	mov	r0, fp
 8008818:	920e      	str	r2, [sp, #56]	@ 0x38
 800881a:	f000 fa0d 	bl	8008c38 <_Bfree>
 800881e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008820:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008822:	9e07      	ldr	r6, [sp, #28]
 8008824:	ea43 0102 	orr.w	r1, r3, r2
 8008828:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800882a:	4319      	orrs	r1, r3
 800882c:	d110      	bne.n	8008850 <_dtoa_r+0xa20>
 800882e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008832:	d029      	beq.n	8008888 <_dtoa_r+0xa58>
 8008834:	9b08      	ldr	r3, [sp, #32]
 8008836:	2b00      	cmp	r3, #0
 8008838:	dd02      	ble.n	8008840 <_dtoa_r+0xa10>
 800883a:	9b02      	ldr	r3, [sp, #8]
 800883c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8008840:	9b00      	ldr	r3, [sp, #0]
 8008842:	f883 8000 	strb.w	r8, [r3]
 8008846:	e63f      	b.n	80084c8 <_dtoa_r+0x698>
 8008848:	4628      	mov	r0, r5
 800884a:	e7bb      	b.n	80087c4 <_dtoa_r+0x994>
 800884c:	2201      	movs	r2, #1
 800884e:	e7e1      	b.n	8008814 <_dtoa_r+0x9e4>
 8008850:	9b08      	ldr	r3, [sp, #32]
 8008852:	2b00      	cmp	r3, #0
 8008854:	db04      	blt.n	8008860 <_dtoa_r+0xa30>
 8008856:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008858:	430b      	orrs	r3, r1
 800885a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800885c:	430b      	orrs	r3, r1
 800885e:	d120      	bne.n	80088a2 <_dtoa_r+0xa72>
 8008860:	2a00      	cmp	r2, #0
 8008862:	dded      	ble.n	8008840 <_dtoa_r+0xa10>
 8008864:	4649      	mov	r1, r9
 8008866:	2201      	movs	r2, #1
 8008868:	4658      	mov	r0, fp
 800886a:	f000 fbfd 	bl	8009068 <__lshift>
 800886e:	4621      	mov	r1, r4
 8008870:	4681      	mov	r9, r0
 8008872:	f000 fc65 	bl	8009140 <__mcmp>
 8008876:	2800      	cmp	r0, #0
 8008878:	dc03      	bgt.n	8008882 <_dtoa_r+0xa52>
 800887a:	d1e1      	bne.n	8008840 <_dtoa_r+0xa10>
 800887c:	f018 0f01 	tst.w	r8, #1
 8008880:	d0de      	beq.n	8008840 <_dtoa_r+0xa10>
 8008882:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008886:	d1d8      	bne.n	800883a <_dtoa_r+0xa0a>
 8008888:	9a00      	ldr	r2, [sp, #0]
 800888a:	2339      	movs	r3, #57	@ 0x39
 800888c:	7013      	strb	r3, [r2, #0]
 800888e:	4633      	mov	r3, r6
 8008890:	461e      	mov	r6, r3
 8008892:	3b01      	subs	r3, #1
 8008894:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8008898:	2a39      	cmp	r2, #57	@ 0x39
 800889a:	d052      	beq.n	8008942 <_dtoa_r+0xb12>
 800889c:	3201      	adds	r2, #1
 800889e:	701a      	strb	r2, [r3, #0]
 80088a0:	e612      	b.n	80084c8 <_dtoa_r+0x698>
 80088a2:	2a00      	cmp	r2, #0
 80088a4:	dd07      	ble.n	80088b6 <_dtoa_r+0xa86>
 80088a6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80088aa:	d0ed      	beq.n	8008888 <_dtoa_r+0xa58>
 80088ac:	9a00      	ldr	r2, [sp, #0]
 80088ae:	f108 0301 	add.w	r3, r8, #1
 80088b2:	7013      	strb	r3, [r2, #0]
 80088b4:	e608      	b.n	80084c8 <_dtoa_r+0x698>
 80088b6:	9b07      	ldr	r3, [sp, #28]
 80088b8:	9a07      	ldr	r2, [sp, #28]
 80088ba:	f803 8c01 	strb.w	r8, [r3, #-1]
 80088be:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80088c0:	4293      	cmp	r3, r2
 80088c2:	d028      	beq.n	8008916 <_dtoa_r+0xae6>
 80088c4:	4649      	mov	r1, r9
 80088c6:	2300      	movs	r3, #0
 80088c8:	220a      	movs	r2, #10
 80088ca:	4658      	mov	r0, fp
 80088cc:	f000 f9d6 	bl	8008c7c <__multadd>
 80088d0:	42af      	cmp	r7, r5
 80088d2:	4681      	mov	r9, r0
 80088d4:	f04f 0300 	mov.w	r3, #0
 80088d8:	f04f 020a 	mov.w	r2, #10
 80088dc:	4639      	mov	r1, r7
 80088de:	4658      	mov	r0, fp
 80088e0:	d107      	bne.n	80088f2 <_dtoa_r+0xac2>
 80088e2:	f000 f9cb 	bl	8008c7c <__multadd>
 80088e6:	4607      	mov	r7, r0
 80088e8:	4605      	mov	r5, r0
 80088ea:	9b07      	ldr	r3, [sp, #28]
 80088ec:	3301      	adds	r3, #1
 80088ee:	9307      	str	r3, [sp, #28]
 80088f0:	e774      	b.n	80087dc <_dtoa_r+0x9ac>
 80088f2:	f000 f9c3 	bl	8008c7c <__multadd>
 80088f6:	4629      	mov	r1, r5
 80088f8:	4607      	mov	r7, r0
 80088fa:	2300      	movs	r3, #0
 80088fc:	220a      	movs	r2, #10
 80088fe:	4658      	mov	r0, fp
 8008900:	f000 f9bc 	bl	8008c7c <__multadd>
 8008904:	4605      	mov	r5, r0
 8008906:	e7f0      	b.n	80088ea <_dtoa_r+0xaba>
 8008908:	9b00      	ldr	r3, [sp, #0]
 800890a:	2b00      	cmp	r3, #0
 800890c:	bfcc      	ite	gt
 800890e:	461e      	movgt	r6, r3
 8008910:	2601      	movle	r6, #1
 8008912:	4456      	add	r6, sl
 8008914:	2700      	movs	r7, #0
 8008916:	4649      	mov	r1, r9
 8008918:	2201      	movs	r2, #1
 800891a:	4658      	mov	r0, fp
 800891c:	f000 fba4 	bl	8009068 <__lshift>
 8008920:	4621      	mov	r1, r4
 8008922:	4681      	mov	r9, r0
 8008924:	f000 fc0c 	bl	8009140 <__mcmp>
 8008928:	2800      	cmp	r0, #0
 800892a:	dcb0      	bgt.n	800888e <_dtoa_r+0xa5e>
 800892c:	d102      	bne.n	8008934 <_dtoa_r+0xb04>
 800892e:	f018 0f01 	tst.w	r8, #1
 8008932:	d1ac      	bne.n	800888e <_dtoa_r+0xa5e>
 8008934:	4633      	mov	r3, r6
 8008936:	461e      	mov	r6, r3
 8008938:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800893c:	2a30      	cmp	r2, #48	@ 0x30
 800893e:	d0fa      	beq.n	8008936 <_dtoa_r+0xb06>
 8008940:	e5c2      	b.n	80084c8 <_dtoa_r+0x698>
 8008942:	459a      	cmp	sl, r3
 8008944:	d1a4      	bne.n	8008890 <_dtoa_r+0xa60>
 8008946:	9b04      	ldr	r3, [sp, #16]
 8008948:	3301      	adds	r3, #1
 800894a:	9304      	str	r3, [sp, #16]
 800894c:	2331      	movs	r3, #49	@ 0x31
 800894e:	f88a 3000 	strb.w	r3, [sl]
 8008952:	e5b9      	b.n	80084c8 <_dtoa_r+0x698>
 8008954:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008956:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 80089b4 <_dtoa_r+0xb84>
 800895a:	b11b      	cbz	r3, 8008964 <_dtoa_r+0xb34>
 800895c:	f10a 0308 	add.w	r3, sl, #8
 8008960:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8008962:	6013      	str	r3, [r2, #0]
 8008964:	4650      	mov	r0, sl
 8008966:	b019      	add	sp, #100	@ 0x64
 8008968:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800896c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800896e:	2b01      	cmp	r3, #1
 8008970:	f77f ae37 	ble.w	80085e2 <_dtoa_r+0x7b2>
 8008974:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008976:	930a      	str	r3, [sp, #40]	@ 0x28
 8008978:	2001      	movs	r0, #1
 800897a:	e655      	b.n	8008628 <_dtoa_r+0x7f8>
 800897c:	9b00      	ldr	r3, [sp, #0]
 800897e:	2b00      	cmp	r3, #0
 8008980:	f77f aed6 	ble.w	8008730 <_dtoa_r+0x900>
 8008984:	4656      	mov	r6, sl
 8008986:	4621      	mov	r1, r4
 8008988:	4648      	mov	r0, r9
 800898a:	f7ff f9c9 	bl	8007d20 <quorem>
 800898e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8008992:	f806 8b01 	strb.w	r8, [r6], #1
 8008996:	9b00      	ldr	r3, [sp, #0]
 8008998:	eba6 020a 	sub.w	r2, r6, sl
 800899c:	4293      	cmp	r3, r2
 800899e:	ddb3      	ble.n	8008908 <_dtoa_r+0xad8>
 80089a0:	4649      	mov	r1, r9
 80089a2:	2300      	movs	r3, #0
 80089a4:	220a      	movs	r2, #10
 80089a6:	4658      	mov	r0, fp
 80089a8:	f000 f968 	bl	8008c7c <__multadd>
 80089ac:	4681      	mov	r9, r0
 80089ae:	e7ea      	b.n	8008986 <_dtoa_r+0xb56>
 80089b0:	0800be54 	.word	0x0800be54
 80089b4:	0800bdd8 	.word	0x0800bdd8

080089b8 <_free_r>:
 80089b8:	b538      	push	{r3, r4, r5, lr}
 80089ba:	4605      	mov	r5, r0
 80089bc:	2900      	cmp	r1, #0
 80089be:	d041      	beq.n	8008a44 <_free_r+0x8c>
 80089c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80089c4:	1f0c      	subs	r4, r1, #4
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	bfb8      	it	lt
 80089ca:	18e4      	addlt	r4, r4, r3
 80089cc:	f000 f8e8 	bl	8008ba0 <__malloc_lock>
 80089d0:	4a1d      	ldr	r2, [pc, #116]	@ (8008a48 <_free_r+0x90>)
 80089d2:	6813      	ldr	r3, [r2, #0]
 80089d4:	b933      	cbnz	r3, 80089e4 <_free_r+0x2c>
 80089d6:	6063      	str	r3, [r4, #4]
 80089d8:	6014      	str	r4, [r2, #0]
 80089da:	4628      	mov	r0, r5
 80089dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80089e0:	f000 b8e4 	b.w	8008bac <__malloc_unlock>
 80089e4:	42a3      	cmp	r3, r4
 80089e6:	d908      	bls.n	80089fa <_free_r+0x42>
 80089e8:	6820      	ldr	r0, [r4, #0]
 80089ea:	1821      	adds	r1, r4, r0
 80089ec:	428b      	cmp	r3, r1
 80089ee:	bf01      	itttt	eq
 80089f0:	6819      	ldreq	r1, [r3, #0]
 80089f2:	685b      	ldreq	r3, [r3, #4]
 80089f4:	1809      	addeq	r1, r1, r0
 80089f6:	6021      	streq	r1, [r4, #0]
 80089f8:	e7ed      	b.n	80089d6 <_free_r+0x1e>
 80089fa:	461a      	mov	r2, r3
 80089fc:	685b      	ldr	r3, [r3, #4]
 80089fe:	b10b      	cbz	r3, 8008a04 <_free_r+0x4c>
 8008a00:	42a3      	cmp	r3, r4
 8008a02:	d9fa      	bls.n	80089fa <_free_r+0x42>
 8008a04:	6811      	ldr	r1, [r2, #0]
 8008a06:	1850      	adds	r0, r2, r1
 8008a08:	42a0      	cmp	r0, r4
 8008a0a:	d10b      	bne.n	8008a24 <_free_r+0x6c>
 8008a0c:	6820      	ldr	r0, [r4, #0]
 8008a0e:	4401      	add	r1, r0
 8008a10:	1850      	adds	r0, r2, r1
 8008a12:	4283      	cmp	r3, r0
 8008a14:	6011      	str	r1, [r2, #0]
 8008a16:	d1e0      	bne.n	80089da <_free_r+0x22>
 8008a18:	6818      	ldr	r0, [r3, #0]
 8008a1a:	685b      	ldr	r3, [r3, #4]
 8008a1c:	6053      	str	r3, [r2, #4]
 8008a1e:	4408      	add	r0, r1
 8008a20:	6010      	str	r0, [r2, #0]
 8008a22:	e7da      	b.n	80089da <_free_r+0x22>
 8008a24:	d902      	bls.n	8008a2c <_free_r+0x74>
 8008a26:	230c      	movs	r3, #12
 8008a28:	602b      	str	r3, [r5, #0]
 8008a2a:	e7d6      	b.n	80089da <_free_r+0x22>
 8008a2c:	6820      	ldr	r0, [r4, #0]
 8008a2e:	1821      	adds	r1, r4, r0
 8008a30:	428b      	cmp	r3, r1
 8008a32:	bf04      	itt	eq
 8008a34:	6819      	ldreq	r1, [r3, #0]
 8008a36:	685b      	ldreq	r3, [r3, #4]
 8008a38:	6063      	str	r3, [r4, #4]
 8008a3a:	bf04      	itt	eq
 8008a3c:	1809      	addeq	r1, r1, r0
 8008a3e:	6021      	streq	r1, [r4, #0]
 8008a40:	6054      	str	r4, [r2, #4]
 8008a42:	e7ca      	b.n	80089da <_free_r+0x22>
 8008a44:	bd38      	pop	{r3, r4, r5, pc}
 8008a46:	bf00      	nop
 8008a48:	20005454 	.word	0x20005454

08008a4c <malloc>:
 8008a4c:	4b02      	ldr	r3, [pc, #8]	@ (8008a58 <malloc+0xc>)
 8008a4e:	4601      	mov	r1, r0
 8008a50:	6818      	ldr	r0, [r3, #0]
 8008a52:	f000 b825 	b.w	8008aa0 <_malloc_r>
 8008a56:	bf00      	nop
 8008a58:	20000018 	.word	0x20000018

08008a5c <sbrk_aligned>:
 8008a5c:	b570      	push	{r4, r5, r6, lr}
 8008a5e:	4e0f      	ldr	r6, [pc, #60]	@ (8008a9c <sbrk_aligned+0x40>)
 8008a60:	460c      	mov	r4, r1
 8008a62:	6831      	ldr	r1, [r6, #0]
 8008a64:	4605      	mov	r5, r0
 8008a66:	b911      	cbnz	r1, 8008a6e <sbrk_aligned+0x12>
 8008a68:	f002 fb60 	bl	800b12c <_sbrk_r>
 8008a6c:	6030      	str	r0, [r6, #0]
 8008a6e:	4621      	mov	r1, r4
 8008a70:	4628      	mov	r0, r5
 8008a72:	f002 fb5b 	bl	800b12c <_sbrk_r>
 8008a76:	1c43      	adds	r3, r0, #1
 8008a78:	d103      	bne.n	8008a82 <sbrk_aligned+0x26>
 8008a7a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8008a7e:	4620      	mov	r0, r4
 8008a80:	bd70      	pop	{r4, r5, r6, pc}
 8008a82:	1cc4      	adds	r4, r0, #3
 8008a84:	f024 0403 	bic.w	r4, r4, #3
 8008a88:	42a0      	cmp	r0, r4
 8008a8a:	d0f8      	beq.n	8008a7e <sbrk_aligned+0x22>
 8008a8c:	1a21      	subs	r1, r4, r0
 8008a8e:	4628      	mov	r0, r5
 8008a90:	f002 fb4c 	bl	800b12c <_sbrk_r>
 8008a94:	3001      	adds	r0, #1
 8008a96:	d1f2      	bne.n	8008a7e <sbrk_aligned+0x22>
 8008a98:	e7ef      	b.n	8008a7a <sbrk_aligned+0x1e>
 8008a9a:	bf00      	nop
 8008a9c:	20005450 	.word	0x20005450

08008aa0 <_malloc_r>:
 8008aa0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008aa4:	1ccd      	adds	r5, r1, #3
 8008aa6:	f025 0503 	bic.w	r5, r5, #3
 8008aaa:	3508      	adds	r5, #8
 8008aac:	2d0c      	cmp	r5, #12
 8008aae:	bf38      	it	cc
 8008ab0:	250c      	movcc	r5, #12
 8008ab2:	2d00      	cmp	r5, #0
 8008ab4:	4606      	mov	r6, r0
 8008ab6:	db01      	blt.n	8008abc <_malloc_r+0x1c>
 8008ab8:	42a9      	cmp	r1, r5
 8008aba:	d904      	bls.n	8008ac6 <_malloc_r+0x26>
 8008abc:	230c      	movs	r3, #12
 8008abe:	6033      	str	r3, [r6, #0]
 8008ac0:	2000      	movs	r0, #0
 8008ac2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008ac6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008b9c <_malloc_r+0xfc>
 8008aca:	f000 f869 	bl	8008ba0 <__malloc_lock>
 8008ace:	f8d8 3000 	ldr.w	r3, [r8]
 8008ad2:	461c      	mov	r4, r3
 8008ad4:	bb44      	cbnz	r4, 8008b28 <_malloc_r+0x88>
 8008ad6:	4629      	mov	r1, r5
 8008ad8:	4630      	mov	r0, r6
 8008ada:	f7ff ffbf 	bl	8008a5c <sbrk_aligned>
 8008ade:	1c43      	adds	r3, r0, #1
 8008ae0:	4604      	mov	r4, r0
 8008ae2:	d158      	bne.n	8008b96 <_malloc_r+0xf6>
 8008ae4:	f8d8 4000 	ldr.w	r4, [r8]
 8008ae8:	4627      	mov	r7, r4
 8008aea:	2f00      	cmp	r7, #0
 8008aec:	d143      	bne.n	8008b76 <_malloc_r+0xd6>
 8008aee:	2c00      	cmp	r4, #0
 8008af0:	d04b      	beq.n	8008b8a <_malloc_r+0xea>
 8008af2:	6823      	ldr	r3, [r4, #0]
 8008af4:	4639      	mov	r1, r7
 8008af6:	4630      	mov	r0, r6
 8008af8:	eb04 0903 	add.w	r9, r4, r3
 8008afc:	f002 fb16 	bl	800b12c <_sbrk_r>
 8008b00:	4581      	cmp	r9, r0
 8008b02:	d142      	bne.n	8008b8a <_malloc_r+0xea>
 8008b04:	6821      	ldr	r1, [r4, #0]
 8008b06:	1a6d      	subs	r5, r5, r1
 8008b08:	4629      	mov	r1, r5
 8008b0a:	4630      	mov	r0, r6
 8008b0c:	f7ff ffa6 	bl	8008a5c <sbrk_aligned>
 8008b10:	3001      	adds	r0, #1
 8008b12:	d03a      	beq.n	8008b8a <_malloc_r+0xea>
 8008b14:	6823      	ldr	r3, [r4, #0]
 8008b16:	442b      	add	r3, r5
 8008b18:	6023      	str	r3, [r4, #0]
 8008b1a:	f8d8 3000 	ldr.w	r3, [r8]
 8008b1e:	685a      	ldr	r2, [r3, #4]
 8008b20:	bb62      	cbnz	r2, 8008b7c <_malloc_r+0xdc>
 8008b22:	f8c8 7000 	str.w	r7, [r8]
 8008b26:	e00f      	b.n	8008b48 <_malloc_r+0xa8>
 8008b28:	6822      	ldr	r2, [r4, #0]
 8008b2a:	1b52      	subs	r2, r2, r5
 8008b2c:	d420      	bmi.n	8008b70 <_malloc_r+0xd0>
 8008b2e:	2a0b      	cmp	r2, #11
 8008b30:	d917      	bls.n	8008b62 <_malloc_r+0xc2>
 8008b32:	1961      	adds	r1, r4, r5
 8008b34:	42a3      	cmp	r3, r4
 8008b36:	6025      	str	r5, [r4, #0]
 8008b38:	bf18      	it	ne
 8008b3a:	6059      	strne	r1, [r3, #4]
 8008b3c:	6863      	ldr	r3, [r4, #4]
 8008b3e:	bf08      	it	eq
 8008b40:	f8c8 1000 	streq.w	r1, [r8]
 8008b44:	5162      	str	r2, [r4, r5]
 8008b46:	604b      	str	r3, [r1, #4]
 8008b48:	4630      	mov	r0, r6
 8008b4a:	f000 f82f 	bl	8008bac <__malloc_unlock>
 8008b4e:	f104 000b 	add.w	r0, r4, #11
 8008b52:	1d23      	adds	r3, r4, #4
 8008b54:	f020 0007 	bic.w	r0, r0, #7
 8008b58:	1ac2      	subs	r2, r0, r3
 8008b5a:	bf1c      	itt	ne
 8008b5c:	1a1b      	subne	r3, r3, r0
 8008b5e:	50a3      	strne	r3, [r4, r2]
 8008b60:	e7af      	b.n	8008ac2 <_malloc_r+0x22>
 8008b62:	6862      	ldr	r2, [r4, #4]
 8008b64:	42a3      	cmp	r3, r4
 8008b66:	bf0c      	ite	eq
 8008b68:	f8c8 2000 	streq.w	r2, [r8]
 8008b6c:	605a      	strne	r2, [r3, #4]
 8008b6e:	e7eb      	b.n	8008b48 <_malloc_r+0xa8>
 8008b70:	4623      	mov	r3, r4
 8008b72:	6864      	ldr	r4, [r4, #4]
 8008b74:	e7ae      	b.n	8008ad4 <_malloc_r+0x34>
 8008b76:	463c      	mov	r4, r7
 8008b78:	687f      	ldr	r7, [r7, #4]
 8008b7a:	e7b6      	b.n	8008aea <_malloc_r+0x4a>
 8008b7c:	461a      	mov	r2, r3
 8008b7e:	685b      	ldr	r3, [r3, #4]
 8008b80:	42a3      	cmp	r3, r4
 8008b82:	d1fb      	bne.n	8008b7c <_malloc_r+0xdc>
 8008b84:	2300      	movs	r3, #0
 8008b86:	6053      	str	r3, [r2, #4]
 8008b88:	e7de      	b.n	8008b48 <_malloc_r+0xa8>
 8008b8a:	230c      	movs	r3, #12
 8008b8c:	6033      	str	r3, [r6, #0]
 8008b8e:	4630      	mov	r0, r6
 8008b90:	f000 f80c 	bl	8008bac <__malloc_unlock>
 8008b94:	e794      	b.n	8008ac0 <_malloc_r+0x20>
 8008b96:	6005      	str	r5, [r0, #0]
 8008b98:	e7d6      	b.n	8008b48 <_malloc_r+0xa8>
 8008b9a:	bf00      	nop
 8008b9c:	20005454 	.word	0x20005454

08008ba0 <__malloc_lock>:
 8008ba0:	4801      	ldr	r0, [pc, #4]	@ (8008ba8 <__malloc_lock+0x8>)
 8008ba2:	f7ff b8b4 	b.w	8007d0e <__retarget_lock_acquire_recursive>
 8008ba6:	bf00      	nop
 8008ba8:	2000544c 	.word	0x2000544c

08008bac <__malloc_unlock>:
 8008bac:	4801      	ldr	r0, [pc, #4]	@ (8008bb4 <__malloc_unlock+0x8>)
 8008bae:	f7ff b8af 	b.w	8007d10 <__retarget_lock_release_recursive>
 8008bb2:	bf00      	nop
 8008bb4:	2000544c 	.word	0x2000544c

08008bb8 <_Balloc>:
 8008bb8:	b570      	push	{r4, r5, r6, lr}
 8008bba:	69c6      	ldr	r6, [r0, #28]
 8008bbc:	4604      	mov	r4, r0
 8008bbe:	460d      	mov	r5, r1
 8008bc0:	b976      	cbnz	r6, 8008be0 <_Balloc+0x28>
 8008bc2:	2010      	movs	r0, #16
 8008bc4:	f7ff ff42 	bl	8008a4c <malloc>
 8008bc8:	4602      	mov	r2, r0
 8008bca:	61e0      	str	r0, [r4, #28]
 8008bcc:	b920      	cbnz	r0, 8008bd8 <_Balloc+0x20>
 8008bce:	4b18      	ldr	r3, [pc, #96]	@ (8008c30 <_Balloc+0x78>)
 8008bd0:	4818      	ldr	r0, [pc, #96]	@ (8008c34 <_Balloc+0x7c>)
 8008bd2:	216b      	movs	r1, #107	@ 0x6b
 8008bd4:	f002 fad0 	bl	800b178 <__assert_func>
 8008bd8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008bdc:	6006      	str	r6, [r0, #0]
 8008bde:	60c6      	str	r6, [r0, #12]
 8008be0:	69e6      	ldr	r6, [r4, #28]
 8008be2:	68f3      	ldr	r3, [r6, #12]
 8008be4:	b183      	cbz	r3, 8008c08 <_Balloc+0x50>
 8008be6:	69e3      	ldr	r3, [r4, #28]
 8008be8:	68db      	ldr	r3, [r3, #12]
 8008bea:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008bee:	b9b8      	cbnz	r0, 8008c20 <_Balloc+0x68>
 8008bf0:	2101      	movs	r1, #1
 8008bf2:	fa01 f605 	lsl.w	r6, r1, r5
 8008bf6:	1d72      	adds	r2, r6, #5
 8008bf8:	0092      	lsls	r2, r2, #2
 8008bfa:	4620      	mov	r0, r4
 8008bfc:	f002 fada 	bl	800b1b4 <_calloc_r>
 8008c00:	b160      	cbz	r0, 8008c1c <_Balloc+0x64>
 8008c02:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008c06:	e00e      	b.n	8008c26 <_Balloc+0x6e>
 8008c08:	2221      	movs	r2, #33	@ 0x21
 8008c0a:	2104      	movs	r1, #4
 8008c0c:	4620      	mov	r0, r4
 8008c0e:	f002 fad1 	bl	800b1b4 <_calloc_r>
 8008c12:	69e3      	ldr	r3, [r4, #28]
 8008c14:	60f0      	str	r0, [r6, #12]
 8008c16:	68db      	ldr	r3, [r3, #12]
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d1e4      	bne.n	8008be6 <_Balloc+0x2e>
 8008c1c:	2000      	movs	r0, #0
 8008c1e:	bd70      	pop	{r4, r5, r6, pc}
 8008c20:	6802      	ldr	r2, [r0, #0]
 8008c22:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008c26:	2300      	movs	r3, #0
 8008c28:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008c2c:	e7f7      	b.n	8008c1e <_Balloc+0x66>
 8008c2e:	bf00      	nop
 8008c30:	0800bde5 	.word	0x0800bde5
 8008c34:	0800be65 	.word	0x0800be65

08008c38 <_Bfree>:
 8008c38:	b570      	push	{r4, r5, r6, lr}
 8008c3a:	69c6      	ldr	r6, [r0, #28]
 8008c3c:	4605      	mov	r5, r0
 8008c3e:	460c      	mov	r4, r1
 8008c40:	b976      	cbnz	r6, 8008c60 <_Bfree+0x28>
 8008c42:	2010      	movs	r0, #16
 8008c44:	f7ff ff02 	bl	8008a4c <malloc>
 8008c48:	4602      	mov	r2, r0
 8008c4a:	61e8      	str	r0, [r5, #28]
 8008c4c:	b920      	cbnz	r0, 8008c58 <_Bfree+0x20>
 8008c4e:	4b09      	ldr	r3, [pc, #36]	@ (8008c74 <_Bfree+0x3c>)
 8008c50:	4809      	ldr	r0, [pc, #36]	@ (8008c78 <_Bfree+0x40>)
 8008c52:	218f      	movs	r1, #143	@ 0x8f
 8008c54:	f002 fa90 	bl	800b178 <__assert_func>
 8008c58:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008c5c:	6006      	str	r6, [r0, #0]
 8008c5e:	60c6      	str	r6, [r0, #12]
 8008c60:	b13c      	cbz	r4, 8008c72 <_Bfree+0x3a>
 8008c62:	69eb      	ldr	r3, [r5, #28]
 8008c64:	6862      	ldr	r2, [r4, #4]
 8008c66:	68db      	ldr	r3, [r3, #12]
 8008c68:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008c6c:	6021      	str	r1, [r4, #0]
 8008c6e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008c72:	bd70      	pop	{r4, r5, r6, pc}
 8008c74:	0800bde5 	.word	0x0800bde5
 8008c78:	0800be65 	.word	0x0800be65

08008c7c <__multadd>:
 8008c7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008c80:	690d      	ldr	r5, [r1, #16]
 8008c82:	4607      	mov	r7, r0
 8008c84:	460c      	mov	r4, r1
 8008c86:	461e      	mov	r6, r3
 8008c88:	f101 0c14 	add.w	ip, r1, #20
 8008c8c:	2000      	movs	r0, #0
 8008c8e:	f8dc 3000 	ldr.w	r3, [ip]
 8008c92:	b299      	uxth	r1, r3
 8008c94:	fb02 6101 	mla	r1, r2, r1, r6
 8008c98:	0c1e      	lsrs	r6, r3, #16
 8008c9a:	0c0b      	lsrs	r3, r1, #16
 8008c9c:	fb02 3306 	mla	r3, r2, r6, r3
 8008ca0:	b289      	uxth	r1, r1
 8008ca2:	3001      	adds	r0, #1
 8008ca4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008ca8:	4285      	cmp	r5, r0
 8008caa:	f84c 1b04 	str.w	r1, [ip], #4
 8008cae:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008cb2:	dcec      	bgt.n	8008c8e <__multadd+0x12>
 8008cb4:	b30e      	cbz	r6, 8008cfa <__multadd+0x7e>
 8008cb6:	68a3      	ldr	r3, [r4, #8]
 8008cb8:	42ab      	cmp	r3, r5
 8008cba:	dc19      	bgt.n	8008cf0 <__multadd+0x74>
 8008cbc:	6861      	ldr	r1, [r4, #4]
 8008cbe:	4638      	mov	r0, r7
 8008cc0:	3101      	adds	r1, #1
 8008cc2:	f7ff ff79 	bl	8008bb8 <_Balloc>
 8008cc6:	4680      	mov	r8, r0
 8008cc8:	b928      	cbnz	r0, 8008cd6 <__multadd+0x5a>
 8008cca:	4602      	mov	r2, r0
 8008ccc:	4b0c      	ldr	r3, [pc, #48]	@ (8008d00 <__multadd+0x84>)
 8008cce:	480d      	ldr	r0, [pc, #52]	@ (8008d04 <__multadd+0x88>)
 8008cd0:	21ba      	movs	r1, #186	@ 0xba
 8008cd2:	f002 fa51 	bl	800b178 <__assert_func>
 8008cd6:	6922      	ldr	r2, [r4, #16]
 8008cd8:	3202      	adds	r2, #2
 8008cda:	f104 010c 	add.w	r1, r4, #12
 8008cde:	0092      	lsls	r2, r2, #2
 8008ce0:	300c      	adds	r0, #12
 8008ce2:	f002 fa33 	bl	800b14c <memcpy>
 8008ce6:	4621      	mov	r1, r4
 8008ce8:	4638      	mov	r0, r7
 8008cea:	f7ff ffa5 	bl	8008c38 <_Bfree>
 8008cee:	4644      	mov	r4, r8
 8008cf0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008cf4:	3501      	adds	r5, #1
 8008cf6:	615e      	str	r6, [r3, #20]
 8008cf8:	6125      	str	r5, [r4, #16]
 8008cfa:	4620      	mov	r0, r4
 8008cfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008d00:	0800be54 	.word	0x0800be54
 8008d04:	0800be65 	.word	0x0800be65

08008d08 <__s2b>:
 8008d08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008d0c:	460c      	mov	r4, r1
 8008d0e:	4615      	mov	r5, r2
 8008d10:	461f      	mov	r7, r3
 8008d12:	2209      	movs	r2, #9
 8008d14:	3308      	adds	r3, #8
 8008d16:	4606      	mov	r6, r0
 8008d18:	fb93 f3f2 	sdiv	r3, r3, r2
 8008d1c:	2100      	movs	r1, #0
 8008d1e:	2201      	movs	r2, #1
 8008d20:	429a      	cmp	r2, r3
 8008d22:	db09      	blt.n	8008d38 <__s2b+0x30>
 8008d24:	4630      	mov	r0, r6
 8008d26:	f7ff ff47 	bl	8008bb8 <_Balloc>
 8008d2a:	b940      	cbnz	r0, 8008d3e <__s2b+0x36>
 8008d2c:	4602      	mov	r2, r0
 8008d2e:	4b19      	ldr	r3, [pc, #100]	@ (8008d94 <__s2b+0x8c>)
 8008d30:	4819      	ldr	r0, [pc, #100]	@ (8008d98 <__s2b+0x90>)
 8008d32:	21d3      	movs	r1, #211	@ 0xd3
 8008d34:	f002 fa20 	bl	800b178 <__assert_func>
 8008d38:	0052      	lsls	r2, r2, #1
 8008d3a:	3101      	adds	r1, #1
 8008d3c:	e7f0      	b.n	8008d20 <__s2b+0x18>
 8008d3e:	9b08      	ldr	r3, [sp, #32]
 8008d40:	6143      	str	r3, [r0, #20]
 8008d42:	2d09      	cmp	r5, #9
 8008d44:	f04f 0301 	mov.w	r3, #1
 8008d48:	6103      	str	r3, [r0, #16]
 8008d4a:	dd16      	ble.n	8008d7a <__s2b+0x72>
 8008d4c:	f104 0909 	add.w	r9, r4, #9
 8008d50:	46c8      	mov	r8, r9
 8008d52:	442c      	add	r4, r5
 8008d54:	f818 3b01 	ldrb.w	r3, [r8], #1
 8008d58:	4601      	mov	r1, r0
 8008d5a:	3b30      	subs	r3, #48	@ 0x30
 8008d5c:	220a      	movs	r2, #10
 8008d5e:	4630      	mov	r0, r6
 8008d60:	f7ff ff8c 	bl	8008c7c <__multadd>
 8008d64:	45a0      	cmp	r8, r4
 8008d66:	d1f5      	bne.n	8008d54 <__s2b+0x4c>
 8008d68:	f1a5 0408 	sub.w	r4, r5, #8
 8008d6c:	444c      	add	r4, r9
 8008d6e:	1b2d      	subs	r5, r5, r4
 8008d70:	1963      	adds	r3, r4, r5
 8008d72:	42bb      	cmp	r3, r7
 8008d74:	db04      	blt.n	8008d80 <__s2b+0x78>
 8008d76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008d7a:	340a      	adds	r4, #10
 8008d7c:	2509      	movs	r5, #9
 8008d7e:	e7f6      	b.n	8008d6e <__s2b+0x66>
 8008d80:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008d84:	4601      	mov	r1, r0
 8008d86:	3b30      	subs	r3, #48	@ 0x30
 8008d88:	220a      	movs	r2, #10
 8008d8a:	4630      	mov	r0, r6
 8008d8c:	f7ff ff76 	bl	8008c7c <__multadd>
 8008d90:	e7ee      	b.n	8008d70 <__s2b+0x68>
 8008d92:	bf00      	nop
 8008d94:	0800be54 	.word	0x0800be54
 8008d98:	0800be65 	.word	0x0800be65

08008d9c <__hi0bits>:
 8008d9c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8008da0:	4603      	mov	r3, r0
 8008da2:	bf36      	itet	cc
 8008da4:	0403      	lslcc	r3, r0, #16
 8008da6:	2000      	movcs	r0, #0
 8008da8:	2010      	movcc	r0, #16
 8008daa:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008dae:	bf3c      	itt	cc
 8008db0:	021b      	lslcc	r3, r3, #8
 8008db2:	3008      	addcc	r0, #8
 8008db4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008db8:	bf3c      	itt	cc
 8008dba:	011b      	lslcc	r3, r3, #4
 8008dbc:	3004      	addcc	r0, #4
 8008dbe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008dc2:	bf3c      	itt	cc
 8008dc4:	009b      	lslcc	r3, r3, #2
 8008dc6:	3002      	addcc	r0, #2
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	db05      	blt.n	8008dd8 <__hi0bits+0x3c>
 8008dcc:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8008dd0:	f100 0001 	add.w	r0, r0, #1
 8008dd4:	bf08      	it	eq
 8008dd6:	2020      	moveq	r0, #32
 8008dd8:	4770      	bx	lr

08008dda <__lo0bits>:
 8008dda:	6803      	ldr	r3, [r0, #0]
 8008ddc:	4602      	mov	r2, r0
 8008dde:	f013 0007 	ands.w	r0, r3, #7
 8008de2:	d00b      	beq.n	8008dfc <__lo0bits+0x22>
 8008de4:	07d9      	lsls	r1, r3, #31
 8008de6:	d421      	bmi.n	8008e2c <__lo0bits+0x52>
 8008de8:	0798      	lsls	r0, r3, #30
 8008dea:	bf49      	itett	mi
 8008dec:	085b      	lsrmi	r3, r3, #1
 8008dee:	089b      	lsrpl	r3, r3, #2
 8008df0:	2001      	movmi	r0, #1
 8008df2:	6013      	strmi	r3, [r2, #0]
 8008df4:	bf5c      	itt	pl
 8008df6:	6013      	strpl	r3, [r2, #0]
 8008df8:	2002      	movpl	r0, #2
 8008dfa:	4770      	bx	lr
 8008dfc:	b299      	uxth	r1, r3
 8008dfe:	b909      	cbnz	r1, 8008e04 <__lo0bits+0x2a>
 8008e00:	0c1b      	lsrs	r3, r3, #16
 8008e02:	2010      	movs	r0, #16
 8008e04:	b2d9      	uxtb	r1, r3
 8008e06:	b909      	cbnz	r1, 8008e0c <__lo0bits+0x32>
 8008e08:	3008      	adds	r0, #8
 8008e0a:	0a1b      	lsrs	r3, r3, #8
 8008e0c:	0719      	lsls	r1, r3, #28
 8008e0e:	bf04      	itt	eq
 8008e10:	091b      	lsreq	r3, r3, #4
 8008e12:	3004      	addeq	r0, #4
 8008e14:	0799      	lsls	r1, r3, #30
 8008e16:	bf04      	itt	eq
 8008e18:	089b      	lsreq	r3, r3, #2
 8008e1a:	3002      	addeq	r0, #2
 8008e1c:	07d9      	lsls	r1, r3, #31
 8008e1e:	d403      	bmi.n	8008e28 <__lo0bits+0x4e>
 8008e20:	085b      	lsrs	r3, r3, #1
 8008e22:	f100 0001 	add.w	r0, r0, #1
 8008e26:	d003      	beq.n	8008e30 <__lo0bits+0x56>
 8008e28:	6013      	str	r3, [r2, #0]
 8008e2a:	4770      	bx	lr
 8008e2c:	2000      	movs	r0, #0
 8008e2e:	4770      	bx	lr
 8008e30:	2020      	movs	r0, #32
 8008e32:	4770      	bx	lr

08008e34 <__i2b>:
 8008e34:	b510      	push	{r4, lr}
 8008e36:	460c      	mov	r4, r1
 8008e38:	2101      	movs	r1, #1
 8008e3a:	f7ff febd 	bl	8008bb8 <_Balloc>
 8008e3e:	4602      	mov	r2, r0
 8008e40:	b928      	cbnz	r0, 8008e4e <__i2b+0x1a>
 8008e42:	4b05      	ldr	r3, [pc, #20]	@ (8008e58 <__i2b+0x24>)
 8008e44:	4805      	ldr	r0, [pc, #20]	@ (8008e5c <__i2b+0x28>)
 8008e46:	f240 1145 	movw	r1, #325	@ 0x145
 8008e4a:	f002 f995 	bl	800b178 <__assert_func>
 8008e4e:	2301      	movs	r3, #1
 8008e50:	6144      	str	r4, [r0, #20]
 8008e52:	6103      	str	r3, [r0, #16]
 8008e54:	bd10      	pop	{r4, pc}
 8008e56:	bf00      	nop
 8008e58:	0800be54 	.word	0x0800be54
 8008e5c:	0800be65 	.word	0x0800be65

08008e60 <__multiply>:
 8008e60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e64:	4614      	mov	r4, r2
 8008e66:	690a      	ldr	r2, [r1, #16]
 8008e68:	6923      	ldr	r3, [r4, #16]
 8008e6a:	429a      	cmp	r2, r3
 8008e6c:	bfa8      	it	ge
 8008e6e:	4623      	movge	r3, r4
 8008e70:	460f      	mov	r7, r1
 8008e72:	bfa4      	itt	ge
 8008e74:	460c      	movge	r4, r1
 8008e76:	461f      	movge	r7, r3
 8008e78:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8008e7c:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8008e80:	68a3      	ldr	r3, [r4, #8]
 8008e82:	6861      	ldr	r1, [r4, #4]
 8008e84:	eb0a 0609 	add.w	r6, sl, r9
 8008e88:	42b3      	cmp	r3, r6
 8008e8a:	b085      	sub	sp, #20
 8008e8c:	bfb8      	it	lt
 8008e8e:	3101      	addlt	r1, #1
 8008e90:	f7ff fe92 	bl	8008bb8 <_Balloc>
 8008e94:	b930      	cbnz	r0, 8008ea4 <__multiply+0x44>
 8008e96:	4602      	mov	r2, r0
 8008e98:	4b44      	ldr	r3, [pc, #272]	@ (8008fac <__multiply+0x14c>)
 8008e9a:	4845      	ldr	r0, [pc, #276]	@ (8008fb0 <__multiply+0x150>)
 8008e9c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8008ea0:	f002 f96a 	bl	800b178 <__assert_func>
 8008ea4:	f100 0514 	add.w	r5, r0, #20
 8008ea8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008eac:	462b      	mov	r3, r5
 8008eae:	2200      	movs	r2, #0
 8008eb0:	4543      	cmp	r3, r8
 8008eb2:	d321      	bcc.n	8008ef8 <__multiply+0x98>
 8008eb4:	f107 0114 	add.w	r1, r7, #20
 8008eb8:	f104 0214 	add.w	r2, r4, #20
 8008ebc:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8008ec0:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8008ec4:	9302      	str	r3, [sp, #8]
 8008ec6:	1b13      	subs	r3, r2, r4
 8008ec8:	3b15      	subs	r3, #21
 8008eca:	f023 0303 	bic.w	r3, r3, #3
 8008ece:	3304      	adds	r3, #4
 8008ed0:	f104 0715 	add.w	r7, r4, #21
 8008ed4:	42ba      	cmp	r2, r7
 8008ed6:	bf38      	it	cc
 8008ed8:	2304      	movcc	r3, #4
 8008eda:	9301      	str	r3, [sp, #4]
 8008edc:	9b02      	ldr	r3, [sp, #8]
 8008ede:	9103      	str	r1, [sp, #12]
 8008ee0:	428b      	cmp	r3, r1
 8008ee2:	d80c      	bhi.n	8008efe <__multiply+0x9e>
 8008ee4:	2e00      	cmp	r6, #0
 8008ee6:	dd03      	ble.n	8008ef0 <__multiply+0x90>
 8008ee8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d05b      	beq.n	8008fa8 <__multiply+0x148>
 8008ef0:	6106      	str	r6, [r0, #16]
 8008ef2:	b005      	add	sp, #20
 8008ef4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ef8:	f843 2b04 	str.w	r2, [r3], #4
 8008efc:	e7d8      	b.n	8008eb0 <__multiply+0x50>
 8008efe:	f8b1 a000 	ldrh.w	sl, [r1]
 8008f02:	f1ba 0f00 	cmp.w	sl, #0
 8008f06:	d024      	beq.n	8008f52 <__multiply+0xf2>
 8008f08:	f104 0e14 	add.w	lr, r4, #20
 8008f0c:	46a9      	mov	r9, r5
 8008f0e:	f04f 0c00 	mov.w	ip, #0
 8008f12:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008f16:	f8d9 3000 	ldr.w	r3, [r9]
 8008f1a:	fa1f fb87 	uxth.w	fp, r7
 8008f1e:	b29b      	uxth	r3, r3
 8008f20:	fb0a 330b 	mla	r3, sl, fp, r3
 8008f24:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8008f28:	f8d9 7000 	ldr.w	r7, [r9]
 8008f2c:	4463      	add	r3, ip
 8008f2e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8008f32:	fb0a c70b 	mla	r7, sl, fp, ip
 8008f36:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8008f3a:	b29b      	uxth	r3, r3
 8008f3c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008f40:	4572      	cmp	r2, lr
 8008f42:	f849 3b04 	str.w	r3, [r9], #4
 8008f46:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8008f4a:	d8e2      	bhi.n	8008f12 <__multiply+0xb2>
 8008f4c:	9b01      	ldr	r3, [sp, #4]
 8008f4e:	f845 c003 	str.w	ip, [r5, r3]
 8008f52:	9b03      	ldr	r3, [sp, #12]
 8008f54:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8008f58:	3104      	adds	r1, #4
 8008f5a:	f1b9 0f00 	cmp.w	r9, #0
 8008f5e:	d021      	beq.n	8008fa4 <__multiply+0x144>
 8008f60:	682b      	ldr	r3, [r5, #0]
 8008f62:	f104 0c14 	add.w	ip, r4, #20
 8008f66:	46ae      	mov	lr, r5
 8008f68:	f04f 0a00 	mov.w	sl, #0
 8008f6c:	f8bc b000 	ldrh.w	fp, [ip]
 8008f70:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8008f74:	fb09 770b 	mla	r7, r9, fp, r7
 8008f78:	4457      	add	r7, sl
 8008f7a:	b29b      	uxth	r3, r3
 8008f7c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008f80:	f84e 3b04 	str.w	r3, [lr], #4
 8008f84:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008f88:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008f8c:	f8be 3000 	ldrh.w	r3, [lr]
 8008f90:	fb09 330a 	mla	r3, r9, sl, r3
 8008f94:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8008f98:	4562      	cmp	r2, ip
 8008f9a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008f9e:	d8e5      	bhi.n	8008f6c <__multiply+0x10c>
 8008fa0:	9f01      	ldr	r7, [sp, #4]
 8008fa2:	51eb      	str	r3, [r5, r7]
 8008fa4:	3504      	adds	r5, #4
 8008fa6:	e799      	b.n	8008edc <__multiply+0x7c>
 8008fa8:	3e01      	subs	r6, #1
 8008faa:	e79b      	b.n	8008ee4 <__multiply+0x84>
 8008fac:	0800be54 	.word	0x0800be54
 8008fb0:	0800be65 	.word	0x0800be65

08008fb4 <__pow5mult>:
 8008fb4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008fb8:	4615      	mov	r5, r2
 8008fba:	f012 0203 	ands.w	r2, r2, #3
 8008fbe:	4607      	mov	r7, r0
 8008fc0:	460e      	mov	r6, r1
 8008fc2:	d007      	beq.n	8008fd4 <__pow5mult+0x20>
 8008fc4:	4c25      	ldr	r4, [pc, #148]	@ (800905c <__pow5mult+0xa8>)
 8008fc6:	3a01      	subs	r2, #1
 8008fc8:	2300      	movs	r3, #0
 8008fca:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008fce:	f7ff fe55 	bl	8008c7c <__multadd>
 8008fd2:	4606      	mov	r6, r0
 8008fd4:	10ad      	asrs	r5, r5, #2
 8008fd6:	d03d      	beq.n	8009054 <__pow5mult+0xa0>
 8008fd8:	69fc      	ldr	r4, [r7, #28]
 8008fda:	b97c      	cbnz	r4, 8008ffc <__pow5mult+0x48>
 8008fdc:	2010      	movs	r0, #16
 8008fde:	f7ff fd35 	bl	8008a4c <malloc>
 8008fe2:	4602      	mov	r2, r0
 8008fe4:	61f8      	str	r0, [r7, #28]
 8008fe6:	b928      	cbnz	r0, 8008ff4 <__pow5mult+0x40>
 8008fe8:	4b1d      	ldr	r3, [pc, #116]	@ (8009060 <__pow5mult+0xac>)
 8008fea:	481e      	ldr	r0, [pc, #120]	@ (8009064 <__pow5mult+0xb0>)
 8008fec:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8008ff0:	f002 f8c2 	bl	800b178 <__assert_func>
 8008ff4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008ff8:	6004      	str	r4, [r0, #0]
 8008ffa:	60c4      	str	r4, [r0, #12]
 8008ffc:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8009000:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009004:	b94c      	cbnz	r4, 800901a <__pow5mult+0x66>
 8009006:	f240 2171 	movw	r1, #625	@ 0x271
 800900a:	4638      	mov	r0, r7
 800900c:	f7ff ff12 	bl	8008e34 <__i2b>
 8009010:	2300      	movs	r3, #0
 8009012:	f8c8 0008 	str.w	r0, [r8, #8]
 8009016:	4604      	mov	r4, r0
 8009018:	6003      	str	r3, [r0, #0]
 800901a:	f04f 0900 	mov.w	r9, #0
 800901e:	07eb      	lsls	r3, r5, #31
 8009020:	d50a      	bpl.n	8009038 <__pow5mult+0x84>
 8009022:	4631      	mov	r1, r6
 8009024:	4622      	mov	r2, r4
 8009026:	4638      	mov	r0, r7
 8009028:	f7ff ff1a 	bl	8008e60 <__multiply>
 800902c:	4631      	mov	r1, r6
 800902e:	4680      	mov	r8, r0
 8009030:	4638      	mov	r0, r7
 8009032:	f7ff fe01 	bl	8008c38 <_Bfree>
 8009036:	4646      	mov	r6, r8
 8009038:	106d      	asrs	r5, r5, #1
 800903a:	d00b      	beq.n	8009054 <__pow5mult+0xa0>
 800903c:	6820      	ldr	r0, [r4, #0]
 800903e:	b938      	cbnz	r0, 8009050 <__pow5mult+0x9c>
 8009040:	4622      	mov	r2, r4
 8009042:	4621      	mov	r1, r4
 8009044:	4638      	mov	r0, r7
 8009046:	f7ff ff0b 	bl	8008e60 <__multiply>
 800904a:	6020      	str	r0, [r4, #0]
 800904c:	f8c0 9000 	str.w	r9, [r0]
 8009050:	4604      	mov	r4, r0
 8009052:	e7e4      	b.n	800901e <__pow5mult+0x6a>
 8009054:	4630      	mov	r0, r6
 8009056:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800905a:	bf00      	nop
 800905c:	0800bec0 	.word	0x0800bec0
 8009060:	0800bde5 	.word	0x0800bde5
 8009064:	0800be65 	.word	0x0800be65

08009068 <__lshift>:
 8009068:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800906c:	460c      	mov	r4, r1
 800906e:	6849      	ldr	r1, [r1, #4]
 8009070:	6923      	ldr	r3, [r4, #16]
 8009072:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009076:	68a3      	ldr	r3, [r4, #8]
 8009078:	4607      	mov	r7, r0
 800907a:	4691      	mov	r9, r2
 800907c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009080:	f108 0601 	add.w	r6, r8, #1
 8009084:	42b3      	cmp	r3, r6
 8009086:	db0b      	blt.n	80090a0 <__lshift+0x38>
 8009088:	4638      	mov	r0, r7
 800908a:	f7ff fd95 	bl	8008bb8 <_Balloc>
 800908e:	4605      	mov	r5, r0
 8009090:	b948      	cbnz	r0, 80090a6 <__lshift+0x3e>
 8009092:	4602      	mov	r2, r0
 8009094:	4b28      	ldr	r3, [pc, #160]	@ (8009138 <__lshift+0xd0>)
 8009096:	4829      	ldr	r0, [pc, #164]	@ (800913c <__lshift+0xd4>)
 8009098:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800909c:	f002 f86c 	bl	800b178 <__assert_func>
 80090a0:	3101      	adds	r1, #1
 80090a2:	005b      	lsls	r3, r3, #1
 80090a4:	e7ee      	b.n	8009084 <__lshift+0x1c>
 80090a6:	2300      	movs	r3, #0
 80090a8:	f100 0114 	add.w	r1, r0, #20
 80090ac:	f100 0210 	add.w	r2, r0, #16
 80090b0:	4618      	mov	r0, r3
 80090b2:	4553      	cmp	r3, sl
 80090b4:	db33      	blt.n	800911e <__lshift+0xb6>
 80090b6:	6920      	ldr	r0, [r4, #16]
 80090b8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80090bc:	f104 0314 	add.w	r3, r4, #20
 80090c0:	f019 091f 	ands.w	r9, r9, #31
 80090c4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80090c8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80090cc:	d02b      	beq.n	8009126 <__lshift+0xbe>
 80090ce:	f1c9 0e20 	rsb	lr, r9, #32
 80090d2:	468a      	mov	sl, r1
 80090d4:	2200      	movs	r2, #0
 80090d6:	6818      	ldr	r0, [r3, #0]
 80090d8:	fa00 f009 	lsl.w	r0, r0, r9
 80090dc:	4310      	orrs	r0, r2
 80090de:	f84a 0b04 	str.w	r0, [sl], #4
 80090e2:	f853 2b04 	ldr.w	r2, [r3], #4
 80090e6:	459c      	cmp	ip, r3
 80090e8:	fa22 f20e 	lsr.w	r2, r2, lr
 80090ec:	d8f3      	bhi.n	80090d6 <__lshift+0x6e>
 80090ee:	ebac 0304 	sub.w	r3, ip, r4
 80090f2:	3b15      	subs	r3, #21
 80090f4:	f023 0303 	bic.w	r3, r3, #3
 80090f8:	3304      	adds	r3, #4
 80090fa:	f104 0015 	add.w	r0, r4, #21
 80090fe:	4584      	cmp	ip, r0
 8009100:	bf38      	it	cc
 8009102:	2304      	movcc	r3, #4
 8009104:	50ca      	str	r2, [r1, r3]
 8009106:	b10a      	cbz	r2, 800910c <__lshift+0xa4>
 8009108:	f108 0602 	add.w	r6, r8, #2
 800910c:	3e01      	subs	r6, #1
 800910e:	4638      	mov	r0, r7
 8009110:	612e      	str	r6, [r5, #16]
 8009112:	4621      	mov	r1, r4
 8009114:	f7ff fd90 	bl	8008c38 <_Bfree>
 8009118:	4628      	mov	r0, r5
 800911a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800911e:	f842 0f04 	str.w	r0, [r2, #4]!
 8009122:	3301      	adds	r3, #1
 8009124:	e7c5      	b.n	80090b2 <__lshift+0x4a>
 8009126:	3904      	subs	r1, #4
 8009128:	f853 2b04 	ldr.w	r2, [r3], #4
 800912c:	f841 2f04 	str.w	r2, [r1, #4]!
 8009130:	459c      	cmp	ip, r3
 8009132:	d8f9      	bhi.n	8009128 <__lshift+0xc0>
 8009134:	e7ea      	b.n	800910c <__lshift+0xa4>
 8009136:	bf00      	nop
 8009138:	0800be54 	.word	0x0800be54
 800913c:	0800be65 	.word	0x0800be65

08009140 <__mcmp>:
 8009140:	690a      	ldr	r2, [r1, #16]
 8009142:	4603      	mov	r3, r0
 8009144:	6900      	ldr	r0, [r0, #16]
 8009146:	1a80      	subs	r0, r0, r2
 8009148:	b530      	push	{r4, r5, lr}
 800914a:	d10e      	bne.n	800916a <__mcmp+0x2a>
 800914c:	3314      	adds	r3, #20
 800914e:	3114      	adds	r1, #20
 8009150:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8009154:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8009158:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800915c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009160:	4295      	cmp	r5, r2
 8009162:	d003      	beq.n	800916c <__mcmp+0x2c>
 8009164:	d205      	bcs.n	8009172 <__mcmp+0x32>
 8009166:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800916a:	bd30      	pop	{r4, r5, pc}
 800916c:	42a3      	cmp	r3, r4
 800916e:	d3f3      	bcc.n	8009158 <__mcmp+0x18>
 8009170:	e7fb      	b.n	800916a <__mcmp+0x2a>
 8009172:	2001      	movs	r0, #1
 8009174:	e7f9      	b.n	800916a <__mcmp+0x2a>
	...

08009178 <__mdiff>:
 8009178:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800917c:	4689      	mov	r9, r1
 800917e:	4606      	mov	r6, r0
 8009180:	4611      	mov	r1, r2
 8009182:	4648      	mov	r0, r9
 8009184:	4614      	mov	r4, r2
 8009186:	f7ff ffdb 	bl	8009140 <__mcmp>
 800918a:	1e05      	subs	r5, r0, #0
 800918c:	d112      	bne.n	80091b4 <__mdiff+0x3c>
 800918e:	4629      	mov	r1, r5
 8009190:	4630      	mov	r0, r6
 8009192:	f7ff fd11 	bl	8008bb8 <_Balloc>
 8009196:	4602      	mov	r2, r0
 8009198:	b928      	cbnz	r0, 80091a6 <__mdiff+0x2e>
 800919a:	4b3f      	ldr	r3, [pc, #252]	@ (8009298 <__mdiff+0x120>)
 800919c:	f240 2137 	movw	r1, #567	@ 0x237
 80091a0:	483e      	ldr	r0, [pc, #248]	@ (800929c <__mdiff+0x124>)
 80091a2:	f001 ffe9 	bl	800b178 <__assert_func>
 80091a6:	2301      	movs	r3, #1
 80091a8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80091ac:	4610      	mov	r0, r2
 80091ae:	b003      	add	sp, #12
 80091b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80091b4:	bfbc      	itt	lt
 80091b6:	464b      	movlt	r3, r9
 80091b8:	46a1      	movlt	r9, r4
 80091ba:	4630      	mov	r0, r6
 80091bc:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80091c0:	bfba      	itte	lt
 80091c2:	461c      	movlt	r4, r3
 80091c4:	2501      	movlt	r5, #1
 80091c6:	2500      	movge	r5, #0
 80091c8:	f7ff fcf6 	bl	8008bb8 <_Balloc>
 80091cc:	4602      	mov	r2, r0
 80091ce:	b918      	cbnz	r0, 80091d8 <__mdiff+0x60>
 80091d0:	4b31      	ldr	r3, [pc, #196]	@ (8009298 <__mdiff+0x120>)
 80091d2:	f240 2145 	movw	r1, #581	@ 0x245
 80091d6:	e7e3      	b.n	80091a0 <__mdiff+0x28>
 80091d8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80091dc:	6926      	ldr	r6, [r4, #16]
 80091de:	60c5      	str	r5, [r0, #12]
 80091e0:	f109 0310 	add.w	r3, r9, #16
 80091e4:	f109 0514 	add.w	r5, r9, #20
 80091e8:	f104 0e14 	add.w	lr, r4, #20
 80091ec:	f100 0b14 	add.w	fp, r0, #20
 80091f0:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80091f4:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80091f8:	9301      	str	r3, [sp, #4]
 80091fa:	46d9      	mov	r9, fp
 80091fc:	f04f 0c00 	mov.w	ip, #0
 8009200:	9b01      	ldr	r3, [sp, #4]
 8009202:	f85e 0b04 	ldr.w	r0, [lr], #4
 8009206:	f853 af04 	ldr.w	sl, [r3, #4]!
 800920a:	9301      	str	r3, [sp, #4]
 800920c:	fa1f f38a 	uxth.w	r3, sl
 8009210:	4619      	mov	r1, r3
 8009212:	b283      	uxth	r3, r0
 8009214:	1acb      	subs	r3, r1, r3
 8009216:	0c00      	lsrs	r0, r0, #16
 8009218:	4463      	add	r3, ip
 800921a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800921e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8009222:	b29b      	uxth	r3, r3
 8009224:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8009228:	4576      	cmp	r6, lr
 800922a:	f849 3b04 	str.w	r3, [r9], #4
 800922e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009232:	d8e5      	bhi.n	8009200 <__mdiff+0x88>
 8009234:	1b33      	subs	r3, r6, r4
 8009236:	3b15      	subs	r3, #21
 8009238:	f023 0303 	bic.w	r3, r3, #3
 800923c:	3415      	adds	r4, #21
 800923e:	3304      	adds	r3, #4
 8009240:	42a6      	cmp	r6, r4
 8009242:	bf38      	it	cc
 8009244:	2304      	movcc	r3, #4
 8009246:	441d      	add	r5, r3
 8009248:	445b      	add	r3, fp
 800924a:	461e      	mov	r6, r3
 800924c:	462c      	mov	r4, r5
 800924e:	4544      	cmp	r4, r8
 8009250:	d30e      	bcc.n	8009270 <__mdiff+0xf8>
 8009252:	f108 0103 	add.w	r1, r8, #3
 8009256:	1b49      	subs	r1, r1, r5
 8009258:	f021 0103 	bic.w	r1, r1, #3
 800925c:	3d03      	subs	r5, #3
 800925e:	45a8      	cmp	r8, r5
 8009260:	bf38      	it	cc
 8009262:	2100      	movcc	r1, #0
 8009264:	440b      	add	r3, r1
 8009266:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800926a:	b191      	cbz	r1, 8009292 <__mdiff+0x11a>
 800926c:	6117      	str	r7, [r2, #16]
 800926e:	e79d      	b.n	80091ac <__mdiff+0x34>
 8009270:	f854 1b04 	ldr.w	r1, [r4], #4
 8009274:	46e6      	mov	lr, ip
 8009276:	0c08      	lsrs	r0, r1, #16
 8009278:	fa1c fc81 	uxtah	ip, ip, r1
 800927c:	4471      	add	r1, lr
 800927e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8009282:	b289      	uxth	r1, r1
 8009284:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8009288:	f846 1b04 	str.w	r1, [r6], #4
 800928c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009290:	e7dd      	b.n	800924e <__mdiff+0xd6>
 8009292:	3f01      	subs	r7, #1
 8009294:	e7e7      	b.n	8009266 <__mdiff+0xee>
 8009296:	bf00      	nop
 8009298:	0800be54 	.word	0x0800be54
 800929c:	0800be65 	.word	0x0800be65

080092a0 <__ulp>:
 80092a0:	b082      	sub	sp, #8
 80092a2:	ed8d 0b00 	vstr	d0, [sp]
 80092a6:	9a01      	ldr	r2, [sp, #4]
 80092a8:	4b0f      	ldr	r3, [pc, #60]	@ (80092e8 <__ulp+0x48>)
 80092aa:	4013      	ands	r3, r2
 80092ac:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	dc08      	bgt.n	80092c6 <__ulp+0x26>
 80092b4:	425b      	negs	r3, r3
 80092b6:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 80092ba:	ea4f 5223 	mov.w	r2, r3, asr #20
 80092be:	da04      	bge.n	80092ca <__ulp+0x2a>
 80092c0:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80092c4:	4113      	asrs	r3, r2
 80092c6:	2200      	movs	r2, #0
 80092c8:	e008      	b.n	80092dc <__ulp+0x3c>
 80092ca:	f1a2 0314 	sub.w	r3, r2, #20
 80092ce:	2b1e      	cmp	r3, #30
 80092d0:	bfda      	itte	le
 80092d2:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 80092d6:	40da      	lsrle	r2, r3
 80092d8:	2201      	movgt	r2, #1
 80092da:	2300      	movs	r3, #0
 80092dc:	4619      	mov	r1, r3
 80092de:	4610      	mov	r0, r2
 80092e0:	ec41 0b10 	vmov	d0, r0, r1
 80092e4:	b002      	add	sp, #8
 80092e6:	4770      	bx	lr
 80092e8:	7ff00000 	.word	0x7ff00000

080092ec <__b2d>:
 80092ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80092f0:	6906      	ldr	r6, [r0, #16]
 80092f2:	f100 0814 	add.w	r8, r0, #20
 80092f6:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 80092fa:	1f37      	subs	r7, r6, #4
 80092fc:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8009300:	4610      	mov	r0, r2
 8009302:	f7ff fd4b 	bl	8008d9c <__hi0bits>
 8009306:	f1c0 0320 	rsb	r3, r0, #32
 800930a:	280a      	cmp	r0, #10
 800930c:	600b      	str	r3, [r1, #0]
 800930e:	491b      	ldr	r1, [pc, #108]	@ (800937c <__b2d+0x90>)
 8009310:	dc15      	bgt.n	800933e <__b2d+0x52>
 8009312:	f1c0 0c0b 	rsb	ip, r0, #11
 8009316:	fa22 f30c 	lsr.w	r3, r2, ip
 800931a:	45b8      	cmp	r8, r7
 800931c:	ea43 0501 	orr.w	r5, r3, r1
 8009320:	bf34      	ite	cc
 8009322:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8009326:	2300      	movcs	r3, #0
 8009328:	3015      	adds	r0, #21
 800932a:	fa02 f000 	lsl.w	r0, r2, r0
 800932e:	fa23 f30c 	lsr.w	r3, r3, ip
 8009332:	4303      	orrs	r3, r0
 8009334:	461c      	mov	r4, r3
 8009336:	ec45 4b10 	vmov	d0, r4, r5
 800933a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800933e:	45b8      	cmp	r8, r7
 8009340:	bf3a      	itte	cc
 8009342:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8009346:	f1a6 0708 	subcc.w	r7, r6, #8
 800934a:	2300      	movcs	r3, #0
 800934c:	380b      	subs	r0, #11
 800934e:	d012      	beq.n	8009376 <__b2d+0x8a>
 8009350:	f1c0 0120 	rsb	r1, r0, #32
 8009354:	fa23 f401 	lsr.w	r4, r3, r1
 8009358:	4082      	lsls	r2, r0
 800935a:	4322      	orrs	r2, r4
 800935c:	4547      	cmp	r7, r8
 800935e:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8009362:	bf8c      	ite	hi
 8009364:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8009368:	2200      	movls	r2, #0
 800936a:	4083      	lsls	r3, r0
 800936c:	40ca      	lsrs	r2, r1
 800936e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8009372:	4313      	orrs	r3, r2
 8009374:	e7de      	b.n	8009334 <__b2d+0x48>
 8009376:	ea42 0501 	orr.w	r5, r2, r1
 800937a:	e7db      	b.n	8009334 <__b2d+0x48>
 800937c:	3ff00000 	.word	0x3ff00000

08009380 <__d2b>:
 8009380:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009384:	460f      	mov	r7, r1
 8009386:	2101      	movs	r1, #1
 8009388:	ec59 8b10 	vmov	r8, r9, d0
 800938c:	4616      	mov	r6, r2
 800938e:	f7ff fc13 	bl	8008bb8 <_Balloc>
 8009392:	4604      	mov	r4, r0
 8009394:	b930      	cbnz	r0, 80093a4 <__d2b+0x24>
 8009396:	4602      	mov	r2, r0
 8009398:	4b23      	ldr	r3, [pc, #140]	@ (8009428 <__d2b+0xa8>)
 800939a:	4824      	ldr	r0, [pc, #144]	@ (800942c <__d2b+0xac>)
 800939c:	f240 310f 	movw	r1, #783	@ 0x30f
 80093a0:	f001 feea 	bl	800b178 <__assert_func>
 80093a4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80093a8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80093ac:	b10d      	cbz	r5, 80093b2 <__d2b+0x32>
 80093ae:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80093b2:	9301      	str	r3, [sp, #4]
 80093b4:	f1b8 0300 	subs.w	r3, r8, #0
 80093b8:	d023      	beq.n	8009402 <__d2b+0x82>
 80093ba:	4668      	mov	r0, sp
 80093bc:	9300      	str	r3, [sp, #0]
 80093be:	f7ff fd0c 	bl	8008dda <__lo0bits>
 80093c2:	e9dd 1200 	ldrd	r1, r2, [sp]
 80093c6:	b1d0      	cbz	r0, 80093fe <__d2b+0x7e>
 80093c8:	f1c0 0320 	rsb	r3, r0, #32
 80093cc:	fa02 f303 	lsl.w	r3, r2, r3
 80093d0:	430b      	orrs	r3, r1
 80093d2:	40c2      	lsrs	r2, r0
 80093d4:	6163      	str	r3, [r4, #20]
 80093d6:	9201      	str	r2, [sp, #4]
 80093d8:	9b01      	ldr	r3, [sp, #4]
 80093da:	61a3      	str	r3, [r4, #24]
 80093dc:	2b00      	cmp	r3, #0
 80093de:	bf0c      	ite	eq
 80093e0:	2201      	moveq	r2, #1
 80093e2:	2202      	movne	r2, #2
 80093e4:	6122      	str	r2, [r4, #16]
 80093e6:	b1a5      	cbz	r5, 8009412 <__d2b+0x92>
 80093e8:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80093ec:	4405      	add	r5, r0
 80093ee:	603d      	str	r5, [r7, #0]
 80093f0:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80093f4:	6030      	str	r0, [r6, #0]
 80093f6:	4620      	mov	r0, r4
 80093f8:	b003      	add	sp, #12
 80093fa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80093fe:	6161      	str	r1, [r4, #20]
 8009400:	e7ea      	b.n	80093d8 <__d2b+0x58>
 8009402:	a801      	add	r0, sp, #4
 8009404:	f7ff fce9 	bl	8008dda <__lo0bits>
 8009408:	9b01      	ldr	r3, [sp, #4]
 800940a:	6163      	str	r3, [r4, #20]
 800940c:	3020      	adds	r0, #32
 800940e:	2201      	movs	r2, #1
 8009410:	e7e8      	b.n	80093e4 <__d2b+0x64>
 8009412:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009416:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800941a:	6038      	str	r0, [r7, #0]
 800941c:	6918      	ldr	r0, [r3, #16]
 800941e:	f7ff fcbd 	bl	8008d9c <__hi0bits>
 8009422:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009426:	e7e5      	b.n	80093f4 <__d2b+0x74>
 8009428:	0800be54 	.word	0x0800be54
 800942c:	0800be65 	.word	0x0800be65

08009430 <__ratio>:
 8009430:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009434:	b085      	sub	sp, #20
 8009436:	e9cd 1000 	strd	r1, r0, [sp]
 800943a:	a902      	add	r1, sp, #8
 800943c:	f7ff ff56 	bl	80092ec <__b2d>
 8009440:	9800      	ldr	r0, [sp, #0]
 8009442:	a903      	add	r1, sp, #12
 8009444:	ec55 4b10 	vmov	r4, r5, d0
 8009448:	f7ff ff50 	bl	80092ec <__b2d>
 800944c:	9b01      	ldr	r3, [sp, #4]
 800944e:	6919      	ldr	r1, [r3, #16]
 8009450:	9b00      	ldr	r3, [sp, #0]
 8009452:	691b      	ldr	r3, [r3, #16]
 8009454:	1ac9      	subs	r1, r1, r3
 8009456:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800945a:	1a9b      	subs	r3, r3, r2
 800945c:	ec5b ab10 	vmov	sl, fp, d0
 8009460:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8009464:	2b00      	cmp	r3, #0
 8009466:	bfce      	itee	gt
 8009468:	462a      	movgt	r2, r5
 800946a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800946e:	465a      	movle	r2, fp
 8009470:	462f      	mov	r7, r5
 8009472:	46d9      	mov	r9, fp
 8009474:	bfcc      	ite	gt
 8009476:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800947a:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800947e:	464b      	mov	r3, r9
 8009480:	4652      	mov	r2, sl
 8009482:	4620      	mov	r0, r4
 8009484:	4639      	mov	r1, r7
 8009486:	f7f7 f9f9 	bl	800087c <__aeabi_ddiv>
 800948a:	ec41 0b10 	vmov	d0, r0, r1
 800948e:	b005      	add	sp, #20
 8009490:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009494 <__copybits>:
 8009494:	3901      	subs	r1, #1
 8009496:	b570      	push	{r4, r5, r6, lr}
 8009498:	1149      	asrs	r1, r1, #5
 800949a:	6914      	ldr	r4, [r2, #16]
 800949c:	3101      	adds	r1, #1
 800949e:	f102 0314 	add.w	r3, r2, #20
 80094a2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80094a6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80094aa:	1f05      	subs	r5, r0, #4
 80094ac:	42a3      	cmp	r3, r4
 80094ae:	d30c      	bcc.n	80094ca <__copybits+0x36>
 80094b0:	1aa3      	subs	r3, r4, r2
 80094b2:	3b11      	subs	r3, #17
 80094b4:	f023 0303 	bic.w	r3, r3, #3
 80094b8:	3211      	adds	r2, #17
 80094ba:	42a2      	cmp	r2, r4
 80094bc:	bf88      	it	hi
 80094be:	2300      	movhi	r3, #0
 80094c0:	4418      	add	r0, r3
 80094c2:	2300      	movs	r3, #0
 80094c4:	4288      	cmp	r0, r1
 80094c6:	d305      	bcc.n	80094d4 <__copybits+0x40>
 80094c8:	bd70      	pop	{r4, r5, r6, pc}
 80094ca:	f853 6b04 	ldr.w	r6, [r3], #4
 80094ce:	f845 6f04 	str.w	r6, [r5, #4]!
 80094d2:	e7eb      	b.n	80094ac <__copybits+0x18>
 80094d4:	f840 3b04 	str.w	r3, [r0], #4
 80094d8:	e7f4      	b.n	80094c4 <__copybits+0x30>

080094da <__any_on>:
 80094da:	f100 0214 	add.w	r2, r0, #20
 80094de:	6900      	ldr	r0, [r0, #16]
 80094e0:	114b      	asrs	r3, r1, #5
 80094e2:	4298      	cmp	r0, r3
 80094e4:	b510      	push	{r4, lr}
 80094e6:	db11      	blt.n	800950c <__any_on+0x32>
 80094e8:	dd0a      	ble.n	8009500 <__any_on+0x26>
 80094ea:	f011 011f 	ands.w	r1, r1, #31
 80094ee:	d007      	beq.n	8009500 <__any_on+0x26>
 80094f0:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80094f4:	fa24 f001 	lsr.w	r0, r4, r1
 80094f8:	fa00 f101 	lsl.w	r1, r0, r1
 80094fc:	428c      	cmp	r4, r1
 80094fe:	d10b      	bne.n	8009518 <__any_on+0x3e>
 8009500:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009504:	4293      	cmp	r3, r2
 8009506:	d803      	bhi.n	8009510 <__any_on+0x36>
 8009508:	2000      	movs	r0, #0
 800950a:	bd10      	pop	{r4, pc}
 800950c:	4603      	mov	r3, r0
 800950e:	e7f7      	b.n	8009500 <__any_on+0x26>
 8009510:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009514:	2900      	cmp	r1, #0
 8009516:	d0f5      	beq.n	8009504 <__any_on+0x2a>
 8009518:	2001      	movs	r0, #1
 800951a:	e7f6      	b.n	800950a <__any_on+0x30>

0800951c <sulp>:
 800951c:	b570      	push	{r4, r5, r6, lr}
 800951e:	4604      	mov	r4, r0
 8009520:	460d      	mov	r5, r1
 8009522:	ec45 4b10 	vmov	d0, r4, r5
 8009526:	4616      	mov	r6, r2
 8009528:	f7ff feba 	bl	80092a0 <__ulp>
 800952c:	ec51 0b10 	vmov	r0, r1, d0
 8009530:	b17e      	cbz	r6, 8009552 <sulp+0x36>
 8009532:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8009536:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800953a:	2b00      	cmp	r3, #0
 800953c:	dd09      	ble.n	8009552 <sulp+0x36>
 800953e:	051b      	lsls	r3, r3, #20
 8009540:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8009544:	2400      	movs	r4, #0
 8009546:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800954a:	4622      	mov	r2, r4
 800954c:	462b      	mov	r3, r5
 800954e:	f7f7 f86b 	bl	8000628 <__aeabi_dmul>
 8009552:	ec41 0b10 	vmov	d0, r0, r1
 8009556:	bd70      	pop	{r4, r5, r6, pc}

08009558 <_strtod_l>:
 8009558:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800955c:	b09f      	sub	sp, #124	@ 0x7c
 800955e:	460c      	mov	r4, r1
 8009560:	9217      	str	r2, [sp, #92]	@ 0x5c
 8009562:	2200      	movs	r2, #0
 8009564:	921a      	str	r2, [sp, #104]	@ 0x68
 8009566:	9005      	str	r0, [sp, #20]
 8009568:	f04f 0a00 	mov.w	sl, #0
 800956c:	f04f 0b00 	mov.w	fp, #0
 8009570:	460a      	mov	r2, r1
 8009572:	9219      	str	r2, [sp, #100]	@ 0x64
 8009574:	7811      	ldrb	r1, [r2, #0]
 8009576:	292b      	cmp	r1, #43	@ 0x2b
 8009578:	d04a      	beq.n	8009610 <_strtod_l+0xb8>
 800957a:	d838      	bhi.n	80095ee <_strtod_l+0x96>
 800957c:	290d      	cmp	r1, #13
 800957e:	d832      	bhi.n	80095e6 <_strtod_l+0x8e>
 8009580:	2908      	cmp	r1, #8
 8009582:	d832      	bhi.n	80095ea <_strtod_l+0x92>
 8009584:	2900      	cmp	r1, #0
 8009586:	d03b      	beq.n	8009600 <_strtod_l+0xa8>
 8009588:	2200      	movs	r2, #0
 800958a:	920b      	str	r2, [sp, #44]	@ 0x2c
 800958c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800958e:	782a      	ldrb	r2, [r5, #0]
 8009590:	2a30      	cmp	r2, #48	@ 0x30
 8009592:	f040 80b3 	bne.w	80096fc <_strtod_l+0x1a4>
 8009596:	786a      	ldrb	r2, [r5, #1]
 8009598:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800959c:	2a58      	cmp	r2, #88	@ 0x58
 800959e:	d16e      	bne.n	800967e <_strtod_l+0x126>
 80095a0:	9302      	str	r3, [sp, #8]
 80095a2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80095a4:	9301      	str	r3, [sp, #4]
 80095a6:	ab1a      	add	r3, sp, #104	@ 0x68
 80095a8:	9300      	str	r3, [sp, #0]
 80095aa:	4a8e      	ldr	r2, [pc, #568]	@ (80097e4 <_strtod_l+0x28c>)
 80095ac:	9805      	ldr	r0, [sp, #20]
 80095ae:	ab1b      	add	r3, sp, #108	@ 0x6c
 80095b0:	a919      	add	r1, sp, #100	@ 0x64
 80095b2:	f001 fe7b 	bl	800b2ac <__gethex>
 80095b6:	f010 060f 	ands.w	r6, r0, #15
 80095ba:	4604      	mov	r4, r0
 80095bc:	d005      	beq.n	80095ca <_strtod_l+0x72>
 80095be:	2e06      	cmp	r6, #6
 80095c0:	d128      	bne.n	8009614 <_strtod_l+0xbc>
 80095c2:	3501      	adds	r5, #1
 80095c4:	2300      	movs	r3, #0
 80095c6:	9519      	str	r5, [sp, #100]	@ 0x64
 80095c8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80095ca:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	f040 858e 	bne.w	800a0ee <_strtod_l+0xb96>
 80095d2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80095d4:	b1cb      	cbz	r3, 800960a <_strtod_l+0xb2>
 80095d6:	4652      	mov	r2, sl
 80095d8:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 80095dc:	ec43 2b10 	vmov	d0, r2, r3
 80095e0:	b01f      	add	sp, #124	@ 0x7c
 80095e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80095e6:	2920      	cmp	r1, #32
 80095e8:	d1ce      	bne.n	8009588 <_strtod_l+0x30>
 80095ea:	3201      	adds	r2, #1
 80095ec:	e7c1      	b.n	8009572 <_strtod_l+0x1a>
 80095ee:	292d      	cmp	r1, #45	@ 0x2d
 80095f0:	d1ca      	bne.n	8009588 <_strtod_l+0x30>
 80095f2:	2101      	movs	r1, #1
 80095f4:	910b      	str	r1, [sp, #44]	@ 0x2c
 80095f6:	1c51      	adds	r1, r2, #1
 80095f8:	9119      	str	r1, [sp, #100]	@ 0x64
 80095fa:	7852      	ldrb	r2, [r2, #1]
 80095fc:	2a00      	cmp	r2, #0
 80095fe:	d1c5      	bne.n	800958c <_strtod_l+0x34>
 8009600:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8009602:	9419      	str	r4, [sp, #100]	@ 0x64
 8009604:	2b00      	cmp	r3, #0
 8009606:	f040 8570 	bne.w	800a0ea <_strtod_l+0xb92>
 800960a:	4652      	mov	r2, sl
 800960c:	465b      	mov	r3, fp
 800960e:	e7e5      	b.n	80095dc <_strtod_l+0x84>
 8009610:	2100      	movs	r1, #0
 8009612:	e7ef      	b.n	80095f4 <_strtod_l+0x9c>
 8009614:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8009616:	b13a      	cbz	r2, 8009628 <_strtod_l+0xd0>
 8009618:	2135      	movs	r1, #53	@ 0x35
 800961a:	a81c      	add	r0, sp, #112	@ 0x70
 800961c:	f7ff ff3a 	bl	8009494 <__copybits>
 8009620:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009622:	9805      	ldr	r0, [sp, #20]
 8009624:	f7ff fb08 	bl	8008c38 <_Bfree>
 8009628:	3e01      	subs	r6, #1
 800962a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800962c:	2e04      	cmp	r6, #4
 800962e:	d806      	bhi.n	800963e <_strtod_l+0xe6>
 8009630:	e8df f006 	tbb	[pc, r6]
 8009634:	201d0314 	.word	0x201d0314
 8009638:	14          	.byte	0x14
 8009639:	00          	.byte	0x00
 800963a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800963e:	05e1      	lsls	r1, r4, #23
 8009640:	bf48      	it	mi
 8009642:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8009646:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800964a:	0d1b      	lsrs	r3, r3, #20
 800964c:	051b      	lsls	r3, r3, #20
 800964e:	2b00      	cmp	r3, #0
 8009650:	d1bb      	bne.n	80095ca <_strtod_l+0x72>
 8009652:	f7fe fb31 	bl	8007cb8 <__errno>
 8009656:	2322      	movs	r3, #34	@ 0x22
 8009658:	6003      	str	r3, [r0, #0]
 800965a:	e7b6      	b.n	80095ca <_strtod_l+0x72>
 800965c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8009660:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8009664:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8009668:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800966c:	e7e7      	b.n	800963e <_strtod_l+0xe6>
 800966e:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 80097ec <_strtod_l+0x294>
 8009672:	e7e4      	b.n	800963e <_strtod_l+0xe6>
 8009674:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8009678:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800967c:	e7df      	b.n	800963e <_strtod_l+0xe6>
 800967e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009680:	1c5a      	adds	r2, r3, #1
 8009682:	9219      	str	r2, [sp, #100]	@ 0x64
 8009684:	785b      	ldrb	r3, [r3, #1]
 8009686:	2b30      	cmp	r3, #48	@ 0x30
 8009688:	d0f9      	beq.n	800967e <_strtod_l+0x126>
 800968a:	2b00      	cmp	r3, #0
 800968c:	d09d      	beq.n	80095ca <_strtod_l+0x72>
 800968e:	2301      	movs	r3, #1
 8009690:	9309      	str	r3, [sp, #36]	@ 0x24
 8009692:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009694:	930c      	str	r3, [sp, #48]	@ 0x30
 8009696:	2300      	movs	r3, #0
 8009698:	9308      	str	r3, [sp, #32]
 800969a:	930a      	str	r3, [sp, #40]	@ 0x28
 800969c:	461f      	mov	r7, r3
 800969e:	220a      	movs	r2, #10
 80096a0:	9819      	ldr	r0, [sp, #100]	@ 0x64
 80096a2:	7805      	ldrb	r5, [r0, #0]
 80096a4:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 80096a8:	b2d9      	uxtb	r1, r3
 80096aa:	2909      	cmp	r1, #9
 80096ac:	d928      	bls.n	8009700 <_strtod_l+0x1a8>
 80096ae:	494e      	ldr	r1, [pc, #312]	@ (80097e8 <_strtod_l+0x290>)
 80096b0:	2201      	movs	r2, #1
 80096b2:	f001 fd06 	bl	800b0c2 <strncmp>
 80096b6:	2800      	cmp	r0, #0
 80096b8:	d032      	beq.n	8009720 <_strtod_l+0x1c8>
 80096ba:	2000      	movs	r0, #0
 80096bc:	462a      	mov	r2, r5
 80096be:	4681      	mov	r9, r0
 80096c0:	463d      	mov	r5, r7
 80096c2:	4603      	mov	r3, r0
 80096c4:	2a65      	cmp	r2, #101	@ 0x65
 80096c6:	d001      	beq.n	80096cc <_strtod_l+0x174>
 80096c8:	2a45      	cmp	r2, #69	@ 0x45
 80096ca:	d114      	bne.n	80096f6 <_strtod_l+0x19e>
 80096cc:	b91d      	cbnz	r5, 80096d6 <_strtod_l+0x17e>
 80096ce:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80096d0:	4302      	orrs	r2, r0
 80096d2:	d095      	beq.n	8009600 <_strtod_l+0xa8>
 80096d4:	2500      	movs	r5, #0
 80096d6:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 80096d8:	1c62      	adds	r2, r4, #1
 80096da:	9219      	str	r2, [sp, #100]	@ 0x64
 80096dc:	7862      	ldrb	r2, [r4, #1]
 80096de:	2a2b      	cmp	r2, #43	@ 0x2b
 80096e0:	d077      	beq.n	80097d2 <_strtod_l+0x27a>
 80096e2:	2a2d      	cmp	r2, #45	@ 0x2d
 80096e4:	d07b      	beq.n	80097de <_strtod_l+0x286>
 80096e6:	f04f 0c00 	mov.w	ip, #0
 80096ea:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 80096ee:	2909      	cmp	r1, #9
 80096f0:	f240 8082 	bls.w	80097f8 <_strtod_l+0x2a0>
 80096f4:	9419      	str	r4, [sp, #100]	@ 0x64
 80096f6:	f04f 0800 	mov.w	r8, #0
 80096fa:	e0a2      	b.n	8009842 <_strtod_l+0x2ea>
 80096fc:	2300      	movs	r3, #0
 80096fe:	e7c7      	b.n	8009690 <_strtod_l+0x138>
 8009700:	2f08      	cmp	r7, #8
 8009702:	bfd5      	itete	le
 8009704:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8009706:	9908      	ldrgt	r1, [sp, #32]
 8009708:	fb02 3301 	mlale	r3, r2, r1, r3
 800970c:	fb02 3301 	mlagt	r3, r2, r1, r3
 8009710:	f100 0001 	add.w	r0, r0, #1
 8009714:	bfd4      	ite	le
 8009716:	930a      	strle	r3, [sp, #40]	@ 0x28
 8009718:	9308      	strgt	r3, [sp, #32]
 800971a:	3701      	adds	r7, #1
 800971c:	9019      	str	r0, [sp, #100]	@ 0x64
 800971e:	e7bf      	b.n	80096a0 <_strtod_l+0x148>
 8009720:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009722:	1c5a      	adds	r2, r3, #1
 8009724:	9219      	str	r2, [sp, #100]	@ 0x64
 8009726:	785a      	ldrb	r2, [r3, #1]
 8009728:	b37f      	cbz	r7, 800978a <_strtod_l+0x232>
 800972a:	4681      	mov	r9, r0
 800972c:	463d      	mov	r5, r7
 800972e:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8009732:	2b09      	cmp	r3, #9
 8009734:	d912      	bls.n	800975c <_strtod_l+0x204>
 8009736:	2301      	movs	r3, #1
 8009738:	e7c4      	b.n	80096c4 <_strtod_l+0x16c>
 800973a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800973c:	1c5a      	adds	r2, r3, #1
 800973e:	9219      	str	r2, [sp, #100]	@ 0x64
 8009740:	785a      	ldrb	r2, [r3, #1]
 8009742:	3001      	adds	r0, #1
 8009744:	2a30      	cmp	r2, #48	@ 0x30
 8009746:	d0f8      	beq.n	800973a <_strtod_l+0x1e2>
 8009748:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800974c:	2b08      	cmp	r3, #8
 800974e:	f200 84d3 	bhi.w	800a0f8 <_strtod_l+0xba0>
 8009752:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009754:	930c      	str	r3, [sp, #48]	@ 0x30
 8009756:	4681      	mov	r9, r0
 8009758:	2000      	movs	r0, #0
 800975a:	4605      	mov	r5, r0
 800975c:	3a30      	subs	r2, #48	@ 0x30
 800975e:	f100 0301 	add.w	r3, r0, #1
 8009762:	d02a      	beq.n	80097ba <_strtod_l+0x262>
 8009764:	4499      	add	r9, r3
 8009766:	eb00 0c05 	add.w	ip, r0, r5
 800976a:	462b      	mov	r3, r5
 800976c:	210a      	movs	r1, #10
 800976e:	4563      	cmp	r3, ip
 8009770:	d10d      	bne.n	800978e <_strtod_l+0x236>
 8009772:	1c69      	adds	r1, r5, #1
 8009774:	4401      	add	r1, r0
 8009776:	4428      	add	r0, r5
 8009778:	2808      	cmp	r0, #8
 800977a:	dc16      	bgt.n	80097aa <_strtod_l+0x252>
 800977c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800977e:	230a      	movs	r3, #10
 8009780:	fb03 2300 	mla	r3, r3, r0, r2
 8009784:	930a      	str	r3, [sp, #40]	@ 0x28
 8009786:	2300      	movs	r3, #0
 8009788:	e018      	b.n	80097bc <_strtod_l+0x264>
 800978a:	4638      	mov	r0, r7
 800978c:	e7da      	b.n	8009744 <_strtod_l+0x1ec>
 800978e:	2b08      	cmp	r3, #8
 8009790:	f103 0301 	add.w	r3, r3, #1
 8009794:	dc03      	bgt.n	800979e <_strtod_l+0x246>
 8009796:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8009798:	434e      	muls	r6, r1
 800979a:	960a      	str	r6, [sp, #40]	@ 0x28
 800979c:	e7e7      	b.n	800976e <_strtod_l+0x216>
 800979e:	2b10      	cmp	r3, #16
 80097a0:	bfde      	ittt	le
 80097a2:	9e08      	ldrle	r6, [sp, #32]
 80097a4:	434e      	mulle	r6, r1
 80097a6:	9608      	strle	r6, [sp, #32]
 80097a8:	e7e1      	b.n	800976e <_strtod_l+0x216>
 80097aa:	280f      	cmp	r0, #15
 80097ac:	dceb      	bgt.n	8009786 <_strtod_l+0x22e>
 80097ae:	9808      	ldr	r0, [sp, #32]
 80097b0:	230a      	movs	r3, #10
 80097b2:	fb03 2300 	mla	r3, r3, r0, r2
 80097b6:	9308      	str	r3, [sp, #32]
 80097b8:	e7e5      	b.n	8009786 <_strtod_l+0x22e>
 80097ba:	4629      	mov	r1, r5
 80097bc:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80097be:	1c50      	adds	r0, r2, #1
 80097c0:	9019      	str	r0, [sp, #100]	@ 0x64
 80097c2:	7852      	ldrb	r2, [r2, #1]
 80097c4:	4618      	mov	r0, r3
 80097c6:	460d      	mov	r5, r1
 80097c8:	e7b1      	b.n	800972e <_strtod_l+0x1d6>
 80097ca:	f04f 0900 	mov.w	r9, #0
 80097ce:	2301      	movs	r3, #1
 80097d0:	e77d      	b.n	80096ce <_strtod_l+0x176>
 80097d2:	f04f 0c00 	mov.w	ip, #0
 80097d6:	1ca2      	adds	r2, r4, #2
 80097d8:	9219      	str	r2, [sp, #100]	@ 0x64
 80097da:	78a2      	ldrb	r2, [r4, #2]
 80097dc:	e785      	b.n	80096ea <_strtod_l+0x192>
 80097de:	f04f 0c01 	mov.w	ip, #1
 80097e2:	e7f8      	b.n	80097d6 <_strtod_l+0x27e>
 80097e4:	0800bfd8 	.word	0x0800bfd8
 80097e8:	0800bfc0 	.word	0x0800bfc0
 80097ec:	7ff00000 	.word	0x7ff00000
 80097f0:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80097f2:	1c51      	adds	r1, r2, #1
 80097f4:	9119      	str	r1, [sp, #100]	@ 0x64
 80097f6:	7852      	ldrb	r2, [r2, #1]
 80097f8:	2a30      	cmp	r2, #48	@ 0x30
 80097fa:	d0f9      	beq.n	80097f0 <_strtod_l+0x298>
 80097fc:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8009800:	2908      	cmp	r1, #8
 8009802:	f63f af78 	bhi.w	80096f6 <_strtod_l+0x19e>
 8009806:	3a30      	subs	r2, #48	@ 0x30
 8009808:	920e      	str	r2, [sp, #56]	@ 0x38
 800980a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800980c:	920f      	str	r2, [sp, #60]	@ 0x3c
 800980e:	f04f 080a 	mov.w	r8, #10
 8009812:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009814:	1c56      	adds	r6, r2, #1
 8009816:	9619      	str	r6, [sp, #100]	@ 0x64
 8009818:	7852      	ldrb	r2, [r2, #1]
 800981a:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800981e:	f1be 0f09 	cmp.w	lr, #9
 8009822:	d939      	bls.n	8009898 <_strtod_l+0x340>
 8009824:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8009826:	1a76      	subs	r6, r6, r1
 8009828:	2e08      	cmp	r6, #8
 800982a:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800982e:	dc03      	bgt.n	8009838 <_strtod_l+0x2e0>
 8009830:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8009832:	4588      	cmp	r8, r1
 8009834:	bfa8      	it	ge
 8009836:	4688      	movge	r8, r1
 8009838:	f1bc 0f00 	cmp.w	ip, #0
 800983c:	d001      	beq.n	8009842 <_strtod_l+0x2ea>
 800983e:	f1c8 0800 	rsb	r8, r8, #0
 8009842:	2d00      	cmp	r5, #0
 8009844:	d14e      	bne.n	80098e4 <_strtod_l+0x38c>
 8009846:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009848:	4308      	orrs	r0, r1
 800984a:	f47f aebe 	bne.w	80095ca <_strtod_l+0x72>
 800984e:	2b00      	cmp	r3, #0
 8009850:	f47f aed6 	bne.w	8009600 <_strtod_l+0xa8>
 8009854:	2a69      	cmp	r2, #105	@ 0x69
 8009856:	d028      	beq.n	80098aa <_strtod_l+0x352>
 8009858:	dc25      	bgt.n	80098a6 <_strtod_l+0x34e>
 800985a:	2a49      	cmp	r2, #73	@ 0x49
 800985c:	d025      	beq.n	80098aa <_strtod_l+0x352>
 800985e:	2a4e      	cmp	r2, #78	@ 0x4e
 8009860:	f47f aece 	bne.w	8009600 <_strtod_l+0xa8>
 8009864:	499b      	ldr	r1, [pc, #620]	@ (8009ad4 <_strtod_l+0x57c>)
 8009866:	a819      	add	r0, sp, #100	@ 0x64
 8009868:	f001 ff42 	bl	800b6f0 <__match>
 800986c:	2800      	cmp	r0, #0
 800986e:	f43f aec7 	beq.w	8009600 <_strtod_l+0xa8>
 8009872:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009874:	781b      	ldrb	r3, [r3, #0]
 8009876:	2b28      	cmp	r3, #40	@ 0x28
 8009878:	d12e      	bne.n	80098d8 <_strtod_l+0x380>
 800987a:	4997      	ldr	r1, [pc, #604]	@ (8009ad8 <_strtod_l+0x580>)
 800987c:	aa1c      	add	r2, sp, #112	@ 0x70
 800987e:	a819      	add	r0, sp, #100	@ 0x64
 8009880:	f001 ff4a 	bl	800b718 <__hexnan>
 8009884:	2805      	cmp	r0, #5
 8009886:	d127      	bne.n	80098d8 <_strtod_l+0x380>
 8009888:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800988a:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800988e:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8009892:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8009896:	e698      	b.n	80095ca <_strtod_l+0x72>
 8009898:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800989a:	fb08 2101 	mla	r1, r8, r1, r2
 800989e:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 80098a2:	920e      	str	r2, [sp, #56]	@ 0x38
 80098a4:	e7b5      	b.n	8009812 <_strtod_l+0x2ba>
 80098a6:	2a6e      	cmp	r2, #110	@ 0x6e
 80098a8:	e7da      	b.n	8009860 <_strtod_l+0x308>
 80098aa:	498c      	ldr	r1, [pc, #560]	@ (8009adc <_strtod_l+0x584>)
 80098ac:	a819      	add	r0, sp, #100	@ 0x64
 80098ae:	f001 ff1f 	bl	800b6f0 <__match>
 80098b2:	2800      	cmp	r0, #0
 80098b4:	f43f aea4 	beq.w	8009600 <_strtod_l+0xa8>
 80098b8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80098ba:	4989      	ldr	r1, [pc, #548]	@ (8009ae0 <_strtod_l+0x588>)
 80098bc:	3b01      	subs	r3, #1
 80098be:	a819      	add	r0, sp, #100	@ 0x64
 80098c0:	9319      	str	r3, [sp, #100]	@ 0x64
 80098c2:	f001 ff15 	bl	800b6f0 <__match>
 80098c6:	b910      	cbnz	r0, 80098ce <_strtod_l+0x376>
 80098c8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80098ca:	3301      	adds	r3, #1
 80098cc:	9319      	str	r3, [sp, #100]	@ 0x64
 80098ce:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8009af0 <_strtod_l+0x598>
 80098d2:	f04f 0a00 	mov.w	sl, #0
 80098d6:	e678      	b.n	80095ca <_strtod_l+0x72>
 80098d8:	4882      	ldr	r0, [pc, #520]	@ (8009ae4 <_strtod_l+0x58c>)
 80098da:	f001 fc45 	bl	800b168 <nan>
 80098de:	ec5b ab10 	vmov	sl, fp, d0
 80098e2:	e672      	b.n	80095ca <_strtod_l+0x72>
 80098e4:	eba8 0309 	sub.w	r3, r8, r9
 80098e8:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80098ea:	9309      	str	r3, [sp, #36]	@ 0x24
 80098ec:	2f00      	cmp	r7, #0
 80098ee:	bf08      	it	eq
 80098f0:	462f      	moveq	r7, r5
 80098f2:	2d10      	cmp	r5, #16
 80098f4:	462c      	mov	r4, r5
 80098f6:	bfa8      	it	ge
 80098f8:	2410      	movge	r4, #16
 80098fa:	f7f6 fe1b 	bl	8000534 <__aeabi_ui2d>
 80098fe:	2d09      	cmp	r5, #9
 8009900:	4682      	mov	sl, r0
 8009902:	468b      	mov	fp, r1
 8009904:	dc13      	bgt.n	800992e <_strtod_l+0x3d6>
 8009906:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009908:	2b00      	cmp	r3, #0
 800990a:	f43f ae5e 	beq.w	80095ca <_strtod_l+0x72>
 800990e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009910:	dd78      	ble.n	8009a04 <_strtod_l+0x4ac>
 8009912:	2b16      	cmp	r3, #22
 8009914:	dc5f      	bgt.n	80099d6 <_strtod_l+0x47e>
 8009916:	4974      	ldr	r1, [pc, #464]	@ (8009ae8 <_strtod_l+0x590>)
 8009918:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800991c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009920:	4652      	mov	r2, sl
 8009922:	465b      	mov	r3, fp
 8009924:	f7f6 fe80 	bl	8000628 <__aeabi_dmul>
 8009928:	4682      	mov	sl, r0
 800992a:	468b      	mov	fp, r1
 800992c:	e64d      	b.n	80095ca <_strtod_l+0x72>
 800992e:	4b6e      	ldr	r3, [pc, #440]	@ (8009ae8 <_strtod_l+0x590>)
 8009930:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009934:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8009938:	f7f6 fe76 	bl	8000628 <__aeabi_dmul>
 800993c:	4682      	mov	sl, r0
 800993e:	9808      	ldr	r0, [sp, #32]
 8009940:	468b      	mov	fp, r1
 8009942:	f7f6 fdf7 	bl	8000534 <__aeabi_ui2d>
 8009946:	4602      	mov	r2, r0
 8009948:	460b      	mov	r3, r1
 800994a:	4650      	mov	r0, sl
 800994c:	4659      	mov	r1, fp
 800994e:	f7f6 fcb5 	bl	80002bc <__adddf3>
 8009952:	2d0f      	cmp	r5, #15
 8009954:	4682      	mov	sl, r0
 8009956:	468b      	mov	fp, r1
 8009958:	ddd5      	ble.n	8009906 <_strtod_l+0x3ae>
 800995a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800995c:	1b2c      	subs	r4, r5, r4
 800995e:	441c      	add	r4, r3
 8009960:	2c00      	cmp	r4, #0
 8009962:	f340 8096 	ble.w	8009a92 <_strtod_l+0x53a>
 8009966:	f014 030f 	ands.w	r3, r4, #15
 800996a:	d00a      	beq.n	8009982 <_strtod_l+0x42a>
 800996c:	495e      	ldr	r1, [pc, #376]	@ (8009ae8 <_strtod_l+0x590>)
 800996e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009972:	4652      	mov	r2, sl
 8009974:	465b      	mov	r3, fp
 8009976:	e9d1 0100 	ldrd	r0, r1, [r1]
 800997a:	f7f6 fe55 	bl	8000628 <__aeabi_dmul>
 800997e:	4682      	mov	sl, r0
 8009980:	468b      	mov	fp, r1
 8009982:	f034 040f 	bics.w	r4, r4, #15
 8009986:	d073      	beq.n	8009a70 <_strtod_l+0x518>
 8009988:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800998c:	dd48      	ble.n	8009a20 <_strtod_l+0x4c8>
 800998e:	2400      	movs	r4, #0
 8009990:	46a0      	mov	r8, r4
 8009992:	940a      	str	r4, [sp, #40]	@ 0x28
 8009994:	46a1      	mov	r9, r4
 8009996:	9a05      	ldr	r2, [sp, #20]
 8009998:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8009af0 <_strtod_l+0x598>
 800999c:	2322      	movs	r3, #34	@ 0x22
 800999e:	6013      	str	r3, [r2, #0]
 80099a0:	f04f 0a00 	mov.w	sl, #0
 80099a4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	f43f ae0f 	beq.w	80095ca <_strtod_l+0x72>
 80099ac:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80099ae:	9805      	ldr	r0, [sp, #20]
 80099b0:	f7ff f942 	bl	8008c38 <_Bfree>
 80099b4:	9805      	ldr	r0, [sp, #20]
 80099b6:	4649      	mov	r1, r9
 80099b8:	f7ff f93e 	bl	8008c38 <_Bfree>
 80099bc:	9805      	ldr	r0, [sp, #20]
 80099be:	4641      	mov	r1, r8
 80099c0:	f7ff f93a 	bl	8008c38 <_Bfree>
 80099c4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80099c6:	9805      	ldr	r0, [sp, #20]
 80099c8:	f7ff f936 	bl	8008c38 <_Bfree>
 80099cc:	9805      	ldr	r0, [sp, #20]
 80099ce:	4621      	mov	r1, r4
 80099d0:	f7ff f932 	bl	8008c38 <_Bfree>
 80099d4:	e5f9      	b.n	80095ca <_strtod_l+0x72>
 80099d6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80099d8:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 80099dc:	4293      	cmp	r3, r2
 80099de:	dbbc      	blt.n	800995a <_strtod_l+0x402>
 80099e0:	4c41      	ldr	r4, [pc, #260]	@ (8009ae8 <_strtod_l+0x590>)
 80099e2:	f1c5 050f 	rsb	r5, r5, #15
 80099e6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80099ea:	4652      	mov	r2, sl
 80099ec:	465b      	mov	r3, fp
 80099ee:	e9d1 0100 	ldrd	r0, r1, [r1]
 80099f2:	f7f6 fe19 	bl	8000628 <__aeabi_dmul>
 80099f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80099f8:	1b5d      	subs	r5, r3, r5
 80099fa:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80099fe:	e9d4 2300 	ldrd	r2, r3, [r4]
 8009a02:	e78f      	b.n	8009924 <_strtod_l+0x3cc>
 8009a04:	3316      	adds	r3, #22
 8009a06:	dba8      	blt.n	800995a <_strtod_l+0x402>
 8009a08:	4b37      	ldr	r3, [pc, #220]	@ (8009ae8 <_strtod_l+0x590>)
 8009a0a:	eba9 0808 	sub.w	r8, r9, r8
 8009a0e:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8009a12:	e9d8 2300 	ldrd	r2, r3, [r8]
 8009a16:	4650      	mov	r0, sl
 8009a18:	4659      	mov	r1, fp
 8009a1a:	f7f6 ff2f 	bl	800087c <__aeabi_ddiv>
 8009a1e:	e783      	b.n	8009928 <_strtod_l+0x3d0>
 8009a20:	4b32      	ldr	r3, [pc, #200]	@ (8009aec <_strtod_l+0x594>)
 8009a22:	9308      	str	r3, [sp, #32]
 8009a24:	2300      	movs	r3, #0
 8009a26:	1124      	asrs	r4, r4, #4
 8009a28:	4650      	mov	r0, sl
 8009a2a:	4659      	mov	r1, fp
 8009a2c:	461e      	mov	r6, r3
 8009a2e:	2c01      	cmp	r4, #1
 8009a30:	dc21      	bgt.n	8009a76 <_strtod_l+0x51e>
 8009a32:	b10b      	cbz	r3, 8009a38 <_strtod_l+0x4e0>
 8009a34:	4682      	mov	sl, r0
 8009a36:	468b      	mov	fp, r1
 8009a38:	492c      	ldr	r1, [pc, #176]	@ (8009aec <_strtod_l+0x594>)
 8009a3a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8009a3e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8009a42:	4652      	mov	r2, sl
 8009a44:	465b      	mov	r3, fp
 8009a46:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009a4a:	f7f6 fded 	bl	8000628 <__aeabi_dmul>
 8009a4e:	4b28      	ldr	r3, [pc, #160]	@ (8009af0 <_strtod_l+0x598>)
 8009a50:	460a      	mov	r2, r1
 8009a52:	400b      	ands	r3, r1
 8009a54:	4927      	ldr	r1, [pc, #156]	@ (8009af4 <_strtod_l+0x59c>)
 8009a56:	428b      	cmp	r3, r1
 8009a58:	4682      	mov	sl, r0
 8009a5a:	d898      	bhi.n	800998e <_strtod_l+0x436>
 8009a5c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8009a60:	428b      	cmp	r3, r1
 8009a62:	bf86      	itte	hi
 8009a64:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8009af8 <_strtod_l+0x5a0>
 8009a68:	f04f 3aff 	movhi.w	sl, #4294967295	@ 0xffffffff
 8009a6c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8009a70:	2300      	movs	r3, #0
 8009a72:	9308      	str	r3, [sp, #32]
 8009a74:	e07a      	b.n	8009b6c <_strtod_l+0x614>
 8009a76:	07e2      	lsls	r2, r4, #31
 8009a78:	d505      	bpl.n	8009a86 <_strtod_l+0x52e>
 8009a7a:	9b08      	ldr	r3, [sp, #32]
 8009a7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a80:	f7f6 fdd2 	bl	8000628 <__aeabi_dmul>
 8009a84:	2301      	movs	r3, #1
 8009a86:	9a08      	ldr	r2, [sp, #32]
 8009a88:	3208      	adds	r2, #8
 8009a8a:	3601      	adds	r6, #1
 8009a8c:	1064      	asrs	r4, r4, #1
 8009a8e:	9208      	str	r2, [sp, #32]
 8009a90:	e7cd      	b.n	8009a2e <_strtod_l+0x4d6>
 8009a92:	d0ed      	beq.n	8009a70 <_strtod_l+0x518>
 8009a94:	4264      	negs	r4, r4
 8009a96:	f014 020f 	ands.w	r2, r4, #15
 8009a9a:	d00a      	beq.n	8009ab2 <_strtod_l+0x55a>
 8009a9c:	4b12      	ldr	r3, [pc, #72]	@ (8009ae8 <_strtod_l+0x590>)
 8009a9e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009aa2:	4650      	mov	r0, sl
 8009aa4:	4659      	mov	r1, fp
 8009aa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009aaa:	f7f6 fee7 	bl	800087c <__aeabi_ddiv>
 8009aae:	4682      	mov	sl, r0
 8009ab0:	468b      	mov	fp, r1
 8009ab2:	1124      	asrs	r4, r4, #4
 8009ab4:	d0dc      	beq.n	8009a70 <_strtod_l+0x518>
 8009ab6:	2c1f      	cmp	r4, #31
 8009ab8:	dd20      	ble.n	8009afc <_strtod_l+0x5a4>
 8009aba:	2400      	movs	r4, #0
 8009abc:	46a0      	mov	r8, r4
 8009abe:	940a      	str	r4, [sp, #40]	@ 0x28
 8009ac0:	46a1      	mov	r9, r4
 8009ac2:	9a05      	ldr	r2, [sp, #20]
 8009ac4:	2322      	movs	r3, #34	@ 0x22
 8009ac6:	f04f 0a00 	mov.w	sl, #0
 8009aca:	f04f 0b00 	mov.w	fp, #0
 8009ace:	6013      	str	r3, [r2, #0]
 8009ad0:	e768      	b.n	80099a4 <_strtod_l+0x44c>
 8009ad2:	bf00      	nop
 8009ad4:	0800bdae 	.word	0x0800bdae
 8009ad8:	0800bfc4 	.word	0x0800bfc4
 8009adc:	0800bda6 	.word	0x0800bda6
 8009ae0:	0800bddb 	.word	0x0800bddb
 8009ae4:	0800c087 	.word	0x0800c087
 8009ae8:	0800bef8 	.word	0x0800bef8
 8009aec:	0800bed0 	.word	0x0800bed0
 8009af0:	7ff00000 	.word	0x7ff00000
 8009af4:	7ca00000 	.word	0x7ca00000
 8009af8:	7fefffff 	.word	0x7fefffff
 8009afc:	f014 0310 	ands.w	r3, r4, #16
 8009b00:	bf18      	it	ne
 8009b02:	236a      	movne	r3, #106	@ 0x6a
 8009b04:	4ea9      	ldr	r6, [pc, #676]	@ (8009dac <_strtod_l+0x854>)
 8009b06:	9308      	str	r3, [sp, #32]
 8009b08:	4650      	mov	r0, sl
 8009b0a:	4659      	mov	r1, fp
 8009b0c:	2300      	movs	r3, #0
 8009b0e:	07e2      	lsls	r2, r4, #31
 8009b10:	d504      	bpl.n	8009b1c <_strtod_l+0x5c4>
 8009b12:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009b16:	f7f6 fd87 	bl	8000628 <__aeabi_dmul>
 8009b1a:	2301      	movs	r3, #1
 8009b1c:	1064      	asrs	r4, r4, #1
 8009b1e:	f106 0608 	add.w	r6, r6, #8
 8009b22:	d1f4      	bne.n	8009b0e <_strtod_l+0x5b6>
 8009b24:	b10b      	cbz	r3, 8009b2a <_strtod_l+0x5d2>
 8009b26:	4682      	mov	sl, r0
 8009b28:	468b      	mov	fp, r1
 8009b2a:	9b08      	ldr	r3, [sp, #32]
 8009b2c:	b1b3      	cbz	r3, 8009b5c <_strtod_l+0x604>
 8009b2e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8009b32:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	4659      	mov	r1, fp
 8009b3a:	dd0f      	ble.n	8009b5c <_strtod_l+0x604>
 8009b3c:	2b1f      	cmp	r3, #31
 8009b3e:	dd55      	ble.n	8009bec <_strtod_l+0x694>
 8009b40:	2b34      	cmp	r3, #52	@ 0x34
 8009b42:	bfde      	ittt	le
 8009b44:	f04f 33ff 	movle.w	r3, #4294967295	@ 0xffffffff
 8009b48:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8009b4c:	4093      	lslle	r3, r2
 8009b4e:	f04f 0a00 	mov.w	sl, #0
 8009b52:	bfcc      	ite	gt
 8009b54:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8009b58:	ea03 0b01 	andle.w	fp, r3, r1
 8009b5c:	2200      	movs	r2, #0
 8009b5e:	2300      	movs	r3, #0
 8009b60:	4650      	mov	r0, sl
 8009b62:	4659      	mov	r1, fp
 8009b64:	f7f6 ffc8 	bl	8000af8 <__aeabi_dcmpeq>
 8009b68:	2800      	cmp	r0, #0
 8009b6a:	d1a6      	bne.n	8009aba <_strtod_l+0x562>
 8009b6c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009b6e:	9300      	str	r3, [sp, #0]
 8009b70:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8009b72:	9805      	ldr	r0, [sp, #20]
 8009b74:	462b      	mov	r3, r5
 8009b76:	463a      	mov	r2, r7
 8009b78:	f7ff f8c6 	bl	8008d08 <__s2b>
 8009b7c:	900a      	str	r0, [sp, #40]	@ 0x28
 8009b7e:	2800      	cmp	r0, #0
 8009b80:	f43f af05 	beq.w	800998e <_strtod_l+0x436>
 8009b84:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009b86:	2a00      	cmp	r2, #0
 8009b88:	eba9 0308 	sub.w	r3, r9, r8
 8009b8c:	bfa8      	it	ge
 8009b8e:	2300      	movge	r3, #0
 8009b90:	9312      	str	r3, [sp, #72]	@ 0x48
 8009b92:	2400      	movs	r4, #0
 8009b94:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8009b98:	9316      	str	r3, [sp, #88]	@ 0x58
 8009b9a:	46a0      	mov	r8, r4
 8009b9c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009b9e:	9805      	ldr	r0, [sp, #20]
 8009ba0:	6859      	ldr	r1, [r3, #4]
 8009ba2:	f7ff f809 	bl	8008bb8 <_Balloc>
 8009ba6:	4681      	mov	r9, r0
 8009ba8:	2800      	cmp	r0, #0
 8009baa:	f43f aef4 	beq.w	8009996 <_strtod_l+0x43e>
 8009bae:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009bb0:	691a      	ldr	r2, [r3, #16]
 8009bb2:	3202      	adds	r2, #2
 8009bb4:	f103 010c 	add.w	r1, r3, #12
 8009bb8:	0092      	lsls	r2, r2, #2
 8009bba:	300c      	adds	r0, #12
 8009bbc:	f001 fac6 	bl	800b14c <memcpy>
 8009bc0:	ec4b ab10 	vmov	d0, sl, fp
 8009bc4:	9805      	ldr	r0, [sp, #20]
 8009bc6:	aa1c      	add	r2, sp, #112	@ 0x70
 8009bc8:	a91b      	add	r1, sp, #108	@ 0x6c
 8009bca:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8009bce:	f7ff fbd7 	bl	8009380 <__d2b>
 8009bd2:	901a      	str	r0, [sp, #104]	@ 0x68
 8009bd4:	2800      	cmp	r0, #0
 8009bd6:	f43f aede 	beq.w	8009996 <_strtod_l+0x43e>
 8009bda:	9805      	ldr	r0, [sp, #20]
 8009bdc:	2101      	movs	r1, #1
 8009bde:	f7ff f929 	bl	8008e34 <__i2b>
 8009be2:	4680      	mov	r8, r0
 8009be4:	b948      	cbnz	r0, 8009bfa <_strtod_l+0x6a2>
 8009be6:	f04f 0800 	mov.w	r8, #0
 8009bea:	e6d4      	b.n	8009996 <_strtod_l+0x43e>
 8009bec:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8009bf4:	ea03 0a0a 	and.w	sl, r3, sl
 8009bf8:	e7b0      	b.n	8009b5c <_strtod_l+0x604>
 8009bfa:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8009bfc:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8009bfe:	2d00      	cmp	r5, #0
 8009c00:	bfab      	itete	ge
 8009c02:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8009c04:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8009c06:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8009c08:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8009c0a:	bfac      	ite	ge
 8009c0c:	18ef      	addge	r7, r5, r3
 8009c0e:	1b5e      	sublt	r6, r3, r5
 8009c10:	9b08      	ldr	r3, [sp, #32]
 8009c12:	1aed      	subs	r5, r5, r3
 8009c14:	4415      	add	r5, r2
 8009c16:	4b66      	ldr	r3, [pc, #408]	@ (8009db0 <_strtod_l+0x858>)
 8009c18:	3d01      	subs	r5, #1
 8009c1a:	429d      	cmp	r5, r3
 8009c1c:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8009c20:	da50      	bge.n	8009cc4 <_strtod_l+0x76c>
 8009c22:	1b5b      	subs	r3, r3, r5
 8009c24:	2b1f      	cmp	r3, #31
 8009c26:	eba2 0203 	sub.w	r2, r2, r3
 8009c2a:	f04f 0101 	mov.w	r1, #1
 8009c2e:	dc3d      	bgt.n	8009cac <_strtod_l+0x754>
 8009c30:	fa01 f303 	lsl.w	r3, r1, r3
 8009c34:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009c36:	2300      	movs	r3, #0
 8009c38:	9310      	str	r3, [sp, #64]	@ 0x40
 8009c3a:	18bd      	adds	r5, r7, r2
 8009c3c:	9b08      	ldr	r3, [sp, #32]
 8009c3e:	42af      	cmp	r7, r5
 8009c40:	4416      	add	r6, r2
 8009c42:	441e      	add	r6, r3
 8009c44:	463b      	mov	r3, r7
 8009c46:	bfa8      	it	ge
 8009c48:	462b      	movge	r3, r5
 8009c4a:	42b3      	cmp	r3, r6
 8009c4c:	bfa8      	it	ge
 8009c4e:	4633      	movge	r3, r6
 8009c50:	2b00      	cmp	r3, #0
 8009c52:	bfc2      	ittt	gt
 8009c54:	1aed      	subgt	r5, r5, r3
 8009c56:	1af6      	subgt	r6, r6, r3
 8009c58:	1aff      	subgt	r7, r7, r3
 8009c5a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	dd16      	ble.n	8009c8e <_strtod_l+0x736>
 8009c60:	4641      	mov	r1, r8
 8009c62:	9805      	ldr	r0, [sp, #20]
 8009c64:	461a      	mov	r2, r3
 8009c66:	f7ff f9a5 	bl	8008fb4 <__pow5mult>
 8009c6a:	4680      	mov	r8, r0
 8009c6c:	2800      	cmp	r0, #0
 8009c6e:	d0ba      	beq.n	8009be6 <_strtod_l+0x68e>
 8009c70:	4601      	mov	r1, r0
 8009c72:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8009c74:	9805      	ldr	r0, [sp, #20]
 8009c76:	f7ff f8f3 	bl	8008e60 <__multiply>
 8009c7a:	900e      	str	r0, [sp, #56]	@ 0x38
 8009c7c:	2800      	cmp	r0, #0
 8009c7e:	f43f ae8a 	beq.w	8009996 <_strtod_l+0x43e>
 8009c82:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009c84:	9805      	ldr	r0, [sp, #20]
 8009c86:	f7fe ffd7 	bl	8008c38 <_Bfree>
 8009c8a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009c8c:	931a      	str	r3, [sp, #104]	@ 0x68
 8009c8e:	2d00      	cmp	r5, #0
 8009c90:	dc1d      	bgt.n	8009cce <_strtod_l+0x776>
 8009c92:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	dd23      	ble.n	8009ce0 <_strtod_l+0x788>
 8009c98:	4649      	mov	r1, r9
 8009c9a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8009c9c:	9805      	ldr	r0, [sp, #20]
 8009c9e:	f7ff f989 	bl	8008fb4 <__pow5mult>
 8009ca2:	4681      	mov	r9, r0
 8009ca4:	b9e0      	cbnz	r0, 8009ce0 <_strtod_l+0x788>
 8009ca6:	f04f 0900 	mov.w	r9, #0
 8009caa:	e674      	b.n	8009996 <_strtod_l+0x43e>
 8009cac:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8009cb0:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8009cb4:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8009cb8:	35e2      	adds	r5, #226	@ 0xe2
 8009cba:	fa01 f305 	lsl.w	r3, r1, r5
 8009cbe:	9310      	str	r3, [sp, #64]	@ 0x40
 8009cc0:	9113      	str	r1, [sp, #76]	@ 0x4c
 8009cc2:	e7ba      	b.n	8009c3a <_strtod_l+0x6e2>
 8009cc4:	2300      	movs	r3, #0
 8009cc6:	9310      	str	r3, [sp, #64]	@ 0x40
 8009cc8:	2301      	movs	r3, #1
 8009cca:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009ccc:	e7b5      	b.n	8009c3a <_strtod_l+0x6e2>
 8009cce:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009cd0:	9805      	ldr	r0, [sp, #20]
 8009cd2:	462a      	mov	r2, r5
 8009cd4:	f7ff f9c8 	bl	8009068 <__lshift>
 8009cd8:	901a      	str	r0, [sp, #104]	@ 0x68
 8009cda:	2800      	cmp	r0, #0
 8009cdc:	d1d9      	bne.n	8009c92 <_strtod_l+0x73a>
 8009cde:	e65a      	b.n	8009996 <_strtod_l+0x43e>
 8009ce0:	2e00      	cmp	r6, #0
 8009ce2:	dd07      	ble.n	8009cf4 <_strtod_l+0x79c>
 8009ce4:	4649      	mov	r1, r9
 8009ce6:	9805      	ldr	r0, [sp, #20]
 8009ce8:	4632      	mov	r2, r6
 8009cea:	f7ff f9bd 	bl	8009068 <__lshift>
 8009cee:	4681      	mov	r9, r0
 8009cf0:	2800      	cmp	r0, #0
 8009cf2:	d0d8      	beq.n	8009ca6 <_strtod_l+0x74e>
 8009cf4:	2f00      	cmp	r7, #0
 8009cf6:	dd08      	ble.n	8009d0a <_strtod_l+0x7b2>
 8009cf8:	4641      	mov	r1, r8
 8009cfa:	9805      	ldr	r0, [sp, #20]
 8009cfc:	463a      	mov	r2, r7
 8009cfe:	f7ff f9b3 	bl	8009068 <__lshift>
 8009d02:	4680      	mov	r8, r0
 8009d04:	2800      	cmp	r0, #0
 8009d06:	f43f ae46 	beq.w	8009996 <_strtod_l+0x43e>
 8009d0a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009d0c:	9805      	ldr	r0, [sp, #20]
 8009d0e:	464a      	mov	r2, r9
 8009d10:	f7ff fa32 	bl	8009178 <__mdiff>
 8009d14:	4604      	mov	r4, r0
 8009d16:	2800      	cmp	r0, #0
 8009d18:	f43f ae3d 	beq.w	8009996 <_strtod_l+0x43e>
 8009d1c:	68c3      	ldr	r3, [r0, #12]
 8009d1e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009d20:	2300      	movs	r3, #0
 8009d22:	60c3      	str	r3, [r0, #12]
 8009d24:	4641      	mov	r1, r8
 8009d26:	f7ff fa0b 	bl	8009140 <__mcmp>
 8009d2a:	2800      	cmp	r0, #0
 8009d2c:	da46      	bge.n	8009dbc <_strtod_l+0x864>
 8009d2e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009d30:	ea53 030a 	orrs.w	r3, r3, sl
 8009d34:	d16c      	bne.n	8009e10 <_strtod_l+0x8b8>
 8009d36:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009d3a:	2b00      	cmp	r3, #0
 8009d3c:	d168      	bne.n	8009e10 <_strtod_l+0x8b8>
 8009d3e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009d42:	0d1b      	lsrs	r3, r3, #20
 8009d44:	051b      	lsls	r3, r3, #20
 8009d46:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8009d4a:	d961      	bls.n	8009e10 <_strtod_l+0x8b8>
 8009d4c:	6963      	ldr	r3, [r4, #20]
 8009d4e:	b913      	cbnz	r3, 8009d56 <_strtod_l+0x7fe>
 8009d50:	6923      	ldr	r3, [r4, #16]
 8009d52:	2b01      	cmp	r3, #1
 8009d54:	dd5c      	ble.n	8009e10 <_strtod_l+0x8b8>
 8009d56:	4621      	mov	r1, r4
 8009d58:	2201      	movs	r2, #1
 8009d5a:	9805      	ldr	r0, [sp, #20]
 8009d5c:	f7ff f984 	bl	8009068 <__lshift>
 8009d60:	4641      	mov	r1, r8
 8009d62:	4604      	mov	r4, r0
 8009d64:	f7ff f9ec 	bl	8009140 <__mcmp>
 8009d68:	2800      	cmp	r0, #0
 8009d6a:	dd51      	ble.n	8009e10 <_strtod_l+0x8b8>
 8009d6c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009d70:	9a08      	ldr	r2, [sp, #32]
 8009d72:	0d1b      	lsrs	r3, r3, #20
 8009d74:	051b      	lsls	r3, r3, #20
 8009d76:	2a00      	cmp	r2, #0
 8009d78:	d06b      	beq.n	8009e52 <_strtod_l+0x8fa>
 8009d7a:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8009d7e:	d868      	bhi.n	8009e52 <_strtod_l+0x8fa>
 8009d80:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8009d84:	f67f ae9d 	bls.w	8009ac2 <_strtod_l+0x56a>
 8009d88:	4b0a      	ldr	r3, [pc, #40]	@ (8009db4 <_strtod_l+0x85c>)
 8009d8a:	4650      	mov	r0, sl
 8009d8c:	4659      	mov	r1, fp
 8009d8e:	2200      	movs	r2, #0
 8009d90:	f7f6 fc4a 	bl	8000628 <__aeabi_dmul>
 8009d94:	4b08      	ldr	r3, [pc, #32]	@ (8009db8 <_strtod_l+0x860>)
 8009d96:	400b      	ands	r3, r1
 8009d98:	4682      	mov	sl, r0
 8009d9a:	468b      	mov	fp, r1
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	f47f ae05 	bne.w	80099ac <_strtod_l+0x454>
 8009da2:	9a05      	ldr	r2, [sp, #20]
 8009da4:	2322      	movs	r3, #34	@ 0x22
 8009da6:	6013      	str	r3, [r2, #0]
 8009da8:	e600      	b.n	80099ac <_strtod_l+0x454>
 8009daa:	bf00      	nop
 8009dac:	0800bff0 	.word	0x0800bff0
 8009db0:	fffffc02 	.word	0xfffffc02
 8009db4:	39500000 	.word	0x39500000
 8009db8:	7ff00000 	.word	0x7ff00000
 8009dbc:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8009dc0:	d165      	bne.n	8009e8e <_strtod_l+0x936>
 8009dc2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8009dc4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009dc8:	b35a      	cbz	r2, 8009e22 <_strtod_l+0x8ca>
 8009dca:	4a9f      	ldr	r2, [pc, #636]	@ (800a048 <_strtod_l+0xaf0>)
 8009dcc:	4293      	cmp	r3, r2
 8009dce:	d12b      	bne.n	8009e28 <_strtod_l+0x8d0>
 8009dd0:	9b08      	ldr	r3, [sp, #32]
 8009dd2:	4651      	mov	r1, sl
 8009dd4:	b303      	cbz	r3, 8009e18 <_strtod_l+0x8c0>
 8009dd6:	4b9d      	ldr	r3, [pc, #628]	@ (800a04c <_strtod_l+0xaf4>)
 8009dd8:	465a      	mov	r2, fp
 8009dda:	4013      	ands	r3, r2
 8009ddc:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8009de0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009de4:	d81b      	bhi.n	8009e1e <_strtod_l+0x8c6>
 8009de6:	0d1b      	lsrs	r3, r3, #20
 8009de8:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8009dec:	fa02 f303 	lsl.w	r3, r2, r3
 8009df0:	4299      	cmp	r1, r3
 8009df2:	d119      	bne.n	8009e28 <_strtod_l+0x8d0>
 8009df4:	4b96      	ldr	r3, [pc, #600]	@ (800a050 <_strtod_l+0xaf8>)
 8009df6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009df8:	429a      	cmp	r2, r3
 8009dfa:	d102      	bne.n	8009e02 <_strtod_l+0x8aa>
 8009dfc:	3101      	adds	r1, #1
 8009dfe:	f43f adca 	beq.w	8009996 <_strtod_l+0x43e>
 8009e02:	4b92      	ldr	r3, [pc, #584]	@ (800a04c <_strtod_l+0xaf4>)
 8009e04:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009e06:	401a      	ands	r2, r3
 8009e08:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8009e0c:	f04f 0a00 	mov.w	sl, #0
 8009e10:	9b08      	ldr	r3, [sp, #32]
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	d1b8      	bne.n	8009d88 <_strtod_l+0x830>
 8009e16:	e5c9      	b.n	80099ac <_strtod_l+0x454>
 8009e18:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8009e1c:	e7e8      	b.n	8009df0 <_strtod_l+0x898>
 8009e1e:	4613      	mov	r3, r2
 8009e20:	e7e6      	b.n	8009df0 <_strtod_l+0x898>
 8009e22:	ea53 030a 	orrs.w	r3, r3, sl
 8009e26:	d0a1      	beq.n	8009d6c <_strtod_l+0x814>
 8009e28:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8009e2a:	b1db      	cbz	r3, 8009e64 <_strtod_l+0x90c>
 8009e2c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009e2e:	4213      	tst	r3, r2
 8009e30:	d0ee      	beq.n	8009e10 <_strtod_l+0x8b8>
 8009e32:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009e34:	9a08      	ldr	r2, [sp, #32]
 8009e36:	4650      	mov	r0, sl
 8009e38:	4659      	mov	r1, fp
 8009e3a:	b1bb      	cbz	r3, 8009e6c <_strtod_l+0x914>
 8009e3c:	f7ff fb6e 	bl	800951c <sulp>
 8009e40:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009e44:	ec53 2b10 	vmov	r2, r3, d0
 8009e48:	f7f6 fa38 	bl	80002bc <__adddf3>
 8009e4c:	4682      	mov	sl, r0
 8009e4e:	468b      	mov	fp, r1
 8009e50:	e7de      	b.n	8009e10 <_strtod_l+0x8b8>
 8009e52:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8009e56:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8009e5a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8009e5e:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8009e62:	e7d5      	b.n	8009e10 <_strtod_l+0x8b8>
 8009e64:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009e66:	ea13 0f0a 	tst.w	r3, sl
 8009e6a:	e7e1      	b.n	8009e30 <_strtod_l+0x8d8>
 8009e6c:	f7ff fb56 	bl	800951c <sulp>
 8009e70:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009e74:	ec53 2b10 	vmov	r2, r3, d0
 8009e78:	f7f6 fa1e 	bl	80002b8 <__aeabi_dsub>
 8009e7c:	2200      	movs	r2, #0
 8009e7e:	2300      	movs	r3, #0
 8009e80:	4682      	mov	sl, r0
 8009e82:	468b      	mov	fp, r1
 8009e84:	f7f6 fe38 	bl	8000af8 <__aeabi_dcmpeq>
 8009e88:	2800      	cmp	r0, #0
 8009e8a:	d0c1      	beq.n	8009e10 <_strtod_l+0x8b8>
 8009e8c:	e619      	b.n	8009ac2 <_strtod_l+0x56a>
 8009e8e:	4641      	mov	r1, r8
 8009e90:	4620      	mov	r0, r4
 8009e92:	f7ff facd 	bl	8009430 <__ratio>
 8009e96:	ec57 6b10 	vmov	r6, r7, d0
 8009e9a:	2200      	movs	r2, #0
 8009e9c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8009ea0:	4630      	mov	r0, r6
 8009ea2:	4639      	mov	r1, r7
 8009ea4:	f7f6 fe3c 	bl	8000b20 <__aeabi_dcmple>
 8009ea8:	2800      	cmp	r0, #0
 8009eaa:	d06f      	beq.n	8009f8c <_strtod_l+0xa34>
 8009eac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	d17a      	bne.n	8009fa8 <_strtod_l+0xa50>
 8009eb2:	f1ba 0f00 	cmp.w	sl, #0
 8009eb6:	d158      	bne.n	8009f6a <_strtod_l+0xa12>
 8009eb8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009eba:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	d15a      	bne.n	8009f78 <_strtod_l+0xa20>
 8009ec2:	4b64      	ldr	r3, [pc, #400]	@ (800a054 <_strtod_l+0xafc>)
 8009ec4:	2200      	movs	r2, #0
 8009ec6:	4630      	mov	r0, r6
 8009ec8:	4639      	mov	r1, r7
 8009eca:	f7f6 fe1f 	bl	8000b0c <__aeabi_dcmplt>
 8009ece:	2800      	cmp	r0, #0
 8009ed0:	d159      	bne.n	8009f86 <_strtod_l+0xa2e>
 8009ed2:	4630      	mov	r0, r6
 8009ed4:	4639      	mov	r1, r7
 8009ed6:	4b60      	ldr	r3, [pc, #384]	@ (800a058 <_strtod_l+0xb00>)
 8009ed8:	2200      	movs	r2, #0
 8009eda:	f7f6 fba5 	bl	8000628 <__aeabi_dmul>
 8009ede:	4606      	mov	r6, r0
 8009ee0:	460f      	mov	r7, r1
 8009ee2:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8009ee6:	9606      	str	r6, [sp, #24]
 8009ee8:	9307      	str	r3, [sp, #28]
 8009eea:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009eee:	4d57      	ldr	r5, [pc, #348]	@ (800a04c <_strtod_l+0xaf4>)
 8009ef0:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8009ef4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009ef6:	401d      	ands	r5, r3
 8009ef8:	4b58      	ldr	r3, [pc, #352]	@ (800a05c <_strtod_l+0xb04>)
 8009efa:	429d      	cmp	r5, r3
 8009efc:	f040 80b2 	bne.w	800a064 <_strtod_l+0xb0c>
 8009f00:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009f02:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8009f06:	ec4b ab10 	vmov	d0, sl, fp
 8009f0a:	f7ff f9c9 	bl	80092a0 <__ulp>
 8009f0e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009f12:	ec51 0b10 	vmov	r0, r1, d0
 8009f16:	f7f6 fb87 	bl	8000628 <__aeabi_dmul>
 8009f1a:	4652      	mov	r2, sl
 8009f1c:	465b      	mov	r3, fp
 8009f1e:	f7f6 f9cd 	bl	80002bc <__adddf3>
 8009f22:	460b      	mov	r3, r1
 8009f24:	4949      	ldr	r1, [pc, #292]	@ (800a04c <_strtod_l+0xaf4>)
 8009f26:	4a4e      	ldr	r2, [pc, #312]	@ (800a060 <_strtod_l+0xb08>)
 8009f28:	4019      	ands	r1, r3
 8009f2a:	4291      	cmp	r1, r2
 8009f2c:	4682      	mov	sl, r0
 8009f2e:	d942      	bls.n	8009fb6 <_strtod_l+0xa5e>
 8009f30:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8009f32:	4b47      	ldr	r3, [pc, #284]	@ (800a050 <_strtod_l+0xaf8>)
 8009f34:	429a      	cmp	r2, r3
 8009f36:	d103      	bne.n	8009f40 <_strtod_l+0x9e8>
 8009f38:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009f3a:	3301      	adds	r3, #1
 8009f3c:	f43f ad2b 	beq.w	8009996 <_strtod_l+0x43e>
 8009f40:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800a050 <_strtod_l+0xaf8>
 8009f44:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8009f48:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009f4a:	9805      	ldr	r0, [sp, #20]
 8009f4c:	f7fe fe74 	bl	8008c38 <_Bfree>
 8009f50:	9805      	ldr	r0, [sp, #20]
 8009f52:	4649      	mov	r1, r9
 8009f54:	f7fe fe70 	bl	8008c38 <_Bfree>
 8009f58:	9805      	ldr	r0, [sp, #20]
 8009f5a:	4641      	mov	r1, r8
 8009f5c:	f7fe fe6c 	bl	8008c38 <_Bfree>
 8009f60:	9805      	ldr	r0, [sp, #20]
 8009f62:	4621      	mov	r1, r4
 8009f64:	f7fe fe68 	bl	8008c38 <_Bfree>
 8009f68:	e618      	b.n	8009b9c <_strtod_l+0x644>
 8009f6a:	f1ba 0f01 	cmp.w	sl, #1
 8009f6e:	d103      	bne.n	8009f78 <_strtod_l+0xa20>
 8009f70:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009f72:	2b00      	cmp	r3, #0
 8009f74:	f43f ada5 	beq.w	8009ac2 <_strtod_l+0x56a>
 8009f78:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800a028 <_strtod_l+0xad0>
 8009f7c:	4f35      	ldr	r7, [pc, #212]	@ (800a054 <_strtod_l+0xafc>)
 8009f7e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8009f82:	2600      	movs	r6, #0
 8009f84:	e7b1      	b.n	8009eea <_strtod_l+0x992>
 8009f86:	4f34      	ldr	r7, [pc, #208]	@ (800a058 <_strtod_l+0xb00>)
 8009f88:	2600      	movs	r6, #0
 8009f8a:	e7aa      	b.n	8009ee2 <_strtod_l+0x98a>
 8009f8c:	4b32      	ldr	r3, [pc, #200]	@ (800a058 <_strtod_l+0xb00>)
 8009f8e:	4630      	mov	r0, r6
 8009f90:	4639      	mov	r1, r7
 8009f92:	2200      	movs	r2, #0
 8009f94:	f7f6 fb48 	bl	8000628 <__aeabi_dmul>
 8009f98:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009f9a:	4606      	mov	r6, r0
 8009f9c:	460f      	mov	r7, r1
 8009f9e:	2b00      	cmp	r3, #0
 8009fa0:	d09f      	beq.n	8009ee2 <_strtod_l+0x98a>
 8009fa2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8009fa6:	e7a0      	b.n	8009eea <_strtod_l+0x992>
 8009fa8:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800a030 <_strtod_l+0xad8>
 8009fac:	ed8d 7b06 	vstr	d7, [sp, #24]
 8009fb0:	ec57 6b17 	vmov	r6, r7, d7
 8009fb4:	e799      	b.n	8009eea <_strtod_l+0x992>
 8009fb6:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8009fba:	9b08      	ldr	r3, [sp, #32]
 8009fbc:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8009fc0:	2b00      	cmp	r3, #0
 8009fc2:	d1c1      	bne.n	8009f48 <_strtod_l+0x9f0>
 8009fc4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009fc8:	0d1b      	lsrs	r3, r3, #20
 8009fca:	051b      	lsls	r3, r3, #20
 8009fcc:	429d      	cmp	r5, r3
 8009fce:	d1bb      	bne.n	8009f48 <_strtod_l+0x9f0>
 8009fd0:	4630      	mov	r0, r6
 8009fd2:	4639      	mov	r1, r7
 8009fd4:	f7f6 fe88 	bl	8000ce8 <__aeabi_d2lz>
 8009fd8:	f7f6 faf8 	bl	80005cc <__aeabi_l2d>
 8009fdc:	4602      	mov	r2, r0
 8009fde:	460b      	mov	r3, r1
 8009fe0:	4630      	mov	r0, r6
 8009fe2:	4639      	mov	r1, r7
 8009fe4:	f7f6 f968 	bl	80002b8 <__aeabi_dsub>
 8009fe8:	460b      	mov	r3, r1
 8009fea:	4602      	mov	r2, r0
 8009fec:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8009ff0:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8009ff4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009ff6:	ea46 060a 	orr.w	r6, r6, sl
 8009ffa:	431e      	orrs	r6, r3
 8009ffc:	d06f      	beq.n	800a0de <_strtod_l+0xb86>
 8009ffe:	a30e      	add	r3, pc, #56	@ (adr r3, 800a038 <_strtod_l+0xae0>)
 800a000:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a004:	f7f6 fd82 	bl	8000b0c <__aeabi_dcmplt>
 800a008:	2800      	cmp	r0, #0
 800a00a:	f47f accf 	bne.w	80099ac <_strtod_l+0x454>
 800a00e:	a30c      	add	r3, pc, #48	@ (adr r3, 800a040 <_strtod_l+0xae8>)
 800a010:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a014:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a018:	f7f6 fd96 	bl	8000b48 <__aeabi_dcmpgt>
 800a01c:	2800      	cmp	r0, #0
 800a01e:	d093      	beq.n	8009f48 <_strtod_l+0x9f0>
 800a020:	e4c4      	b.n	80099ac <_strtod_l+0x454>
 800a022:	bf00      	nop
 800a024:	f3af 8000 	nop.w
 800a028:	00000000 	.word	0x00000000
 800a02c:	bff00000 	.word	0xbff00000
 800a030:	00000000 	.word	0x00000000
 800a034:	3ff00000 	.word	0x3ff00000
 800a038:	94a03595 	.word	0x94a03595
 800a03c:	3fdfffff 	.word	0x3fdfffff
 800a040:	35afe535 	.word	0x35afe535
 800a044:	3fe00000 	.word	0x3fe00000
 800a048:	000fffff 	.word	0x000fffff
 800a04c:	7ff00000 	.word	0x7ff00000
 800a050:	7fefffff 	.word	0x7fefffff
 800a054:	3ff00000 	.word	0x3ff00000
 800a058:	3fe00000 	.word	0x3fe00000
 800a05c:	7fe00000 	.word	0x7fe00000
 800a060:	7c9fffff 	.word	0x7c9fffff
 800a064:	9b08      	ldr	r3, [sp, #32]
 800a066:	b323      	cbz	r3, 800a0b2 <_strtod_l+0xb5a>
 800a068:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800a06c:	d821      	bhi.n	800a0b2 <_strtod_l+0xb5a>
 800a06e:	a328      	add	r3, pc, #160	@ (adr r3, 800a110 <_strtod_l+0xbb8>)
 800a070:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a074:	4630      	mov	r0, r6
 800a076:	4639      	mov	r1, r7
 800a078:	f7f6 fd52 	bl	8000b20 <__aeabi_dcmple>
 800a07c:	b1a0      	cbz	r0, 800a0a8 <_strtod_l+0xb50>
 800a07e:	4639      	mov	r1, r7
 800a080:	4630      	mov	r0, r6
 800a082:	f7f6 fda9 	bl	8000bd8 <__aeabi_d2uiz>
 800a086:	2801      	cmp	r0, #1
 800a088:	bf38      	it	cc
 800a08a:	2001      	movcc	r0, #1
 800a08c:	f7f6 fa52 	bl	8000534 <__aeabi_ui2d>
 800a090:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a092:	4606      	mov	r6, r0
 800a094:	460f      	mov	r7, r1
 800a096:	b9fb      	cbnz	r3, 800a0d8 <_strtod_l+0xb80>
 800a098:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800a09c:	9014      	str	r0, [sp, #80]	@ 0x50
 800a09e:	9315      	str	r3, [sp, #84]	@ 0x54
 800a0a0:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800a0a4:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800a0a8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800a0aa:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800a0ae:	1b5b      	subs	r3, r3, r5
 800a0b0:	9311      	str	r3, [sp, #68]	@ 0x44
 800a0b2:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800a0b6:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800a0ba:	f7ff f8f1 	bl	80092a0 <__ulp>
 800a0be:	4650      	mov	r0, sl
 800a0c0:	ec53 2b10 	vmov	r2, r3, d0
 800a0c4:	4659      	mov	r1, fp
 800a0c6:	f7f6 faaf 	bl	8000628 <__aeabi_dmul>
 800a0ca:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800a0ce:	f7f6 f8f5 	bl	80002bc <__adddf3>
 800a0d2:	4682      	mov	sl, r0
 800a0d4:	468b      	mov	fp, r1
 800a0d6:	e770      	b.n	8009fba <_strtod_l+0xa62>
 800a0d8:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800a0dc:	e7e0      	b.n	800a0a0 <_strtod_l+0xb48>
 800a0de:	a30e      	add	r3, pc, #56	@ (adr r3, 800a118 <_strtod_l+0xbc0>)
 800a0e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0e4:	f7f6 fd12 	bl	8000b0c <__aeabi_dcmplt>
 800a0e8:	e798      	b.n	800a01c <_strtod_l+0xac4>
 800a0ea:	2300      	movs	r3, #0
 800a0ec:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a0ee:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800a0f0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a0f2:	6013      	str	r3, [r2, #0]
 800a0f4:	f7ff ba6d 	b.w	80095d2 <_strtod_l+0x7a>
 800a0f8:	2a65      	cmp	r2, #101	@ 0x65
 800a0fa:	f43f ab66 	beq.w	80097ca <_strtod_l+0x272>
 800a0fe:	2a45      	cmp	r2, #69	@ 0x45
 800a100:	f43f ab63 	beq.w	80097ca <_strtod_l+0x272>
 800a104:	2301      	movs	r3, #1
 800a106:	f7ff bb9e 	b.w	8009846 <_strtod_l+0x2ee>
 800a10a:	bf00      	nop
 800a10c:	f3af 8000 	nop.w
 800a110:	ffc00000 	.word	0xffc00000
 800a114:	41dfffff 	.word	0x41dfffff
 800a118:	94a03595 	.word	0x94a03595
 800a11c:	3fcfffff 	.word	0x3fcfffff

0800a120 <_strtod_r>:
 800a120:	4b01      	ldr	r3, [pc, #4]	@ (800a128 <_strtod_r+0x8>)
 800a122:	f7ff ba19 	b.w	8009558 <_strtod_l>
 800a126:	bf00      	nop
 800a128:	20000068 	.word	0x20000068

0800a12c <_strtol_l.constprop.0>:
 800a12c:	2b24      	cmp	r3, #36	@ 0x24
 800a12e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a132:	4686      	mov	lr, r0
 800a134:	4690      	mov	r8, r2
 800a136:	d801      	bhi.n	800a13c <_strtol_l.constprop.0+0x10>
 800a138:	2b01      	cmp	r3, #1
 800a13a:	d106      	bne.n	800a14a <_strtol_l.constprop.0+0x1e>
 800a13c:	f7fd fdbc 	bl	8007cb8 <__errno>
 800a140:	2316      	movs	r3, #22
 800a142:	6003      	str	r3, [r0, #0]
 800a144:	2000      	movs	r0, #0
 800a146:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a14a:	4834      	ldr	r0, [pc, #208]	@ (800a21c <_strtol_l.constprop.0+0xf0>)
 800a14c:	460d      	mov	r5, r1
 800a14e:	462a      	mov	r2, r5
 800a150:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a154:	5d06      	ldrb	r6, [r0, r4]
 800a156:	f016 0608 	ands.w	r6, r6, #8
 800a15a:	d1f8      	bne.n	800a14e <_strtol_l.constprop.0+0x22>
 800a15c:	2c2d      	cmp	r4, #45	@ 0x2d
 800a15e:	d12d      	bne.n	800a1bc <_strtol_l.constprop.0+0x90>
 800a160:	782c      	ldrb	r4, [r5, #0]
 800a162:	2601      	movs	r6, #1
 800a164:	1c95      	adds	r5, r2, #2
 800a166:	f033 0210 	bics.w	r2, r3, #16
 800a16a:	d109      	bne.n	800a180 <_strtol_l.constprop.0+0x54>
 800a16c:	2c30      	cmp	r4, #48	@ 0x30
 800a16e:	d12a      	bne.n	800a1c6 <_strtol_l.constprop.0+0x9a>
 800a170:	782a      	ldrb	r2, [r5, #0]
 800a172:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800a176:	2a58      	cmp	r2, #88	@ 0x58
 800a178:	d125      	bne.n	800a1c6 <_strtol_l.constprop.0+0x9a>
 800a17a:	786c      	ldrb	r4, [r5, #1]
 800a17c:	2310      	movs	r3, #16
 800a17e:	3502      	adds	r5, #2
 800a180:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800a184:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 800a188:	2200      	movs	r2, #0
 800a18a:	fbbc f9f3 	udiv	r9, ip, r3
 800a18e:	4610      	mov	r0, r2
 800a190:	fb03 ca19 	mls	sl, r3, r9, ip
 800a194:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800a198:	2f09      	cmp	r7, #9
 800a19a:	d81b      	bhi.n	800a1d4 <_strtol_l.constprop.0+0xa8>
 800a19c:	463c      	mov	r4, r7
 800a19e:	42a3      	cmp	r3, r4
 800a1a0:	dd27      	ble.n	800a1f2 <_strtol_l.constprop.0+0xc6>
 800a1a2:	1c57      	adds	r7, r2, #1
 800a1a4:	d007      	beq.n	800a1b6 <_strtol_l.constprop.0+0x8a>
 800a1a6:	4581      	cmp	r9, r0
 800a1a8:	d320      	bcc.n	800a1ec <_strtol_l.constprop.0+0xc0>
 800a1aa:	d101      	bne.n	800a1b0 <_strtol_l.constprop.0+0x84>
 800a1ac:	45a2      	cmp	sl, r4
 800a1ae:	db1d      	blt.n	800a1ec <_strtol_l.constprop.0+0xc0>
 800a1b0:	fb00 4003 	mla	r0, r0, r3, r4
 800a1b4:	2201      	movs	r2, #1
 800a1b6:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a1ba:	e7eb      	b.n	800a194 <_strtol_l.constprop.0+0x68>
 800a1bc:	2c2b      	cmp	r4, #43	@ 0x2b
 800a1be:	bf04      	itt	eq
 800a1c0:	782c      	ldrbeq	r4, [r5, #0]
 800a1c2:	1c95      	addeq	r5, r2, #2
 800a1c4:	e7cf      	b.n	800a166 <_strtol_l.constprop.0+0x3a>
 800a1c6:	2b00      	cmp	r3, #0
 800a1c8:	d1da      	bne.n	800a180 <_strtol_l.constprop.0+0x54>
 800a1ca:	2c30      	cmp	r4, #48	@ 0x30
 800a1cc:	bf0c      	ite	eq
 800a1ce:	2308      	moveq	r3, #8
 800a1d0:	230a      	movne	r3, #10
 800a1d2:	e7d5      	b.n	800a180 <_strtol_l.constprop.0+0x54>
 800a1d4:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800a1d8:	2f19      	cmp	r7, #25
 800a1da:	d801      	bhi.n	800a1e0 <_strtol_l.constprop.0+0xb4>
 800a1dc:	3c37      	subs	r4, #55	@ 0x37
 800a1de:	e7de      	b.n	800a19e <_strtol_l.constprop.0+0x72>
 800a1e0:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800a1e4:	2f19      	cmp	r7, #25
 800a1e6:	d804      	bhi.n	800a1f2 <_strtol_l.constprop.0+0xc6>
 800a1e8:	3c57      	subs	r4, #87	@ 0x57
 800a1ea:	e7d8      	b.n	800a19e <_strtol_l.constprop.0+0x72>
 800a1ec:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a1f0:	e7e1      	b.n	800a1b6 <_strtol_l.constprop.0+0x8a>
 800a1f2:	1c53      	adds	r3, r2, #1
 800a1f4:	d108      	bne.n	800a208 <_strtol_l.constprop.0+0xdc>
 800a1f6:	2322      	movs	r3, #34	@ 0x22
 800a1f8:	f8ce 3000 	str.w	r3, [lr]
 800a1fc:	4660      	mov	r0, ip
 800a1fe:	f1b8 0f00 	cmp.w	r8, #0
 800a202:	d0a0      	beq.n	800a146 <_strtol_l.constprop.0+0x1a>
 800a204:	1e69      	subs	r1, r5, #1
 800a206:	e006      	b.n	800a216 <_strtol_l.constprop.0+0xea>
 800a208:	b106      	cbz	r6, 800a20c <_strtol_l.constprop.0+0xe0>
 800a20a:	4240      	negs	r0, r0
 800a20c:	f1b8 0f00 	cmp.w	r8, #0
 800a210:	d099      	beq.n	800a146 <_strtol_l.constprop.0+0x1a>
 800a212:	2a00      	cmp	r2, #0
 800a214:	d1f6      	bne.n	800a204 <_strtol_l.constprop.0+0xd8>
 800a216:	f8c8 1000 	str.w	r1, [r8]
 800a21a:	e794      	b.n	800a146 <_strtol_l.constprop.0+0x1a>
 800a21c:	0800bca1 	.word	0x0800bca1

0800a220 <_strtol_r>:
 800a220:	f7ff bf84 	b.w	800a12c <_strtol_l.constprop.0>

0800a224 <__ssputs_r>:
 800a224:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a228:	688e      	ldr	r6, [r1, #8]
 800a22a:	461f      	mov	r7, r3
 800a22c:	42be      	cmp	r6, r7
 800a22e:	680b      	ldr	r3, [r1, #0]
 800a230:	4682      	mov	sl, r0
 800a232:	460c      	mov	r4, r1
 800a234:	4690      	mov	r8, r2
 800a236:	d82d      	bhi.n	800a294 <__ssputs_r+0x70>
 800a238:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a23c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800a240:	d026      	beq.n	800a290 <__ssputs_r+0x6c>
 800a242:	6965      	ldr	r5, [r4, #20]
 800a244:	6909      	ldr	r1, [r1, #16]
 800a246:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a24a:	eba3 0901 	sub.w	r9, r3, r1
 800a24e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a252:	1c7b      	adds	r3, r7, #1
 800a254:	444b      	add	r3, r9
 800a256:	106d      	asrs	r5, r5, #1
 800a258:	429d      	cmp	r5, r3
 800a25a:	bf38      	it	cc
 800a25c:	461d      	movcc	r5, r3
 800a25e:	0553      	lsls	r3, r2, #21
 800a260:	d527      	bpl.n	800a2b2 <__ssputs_r+0x8e>
 800a262:	4629      	mov	r1, r5
 800a264:	f7fe fc1c 	bl	8008aa0 <_malloc_r>
 800a268:	4606      	mov	r6, r0
 800a26a:	b360      	cbz	r0, 800a2c6 <__ssputs_r+0xa2>
 800a26c:	6921      	ldr	r1, [r4, #16]
 800a26e:	464a      	mov	r2, r9
 800a270:	f000 ff6c 	bl	800b14c <memcpy>
 800a274:	89a3      	ldrh	r3, [r4, #12]
 800a276:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800a27a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a27e:	81a3      	strh	r3, [r4, #12]
 800a280:	6126      	str	r6, [r4, #16]
 800a282:	6165      	str	r5, [r4, #20]
 800a284:	444e      	add	r6, r9
 800a286:	eba5 0509 	sub.w	r5, r5, r9
 800a28a:	6026      	str	r6, [r4, #0]
 800a28c:	60a5      	str	r5, [r4, #8]
 800a28e:	463e      	mov	r6, r7
 800a290:	42be      	cmp	r6, r7
 800a292:	d900      	bls.n	800a296 <__ssputs_r+0x72>
 800a294:	463e      	mov	r6, r7
 800a296:	6820      	ldr	r0, [r4, #0]
 800a298:	4632      	mov	r2, r6
 800a29a:	4641      	mov	r1, r8
 800a29c:	f000 fef7 	bl	800b08e <memmove>
 800a2a0:	68a3      	ldr	r3, [r4, #8]
 800a2a2:	1b9b      	subs	r3, r3, r6
 800a2a4:	60a3      	str	r3, [r4, #8]
 800a2a6:	6823      	ldr	r3, [r4, #0]
 800a2a8:	4433      	add	r3, r6
 800a2aa:	6023      	str	r3, [r4, #0]
 800a2ac:	2000      	movs	r0, #0
 800a2ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a2b2:	462a      	mov	r2, r5
 800a2b4:	f001 fadd 	bl	800b872 <_realloc_r>
 800a2b8:	4606      	mov	r6, r0
 800a2ba:	2800      	cmp	r0, #0
 800a2bc:	d1e0      	bne.n	800a280 <__ssputs_r+0x5c>
 800a2be:	6921      	ldr	r1, [r4, #16]
 800a2c0:	4650      	mov	r0, sl
 800a2c2:	f7fe fb79 	bl	80089b8 <_free_r>
 800a2c6:	230c      	movs	r3, #12
 800a2c8:	f8ca 3000 	str.w	r3, [sl]
 800a2cc:	89a3      	ldrh	r3, [r4, #12]
 800a2ce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a2d2:	81a3      	strh	r3, [r4, #12]
 800a2d4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a2d8:	e7e9      	b.n	800a2ae <__ssputs_r+0x8a>
	...

0800a2dc <_svfiprintf_r>:
 800a2dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2e0:	4698      	mov	r8, r3
 800a2e2:	898b      	ldrh	r3, [r1, #12]
 800a2e4:	061b      	lsls	r3, r3, #24
 800a2e6:	b09d      	sub	sp, #116	@ 0x74
 800a2e8:	4607      	mov	r7, r0
 800a2ea:	460d      	mov	r5, r1
 800a2ec:	4614      	mov	r4, r2
 800a2ee:	d510      	bpl.n	800a312 <_svfiprintf_r+0x36>
 800a2f0:	690b      	ldr	r3, [r1, #16]
 800a2f2:	b973      	cbnz	r3, 800a312 <_svfiprintf_r+0x36>
 800a2f4:	2140      	movs	r1, #64	@ 0x40
 800a2f6:	f7fe fbd3 	bl	8008aa0 <_malloc_r>
 800a2fa:	6028      	str	r0, [r5, #0]
 800a2fc:	6128      	str	r0, [r5, #16]
 800a2fe:	b930      	cbnz	r0, 800a30e <_svfiprintf_r+0x32>
 800a300:	230c      	movs	r3, #12
 800a302:	603b      	str	r3, [r7, #0]
 800a304:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a308:	b01d      	add	sp, #116	@ 0x74
 800a30a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a30e:	2340      	movs	r3, #64	@ 0x40
 800a310:	616b      	str	r3, [r5, #20]
 800a312:	2300      	movs	r3, #0
 800a314:	9309      	str	r3, [sp, #36]	@ 0x24
 800a316:	2320      	movs	r3, #32
 800a318:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a31c:	f8cd 800c 	str.w	r8, [sp, #12]
 800a320:	2330      	movs	r3, #48	@ 0x30
 800a322:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800a4c0 <_svfiprintf_r+0x1e4>
 800a326:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a32a:	f04f 0901 	mov.w	r9, #1
 800a32e:	4623      	mov	r3, r4
 800a330:	469a      	mov	sl, r3
 800a332:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a336:	b10a      	cbz	r2, 800a33c <_svfiprintf_r+0x60>
 800a338:	2a25      	cmp	r2, #37	@ 0x25
 800a33a:	d1f9      	bne.n	800a330 <_svfiprintf_r+0x54>
 800a33c:	ebba 0b04 	subs.w	fp, sl, r4
 800a340:	d00b      	beq.n	800a35a <_svfiprintf_r+0x7e>
 800a342:	465b      	mov	r3, fp
 800a344:	4622      	mov	r2, r4
 800a346:	4629      	mov	r1, r5
 800a348:	4638      	mov	r0, r7
 800a34a:	f7ff ff6b 	bl	800a224 <__ssputs_r>
 800a34e:	3001      	adds	r0, #1
 800a350:	f000 80a7 	beq.w	800a4a2 <_svfiprintf_r+0x1c6>
 800a354:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a356:	445a      	add	r2, fp
 800a358:	9209      	str	r2, [sp, #36]	@ 0x24
 800a35a:	f89a 3000 	ldrb.w	r3, [sl]
 800a35e:	2b00      	cmp	r3, #0
 800a360:	f000 809f 	beq.w	800a4a2 <_svfiprintf_r+0x1c6>
 800a364:	2300      	movs	r3, #0
 800a366:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a36a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a36e:	f10a 0a01 	add.w	sl, sl, #1
 800a372:	9304      	str	r3, [sp, #16]
 800a374:	9307      	str	r3, [sp, #28]
 800a376:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a37a:	931a      	str	r3, [sp, #104]	@ 0x68
 800a37c:	4654      	mov	r4, sl
 800a37e:	2205      	movs	r2, #5
 800a380:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a384:	484e      	ldr	r0, [pc, #312]	@ (800a4c0 <_svfiprintf_r+0x1e4>)
 800a386:	f7f5 ff3b 	bl	8000200 <memchr>
 800a38a:	9a04      	ldr	r2, [sp, #16]
 800a38c:	b9d8      	cbnz	r0, 800a3c6 <_svfiprintf_r+0xea>
 800a38e:	06d0      	lsls	r0, r2, #27
 800a390:	bf44      	itt	mi
 800a392:	2320      	movmi	r3, #32
 800a394:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a398:	0711      	lsls	r1, r2, #28
 800a39a:	bf44      	itt	mi
 800a39c:	232b      	movmi	r3, #43	@ 0x2b
 800a39e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a3a2:	f89a 3000 	ldrb.w	r3, [sl]
 800a3a6:	2b2a      	cmp	r3, #42	@ 0x2a
 800a3a8:	d015      	beq.n	800a3d6 <_svfiprintf_r+0xfa>
 800a3aa:	9a07      	ldr	r2, [sp, #28]
 800a3ac:	4654      	mov	r4, sl
 800a3ae:	2000      	movs	r0, #0
 800a3b0:	f04f 0c0a 	mov.w	ip, #10
 800a3b4:	4621      	mov	r1, r4
 800a3b6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a3ba:	3b30      	subs	r3, #48	@ 0x30
 800a3bc:	2b09      	cmp	r3, #9
 800a3be:	d94b      	bls.n	800a458 <_svfiprintf_r+0x17c>
 800a3c0:	b1b0      	cbz	r0, 800a3f0 <_svfiprintf_r+0x114>
 800a3c2:	9207      	str	r2, [sp, #28]
 800a3c4:	e014      	b.n	800a3f0 <_svfiprintf_r+0x114>
 800a3c6:	eba0 0308 	sub.w	r3, r0, r8
 800a3ca:	fa09 f303 	lsl.w	r3, r9, r3
 800a3ce:	4313      	orrs	r3, r2
 800a3d0:	9304      	str	r3, [sp, #16]
 800a3d2:	46a2      	mov	sl, r4
 800a3d4:	e7d2      	b.n	800a37c <_svfiprintf_r+0xa0>
 800a3d6:	9b03      	ldr	r3, [sp, #12]
 800a3d8:	1d19      	adds	r1, r3, #4
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	9103      	str	r1, [sp, #12]
 800a3de:	2b00      	cmp	r3, #0
 800a3e0:	bfbb      	ittet	lt
 800a3e2:	425b      	neglt	r3, r3
 800a3e4:	f042 0202 	orrlt.w	r2, r2, #2
 800a3e8:	9307      	strge	r3, [sp, #28]
 800a3ea:	9307      	strlt	r3, [sp, #28]
 800a3ec:	bfb8      	it	lt
 800a3ee:	9204      	strlt	r2, [sp, #16]
 800a3f0:	7823      	ldrb	r3, [r4, #0]
 800a3f2:	2b2e      	cmp	r3, #46	@ 0x2e
 800a3f4:	d10a      	bne.n	800a40c <_svfiprintf_r+0x130>
 800a3f6:	7863      	ldrb	r3, [r4, #1]
 800a3f8:	2b2a      	cmp	r3, #42	@ 0x2a
 800a3fa:	d132      	bne.n	800a462 <_svfiprintf_r+0x186>
 800a3fc:	9b03      	ldr	r3, [sp, #12]
 800a3fe:	1d1a      	adds	r2, r3, #4
 800a400:	681b      	ldr	r3, [r3, #0]
 800a402:	9203      	str	r2, [sp, #12]
 800a404:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a408:	3402      	adds	r4, #2
 800a40a:	9305      	str	r3, [sp, #20]
 800a40c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800a4d0 <_svfiprintf_r+0x1f4>
 800a410:	7821      	ldrb	r1, [r4, #0]
 800a412:	2203      	movs	r2, #3
 800a414:	4650      	mov	r0, sl
 800a416:	f7f5 fef3 	bl	8000200 <memchr>
 800a41a:	b138      	cbz	r0, 800a42c <_svfiprintf_r+0x150>
 800a41c:	9b04      	ldr	r3, [sp, #16]
 800a41e:	eba0 000a 	sub.w	r0, r0, sl
 800a422:	2240      	movs	r2, #64	@ 0x40
 800a424:	4082      	lsls	r2, r0
 800a426:	4313      	orrs	r3, r2
 800a428:	3401      	adds	r4, #1
 800a42a:	9304      	str	r3, [sp, #16]
 800a42c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a430:	4824      	ldr	r0, [pc, #144]	@ (800a4c4 <_svfiprintf_r+0x1e8>)
 800a432:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a436:	2206      	movs	r2, #6
 800a438:	f7f5 fee2 	bl	8000200 <memchr>
 800a43c:	2800      	cmp	r0, #0
 800a43e:	d036      	beq.n	800a4ae <_svfiprintf_r+0x1d2>
 800a440:	4b21      	ldr	r3, [pc, #132]	@ (800a4c8 <_svfiprintf_r+0x1ec>)
 800a442:	bb1b      	cbnz	r3, 800a48c <_svfiprintf_r+0x1b0>
 800a444:	9b03      	ldr	r3, [sp, #12]
 800a446:	3307      	adds	r3, #7
 800a448:	f023 0307 	bic.w	r3, r3, #7
 800a44c:	3308      	adds	r3, #8
 800a44e:	9303      	str	r3, [sp, #12]
 800a450:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a452:	4433      	add	r3, r6
 800a454:	9309      	str	r3, [sp, #36]	@ 0x24
 800a456:	e76a      	b.n	800a32e <_svfiprintf_r+0x52>
 800a458:	fb0c 3202 	mla	r2, ip, r2, r3
 800a45c:	460c      	mov	r4, r1
 800a45e:	2001      	movs	r0, #1
 800a460:	e7a8      	b.n	800a3b4 <_svfiprintf_r+0xd8>
 800a462:	2300      	movs	r3, #0
 800a464:	3401      	adds	r4, #1
 800a466:	9305      	str	r3, [sp, #20]
 800a468:	4619      	mov	r1, r3
 800a46a:	f04f 0c0a 	mov.w	ip, #10
 800a46e:	4620      	mov	r0, r4
 800a470:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a474:	3a30      	subs	r2, #48	@ 0x30
 800a476:	2a09      	cmp	r2, #9
 800a478:	d903      	bls.n	800a482 <_svfiprintf_r+0x1a6>
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	d0c6      	beq.n	800a40c <_svfiprintf_r+0x130>
 800a47e:	9105      	str	r1, [sp, #20]
 800a480:	e7c4      	b.n	800a40c <_svfiprintf_r+0x130>
 800a482:	fb0c 2101 	mla	r1, ip, r1, r2
 800a486:	4604      	mov	r4, r0
 800a488:	2301      	movs	r3, #1
 800a48a:	e7f0      	b.n	800a46e <_svfiprintf_r+0x192>
 800a48c:	ab03      	add	r3, sp, #12
 800a48e:	9300      	str	r3, [sp, #0]
 800a490:	462a      	mov	r2, r5
 800a492:	4b0e      	ldr	r3, [pc, #56]	@ (800a4cc <_svfiprintf_r+0x1f0>)
 800a494:	a904      	add	r1, sp, #16
 800a496:	4638      	mov	r0, r7
 800a498:	f7fc fb30 	bl	8006afc <_printf_float>
 800a49c:	1c42      	adds	r2, r0, #1
 800a49e:	4606      	mov	r6, r0
 800a4a0:	d1d6      	bne.n	800a450 <_svfiprintf_r+0x174>
 800a4a2:	89ab      	ldrh	r3, [r5, #12]
 800a4a4:	065b      	lsls	r3, r3, #25
 800a4a6:	f53f af2d 	bmi.w	800a304 <_svfiprintf_r+0x28>
 800a4aa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a4ac:	e72c      	b.n	800a308 <_svfiprintf_r+0x2c>
 800a4ae:	ab03      	add	r3, sp, #12
 800a4b0:	9300      	str	r3, [sp, #0]
 800a4b2:	462a      	mov	r2, r5
 800a4b4:	4b05      	ldr	r3, [pc, #20]	@ (800a4cc <_svfiprintf_r+0x1f0>)
 800a4b6:	a904      	add	r1, sp, #16
 800a4b8:	4638      	mov	r0, r7
 800a4ba:	f7fc fdb7 	bl	800702c <_printf_i>
 800a4be:	e7ed      	b.n	800a49c <_svfiprintf_r+0x1c0>
 800a4c0:	0800c018 	.word	0x0800c018
 800a4c4:	0800c022 	.word	0x0800c022
 800a4c8:	08006afd 	.word	0x08006afd
 800a4cc:	0800a225 	.word	0x0800a225
 800a4d0:	0800c01e 	.word	0x0800c01e

0800a4d4 <_sungetc_r>:
 800a4d4:	b538      	push	{r3, r4, r5, lr}
 800a4d6:	1c4b      	adds	r3, r1, #1
 800a4d8:	4614      	mov	r4, r2
 800a4da:	d103      	bne.n	800a4e4 <_sungetc_r+0x10>
 800a4dc:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 800a4e0:	4628      	mov	r0, r5
 800a4e2:	bd38      	pop	{r3, r4, r5, pc}
 800a4e4:	8993      	ldrh	r3, [r2, #12]
 800a4e6:	f023 0320 	bic.w	r3, r3, #32
 800a4ea:	8193      	strh	r3, [r2, #12]
 800a4ec:	6853      	ldr	r3, [r2, #4]
 800a4ee:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800a4f0:	b2cd      	uxtb	r5, r1
 800a4f2:	b18a      	cbz	r2, 800a518 <_sungetc_r+0x44>
 800a4f4:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800a4f6:	429a      	cmp	r2, r3
 800a4f8:	dd08      	ble.n	800a50c <_sungetc_r+0x38>
 800a4fa:	6823      	ldr	r3, [r4, #0]
 800a4fc:	1e5a      	subs	r2, r3, #1
 800a4fe:	6022      	str	r2, [r4, #0]
 800a500:	f803 5c01 	strb.w	r5, [r3, #-1]
 800a504:	6863      	ldr	r3, [r4, #4]
 800a506:	3301      	adds	r3, #1
 800a508:	6063      	str	r3, [r4, #4]
 800a50a:	e7e9      	b.n	800a4e0 <_sungetc_r+0xc>
 800a50c:	4621      	mov	r1, r4
 800a50e:	f000 fd84 	bl	800b01a <__submore>
 800a512:	2800      	cmp	r0, #0
 800a514:	d0f1      	beq.n	800a4fa <_sungetc_r+0x26>
 800a516:	e7e1      	b.n	800a4dc <_sungetc_r+0x8>
 800a518:	6921      	ldr	r1, [r4, #16]
 800a51a:	6822      	ldr	r2, [r4, #0]
 800a51c:	b141      	cbz	r1, 800a530 <_sungetc_r+0x5c>
 800a51e:	4291      	cmp	r1, r2
 800a520:	d206      	bcs.n	800a530 <_sungetc_r+0x5c>
 800a522:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 800a526:	42a9      	cmp	r1, r5
 800a528:	d102      	bne.n	800a530 <_sungetc_r+0x5c>
 800a52a:	3a01      	subs	r2, #1
 800a52c:	6022      	str	r2, [r4, #0]
 800a52e:	e7ea      	b.n	800a506 <_sungetc_r+0x32>
 800a530:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 800a534:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a538:	6363      	str	r3, [r4, #52]	@ 0x34
 800a53a:	2303      	movs	r3, #3
 800a53c:	63a3      	str	r3, [r4, #56]	@ 0x38
 800a53e:	4623      	mov	r3, r4
 800a540:	f803 5f46 	strb.w	r5, [r3, #70]!
 800a544:	6023      	str	r3, [r4, #0]
 800a546:	2301      	movs	r3, #1
 800a548:	e7de      	b.n	800a508 <_sungetc_r+0x34>

0800a54a <__ssrefill_r>:
 800a54a:	b510      	push	{r4, lr}
 800a54c:	460c      	mov	r4, r1
 800a54e:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800a550:	b169      	cbz	r1, 800a56e <__ssrefill_r+0x24>
 800a552:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a556:	4299      	cmp	r1, r3
 800a558:	d001      	beq.n	800a55e <__ssrefill_r+0x14>
 800a55a:	f7fe fa2d 	bl	80089b8 <_free_r>
 800a55e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a560:	6063      	str	r3, [r4, #4]
 800a562:	2000      	movs	r0, #0
 800a564:	6360      	str	r0, [r4, #52]	@ 0x34
 800a566:	b113      	cbz	r3, 800a56e <__ssrefill_r+0x24>
 800a568:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800a56a:	6023      	str	r3, [r4, #0]
 800a56c:	bd10      	pop	{r4, pc}
 800a56e:	6923      	ldr	r3, [r4, #16]
 800a570:	6023      	str	r3, [r4, #0]
 800a572:	2300      	movs	r3, #0
 800a574:	6063      	str	r3, [r4, #4]
 800a576:	89a3      	ldrh	r3, [r4, #12]
 800a578:	f043 0320 	orr.w	r3, r3, #32
 800a57c:	81a3      	strh	r3, [r4, #12]
 800a57e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a582:	e7f3      	b.n	800a56c <__ssrefill_r+0x22>

0800a584 <__ssvfiscanf_r>:
 800a584:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a588:	460c      	mov	r4, r1
 800a58a:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 800a58e:	2100      	movs	r1, #0
 800a590:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 800a594:	49a5      	ldr	r1, [pc, #660]	@ (800a82c <__ssvfiscanf_r+0x2a8>)
 800a596:	91a0      	str	r1, [sp, #640]	@ 0x280
 800a598:	f10d 0804 	add.w	r8, sp, #4
 800a59c:	49a4      	ldr	r1, [pc, #656]	@ (800a830 <__ssvfiscanf_r+0x2ac>)
 800a59e:	4fa5      	ldr	r7, [pc, #660]	@ (800a834 <__ssvfiscanf_r+0x2b0>)
 800a5a0:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 800a5a4:	4606      	mov	r6, r0
 800a5a6:	91a1      	str	r1, [sp, #644]	@ 0x284
 800a5a8:	9300      	str	r3, [sp, #0]
 800a5aa:	7813      	ldrb	r3, [r2, #0]
 800a5ac:	2b00      	cmp	r3, #0
 800a5ae:	f000 8158 	beq.w	800a862 <__ssvfiscanf_r+0x2de>
 800a5b2:	5cf9      	ldrb	r1, [r7, r3]
 800a5b4:	f011 0108 	ands.w	r1, r1, #8
 800a5b8:	f102 0501 	add.w	r5, r2, #1
 800a5bc:	d019      	beq.n	800a5f2 <__ssvfiscanf_r+0x6e>
 800a5be:	6863      	ldr	r3, [r4, #4]
 800a5c0:	2b00      	cmp	r3, #0
 800a5c2:	dd0f      	ble.n	800a5e4 <__ssvfiscanf_r+0x60>
 800a5c4:	6823      	ldr	r3, [r4, #0]
 800a5c6:	781a      	ldrb	r2, [r3, #0]
 800a5c8:	5cba      	ldrb	r2, [r7, r2]
 800a5ca:	0712      	lsls	r2, r2, #28
 800a5cc:	d401      	bmi.n	800a5d2 <__ssvfiscanf_r+0x4e>
 800a5ce:	462a      	mov	r2, r5
 800a5d0:	e7eb      	b.n	800a5aa <__ssvfiscanf_r+0x26>
 800a5d2:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800a5d4:	3201      	adds	r2, #1
 800a5d6:	9245      	str	r2, [sp, #276]	@ 0x114
 800a5d8:	6862      	ldr	r2, [r4, #4]
 800a5da:	3301      	adds	r3, #1
 800a5dc:	3a01      	subs	r2, #1
 800a5de:	6062      	str	r2, [r4, #4]
 800a5e0:	6023      	str	r3, [r4, #0]
 800a5e2:	e7ec      	b.n	800a5be <__ssvfiscanf_r+0x3a>
 800a5e4:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800a5e6:	4621      	mov	r1, r4
 800a5e8:	4630      	mov	r0, r6
 800a5ea:	4798      	blx	r3
 800a5ec:	2800      	cmp	r0, #0
 800a5ee:	d0e9      	beq.n	800a5c4 <__ssvfiscanf_r+0x40>
 800a5f0:	e7ed      	b.n	800a5ce <__ssvfiscanf_r+0x4a>
 800a5f2:	2b25      	cmp	r3, #37	@ 0x25
 800a5f4:	d012      	beq.n	800a61c <__ssvfiscanf_r+0x98>
 800a5f6:	4699      	mov	r9, r3
 800a5f8:	6863      	ldr	r3, [r4, #4]
 800a5fa:	2b00      	cmp	r3, #0
 800a5fc:	f340 8093 	ble.w	800a726 <__ssvfiscanf_r+0x1a2>
 800a600:	6822      	ldr	r2, [r4, #0]
 800a602:	7813      	ldrb	r3, [r2, #0]
 800a604:	454b      	cmp	r3, r9
 800a606:	f040 812c 	bne.w	800a862 <__ssvfiscanf_r+0x2de>
 800a60a:	6863      	ldr	r3, [r4, #4]
 800a60c:	3b01      	subs	r3, #1
 800a60e:	6063      	str	r3, [r4, #4]
 800a610:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 800a612:	3201      	adds	r2, #1
 800a614:	3301      	adds	r3, #1
 800a616:	6022      	str	r2, [r4, #0]
 800a618:	9345      	str	r3, [sp, #276]	@ 0x114
 800a61a:	e7d8      	b.n	800a5ce <__ssvfiscanf_r+0x4a>
 800a61c:	9141      	str	r1, [sp, #260]	@ 0x104
 800a61e:	9143      	str	r1, [sp, #268]	@ 0x10c
 800a620:	7853      	ldrb	r3, [r2, #1]
 800a622:	2b2a      	cmp	r3, #42	@ 0x2a
 800a624:	bf02      	ittt	eq
 800a626:	2310      	moveq	r3, #16
 800a628:	1c95      	addeq	r5, r2, #2
 800a62a:	9341      	streq	r3, [sp, #260]	@ 0x104
 800a62c:	220a      	movs	r2, #10
 800a62e:	46a9      	mov	r9, r5
 800a630:	f819 1b01 	ldrb.w	r1, [r9], #1
 800a634:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 800a638:	2b09      	cmp	r3, #9
 800a63a:	d91e      	bls.n	800a67a <__ssvfiscanf_r+0xf6>
 800a63c:	f8df a1f8 	ldr.w	sl, [pc, #504]	@ 800a838 <__ssvfiscanf_r+0x2b4>
 800a640:	2203      	movs	r2, #3
 800a642:	4650      	mov	r0, sl
 800a644:	f7f5 fddc 	bl	8000200 <memchr>
 800a648:	b138      	cbz	r0, 800a65a <__ssvfiscanf_r+0xd6>
 800a64a:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800a64c:	eba0 000a 	sub.w	r0, r0, sl
 800a650:	2301      	movs	r3, #1
 800a652:	4083      	lsls	r3, r0
 800a654:	4313      	orrs	r3, r2
 800a656:	9341      	str	r3, [sp, #260]	@ 0x104
 800a658:	464d      	mov	r5, r9
 800a65a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800a65e:	2b78      	cmp	r3, #120	@ 0x78
 800a660:	d806      	bhi.n	800a670 <__ssvfiscanf_r+0xec>
 800a662:	2b57      	cmp	r3, #87	@ 0x57
 800a664:	d810      	bhi.n	800a688 <__ssvfiscanf_r+0x104>
 800a666:	2b25      	cmp	r3, #37	@ 0x25
 800a668:	d0c5      	beq.n	800a5f6 <__ssvfiscanf_r+0x72>
 800a66a:	d857      	bhi.n	800a71c <__ssvfiscanf_r+0x198>
 800a66c:	2b00      	cmp	r3, #0
 800a66e:	d065      	beq.n	800a73c <__ssvfiscanf_r+0x1b8>
 800a670:	2303      	movs	r3, #3
 800a672:	9347      	str	r3, [sp, #284]	@ 0x11c
 800a674:	230a      	movs	r3, #10
 800a676:	9342      	str	r3, [sp, #264]	@ 0x108
 800a678:	e078      	b.n	800a76c <__ssvfiscanf_r+0x1e8>
 800a67a:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 800a67c:	fb02 1103 	mla	r1, r2, r3, r1
 800a680:	3930      	subs	r1, #48	@ 0x30
 800a682:	9143      	str	r1, [sp, #268]	@ 0x10c
 800a684:	464d      	mov	r5, r9
 800a686:	e7d2      	b.n	800a62e <__ssvfiscanf_r+0xaa>
 800a688:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 800a68c:	2a20      	cmp	r2, #32
 800a68e:	d8ef      	bhi.n	800a670 <__ssvfiscanf_r+0xec>
 800a690:	a101      	add	r1, pc, #4	@ (adr r1, 800a698 <__ssvfiscanf_r+0x114>)
 800a692:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800a696:	bf00      	nop
 800a698:	0800a74b 	.word	0x0800a74b
 800a69c:	0800a671 	.word	0x0800a671
 800a6a0:	0800a671 	.word	0x0800a671
 800a6a4:	0800a7a5 	.word	0x0800a7a5
 800a6a8:	0800a671 	.word	0x0800a671
 800a6ac:	0800a671 	.word	0x0800a671
 800a6b0:	0800a671 	.word	0x0800a671
 800a6b4:	0800a671 	.word	0x0800a671
 800a6b8:	0800a671 	.word	0x0800a671
 800a6bc:	0800a671 	.word	0x0800a671
 800a6c0:	0800a671 	.word	0x0800a671
 800a6c4:	0800a7bb 	.word	0x0800a7bb
 800a6c8:	0800a7a1 	.word	0x0800a7a1
 800a6cc:	0800a723 	.word	0x0800a723
 800a6d0:	0800a723 	.word	0x0800a723
 800a6d4:	0800a723 	.word	0x0800a723
 800a6d8:	0800a671 	.word	0x0800a671
 800a6dc:	0800a75d 	.word	0x0800a75d
 800a6e0:	0800a671 	.word	0x0800a671
 800a6e4:	0800a671 	.word	0x0800a671
 800a6e8:	0800a671 	.word	0x0800a671
 800a6ec:	0800a671 	.word	0x0800a671
 800a6f0:	0800a7cb 	.word	0x0800a7cb
 800a6f4:	0800a765 	.word	0x0800a765
 800a6f8:	0800a743 	.word	0x0800a743
 800a6fc:	0800a671 	.word	0x0800a671
 800a700:	0800a671 	.word	0x0800a671
 800a704:	0800a7c7 	.word	0x0800a7c7
 800a708:	0800a671 	.word	0x0800a671
 800a70c:	0800a7a1 	.word	0x0800a7a1
 800a710:	0800a671 	.word	0x0800a671
 800a714:	0800a671 	.word	0x0800a671
 800a718:	0800a74b 	.word	0x0800a74b
 800a71c:	3b45      	subs	r3, #69	@ 0x45
 800a71e:	2b02      	cmp	r3, #2
 800a720:	d8a6      	bhi.n	800a670 <__ssvfiscanf_r+0xec>
 800a722:	2305      	movs	r3, #5
 800a724:	e021      	b.n	800a76a <__ssvfiscanf_r+0x1e6>
 800a726:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800a728:	4621      	mov	r1, r4
 800a72a:	4630      	mov	r0, r6
 800a72c:	4798      	blx	r3
 800a72e:	2800      	cmp	r0, #0
 800a730:	f43f af66 	beq.w	800a600 <__ssvfiscanf_r+0x7c>
 800a734:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800a736:	2800      	cmp	r0, #0
 800a738:	f040 808b 	bne.w	800a852 <__ssvfiscanf_r+0x2ce>
 800a73c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a740:	e08b      	b.n	800a85a <__ssvfiscanf_r+0x2d6>
 800a742:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800a744:	f042 0220 	orr.w	r2, r2, #32
 800a748:	9241      	str	r2, [sp, #260]	@ 0x104
 800a74a:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800a74c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a750:	9241      	str	r2, [sp, #260]	@ 0x104
 800a752:	2210      	movs	r2, #16
 800a754:	2b6e      	cmp	r3, #110	@ 0x6e
 800a756:	9242      	str	r2, [sp, #264]	@ 0x108
 800a758:	d902      	bls.n	800a760 <__ssvfiscanf_r+0x1dc>
 800a75a:	e005      	b.n	800a768 <__ssvfiscanf_r+0x1e4>
 800a75c:	2300      	movs	r3, #0
 800a75e:	9342      	str	r3, [sp, #264]	@ 0x108
 800a760:	2303      	movs	r3, #3
 800a762:	e002      	b.n	800a76a <__ssvfiscanf_r+0x1e6>
 800a764:	2308      	movs	r3, #8
 800a766:	9342      	str	r3, [sp, #264]	@ 0x108
 800a768:	2304      	movs	r3, #4
 800a76a:	9347      	str	r3, [sp, #284]	@ 0x11c
 800a76c:	6863      	ldr	r3, [r4, #4]
 800a76e:	2b00      	cmp	r3, #0
 800a770:	dd39      	ble.n	800a7e6 <__ssvfiscanf_r+0x262>
 800a772:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800a774:	0659      	lsls	r1, r3, #25
 800a776:	d404      	bmi.n	800a782 <__ssvfiscanf_r+0x1fe>
 800a778:	6823      	ldr	r3, [r4, #0]
 800a77a:	781a      	ldrb	r2, [r3, #0]
 800a77c:	5cba      	ldrb	r2, [r7, r2]
 800a77e:	0712      	lsls	r2, r2, #28
 800a780:	d438      	bmi.n	800a7f4 <__ssvfiscanf_r+0x270>
 800a782:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 800a784:	2b02      	cmp	r3, #2
 800a786:	dc47      	bgt.n	800a818 <__ssvfiscanf_r+0x294>
 800a788:	466b      	mov	r3, sp
 800a78a:	4622      	mov	r2, r4
 800a78c:	a941      	add	r1, sp, #260	@ 0x104
 800a78e:	4630      	mov	r0, r6
 800a790:	f000 f9ae 	bl	800aaf0 <_scanf_chars>
 800a794:	2801      	cmp	r0, #1
 800a796:	d064      	beq.n	800a862 <__ssvfiscanf_r+0x2de>
 800a798:	2802      	cmp	r0, #2
 800a79a:	f47f af18 	bne.w	800a5ce <__ssvfiscanf_r+0x4a>
 800a79e:	e7c9      	b.n	800a734 <__ssvfiscanf_r+0x1b0>
 800a7a0:	220a      	movs	r2, #10
 800a7a2:	e7d7      	b.n	800a754 <__ssvfiscanf_r+0x1d0>
 800a7a4:	4629      	mov	r1, r5
 800a7a6:	4640      	mov	r0, r8
 800a7a8:	f000 fbfe 	bl	800afa8 <__sccl>
 800a7ac:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800a7ae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a7b2:	9341      	str	r3, [sp, #260]	@ 0x104
 800a7b4:	4605      	mov	r5, r0
 800a7b6:	2301      	movs	r3, #1
 800a7b8:	e7d7      	b.n	800a76a <__ssvfiscanf_r+0x1e6>
 800a7ba:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800a7bc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a7c0:	9341      	str	r3, [sp, #260]	@ 0x104
 800a7c2:	2300      	movs	r3, #0
 800a7c4:	e7d1      	b.n	800a76a <__ssvfiscanf_r+0x1e6>
 800a7c6:	2302      	movs	r3, #2
 800a7c8:	e7cf      	b.n	800a76a <__ssvfiscanf_r+0x1e6>
 800a7ca:	9841      	ldr	r0, [sp, #260]	@ 0x104
 800a7cc:	06c3      	lsls	r3, r0, #27
 800a7ce:	f53f aefe 	bmi.w	800a5ce <__ssvfiscanf_r+0x4a>
 800a7d2:	9b00      	ldr	r3, [sp, #0]
 800a7d4:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800a7d6:	1d19      	adds	r1, r3, #4
 800a7d8:	9100      	str	r1, [sp, #0]
 800a7da:	681b      	ldr	r3, [r3, #0]
 800a7dc:	07c0      	lsls	r0, r0, #31
 800a7de:	bf4c      	ite	mi
 800a7e0:	801a      	strhmi	r2, [r3, #0]
 800a7e2:	601a      	strpl	r2, [r3, #0]
 800a7e4:	e6f3      	b.n	800a5ce <__ssvfiscanf_r+0x4a>
 800a7e6:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800a7e8:	4621      	mov	r1, r4
 800a7ea:	4630      	mov	r0, r6
 800a7ec:	4798      	blx	r3
 800a7ee:	2800      	cmp	r0, #0
 800a7f0:	d0bf      	beq.n	800a772 <__ssvfiscanf_r+0x1ee>
 800a7f2:	e79f      	b.n	800a734 <__ssvfiscanf_r+0x1b0>
 800a7f4:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800a7f6:	3201      	adds	r2, #1
 800a7f8:	9245      	str	r2, [sp, #276]	@ 0x114
 800a7fa:	6862      	ldr	r2, [r4, #4]
 800a7fc:	3a01      	subs	r2, #1
 800a7fe:	2a00      	cmp	r2, #0
 800a800:	6062      	str	r2, [r4, #4]
 800a802:	dd02      	ble.n	800a80a <__ssvfiscanf_r+0x286>
 800a804:	3301      	adds	r3, #1
 800a806:	6023      	str	r3, [r4, #0]
 800a808:	e7b6      	b.n	800a778 <__ssvfiscanf_r+0x1f4>
 800a80a:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800a80c:	4621      	mov	r1, r4
 800a80e:	4630      	mov	r0, r6
 800a810:	4798      	blx	r3
 800a812:	2800      	cmp	r0, #0
 800a814:	d0b0      	beq.n	800a778 <__ssvfiscanf_r+0x1f4>
 800a816:	e78d      	b.n	800a734 <__ssvfiscanf_r+0x1b0>
 800a818:	2b04      	cmp	r3, #4
 800a81a:	dc0f      	bgt.n	800a83c <__ssvfiscanf_r+0x2b8>
 800a81c:	466b      	mov	r3, sp
 800a81e:	4622      	mov	r2, r4
 800a820:	a941      	add	r1, sp, #260	@ 0x104
 800a822:	4630      	mov	r0, r6
 800a824:	f000 f9be 	bl	800aba4 <_scanf_i>
 800a828:	e7b4      	b.n	800a794 <__ssvfiscanf_r+0x210>
 800a82a:	bf00      	nop
 800a82c:	0800a4d5 	.word	0x0800a4d5
 800a830:	0800a54b 	.word	0x0800a54b
 800a834:	0800bca1 	.word	0x0800bca1
 800a838:	0800c01e 	.word	0x0800c01e
 800a83c:	4b0a      	ldr	r3, [pc, #40]	@ (800a868 <__ssvfiscanf_r+0x2e4>)
 800a83e:	2b00      	cmp	r3, #0
 800a840:	f43f aec5 	beq.w	800a5ce <__ssvfiscanf_r+0x4a>
 800a844:	466b      	mov	r3, sp
 800a846:	4622      	mov	r2, r4
 800a848:	a941      	add	r1, sp, #260	@ 0x104
 800a84a:	4630      	mov	r0, r6
 800a84c:	f7fc fd0e 	bl	800726c <_scanf_float>
 800a850:	e7a0      	b.n	800a794 <__ssvfiscanf_r+0x210>
 800a852:	89a3      	ldrh	r3, [r4, #12]
 800a854:	065b      	lsls	r3, r3, #25
 800a856:	f53f af71 	bmi.w	800a73c <__ssvfiscanf_r+0x1b8>
 800a85a:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 800a85e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a862:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800a864:	e7f9      	b.n	800a85a <__ssvfiscanf_r+0x2d6>
 800a866:	bf00      	nop
 800a868:	0800726d 	.word	0x0800726d

0800a86c <__sfputc_r>:
 800a86c:	6893      	ldr	r3, [r2, #8]
 800a86e:	3b01      	subs	r3, #1
 800a870:	2b00      	cmp	r3, #0
 800a872:	b410      	push	{r4}
 800a874:	6093      	str	r3, [r2, #8]
 800a876:	da08      	bge.n	800a88a <__sfputc_r+0x1e>
 800a878:	6994      	ldr	r4, [r2, #24]
 800a87a:	42a3      	cmp	r3, r4
 800a87c:	db01      	blt.n	800a882 <__sfputc_r+0x16>
 800a87e:	290a      	cmp	r1, #10
 800a880:	d103      	bne.n	800a88a <__sfputc_r+0x1e>
 800a882:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a886:	f7fd b8fa 	b.w	8007a7e <__swbuf_r>
 800a88a:	6813      	ldr	r3, [r2, #0]
 800a88c:	1c58      	adds	r0, r3, #1
 800a88e:	6010      	str	r0, [r2, #0]
 800a890:	7019      	strb	r1, [r3, #0]
 800a892:	4608      	mov	r0, r1
 800a894:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a898:	4770      	bx	lr

0800a89a <__sfputs_r>:
 800a89a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a89c:	4606      	mov	r6, r0
 800a89e:	460f      	mov	r7, r1
 800a8a0:	4614      	mov	r4, r2
 800a8a2:	18d5      	adds	r5, r2, r3
 800a8a4:	42ac      	cmp	r4, r5
 800a8a6:	d101      	bne.n	800a8ac <__sfputs_r+0x12>
 800a8a8:	2000      	movs	r0, #0
 800a8aa:	e007      	b.n	800a8bc <__sfputs_r+0x22>
 800a8ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a8b0:	463a      	mov	r2, r7
 800a8b2:	4630      	mov	r0, r6
 800a8b4:	f7ff ffda 	bl	800a86c <__sfputc_r>
 800a8b8:	1c43      	adds	r3, r0, #1
 800a8ba:	d1f3      	bne.n	800a8a4 <__sfputs_r+0xa>
 800a8bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a8c0 <_vfiprintf_r>:
 800a8c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8c4:	460d      	mov	r5, r1
 800a8c6:	b09d      	sub	sp, #116	@ 0x74
 800a8c8:	4614      	mov	r4, r2
 800a8ca:	4698      	mov	r8, r3
 800a8cc:	4606      	mov	r6, r0
 800a8ce:	b118      	cbz	r0, 800a8d8 <_vfiprintf_r+0x18>
 800a8d0:	6a03      	ldr	r3, [r0, #32]
 800a8d2:	b90b      	cbnz	r3, 800a8d8 <_vfiprintf_r+0x18>
 800a8d4:	f7fc ff6a 	bl	80077ac <__sinit>
 800a8d8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a8da:	07d9      	lsls	r1, r3, #31
 800a8dc:	d405      	bmi.n	800a8ea <_vfiprintf_r+0x2a>
 800a8de:	89ab      	ldrh	r3, [r5, #12]
 800a8e0:	059a      	lsls	r2, r3, #22
 800a8e2:	d402      	bmi.n	800a8ea <_vfiprintf_r+0x2a>
 800a8e4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a8e6:	f7fd fa12 	bl	8007d0e <__retarget_lock_acquire_recursive>
 800a8ea:	89ab      	ldrh	r3, [r5, #12]
 800a8ec:	071b      	lsls	r3, r3, #28
 800a8ee:	d501      	bpl.n	800a8f4 <_vfiprintf_r+0x34>
 800a8f0:	692b      	ldr	r3, [r5, #16]
 800a8f2:	b99b      	cbnz	r3, 800a91c <_vfiprintf_r+0x5c>
 800a8f4:	4629      	mov	r1, r5
 800a8f6:	4630      	mov	r0, r6
 800a8f8:	f7fd f900 	bl	8007afc <__swsetup_r>
 800a8fc:	b170      	cbz	r0, 800a91c <_vfiprintf_r+0x5c>
 800a8fe:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a900:	07dc      	lsls	r4, r3, #31
 800a902:	d504      	bpl.n	800a90e <_vfiprintf_r+0x4e>
 800a904:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a908:	b01d      	add	sp, #116	@ 0x74
 800a90a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a90e:	89ab      	ldrh	r3, [r5, #12]
 800a910:	0598      	lsls	r0, r3, #22
 800a912:	d4f7      	bmi.n	800a904 <_vfiprintf_r+0x44>
 800a914:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a916:	f7fd f9fb 	bl	8007d10 <__retarget_lock_release_recursive>
 800a91a:	e7f3      	b.n	800a904 <_vfiprintf_r+0x44>
 800a91c:	2300      	movs	r3, #0
 800a91e:	9309      	str	r3, [sp, #36]	@ 0x24
 800a920:	2320      	movs	r3, #32
 800a922:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a926:	f8cd 800c 	str.w	r8, [sp, #12]
 800a92a:	2330      	movs	r3, #48	@ 0x30
 800a92c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800aadc <_vfiprintf_r+0x21c>
 800a930:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a934:	f04f 0901 	mov.w	r9, #1
 800a938:	4623      	mov	r3, r4
 800a93a:	469a      	mov	sl, r3
 800a93c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a940:	b10a      	cbz	r2, 800a946 <_vfiprintf_r+0x86>
 800a942:	2a25      	cmp	r2, #37	@ 0x25
 800a944:	d1f9      	bne.n	800a93a <_vfiprintf_r+0x7a>
 800a946:	ebba 0b04 	subs.w	fp, sl, r4
 800a94a:	d00b      	beq.n	800a964 <_vfiprintf_r+0xa4>
 800a94c:	465b      	mov	r3, fp
 800a94e:	4622      	mov	r2, r4
 800a950:	4629      	mov	r1, r5
 800a952:	4630      	mov	r0, r6
 800a954:	f7ff ffa1 	bl	800a89a <__sfputs_r>
 800a958:	3001      	adds	r0, #1
 800a95a:	f000 80a7 	beq.w	800aaac <_vfiprintf_r+0x1ec>
 800a95e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a960:	445a      	add	r2, fp
 800a962:	9209      	str	r2, [sp, #36]	@ 0x24
 800a964:	f89a 3000 	ldrb.w	r3, [sl]
 800a968:	2b00      	cmp	r3, #0
 800a96a:	f000 809f 	beq.w	800aaac <_vfiprintf_r+0x1ec>
 800a96e:	2300      	movs	r3, #0
 800a970:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a974:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a978:	f10a 0a01 	add.w	sl, sl, #1
 800a97c:	9304      	str	r3, [sp, #16]
 800a97e:	9307      	str	r3, [sp, #28]
 800a980:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a984:	931a      	str	r3, [sp, #104]	@ 0x68
 800a986:	4654      	mov	r4, sl
 800a988:	2205      	movs	r2, #5
 800a98a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a98e:	4853      	ldr	r0, [pc, #332]	@ (800aadc <_vfiprintf_r+0x21c>)
 800a990:	f7f5 fc36 	bl	8000200 <memchr>
 800a994:	9a04      	ldr	r2, [sp, #16]
 800a996:	b9d8      	cbnz	r0, 800a9d0 <_vfiprintf_r+0x110>
 800a998:	06d1      	lsls	r1, r2, #27
 800a99a:	bf44      	itt	mi
 800a99c:	2320      	movmi	r3, #32
 800a99e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a9a2:	0713      	lsls	r3, r2, #28
 800a9a4:	bf44      	itt	mi
 800a9a6:	232b      	movmi	r3, #43	@ 0x2b
 800a9a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a9ac:	f89a 3000 	ldrb.w	r3, [sl]
 800a9b0:	2b2a      	cmp	r3, #42	@ 0x2a
 800a9b2:	d015      	beq.n	800a9e0 <_vfiprintf_r+0x120>
 800a9b4:	9a07      	ldr	r2, [sp, #28]
 800a9b6:	4654      	mov	r4, sl
 800a9b8:	2000      	movs	r0, #0
 800a9ba:	f04f 0c0a 	mov.w	ip, #10
 800a9be:	4621      	mov	r1, r4
 800a9c0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a9c4:	3b30      	subs	r3, #48	@ 0x30
 800a9c6:	2b09      	cmp	r3, #9
 800a9c8:	d94b      	bls.n	800aa62 <_vfiprintf_r+0x1a2>
 800a9ca:	b1b0      	cbz	r0, 800a9fa <_vfiprintf_r+0x13a>
 800a9cc:	9207      	str	r2, [sp, #28]
 800a9ce:	e014      	b.n	800a9fa <_vfiprintf_r+0x13a>
 800a9d0:	eba0 0308 	sub.w	r3, r0, r8
 800a9d4:	fa09 f303 	lsl.w	r3, r9, r3
 800a9d8:	4313      	orrs	r3, r2
 800a9da:	9304      	str	r3, [sp, #16]
 800a9dc:	46a2      	mov	sl, r4
 800a9de:	e7d2      	b.n	800a986 <_vfiprintf_r+0xc6>
 800a9e0:	9b03      	ldr	r3, [sp, #12]
 800a9e2:	1d19      	adds	r1, r3, #4
 800a9e4:	681b      	ldr	r3, [r3, #0]
 800a9e6:	9103      	str	r1, [sp, #12]
 800a9e8:	2b00      	cmp	r3, #0
 800a9ea:	bfbb      	ittet	lt
 800a9ec:	425b      	neglt	r3, r3
 800a9ee:	f042 0202 	orrlt.w	r2, r2, #2
 800a9f2:	9307      	strge	r3, [sp, #28]
 800a9f4:	9307      	strlt	r3, [sp, #28]
 800a9f6:	bfb8      	it	lt
 800a9f8:	9204      	strlt	r2, [sp, #16]
 800a9fa:	7823      	ldrb	r3, [r4, #0]
 800a9fc:	2b2e      	cmp	r3, #46	@ 0x2e
 800a9fe:	d10a      	bne.n	800aa16 <_vfiprintf_r+0x156>
 800aa00:	7863      	ldrb	r3, [r4, #1]
 800aa02:	2b2a      	cmp	r3, #42	@ 0x2a
 800aa04:	d132      	bne.n	800aa6c <_vfiprintf_r+0x1ac>
 800aa06:	9b03      	ldr	r3, [sp, #12]
 800aa08:	1d1a      	adds	r2, r3, #4
 800aa0a:	681b      	ldr	r3, [r3, #0]
 800aa0c:	9203      	str	r2, [sp, #12]
 800aa0e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800aa12:	3402      	adds	r4, #2
 800aa14:	9305      	str	r3, [sp, #20]
 800aa16:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800aaec <_vfiprintf_r+0x22c>
 800aa1a:	7821      	ldrb	r1, [r4, #0]
 800aa1c:	2203      	movs	r2, #3
 800aa1e:	4650      	mov	r0, sl
 800aa20:	f7f5 fbee 	bl	8000200 <memchr>
 800aa24:	b138      	cbz	r0, 800aa36 <_vfiprintf_r+0x176>
 800aa26:	9b04      	ldr	r3, [sp, #16]
 800aa28:	eba0 000a 	sub.w	r0, r0, sl
 800aa2c:	2240      	movs	r2, #64	@ 0x40
 800aa2e:	4082      	lsls	r2, r0
 800aa30:	4313      	orrs	r3, r2
 800aa32:	3401      	adds	r4, #1
 800aa34:	9304      	str	r3, [sp, #16]
 800aa36:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aa3a:	4829      	ldr	r0, [pc, #164]	@ (800aae0 <_vfiprintf_r+0x220>)
 800aa3c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800aa40:	2206      	movs	r2, #6
 800aa42:	f7f5 fbdd 	bl	8000200 <memchr>
 800aa46:	2800      	cmp	r0, #0
 800aa48:	d03f      	beq.n	800aaca <_vfiprintf_r+0x20a>
 800aa4a:	4b26      	ldr	r3, [pc, #152]	@ (800aae4 <_vfiprintf_r+0x224>)
 800aa4c:	bb1b      	cbnz	r3, 800aa96 <_vfiprintf_r+0x1d6>
 800aa4e:	9b03      	ldr	r3, [sp, #12]
 800aa50:	3307      	adds	r3, #7
 800aa52:	f023 0307 	bic.w	r3, r3, #7
 800aa56:	3308      	adds	r3, #8
 800aa58:	9303      	str	r3, [sp, #12]
 800aa5a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aa5c:	443b      	add	r3, r7
 800aa5e:	9309      	str	r3, [sp, #36]	@ 0x24
 800aa60:	e76a      	b.n	800a938 <_vfiprintf_r+0x78>
 800aa62:	fb0c 3202 	mla	r2, ip, r2, r3
 800aa66:	460c      	mov	r4, r1
 800aa68:	2001      	movs	r0, #1
 800aa6a:	e7a8      	b.n	800a9be <_vfiprintf_r+0xfe>
 800aa6c:	2300      	movs	r3, #0
 800aa6e:	3401      	adds	r4, #1
 800aa70:	9305      	str	r3, [sp, #20]
 800aa72:	4619      	mov	r1, r3
 800aa74:	f04f 0c0a 	mov.w	ip, #10
 800aa78:	4620      	mov	r0, r4
 800aa7a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800aa7e:	3a30      	subs	r2, #48	@ 0x30
 800aa80:	2a09      	cmp	r2, #9
 800aa82:	d903      	bls.n	800aa8c <_vfiprintf_r+0x1cc>
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	d0c6      	beq.n	800aa16 <_vfiprintf_r+0x156>
 800aa88:	9105      	str	r1, [sp, #20]
 800aa8a:	e7c4      	b.n	800aa16 <_vfiprintf_r+0x156>
 800aa8c:	fb0c 2101 	mla	r1, ip, r1, r2
 800aa90:	4604      	mov	r4, r0
 800aa92:	2301      	movs	r3, #1
 800aa94:	e7f0      	b.n	800aa78 <_vfiprintf_r+0x1b8>
 800aa96:	ab03      	add	r3, sp, #12
 800aa98:	9300      	str	r3, [sp, #0]
 800aa9a:	462a      	mov	r2, r5
 800aa9c:	4b12      	ldr	r3, [pc, #72]	@ (800aae8 <_vfiprintf_r+0x228>)
 800aa9e:	a904      	add	r1, sp, #16
 800aaa0:	4630      	mov	r0, r6
 800aaa2:	f7fc f82b 	bl	8006afc <_printf_float>
 800aaa6:	4607      	mov	r7, r0
 800aaa8:	1c78      	adds	r0, r7, #1
 800aaaa:	d1d6      	bne.n	800aa5a <_vfiprintf_r+0x19a>
 800aaac:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800aaae:	07d9      	lsls	r1, r3, #31
 800aab0:	d405      	bmi.n	800aabe <_vfiprintf_r+0x1fe>
 800aab2:	89ab      	ldrh	r3, [r5, #12]
 800aab4:	059a      	lsls	r2, r3, #22
 800aab6:	d402      	bmi.n	800aabe <_vfiprintf_r+0x1fe>
 800aab8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800aaba:	f7fd f929 	bl	8007d10 <__retarget_lock_release_recursive>
 800aabe:	89ab      	ldrh	r3, [r5, #12]
 800aac0:	065b      	lsls	r3, r3, #25
 800aac2:	f53f af1f 	bmi.w	800a904 <_vfiprintf_r+0x44>
 800aac6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800aac8:	e71e      	b.n	800a908 <_vfiprintf_r+0x48>
 800aaca:	ab03      	add	r3, sp, #12
 800aacc:	9300      	str	r3, [sp, #0]
 800aace:	462a      	mov	r2, r5
 800aad0:	4b05      	ldr	r3, [pc, #20]	@ (800aae8 <_vfiprintf_r+0x228>)
 800aad2:	a904      	add	r1, sp, #16
 800aad4:	4630      	mov	r0, r6
 800aad6:	f7fc faa9 	bl	800702c <_printf_i>
 800aada:	e7e4      	b.n	800aaa6 <_vfiprintf_r+0x1e6>
 800aadc:	0800c018 	.word	0x0800c018
 800aae0:	0800c022 	.word	0x0800c022
 800aae4:	08006afd 	.word	0x08006afd
 800aae8:	0800a89b 	.word	0x0800a89b
 800aaec:	0800c01e 	.word	0x0800c01e

0800aaf0 <_scanf_chars>:
 800aaf0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aaf4:	4615      	mov	r5, r2
 800aaf6:	688a      	ldr	r2, [r1, #8]
 800aaf8:	4680      	mov	r8, r0
 800aafa:	460c      	mov	r4, r1
 800aafc:	b932      	cbnz	r2, 800ab0c <_scanf_chars+0x1c>
 800aafe:	698a      	ldr	r2, [r1, #24]
 800ab00:	2a00      	cmp	r2, #0
 800ab02:	bf14      	ite	ne
 800ab04:	f04f 32ff 	movne.w	r2, #4294967295	@ 0xffffffff
 800ab08:	2201      	moveq	r2, #1
 800ab0a:	608a      	str	r2, [r1, #8]
 800ab0c:	6822      	ldr	r2, [r4, #0]
 800ab0e:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 800aba0 <_scanf_chars+0xb0>
 800ab12:	06d1      	lsls	r1, r2, #27
 800ab14:	bf5f      	itttt	pl
 800ab16:	681a      	ldrpl	r2, [r3, #0]
 800ab18:	1d11      	addpl	r1, r2, #4
 800ab1a:	6019      	strpl	r1, [r3, #0]
 800ab1c:	6816      	ldrpl	r6, [r2, #0]
 800ab1e:	2700      	movs	r7, #0
 800ab20:	69a0      	ldr	r0, [r4, #24]
 800ab22:	b188      	cbz	r0, 800ab48 <_scanf_chars+0x58>
 800ab24:	2801      	cmp	r0, #1
 800ab26:	d107      	bne.n	800ab38 <_scanf_chars+0x48>
 800ab28:	682b      	ldr	r3, [r5, #0]
 800ab2a:	781a      	ldrb	r2, [r3, #0]
 800ab2c:	6963      	ldr	r3, [r4, #20]
 800ab2e:	5c9b      	ldrb	r3, [r3, r2]
 800ab30:	b953      	cbnz	r3, 800ab48 <_scanf_chars+0x58>
 800ab32:	2f00      	cmp	r7, #0
 800ab34:	d031      	beq.n	800ab9a <_scanf_chars+0xaa>
 800ab36:	e022      	b.n	800ab7e <_scanf_chars+0x8e>
 800ab38:	2802      	cmp	r0, #2
 800ab3a:	d120      	bne.n	800ab7e <_scanf_chars+0x8e>
 800ab3c:	682b      	ldr	r3, [r5, #0]
 800ab3e:	781b      	ldrb	r3, [r3, #0]
 800ab40:	f819 3003 	ldrb.w	r3, [r9, r3]
 800ab44:	071b      	lsls	r3, r3, #28
 800ab46:	d41a      	bmi.n	800ab7e <_scanf_chars+0x8e>
 800ab48:	6823      	ldr	r3, [r4, #0]
 800ab4a:	06da      	lsls	r2, r3, #27
 800ab4c:	bf5e      	ittt	pl
 800ab4e:	682b      	ldrpl	r3, [r5, #0]
 800ab50:	781b      	ldrbpl	r3, [r3, #0]
 800ab52:	f806 3b01 	strbpl.w	r3, [r6], #1
 800ab56:	682a      	ldr	r2, [r5, #0]
 800ab58:	686b      	ldr	r3, [r5, #4]
 800ab5a:	3201      	adds	r2, #1
 800ab5c:	602a      	str	r2, [r5, #0]
 800ab5e:	68a2      	ldr	r2, [r4, #8]
 800ab60:	3b01      	subs	r3, #1
 800ab62:	3a01      	subs	r2, #1
 800ab64:	606b      	str	r3, [r5, #4]
 800ab66:	3701      	adds	r7, #1
 800ab68:	60a2      	str	r2, [r4, #8]
 800ab6a:	b142      	cbz	r2, 800ab7e <_scanf_chars+0x8e>
 800ab6c:	2b00      	cmp	r3, #0
 800ab6e:	dcd7      	bgt.n	800ab20 <_scanf_chars+0x30>
 800ab70:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800ab74:	4629      	mov	r1, r5
 800ab76:	4640      	mov	r0, r8
 800ab78:	4798      	blx	r3
 800ab7a:	2800      	cmp	r0, #0
 800ab7c:	d0d0      	beq.n	800ab20 <_scanf_chars+0x30>
 800ab7e:	6823      	ldr	r3, [r4, #0]
 800ab80:	f013 0310 	ands.w	r3, r3, #16
 800ab84:	d105      	bne.n	800ab92 <_scanf_chars+0xa2>
 800ab86:	68e2      	ldr	r2, [r4, #12]
 800ab88:	3201      	adds	r2, #1
 800ab8a:	60e2      	str	r2, [r4, #12]
 800ab8c:	69a2      	ldr	r2, [r4, #24]
 800ab8e:	b102      	cbz	r2, 800ab92 <_scanf_chars+0xa2>
 800ab90:	7033      	strb	r3, [r6, #0]
 800ab92:	6923      	ldr	r3, [r4, #16]
 800ab94:	443b      	add	r3, r7
 800ab96:	6123      	str	r3, [r4, #16]
 800ab98:	2000      	movs	r0, #0
 800ab9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ab9e:	bf00      	nop
 800aba0:	0800bca1 	.word	0x0800bca1

0800aba4 <_scanf_i>:
 800aba4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aba8:	4698      	mov	r8, r3
 800abaa:	4b74      	ldr	r3, [pc, #464]	@ (800ad7c <_scanf_i+0x1d8>)
 800abac:	460c      	mov	r4, r1
 800abae:	4682      	mov	sl, r0
 800abb0:	4616      	mov	r6, r2
 800abb2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800abb6:	b087      	sub	sp, #28
 800abb8:	ab03      	add	r3, sp, #12
 800abba:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800abbe:	4b70      	ldr	r3, [pc, #448]	@ (800ad80 <_scanf_i+0x1dc>)
 800abc0:	69a1      	ldr	r1, [r4, #24]
 800abc2:	4a70      	ldr	r2, [pc, #448]	@ (800ad84 <_scanf_i+0x1e0>)
 800abc4:	2903      	cmp	r1, #3
 800abc6:	bf08      	it	eq
 800abc8:	461a      	moveq	r2, r3
 800abca:	68a3      	ldr	r3, [r4, #8]
 800abcc:	9201      	str	r2, [sp, #4]
 800abce:	1e5a      	subs	r2, r3, #1
 800abd0:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800abd4:	bf88      	it	hi
 800abd6:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800abda:	4627      	mov	r7, r4
 800abdc:	bf82      	ittt	hi
 800abde:	eb03 0905 	addhi.w	r9, r3, r5
 800abe2:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800abe6:	60a3      	strhi	r3, [r4, #8]
 800abe8:	f857 3b1c 	ldr.w	r3, [r7], #28
 800abec:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 800abf0:	bf98      	it	ls
 800abf2:	f04f 0900 	movls.w	r9, #0
 800abf6:	6023      	str	r3, [r4, #0]
 800abf8:	463d      	mov	r5, r7
 800abfa:	f04f 0b00 	mov.w	fp, #0
 800abfe:	6831      	ldr	r1, [r6, #0]
 800ac00:	ab03      	add	r3, sp, #12
 800ac02:	7809      	ldrb	r1, [r1, #0]
 800ac04:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800ac08:	2202      	movs	r2, #2
 800ac0a:	f7f5 faf9 	bl	8000200 <memchr>
 800ac0e:	b328      	cbz	r0, 800ac5c <_scanf_i+0xb8>
 800ac10:	f1bb 0f01 	cmp.w	fp, #1
 800ac14:	d159      	bne.n	800acca <_scanf_i+0x126>
 800ac16:	6862      	ldr	r2, [r4, #4]
 800ac18:	b92a      	cbnz	r2, 800ac26 <_scanf_i+0x82>
 800ac1a:	6822      	ldr	r2, [r4, #0]
 800ac1c:	2108      	movs	r1, #8
 800ac1e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800ac22:	6061      	str	r1, [r4, #4]
 800ac24:	6022      	str	r2, [r4, #0]
 800ac26:	6822      	ldr	r2, [r4, #0]
 800ac28:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 800ac2c:	6022      	str	r2, [r4, #0]
 800ac2e:	68a2      	ldr	r2, [r4, #8]
 800ac30:	1e51      	subs	r1, r2, #1
 800ac32:	60a1      	str	r1, [r4, #8]
 800ac34:	b192      	cbz	r2, 800ac5c <_scanf_i+0xb8>
 800ac36:	6832      	ldr	r2, [r6, #0]
 800ac38:	1c51      	adds	r1, r2, #1
 800ac3a:	6031      	str	r1, [r6, #0]
 800ac3c:	7812      	ldrb	r2, [r2, #0]
 800ac3e:	f805 2b01 	strb.w	r2, [r5], #1
 800ac42:	6872      	ldr	r2, [r6, #4]
 800ac44:	3a01      	subs	r2, #1
 800ac46:	2a00      	cmp	r2, #0
 800ac48:	6072      	str	r2, [r6, #4]
 800ac4a:	dc07      	bgt.n	800ac5c <_scanf_i+0xb8>
 800ac4c:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 800ac50:	4631      	mov	r1, r6
 800ac52:	4650      	mov	r0, sl
 800ac54:	4790      	blx	r2
 800ac56:	2800      	cmp	r0, #0
 800ac58:	f040 8085 	bne.w	800ad66 <_scanf_i+0x1c2>
 800ac5c:	f10b 0b01 	add.w	fp, fp, #1
 800ac60:	f1bb 0f03 	cmp.w	fp, #3
 800ac64:	d1cb      	bne.n	800abfe <_scanf_i+0x5a>
 800ac66:	6863      	ldr	r3, [r4, #4]
 800ac68:	b90b      	cbnz	r3, 800ac6e <_scanf_i+0xca>
 800ac6a:	230a      	movs	r3, #10
 800ac6c:	6063      	str	r3, [r4, #4]
 800ac6e:	6863      	ldr	r3, [r4, #4]
 800ac70:	4945      	ldr	r1, [pc, #276]	@ (800ad88 <_scanf_i+0x1e4>)
 800ac72:	6960      	ldr	r0, [r4, #20]
 800ac74:	1ac9      	subs	r1, r1, r3
 800ac76:	f000 f997 	bl	800afa8 <__sccl>
 800ac7a:	f04f 0b00 	mov.w	fp, #0
 800ac7e:	68a3      	ldr	r3, [r4, #8]
 800ac80:	6822      	ldr	r2, [r4, #0]
 800ac82:	2b00      	cmp	r3, #0
 800ac84:	d03d      	beq.n	800ad02 <_scanf_i+0x15e>
 800ac86:	6831      	ldr	r1, [r6, #0]
 800ac88:	6960      	ldr	r0, [r4, #20]
 800ac8a:	f891 c000 	ldrb.w	ip, [r1]
 800ac8e:	f810 000c 	ldrb.w	r0, [r0, ip]
 800ac92:	2800      	cmp	r0, #0
 800ac94:	d035      	beq.n	800ad02 <_scanf_i+0x15e>
 800ac96:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 800ac9a:	d124      	bne.n	800ace6 <_scanf_i+0x142>
 800ac9c:	0510      	lsls	r0, r2, #20
 800ac9e:	d522      	bpl.n	800ace6 <_scanf_i+0x142>
 800aca0:	f10b 0b01 	add.w	fp, fp, #1
 800aca4:	f1b9 0f00 	cmp.w	r9, #0
 800aca8:	d003      	beq.n	800acb2 <_scanf_i+0x10e>
 800acaa:	3301      	adds	r3, #1
 800acac:	f109 39ff 	add.w	r9, r9, #4294967295	@ 0xffffffff
 800acb0:	60a3      	str	r3, [r4, #8]
 800acb2:	6873      	ldr	r3, [r6, #4]
 800acb4:	3b01      	subs	r3, #1
 800acb6:	2b00      	cmp	r3, #0
 800acb8:	6073      	str	r3, [r6, #4]
 800acba:	dd1b      	ble.n	800acf4 <_scanf_i+0x150>
 800acbc:	6833      	ldr	r3, [r6, #0]
 800acbe:	3301      	adds	r3, #1
 800acc0:	6033      	str	r3, [r6, #0]
 800acc2:	68a3      	ldr	r3, [r4, #8]
 800acc4:	3b01      	subs	r3, #1
 800acc6:	60a3      	str	r3, [r4, #8]
 800acc8:	e7d9      	b.n	800ac7e <_scanf_i+0xda>
 800acca:	f1bb 0f02 	cmp.w	fp, #2
 800acce:	d1ae      	bne.n	800ac2e <_scanf_i+0x8a>
 800acd0:	6822      	ldr	r2, [r4, #0]
 800acd2:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 800acd6:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 800acda:	d1bf      	bne.n	800ac5c <_scanf_i+0xb8>
 800acdc:	2110      	movs	r1, #16
 800acde:	6061      	str	r1, [r4, #4]
 800ace0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800ace4:	e7a2      	b.n	800ac2c <_scanf_i+0x88>
 800ace6:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 800acea:	6022      	str	r2, [r4, #0]
 800acec:	780b      	ldrb	r3, [r1, #0]
 800acee:	f805 3b01 	strb.w	r3, [r5], #1
 800acf2:	e7de      	b.n	800acb2 <_scanf_i+0x10e>
 800acf4:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800acf8:	4631      	mov	r1, r6
 800acfa:	4650      	mov	r0, sl
 800acfc:	4798      	blx	r3
 800acfe:	2800      	cmp	r0, #0
 800ad00:	d0df      	beq.n	800acc2 <_scanf_i+0x11e>
 800ad02:	6823      	ldr	r3, [r4, #0]
 800ad04:	05d9      	lsls	r1, r3, #23
 800ad06:	d50d      	bpl.n	800ad24 <_scanf_i+0x180>
 800ad08:	42bd      	cmp	r5, r7
 800ad0a:	d909      	bls.n	800ad20 <_scanf_i+0x17c>
 800ad0c:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800ad10:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800ad14:	4632      	mov	r2, r6
 800ad16:	4650      	mov	r0, sl
 800ad18:	4798      	blx	r3
 800ad1a:	f105 39ff 	add.w	r9, r5, #4294967295	@ 0xffffffff
 800ad1e:	464d      	mov	r5, r9
 800ad20:	42bd      	cmp	r5, r7
 800ad22:	d028      	beq.n	800ad76 <_scanf_i+0x1d2>
 800ad24:	6822      	ldr	r2, [r4, #0]
 800ad26:	f012 0210 	ands.w	r2, r2, #16
 800ad2a:	d113      	bne.n	800ad54 <_scanf_i+0x1b0>
 800ad2c:	702a      	strb	r2, [r5, #0]
 800ad2e:	6863      	ldr	r3, [r4, #4]
 800ad30:	9e01      	ldr	r6, [sp, #4]
 800ad32:	4639      	mov	r1, r7
 800ad34:	4650      	mov	r0, sl
 800ad36:	47b0      	blx	r6
 800ad38:	f8d8 3000 	ldr.w	r3, [r8]
 800ad3c:	6821      	ldr	r1, [r4, #0]
 800ad3e:	1d1a      	adds	r2, r3, #4
 800ad40:	f8c8 2000 	str.w	r2, [r8]
 800ad44:	f011 0f20 	tst.w	r1, #32
 800ad48:	681b      	ldr	r3, [r3, #0]
 800ad4a:	d00f      	beq.n	800ad6c <_scanf_i+0x1c8>
 800ad4c:	6018      	str	r0, [r3, #0]
 800ad4e:	68e3      	ldr	r3, [r4, #12]
 800ad50:	3301      	adds	r3, #1
 800ad52:	60e3      	str	r3, [r4, #12]
 800ad54:	6923      	ldr	r3, [r4, #16]
 800ad56:	1bed      	subs	r5, r5, r7
 800ad58:	445d      	add	r5, fp
 800ad5a:	442b      	add	r3, r5
 800ad5c:	6123      	str	r3, [r4, #16]
 800ad5e:	2000      	movs	r0, #0
 800ad60:	b007      	add	sp, #28
 800ad62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad66:	f04f 0b00 	mov.w	fp, #0
 800ad6a:	e7ca      	b.n	800ad02 <_scanf_i+0x15e>
 800ad6c:	07ca      	lsls	r2, r1, #31
 800ad6e:	bf4c      	ite	mi
 800ad70:	8018      	strhmi	r0, [r3, #0]
 800ad72:	6018      	strpl	r0, [r3, #0]
 800ad74:	e7eb      	b.n	800ad4e <_scanf_i+0x1aa>
 800ad76:	2001      	movs	r0, #1
 800ad78:	e7f2      	b.n	800ad60 <_scanf_i+0x1bc>
 800ad7a:	bf00      	nop
 800ad7c:	0800bc74 	.word	0x0800bc74
 800ad80:	0800a221 	.word	0x0800a221
 800ad84:	080069a5 	.word	0x080069a5
 800ad88:	0800c039 	.word	0x0800c039

0800ad8c <__sflush_r>:
 800ad8c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ad90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ad94:	0716      	lsls	r6, r2, #28
 800ad96:	4605      	mov	r5, r0
 800ad98:	460c      	mov	r4, r1
 800ad9a:	d454      	bmi.n	800ae46 <__sflush_r+0xba>
 800ad9c:	684b      	ldr	r3, [r1, #4]
 800ad9e:	2b00      	cmp	r3, #0
 800ada0:	dc02      	bgt.n	800ada8 <__sflush_r+0x1c>
 800ada2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800ada4:	2b00      	cmp	r3, #0
 800ada6:	dd48      	ble.n	800ae3a <__sflush_r+0xae>
 800ada8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800adaa:	2e00      	cmp	r6, #0
 800adac:	d045      	beq.n	800ae3a <__sflush_r+0xae>
 800adae:	2300      	movs	r3, #0
 800adb0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800adb4:	682f      	ldr	r7, [r5, #0]
 800adb6:	6a21      	ldr	r1, [r4, #32]
 800adb8:	602b      	str	r3, [r5, #0]
 800adba:	d030      	beq.n	800ae1e <__sflush_r+0x92>
 800adbc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800adbe:	89a3      	ldrh	r3, [r4, #12]
 800adc0:	0759      	lsls	r1, r3, #29
 800adc2:	d505      	bpl.n	800add0 <__sflush_r+0x44>
 800adc4:	6863      	ldr	r3, [r4, #4]
 800adc6:	1ad2      	subs	r2, r2, r3
 800adc8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800adca:	b10b      	cbz	r3, 800add0 <__sflush_r+0x44>
 800adcc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800adce:	1ad2      	subs	r2, r2, r3
 800add0:	2300      	movs	r3, #0
 800add2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800add4:	6a21      	ldr	r1, [r4, #32]
 800add6:	4628      	mov	r0, r5
 800add8:	47b0      	blx	r6
 800adda:	1c43      	adds	r3, r0, #1
 800addc:	89a3      	ldrh	r3, [r4, #12]
 800adde:	d106      	bne.n	800adee <__sflush_r+0x62>
 800ade0:	6829      	ldr	r1, [r5, #0]
 800ade2:	291d      	cmp	r1, #29
 800ade4:	d82b      	bhi.n	800ae3e <__sflush_r+0xb2>
 800ade6:	4a2a      	ldr	r2, [pc, #168]	@ (800ae90 <__sflush_r+0x104>)
 800ade8:	410a      	asrs	r2, r1
 800adea:	07d6      	lsls	r6, r2, #31
 800adec:	d427      	bmi.n	800ae3e <__sflush_r+0xb2>
 800adee:	2200      	movs	r2, #0
 800adf0:	6062      	str	r2, [r4, #4]
 800adf2:	04d9      	lsls	r1, r3, #19
 800adf4:	6922      	ldr	r2, [r4, #16]
 800adf6:	6022      	str	r2, [r4, #0]
 800adf8:	d504      	bpl.n	800ae04 <__sflush_r+0x78>
 800adfa:	1c42      	adds	r2, r0, #1
 800adfc:	d101      	bne.n	800ae02 <__sflush_r+0x76>
 800adfe:	682b      	ldr	r3, [r5, #0]
 800ae00:	b903      	cbnz	r3, 800ae04 <__sflush_r+0x78>
 800ae02:	6560      	str	r0, [r4, #84]	@ 0x54
 800ae04:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ae06:	602f      	str	r7, [r5, #0]
 800ae08:	b1b9      	cbz	r1, 800ae3a <__sflush_r+0xae>
 800ae0a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ae0e:	4299      	cmp	r1, r3
 800ae10:	d002      	beq.n	800ae18 <__sflush_r+0x8c>
 800ae12:	4628      	mov	r0, r5
 800ae14:	f7fd fdd0 	bl	80089b8 <_free_r>
 800ae18:	2300      	movs	r3, #0
 800ae1a:	6363      	str	r3, [r4, #52]	@ 0x34
 800ae1c:	e00d      	b.n	800ae3a <__sflush_r+0xae>
 800ae1e:	2301      	movs	r3, #1
 800ae20:	4628      	mov	r0, r5
 800ae22:	47b0      	blx	r6
 800ae24:	4602      	mov	r2, r0
 800ae26:	1c50      	adds	r0, r2, #1
 800ae28:	d1c9      	bne.n	800adbe <__sflush_r+0x32>
 800ae2a:	682b      	ldr	r3, [r5, #0]
 800ae2c:	2b00      	cmp	r3, #0
 800ae2e:	d0c6      	beq.n	800adbe <__sflush_r+0x32>
 800ae30:	2b1d      	cmp	r3, #29
 800ae32:	d001      	beq.n	800ae38 <__sflush_r+0xac>
 800ae34:	2b16      	cmp	r3, #22
 800ae36:	d11e      	bne.n	800ae76 <__sflush_r+0xea>
 800ae38:	602f      	str	r7, [r5, #0]
 800ae3a:	2000      	movs	r0, #0
 800ae3c:	e022      	b.n	800ae84 <__sflush_r+0xf8>
 800ae3e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ae42:	b21b      	sxth	r3, r3
 800ae44:	e01b      	b.n	800ae7e <__sflush_r+0xf2>
 800ae46:	690f      	ldr	r7, [r1, #16]
 800ae48:	2f00      	cmp	r7, #0
 800ae4a:	d0f6      	beq.n	800ae3a <__sflush_r+0xae>
 800ae4c:	0793      	lsls	r3, r2, #30
 800ae4e:	680e      	ldr	r6, [r1, #0]
 800ae50:	bf08      	it	eq
 800ae52:	694b      	ldreq	r3, [r1, #20]
 800ae54:	600f      	str	r7, [r1, #0]
 800ae56:	bf18      	it	ne
 800ae58:	2300      	movne	r3, #0
 800ae5a:	eba6 0807 	sub.w	r8, r6, r7
 800ae5e:	608b      	str	r3, [r1, #8]
 800ae60:	f1b8 0f00 	cmp.w	r8, #0
 800ae64:	dde9      	ble.n	800ae3a <__sflush_r+0xae>
 800ae66:	6a21      	ldr	r1, [r4, #32]
 800ae68:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800ae6a:	4643      	mov	r3, r8
 800ae6c:	463a      	mov	r2, r7
 800ae6e:	4628      	mov	r0, r5
 800ae70:	47b0      	blx	r6
 800ae72:	2800      	cmp	r0, #0
 800ae74:	dc08      	bgt.n	800ae88 <__sflush_r+0xfc>
 800ae76:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ae7a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ae7e:	81a3      	strh	r3, [r4, #12]
 800ae80:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ae84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ae88:	4407      	add	r7, r0
 800ae8a:	eba8 0800 	sub.w	r8, r8, r0
 800ae8e:	e7e7      	b.n	800ae60 <__sflush_r+0xd4>
 800ae90:	dfbffffe 	.word	0xdfbffffe

0800ae94 <_fflush_r>:
 800ae94:	b538      	push	{r3, r4, r5, lr}
 800ae96:	690b      	ldr	r3, [r1, #16]
 800ae98:	4605      	mov	r5, r0
 800ae9a:	460c      	mov	r4, r1
 800ae9c:	b913      	cbnz	r3, 800aea4 <_fflush_r+0x10>
 800ae9e:	2500      	movs	r5, #0
 800aea0:	4628      	mov	r0, r5
 800aea2:	bd38      	pop	{r3, r4, r5, pc}
 800aea4:	b118      	cbz	r0, 800aeae <_fflush_r+0x1a>
 800aea6:	6a03      	ldr	r3, [r0, #32]
 800aea8:	b90b      	cbnz	r3, 800aeae <_fflush_r+0x1a>
 800aeaa:	f7fc fc7f 	bl	80077ac <__sinit>
 800aeae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aeb2:	2b00      	cmp	r3, #0
 800aeb4:	d0f3      	beq.n	800ae9e <_fflush_r+0xa>
 800aeb6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800aeb8:	07d0      	lsls	r0, r2, #31
 800aeba:	d404      	bmi.n	800aec6 <_fflush_r+0x32>
 800aebc:	0599      	lsls	r1, r3, #22
 800aebe:	d402      	bmi.n	800aec6 <_fflush_r+0x32>
 800aec0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800aec2:	f7fc ff24 	bl	8007d0e <__retarget_lock_acquire_recursive>
 800aec6:	4628      	mov	r0, r5
 800aec8:	4621      	mov	r1, r4
 800aeca:	f7ff ff5f 	bl	800ad8c <__sflush_r>
 800aece:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800aed0:	07da      	lsls	r2, r3, #31
 800aed2:	4605      	mov	r5, r0
 800aed4:	d4e4      	bmi.n	800aea0 <_fflush_r+0xc>
 800aed6:	89a3      	ldrh	r3, [r4, #12]
 800aed8:	059b      	lsls	r3, r3, #22
 800aeda:	d4e1      	bmi.n	800aea0 <_fflush_r+0xc>
 800aedc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800aede:	f7fc ff17 	bl	8007d10 <__retarget_lock_release_recursive>
 800aee2:	e7dd      	b.n	800aea0 <_fflush_r+0xc>

0800aee4 <__swhatbuf_r>:
 800aee4:	b570      	push	{r4, r5, r6, lr}
 800aee6:	460c      	mov	r4, r1
 800aee8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aeec:	2900      	cmp	r1, #0
 800aeee:	b096      	sub	sp, #88	@ 0x58
 800aef0:	4615      	mov	r5, r2
 800aef2:	461e      	mov	r6, r3
 800aef4:	da0d      	bge.n	800af12 <__swhatbuf_r+0x2e>
 800aef6:	89a3      	ldrh	r3, [r4, #12]
 800aef8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800aefc:	f04f 0100 	mov.w	r1, #0
 800af00:	bf14      	ite	ne
 800af02:	2340      	movne	r3, #64	@ 0x40
 800af04:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800af08:	2000      	movs	r0, #0
 800af0a:	6031      	str	r1, [r6, #0]
 800af0c:	602b      	str	r3, [r5, #0]
 800af0e:	b016      	add	sp, #88	@ 0x58
 800af10:	bd70      	pop	{r4, r5, r6, pc}
 800af12:	466a      	mov	r2, sp
 800af14:	f000 f8e8 	bl	800b0e8 <_fstat_r>
 800af18:	2800      	cmp	r0, #0
 800af1a:	dbec      	blt.n	800aef6 <__swhatbuf_r+0x12>
 800af1c:	9901      	ldr	r1, [sp, #4]
 800af1e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800af22:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800af26:	4259      	negs	r1, r3
 800af28:	4159      	adcs	r1, r3
 800af2a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800af2e:	e7eb      	b.n	800af08 <__swhatbuf_r+0x24>

0800af30 <__smakebuf_r>:
 800af30:	898b      	ldrh	r3, [r1, #12]
 800af32:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800af34:	079d      	lsls	r5, r3, #30
 800af36:	4606      	mov	r6, r0
 800af38:	460c      	mov	r4, r1
 800af3a:	d507      	bpl.n	800af4c <__smakebuf_r+0x1c>
 800af3c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800af40:	6023      	str	r3, [r4, #0]
 800af42:	6123      	str	r3, [r4, #16]
 800af44:	2301      	movs	r3, #1
 800af46:	6163      	str	r3, [r4, #20]
 800af48:	b003      	add	sp, #12
 800af4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800af4c:	ab01      	add	r3, sp, #4
 800af4e:	466a      	mov	r2, sp
 800af50:	f7ff ffc8 	bl	800aee4 <__swhatbuf_r>
 800af54:	9f00      	ldr	r7, [sp, #0]
 800af56:	4605      	mov	r5, r0
 800af58:	4639      	mov	r1, r7
 800af5a:	4630      	mov	r0, r6
 800af5c:	f7fd fda0 	bl	8008aa0 <_malloc_r>
 800af60:	b948      	cbnz	r0, 800af76 <__smakebuf_r+0x46>
 800af62:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800af66:	059a      	lsls	r2, r3, #22
 800af68:	d4ee      	bmi.n	800af48 <__smakebuf_r+0x18>
 800af6a:	f023 0303 	bic.w	r3, r3, #3
 800af6e:	f043 0302 	orr.w	r3, r3, #2
 800af72:	81a3      	strh	r3, [r4, #12]
 800af74:	e7e2      	b.n	800af3c <__smakebuf_r+0xc>
 800af76:	89a3      	ldrh	r3, [r4, #12]
 800af78:	6020      	str	r0, [r4, #0]
 800af7a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800af7e:	81a3      	strh	r3, [r4, #12]
 800af80:	9b01      	ldr	r3, [sp, #4]
 800af82:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800af86:	b15b      	cbz	r3, 800afa0 <__smakebuf_r+0x70>
 800af88:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800af8c:	4630      	mov	r0, r6
 800af8e:	f000 f8bd 	bl	800b10c <_isatty_r>
 800af92:	b128      	cbz	r0, 800afa0 <__smakebuf_r+0x70>
 800af94:	89a3      	ldrh	r3, [r4, #12]
 800af96:	f023 0303 	bic.w	r3, r3, #3
 800af9a:	f043 0301 	orr.w	r3, r3, #1
 800af9e:	81a3      	strh	r3, [r4, #12]
 800afa0:	89a3      	ldrh	r3, [r4, #12]
 800afa2:	431d      	orrs	r5, r3
 800afa4:	81a5      	strh	r5, [r4, #12]
 800afa6:	e7cf      	b.n	800af48 <__smakebuf_r+0x18>

0800afa8 <__sccl>:
 800afa8:	b570      	push	{r4, r5, r6, lr}
 800afaa:	780b      	ldrb	r3, [r1, #0]
 800afac:	4604      	mov	r4, r0
 800afae:	2b5e      	cmp	r3, #94	@ 0x5e
 800afb0:	bf0b      	itete	eq
 800afb2:	784b      	ldrbeq	r3, [r1, #1]
 800afb4:	1c4a      	addne	r2, r1, #1
 800afb6:	1c8a      	addeq	r2, r1, #2
 800afb8:	2100      	movne	r1, #0
 800afba:	bf08      	it	eq
 800afbc:	2101      	moveq	r1, #1
 800afbe:	3801      	subs	r0, #1
 800afc0:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 800afc4:	f800 1f01 	strb.w	r1, [r0, #1]!
 800afc8:	42a8      	cmp	r0, r5
 800afca:	d1fb      	bne.n	800afc4 <__sccl+0x1c>
 800afcc:	b90b      	cbnz	r3, 800afd2 <__sccl+0x2a>
 800afce:	1e50      	subs	r0, r2, #1
 800afd0:	bd70      	pop	{r4, r5, r6, pc}
 800afd2:	f081 0101 	eor.w	r1, r1, #1
 800afd6:	54e1      	strb	r1, [r4, r3]
 800afd8:	4610      	mov	r0, r2
 800afda:	4602      	mov	r2, r0
 800afdc:	f812 5b01 	ldrb.w	r5, [r2], #1
 800afe0:	2d2d      	cmp	r5, #45	@ 0x2d
 800afe2:	d005      	beq.n	800aff0 <__sccl+0x48>
 800afe4:	2d5d      	cmp	r5, #93	@ 0x5d
 800afe6:	d016      	beq.n	800b016 <__sccl+0x6e>
 800afe8:	2d00      	cmp	r5, #0
 800afea:	d0f1      	beq.n	800afd0 <__sccl+0x28>
 800afec:	462b      	mov	r3, r5
 800afee:	e7f2      	b.n	800afd6 <__sccl+0x2e>
 800aff0:	7846      	ldrb	r6, [r0, #1]
 800aff2:	2e5d      	cmp	r6, #93	@ 0x5d
 800aff4:	d0fa      	beq.n	800afec <__sccl+0x44>
 800aff6:	42b3      	cmp	r3, r6
 800aff8:	dcf8      	bgt.n	800afec <__sccl+0x44>
 800affa:	3002      	adds	r0, #2
 800affc:	461a      	mov	r2, r3
 800affe:	3201      	adds	r2, #1
 800b000:	4296      	cmp	r6, r2
 800b002:	54a1      	strb	r1, [r4, r2]
 800b004:	dcfb      	bgt.n	800affe <__sccl+0x56>
 800b006:	1af2      	subs	r2, r6, r3
 800b008:	3a01      	subs	r2, #1
 800b00a:	1c5d      	adds	r5, r3, #1
 800b00c:	42b3      	cmp	r3, r6
 800b00e:	bfa8      	it	ge
 800b010:	2200      	movge	r2, #0
 800b012:	18ab      	adds	r3, r5, r2
 800b014:	e7e1      	b.n	800afda <__sccl+0x32>
 800b016:	4610      	mov	r0, r2
 800b018:	e7da      	b.n	800afd0 <__sccl+0x28>

0800b01a <__submore>:
 800b01a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b01e:	460c      	mov	r4, r1
 800b020:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800b022:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b026:	4299      	cmp	r1, r3
 800b028:	d11d      	bne.n	800b066 <__submore+0x4c>
 800b02a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800b02e:	f7fd fd37 	bl	8008aa0 <_malloc_r>
 800b032:	b918      	cbnz	r0, 800b03c <__submore+0x22>
 800b034:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b038:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b03c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b040:	63a3      	str	r3, [r4, #56]	@ 0x38
 800b042:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 800b046:	6360      	str	r0, [r4, #52]	@ 0x34
 800b048:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 800b04c:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800b050:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 800b054:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800b058:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 800b05c:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 800b060:	6020      	str	r0, [r4, #0]
 800b062:	2000      	movs	r0, #0
 800b064:	e7e8      	b.n	800b038 <__submore+0x1e>
 800b066:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 800b068:	0077      	lsls	r7, r6, #1
 800b06a:	463a      	mov	r2, r7
 800b06c:	f000 fc01 	bl	800b872 <_realloc_r>
 800b070:	4605      	mov	r5, r0
 800b072:	2800      	cmp	r0, #0
 800b074:	d0de      	beq.n	800b034 <__submore+0x1a>
 800b076:	eb00 0806 	add.w	r8, r0, r6
 800b07a:	4601      	mov	r1, r0
 800b07c:	4632      	mov	r2, r6
 800b07e:	4640      	mov	r0, r8
 800b080:	f000 f864 	bl	800b14c <memcpy>
 800b084:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 800b088:	f8c4 8000 	str.w	r8, [r4]
 800b08c:	e7e9      	b.n	800b062 <__submore+0x48>

0800b08e <memmove>:
 800b08e:	4288      	cmp	r0, r1
 800b090:	b510      	push	{r4, lr}
 800b092:	eb01 0402 	add.w	r4, r1, r2
 800b096:	d902      	bls.n	800b09e <memmove+0x10>
 800b098:	4284      	cmp	r4, r0
 800b09a:	4623      	mov	r3, r4
 800b09c:	d807      	bhi.n	800b0ae <memmove+0x20>
 800b09e:	1e43      	subs	r3, r0, #1
 800b0a0:	42a1      	cmp	r1, r4
 800b0a2:	d008      	beq.n	800b0b6 <memmove+0x28>
 800b0a4:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b0a8:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b0ac:	e7f8      	b.n	800b0a0 <memmove+0x12>
 800b0ae:	4402      	add	r2, r0
 800b0b0:	4601      	mov	r1, r0
 800b0b2:	428a      	cmp	r2, r1
 800b0b4:	d100      	bne.n	800b0b8 <memmove+0x2a>
 800b0b6:	bd10      	pop	{r4, pc}
 800b0b8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b0bc:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b0c0:	e7f7      	b.n	800b0b2 <memmove+0x24>

0800b0c2 <strncmp>:
 800b0c2:	b510      	push	{r4, lr}
 800b0c4:	b16a      	cbz	r2, 800b0e2 <strncmp+0x20>
 800b0c6:	3901      	subs	r1, #1
 800b0c8:	1884      	adds	r4, r0, r2
 800b0ca:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b0ce:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800b0d2:	429a      	cmp	r2, r3
 800b0d4:	d103      	bne.n	800b0de <strncmp+0x1c>
 800b0d6:	42a0      	cmp	r0, r4
 800b0d8:	d001      	beq.n	800b0de <strncmp+0x1c>
 800b0da:	2a00      	cmp	r2, #0
 800b0dc:	d1f5      	bne.n	800b0ca <strncmp+0x8>
 800b0de:	1ad0      	subs	r0, r2, r3
 800b0e0:	bd10      	pop	{r4, pc}
 800b0e2:	4610      	mov	r0, r2
 800b0e4:	e7fc      	b.n	800b0e0 <strncmp+0x1e>
	...

0800b0e8 <_fstat_r>:
 800b0e8:	b538      	push	{r3, r4, r5, lr}
 800b0ea:	4d07      	ldr	r5, [pc, #28]	@ (800b108 <_fstat_r+0x20>)
 800b0ec:	2300      	movs	r3, #0
 800b0ee:	4604      	mov	r4, r0
 800b0f0:	4608      	mov	r0, r1
 800b0f2:	4611      	mov	r1, r2
 800b0f4:	602b      	str	r3, [r5, #0]
 800b0f6:	f7f7 fb39 	bl	800276c <_fstat>
 800b0fa:	1c43      	adds	r3, r0, #1
 800b0fc:	d102      	bne.n	800b104 <_fstat_r+0x1c>
 800b0fe:	682b      	ldr	r3, [r5, #0]
 800b100:	b103      	cbz	r3, 800b104 <_fstat_r+0x1c>
 800b102:	6023      	str	r3, [r4, #0]
 800b104:	bd38      	pop	{r3, r4, r5, pc}
 800b106:	bf00      	nop
 800b108:	20005448 	.word	0x20005448

0800b10c <_isatty_r>:
 800b10c:	b538      	push	{r3, r4, r5, lr}
 800b10e:	4d06      	ldr	r5, [pc, #24]	@ (800b128 <_isatty_r+0x1c>)
 800b110:	2300      	movs	r3, #0
 800b112:	4604      	mov	r4, r0
 800b114:	4608      	mov	r0, r1
 800b116:	602b      	str	r3, [r5, #0]
 800b118:	f7f7 fb38 	bl	800278c <_isatty>
 800b11c:	1c43      	adds	r3, r0, #1
 800b11e:	d102      	bne.n	800b126 <_isatty_r+0x1a>
 800b120:	682b      	ldr	r3, [r5, #0]
 800b122:	b103      	cbz	r3, 800b126 <_isatty_r+0x1a>
 800b124:	6023      	str	r3, [r4, #0]
 800b126:	bd38      	pop	{r3, r4, r5, pc}
 800b128:	20005448 	.word	0x20005448

0800b12c <_sbrk_r>:
 800b12c:	b538      	push	{r3, r4, r5, lr}
 800b12e:	4d06      	ldr	r5, [pc, #24]	@ (800b148 <_sbrk_r+0x1c>)
 800b130:	2300      	movs	r3, #0
 800b132:	4604      	mov	r4, r0
 800b134:	4608      	mov	r0, r1
 800b136:	602b      	str	r3, [r5, #0]
 800b138:	f7f7 fb40 	bl	80027bc <_sbrk>
 800b13c:	1c43      	adds	r3, r0, #1
 800b13e:	d102      	bne.n	800b146 <_sbrk_r+0x1a>
 800b140:	682b      	ldr	r3, [r5, #0]
 800b142:	b103      	cbz	r3, 800b146 <_sbrk_r+0x1a>
 800b144:	6023      	str	r3, [r4, #0]
 800b146:	bd38      	pop	{r3, r4, r5, pc}
 800b148:	20005448 	.word	0x20005448

0800b14c <memcpy>:
 800b14c:	440a      	add	r2, r1
 800b14e:	4291      	cmp	r1, r2
 800b150:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800b154:	d100      	bne.n	800b158 <memcpy+0xc>
 800b156:	4770      	bx	lr
 800b158:	b510      	push	{r4, lr}
 800b15a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b15e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b162:	4291      	cmp	r1, r2
 800b164:	d1f9      	bne.n	800b15a <memcpy+0xe>
 800b166:	bd10      	pop	{r4, pc}

0800b168 <nan>:
 800b168:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800b170 <nan+0x8>
 800b16c:	4770      	bx	lr
 800b16e:	bf00      	nop
 800b170:	00000000 	.word	0x00000000
 800b174:	7ff80000 	.word	0x7ff80000

0800b178 <__assert_func>:
 800b178:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b17a:	4614      	mov	r4, r2
 800b17c:	461a      	mov	r2, r3
 800b17e:	4b09      	ldr	r3, [pc, #36]	@ (800b1a4 <__assert_func+0x2c>)
 800b180:	681b      	ldr	r3, [r3, #0]
 800b182:	4605      	mov	r5, r0
 800b184:	68d8      	ldr	r0, [r3, #12]
 800b186:	b954      	cbnz	r4, 800b19e <__assert_func+0x26>
 800b188:	4b07      	ldr	r3, [pc, #28]	@ (800b1a8 <__assert_func+0x30>)
 800b18a:	461c      	mov	r4, r3
 800b18c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b190:	9100      	str	r1, [sp, #0]
 800b192:	462b      	mov	r3, r5
 800b194:	4905      	ldr	r1, [pc, #20]	@ (800b1ac <__assert_func+0x34>)
 800b196:	f000 fba7 	bl	800b8e8 <fiprintf>
 800b19a:	f000 fbb7 	bl	800b90c <abort>
 800b19e:	4b04      	ldr	r3, [pc, #16]	@ (800b1b0 <__assert_func+0x38>)
 800b1a0:	e7f4      	b.n	800b18c <__assert_func+0x14>
 800b1a2:	bf00      	nop
 800b1a4:	20000018 	.word	0x20000018
 800b1a8:	0800c087 	.word	0x0800c087
 800b1ac:	0800c059 	.word	0x0800c059
 800b1b0:	0800c04c 	.word	0x0800c04c

0800b1b4 <_calloc_r>:
 800b1b4:	b570      	push	{r4, r5, r6, lr}
 800b1b6:	fba1 5402 	umull	r5, r4, r1, r2
 800b1ba:	b93c      	cbnz	r4, 800b1cc <_calloc_r+0x18>
 800b1bc:	4629      	mov	r1, r5
 800b1be:	f7fd fc6f 	bl	8008aa0 <_malloc_r>
 800b1c2:	4606      	mov	r6, r0
 800b1c4:	b928      	cbnz	r0, 800b1d2 <_calloc_r+0x1e>
 800b1c6:	2600      	movs	r6, #0
 800b1c8:	4630      	mov	r0, r6
 800b1ca:	bd70      	pop	{r4, r5, r6, pc}
 800b1cc:	220c      	movs	r2, #12
 800b1ce:	6002      	str	r2, [r0, #0]
 800b1d0:	e7f9      	b.n	800b1c6 <_calloc_r+0x12>
 800b1d2:	462a      	mov	r2, r5
 800b1d4:	4621      	mov	r1, r4
 800b1d6:	f7fc fce7 	bl	8007ba8 <memset>
 800b1da:	e7f5      	b.n	800b1c8 <_calloc_r+0x14>

0800b1dc <rshift>:
 800b1dc:	6903      	ldr	r3, [r0, #16]
 800b1de:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800b1e2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b1e6:	ea4f 1261 	mov.w	r2, r1, asr #5
 800b1ea:	f100 0414 	add.w	r4, r0, #20
 800b1ee:	dd45      	ble.n	800b27c <rshift+0xa0>
 800b1f0:	f011 011f 	ands.w	r1, r1, #31
 800b1f4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800b1f8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800b1fc:	d10c      	bne.n	800b218 <rshift+0x3c>
 800b1fe:	f100 0710 	add.w	r7, r0, #16
 800b202:	4629      	mov	r1, r5
 800b204:	42b1      	cmp	r1, r6
 800b206:	d334      	bcc.n	800b272 <rshift+0x96>
 800b208:	1a9b      	subs	r3, r3, r2
 800b20a:	009b      	lsls	r3, r3, #2
 800b20c:	1eea      	subs	r2, r5, #3
 800b20e:	4296      	cmp	r6, r2
 800b210:	bf38      	it	cc
 800b212:	2300      	movcc	r3, #0
 800b214:	4423      	add	r3, r4
 800b216:	e015      	b.n	800b244 <rshift+0x68>
 800b218:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800b21c:	f1c1 0820 	rsb	r8, r1, #32
 800b220:	40cf      	lsrs	r7, r1
 800b222:	f105 0e04 	add.w	lr, r5, #4
 800b226:	46a1      	mov	r9, r4
 800b228:	4576      	cmp	r6, lr
 800b22a:	46f4      	mov	ip, lr
 800b22c:	d815      	bhi.n	800b25a <rshift+0x7e>
 800b22e:	1a9a      	subs	r2, r3, r2
 800b230:	0092      	lsls	r2, r2, #2
 800b232:	3a04      	subs	r2, #4
 800b234:	3501      	adds	r5, #1
 800b236:	42ae      	cmp	r6, r5
 800b238:	bf38      	it	cc
 800b23a:	2200      	movcc	r2, #0
 800b23c:	18a3      	adds	r3, r4, r2
 800b23e:	50a7      	str	r7, [r4, r2]
 800b240:	b107      	cbz	r7, 800b244 <rshift+0x68>
 800b242:	3304      	adds	r3, #4
 800b244:	1b1a      	subs	r2, r3, r4
 800b246:	42a3      	cmp	r3, r4
 800b248:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800b24c:	bf08      	it	eq
 800b24e:	2300      	moveq	r3, #0
 800b250:	6102      	str	r2, [r0, #16]
 800b252:	bf08      	it	eq
 800b254:	6143      	streq	r3, [r0, #20]
 800b256:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b25a:	f8dc c000 	ldr.w	ip, [ip]
 800b25e:	fa0c fc08 	lsl.w	ip, ip, r8
 800b262:	ea4c 0707 	orr.w	r7, ip, r7
 800b266:	f849 7b04 	str.w	r7, [r9], #4
 800b26a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800b26e:	40cf      	lsrs	r7, r1
 800b270:	e7da      	b.n	800b228 <rshift+0x4c>
 800b272:	f851 cb04 	ldr.w	ip, [r1], #4
 800b276:	f847 cf04 	str.w	ip, [r7, #4]!
 800b27a:	e7c3      	b.n	800b204 <rshift+0x28>
 800b27c:	4623      	mov	r3, r4
 800b27e:	e7e1      	b.n	800b244 <rshift+0x68>

0800b280 <__hexdig_fun>:
 800b280:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800b284:	2b09      	cmp	r3, #9
 800b286:	d802      	bhi.n	800b28e <__hexdig_fun+0xe>
 800b288:	3820      	subs	r0, #32
 800b28a:	b2c0      	uxtb	r0, r0
 800b28c:	4770      	bx	lr
 800b28e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800b292:	2b05      	cmp	r3, #5
 800b294:	d801      	bhi.n	800b29a <__hexdig_fun+0x1a>
 800b296:	3847      	subs	r0, #71	@ 0x47
 800b298:	e7f7      	b.n	800b28a <__hexdig_fun+0xa>
 800b29a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800b29e:	2b05      	cmp	r3, #5
 800b2a0:	d801      	bhi.n	800b2a6 <__hexdig_fun+0x26>
 800b2a2:	3827      	subs	r0, #39	@ 0x27
 800b2a4:	e7f1      	b.n	800b28a <__hexdig_fun+0xa>
 800b2a6:	2000      	movs	r0, #0
 800b2a8:	4770      	bx	lr
	...

0800b2ac <__gethex>:
 800b2ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b2b0:	b085      	sub	sp, #20
 800b2b2:	468a      	mov	sl, r1
 800b2b4:	9302      	str	r3, [sp, #8]
 800b2b6:	680b      	ldr	r3, [r1, #0]
 800b2b8:	9001      	str	r0, [sp, #4]
 800b2ba:	4690      	mov	r8, r2
 800b2bc:	1c9c      	adds	r4, r3, #2
 800b2be:	46a1      	mov	r9, r4
 800b2c0:	f814 0b01 	ldrb.w	r0, [r4], #1
 800b2c4:	2830      	cmp	r0, #48	@ 0x30
 800b2c6:	d0fa      	beq.n	800b2be <__gethex+0x12>
 800b2c8:	eba9 0303 	sub.w	r3, r9, r3
 800b2cc:	f1a3 0b02 	sub.w	fp, r3, #2
 800b2d0:	f7ff ffd6 	bl	800b280 <__hexdig_fun>
 800b2d4:	4605      	mov	r5, r0
 800b2d6:	2800      	cmp	r0, #0
 800b2d8:	d168      	bne.n	800b3ac <__gethex+0x100>
 800b2da:	49a0      	ldr	r1, [pc, #640]	@ (800b55c <__gethex+0x2b0>)
 800b2dc:	2201      	movs	r2, #1
 800b2de:	4648      	mov	r0, r9
 800b2e0:	f7ff feef 	bl	800b0c2 <strncmp>
 800b2e4:	4607      	mov	r7, r0
 800b2e6:	2800      	cmp	r0, #0
 800b2e8:	d167      	bne.n	800b3ba <__gethex+0x10e>
 800b2ea:	f899 0001 	ldrb.w	r0, [r9, #1]
 800b2ee:	4626      	mov	r6, r4
 800b2f0:	f7ff ffc6 	bl	800b280 <__hexdig_fun>
 800b2f4:	2800      	cmp	r0, #0
 800b2f6:	d062      	beq.n	800b3be <__gethex+0x112>
 800b2f8:	4623      	mov	r3, r4
 800b2fa:	7818      	ldrb	r0, [r3, #0]
 800b2fc:	2830      	cmp	r0, #48	@ 0x30
 800b2fe:	4699      	mov	r9, r3
 800b300:	f103 0301 	add.w	r3, r3, #1
 800b304:	d0f9      	beq.n	800b2fa <__gethex+0x4e>
 800b306:	f7ff ffbb 	bl	800b280 <__hexdig_fun>
 800b30a:	fab0 f580 	clz	r5, r0
 800b30e:	096d      	lsrs	r5, r5, #5
 800b310:	f04f 0b01 	mov.w	fp, #1
 800b314:	464a      	mov	r2, r9
 800b316:	4616      	mov	r6, r2
 800b318:	3201      	adds	r2, #1
 800b31a:	7830      	ldrb	r0, [r6, #0]
 800b31c:	f7ff ffb0 	bl	800b280 <__hexdig_fun>
 800b320:	2800      	cmp	r0, #0
 800b322:	d1f8      	bne.n	800b316 <__gethex+0x6a>
 800b324:	498d      	ldr	r1, [pc, #564]	@ (800b55c <__gethex+0x2b0>)
 800b326:	2201      	movs	r2, #1
 800b328:	4630      	mov	r0, r6
 800b32a:	f7ff feca 	bl	800b0c2 <strncmp>
 800b32e:	2800      	cmp	r0, #0
 800b330:	d13f      	bne.n	800b3b2 <__gethex+0x106>
 800b332:	b944      	cbnz	r4, 800b346 <__gethex+0x9a>
 800b334:	1c74      	adds	r4, r6, #1
 800b336:	4622      	mov	r2, r4
 800b338:	4616      	mov	r6, r2
 800b33a:	3201      	adds	r2, #1
 800b33c:	7830      	ldrb	r0, [r6, #0]
 800b33e:	f7ff ff9f 	bl	800b280 <__hexdig_fun>
 800b342:	2800      	cmp	r0, #0
 800b344:	d1f8      	bne.n	800b338 <__gethex+0x8c>
 800b346:	1ba4      	subs	r4, r4, r6
 800b348:	00a7      	lsls	r7, r4, #2
 800b34a:	7833      	ldrb	r3, [r6, #0]
 800b34c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800b350:	2b50      	cmp	r3, #80	@ 0x50
 800b352:	d13e      	bne.n	800b3d2 <__gethex+0x126>
 800b354:	7873      	ldrb	r3, [r6, #1]
 800b356:	2b2b      	cmp	r3, #43	@ 0x2b
 800b358:	d033      	beq.n	800b3c2 <__gethex+0x116>
 800b35a:	2b2d      	cmp	r3, #45	@ 0x2d
 800b35c:	d034      	beq.n	800b3c8 <__gethex+0x11c>
 800b35e:	1c71      	adds	r1, r6, #1
 800b360:	2400      	movs	r4, #0
 800b362:	7808      	ldrb	r0, [r1, #0]
 800b364:	f7ff ff8c 	bl	800b280 <__hexdig_fun>
 800b368:	1e43      	subs	r3, r0, #1
 800b36a:	b2db      	uxtb	r3, r3
 800b36c:	2b18      	cmp	r3, #24
 800b36e:	d830      	bhi.n	800b3d2 <__gethex+0x126>
 800b370:	f1a0 0210 	sub.w	r2, r0, #16
 800b374:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800b378:	f7ff ff82 	bl	800b280 <__hexdig_fun>
 800b37c:	f100 3cff 	add.w	ip, r0, #4294967295	@ 0xffffffff
 800b380:	fa5f fc8c 	uxtb.w	ip, ip
 800b384:	f1bc 0f18 	cmp.w	ip, #24
 800b388:	f04f 030a 	mov.w	r3, #10
 800b38c:	d91e      	bls.n	800b3cc <__gethex+0x120>
 800b38e:	b104      	cbz	r4, 800b392 <__gethex+0xe6>
 800b390:	4252      	negs	r2, r2
 800b392:	4417      	add	r7, r2
 800b394:	f8ca 1000 	str.w	r1, [sl]
 800b398:	b1ed      	cbz	r5, 800b3d6 <__gethex+0x12a>
 800b39a:	f1bb 0f00 	cmp.w	fp, #0
 800b39e:	bf0c      	ite	eq
 800b3a0:	2506      	moveq	r5, #6
 800b3a2:	2500      	movne	r5, #0
 800b3a4:	4628      	mov	r0, r5
 800b3a6:	b005      	add	sp, #20
 800b3a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b3ac:	2500      	movs	r5, #0
 800b3ae:	462c      	mov	r4, r5
 800b3b0:	e7b0      	b.n	800b314 <__gethex+0x68>
 800b3b2:	2c00      	cmp	r4, #0
 800b3b4:	d1c7      	bne.n	800b346 <__gethex+0x9a>
 800b3b6:	4627      	mov	r7, r4
 800b3b8:	e7c7      	b.n	800b34a <__gethex+0x9e>
 800b3ba:	464e      	mov	r6, r9
 800b3bc:	462f      	mov	r7, r5
 800b3be:	2501      	movs	r5, #1
 800b3c0:	e7c3      	b.n	800b34a <__gethex+0x9e>
 800b3c2:	2400      	movs	r4, #0
 800b3c4:	1cb1      	adds	r1, r6, #2
 800b3c6:	e7cc      	b.n	800b362 <__gethex+0xb6>
 800b3c8:	2401      	movs	r4, #1
 800b3ca:	e7fb      	b.n	800b3c4 <__gethex+0x118>
 800b3cc:	fb03 0002 	mla	r0, r3, r2, r0
 800b3d0:	e7ce      	b.n	800b370 <__gethex+0xc4>
 800b3d2:	4631      	mov	r1, r6
 800b3d4:	e7de      	b.n	800b394 <__gethex+0xe8>
 800b3d6:	eba6 0309 	sub.w	r3, r6, r9
 800b3da:	3b01      	subs	r3, #1
 800b3dc:	4629      	mov	r1, r5
 800b3de:	2b07      	cmp	r3, #7
 800b3e0:	dc0a      	bgt.n	800b3f8 <__gethex+0x14c>
 800b3e2:	9801      	ldr	r0, [sp, #4]
 800b3e4:	f7fd fbe8 	bl	8008bb8 <_Balloc>
 800b3e8:	4604      	mov	r4, r0
 800b3ea:	b940      	cbnz	r0, 800b3fe <__gethex+0x152>
 800b3ec:	4b5c      	ldr	r3, [pc, #368]	@ (800b560 <__gethex+0x2b4>)
 800b3ee:	4602      	mov	r2, r0
 800b3f0:	21e4      	movs	r1, #228	@ 0xe4
 800b3f2:	485c      	ldr	r0, [pc, #368]	@ (800b564 <__gethex+0x2b8>)
 800b3f4:	f7ff fec0 	bl	800b178 <__assert_func>
 800b3f8:	3101      	adds	r1, #1
 800b3fa:	105b      	asrs	r3, r3, #1
 800b3fc:	e7ef      	b.n	800b3de <__gethex+0x132>
 800b3fe:	f100 0a14 	add.w	sl, r0, #20
 800b402:	2300      	movs	r3, #0
 800b404:	4655      	mov	r5, sl
 800b406:	469b      	mov	fp, r3
 800b408:	45b1      	cmp	r9, r6
 800b40a:	d337      	bcc.n	800b47c <__gethex+0x1d0>
 800b40c:	f845 bb04 	str.w	fp, [r5], #4
 800b410:	eba5 050a 	sub.w	r5, r5, sl
 800b414:	10ad      	asrs	r5, r5, #2
 800b416:	6125      	str	r5, [r4, #16]
 800b418:	4658      	mov	r0, fp
 800b41a:	f7fd fcbf 	bl	8008d9c <__hi0bits>
 800b41e:	016d      	lsls	r5, r5, #5
 800b420:	f8d8 6000 	ldr.w	r6, [r8]
 800b424:	1a2d      	subs	r5, r5, r0
 800b426:	42b5      	cmp	r5, r6
 800b428:	dd54      	ble.n	800b4d4 <__gethex+0x228>
 800b42a:	1bad      	subs	r5, r5, r6
 800b42c:	4629      	mov	r1, r5
 800b42e:	4620      	mov	r0, r4
 800b430:	f7fe f853 	bl	80094da <__any_on>
 800b434:	4681      	mov	r9, r0
 800b436:	b178      	cbz	r0, 800b458 <__gethex+0x1ac>
 800b438:	1e6b      	subs	r3, r5, #1
 800b43a:	1159      	asrs	r1, r3, #5
 800b43c:	f003 021f 	and.w	r2, r3, #31
 800b440:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800b444:	f04f 0901 	mov.w	r9, #1
 800b448:	fa09 f202 	lsl.w	r2, r9, r2
 800b44c:	420a      	tst	r2, r1
 800b44e:	d003      	beq.n	800b458 <__gethex+0x1ac>
 800b450:	454b      	cmp	r3, r9
 800b452:	dc36      	bgt.n	800b4c2 <__gethex+0x216>
 800b454:	f04f 0902 	mov.w	r9, #2
 800b458:	4629      	mov	r1, r5
 800b45a:	4620      	mov	r0, r4
 800b45c:	f7ff febe 	bl	800b1dc <rshift>
 800b460:	442f      	add	r7, r5
 800b462:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b466:	42bb      	cmp	r3, r7
 800b468:	da42      	bge.n	800b4f0 <__gethex+0x244>
 800b46a:	9801      	ldr	r0, [sp, #4]
 800b46c:	4621      	mov	r1, r4
 800b46e:	f7fd fbe3 	bl	8008c38 <_Bfree>
 800b472:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b474:	2300      	movs	r3, #0
 800b476:	6013      	str	r3, [r2, #0]
 800b478:	25a3      	movs	r5, #163	@ 0xa3
 800b47a:	e793      	b.n	800b3a4 <__gethex+0xf8>
 800b47c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800b480:	2a2e      	cmp	r2, #46	@ 0x2e
 800b482:	d012      	beq.n	800b4aa <__gethex+0x1fe>
 800b484:	2b20      	cmp	r3, #32
 800b486:	d104      	bne.n	800b492 <__gethex+0x1e6>
 800b488:	f845 bb04 	str.w	fp, [r5], #4
 800b48c:	f04f 0b00 	mov.w	fp, #0
 800b490:	465b      	mov	r3, fp
 800b492:	7830      	ldrb	r0, [r6, #0]
 800b494:	9303      	str	r3, [sp, #12]
 800b496:	f7ff fef3 	bl	800b280 <__hexdig_fun>
 800b49a:	9b03      	ldr	r3, [sp, #12]
 800b49c:	f000 000f 	and.w	r0, r0, #15
 800b4a0:	4098      	lsls	r0, r3
 800b4a2:	ea4b 0b00 	orr.w	fp, fp, r0
 800b4a6:	3304      	adds	r3, #4
 800b4a8:	e7ae      	b.n	800b408 <__gethex+0x15c>
 800b4aa:	45b1      	cmp	r9, r6
 800b4ac:	d8ea      	bhi.n	800b484 <__gethex+0x1d8>
 800b4ae:	492b      	ldr	r1, [pc, #172]	@ (800b55c <__gethex+0x2b0>)
 800b4b0:	9303      	str	r3, [sp, #12]
 800b4b2:	2201      	movs	r2, #1
 800b4b4:	4630      	mov	r0, r6
 800b4b6:	f7ff fe04 	bl	800b0c2 <strncmp>
 800b4ba:	9b03      	ldr	r3, [sp, #12]
 800b4bc:	2800      	cmp	r0, #0
 800b4be:	d1e1      	bne.n	800b484 <__gethex+0x1d8>
 800b4c0:	e7a2      	b.n	800b408 <__gethex+0x15c>
 800b4c2:	1ea9      	subs	r1, r5, #2
 800b4c4:	4620      	mov	r0, r4
 800b4c6:	f7fe f808 	bl	80094da <__any_on>
 800b4ca:	2800      	cmp	r0, #0
 800b4cc:	d0c2      	beq.n	800b454 <__gethex+0x1a8>
 800b4ce:	f04f 0903 	mov.w	r9, #3
 800b4d2:	e7c1      	b.n	800b458 <__gethex+0x1ac>
 800b4d4:	da09      	bge.n	800b4ea <__gethex+0x23e>
 800b4d6:	1b75      	subs	r5, r6, r5
 800b4d8:	4621      	mov	r1, r4
 800b4da:	9801      	ldr	r0, [sp, #4]
 800b4dc:	462a      	mov	r2, r5
 800b4de:	f7fd fdc3 	bl	8009068 <__lshift>
 800b4e2:	1b7f      	subs	r7, r7, r5
 800b4e4:	4604      	mov	r4, r0
 800b4e6:	f100 0a14 	add.w	sl, r0, #20
 800b4ea:	f04f 0900 	mov.w	r9, #0
 800b4ee:	e7b8      	b.n	800b462 <__gethex+0x1b6>
 800b4f0:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800b4f4:	42bd      	cmp	r5, r7
 800b4f6:	dd6f      	ble.n	800b5d8 <__gethex+0x32c>
 800b4f8:	1bed      	subs	r5, r5, r7
 800b4fa:	42ae      	cmp	r6, r5
 800b4fc:	dc34      	bgt.n	800b568 <__gethex+0x2bc>
 800b4fe:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b502:	2b02      	cmp	r3, #2
 800b504:	d022      	beq.n	800b54c <__gethex+0x2a0>
 800b506:	2b03      	cmp	r3, #3
 800b508:	d024      	beq.n	800b554 <__gethex+0x2a8>
 800b50a:	2b01      	cmp	r3, #1
 800b50c:	d115      	bne.n	800b53a <__gethex+0x28e>
 800b50e:	42ae      	cmp	r6, r5
 800b510:	d113      	bne.n	800b53a <__gethex+0x28e>
 800b512:	2e01      	cmp	r6, #1
 800b514:	d10b      	bne.n	800b52e <__gethex+0x282>
 800b516:	9a02      	ldr	r2, [sp, #8]
 800b518:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800b51c:	6013      	str	r3, [r2, #0]
 800b51e:	2301      	movs	r3, #1
 800b520:	6123      	str	r3, [r4, #16]
 800b522:	f8ca 3000 	str.w	r3, [sl]
 800b526:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b528:	2562      	movs	r5, #98	@ 0x62
 800b52a:	601c      	str	r4, [r3, #0]
 800b52c:	e73a      	b.n	800b3a4 <__gethex+0xf8>
 800b52e:	1e71      	subs	r1, r6, #1
 800b530:	4620      	mov	r0, r4
 800b532:	f7fd ffd2 	bl	80094da <__any_on>
 800b536:	2800      	cmp	r0, #0
 800b538:	d1ed      	bne.n	800b516 <__gethex+0x26a>
 800b53a:	9801      	ldr	r0, [sp, #4]
 800b53c:	4621      	mov	r1, r4
 800b53e:	f7fd fb7b 	bl	8008c38 <_Bfree>
 800b542:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b544:	2300      	movs	r3, #0
 800b546:	6013      	str	r3, [r2, #0]
 800b548:	2550      	movs	r5, #80	@ 0x50
 800b54a:	e72b      	b.n	800b3a4 <__gethex+0xf8>
 800b54c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b54e:	2b00      	cmp	r3, #0
 800b550:	d1f3      	bne.n	800b53a <__gethex+0x28e>
 800b552:	e7e0      	b.n	800b516 <__gethex+0x26a>
 800b554:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b556:	2b00      	cmp	r3, #0
 800b558:	d1dd      	bne.n	800b516 <__gethex+0x26a>
 800b55a:	e7ee      	b.n	800b53a <__gethex+0x28e>
 800b55c:	0800bfc0 	.word	0x0800bfc0
 800b560:	0800be54 	.word	0x0800be54
 800b564:	0800c088 	.word	0x0800c088
 800b568:	1e6f      	subs	r7, r5, #1
 800b56a:	f1b9 0f00 	cmp.w	r9, #0
 800b56e:	d130      	bne.n	800b5d2 <__gethex+0x326>
 800b570:	b127      	cbz	r7, 800b57c <__gethex+0x2d0>
 800b572:	4639      	mov	r1, r7
 800b574:	4620      	mov	r0, r4
 800b576:	f7fd ffb0 	bl	80094da <__any_on>
 800b57a:	4681      	mov	r9, r0
 800b57c:	117a      	asrs	r2, r7, #5
 800b57e:	2301      	movs	r3, #1
 800b580:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800b584:	f007 071f 	and.w	r7, r7, #31
 800b588:	40bb      	lsls	r3, r7
 800b58a:	4213      	tst	r3, r2
 800b58c:	4629      	mov	r1, r5
 800b58e:	4620      	mov	r0, r4
 800b590:	bf18      	it	ne
 800b592:	f049 0902 	orrne.w	r9, r9, #2
 800b596:	f7ff fe21 	bl	800b1dc <rshift>
 800b59a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800b59e:	1b76      	subs	r6, r6, r5
 800b5a0:	2502      	movs	r5, #2
 800b5a2:	f1b9 0f00 	cmp.w	r9, #0
 800b5a6:	d047      	beq.n	800b638 <__gethex+0x38c>
 800b5a8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b5ac:	2b02      	cmp	r3, #2
 800b5ae:	d015      	beq.n	800b5dc <__gethex+0x330>
 800b5b0:	2b03      	cmp	r3, #3
 800b5b2:	d017      	beq.n	800b5e4 <__gethex+0x338>
 800b5b4:	2b01      	cmp	r3, #1
 800b5b6:	d109      	bne.n	800b5cc <__gethex+0x320>
 800b5b8:	f019 0f02 	tst.w	r9, #2
 800b5bc:	d006      	beq.n	800b5cc <__gethex+0x320>
 800b5be:	f8da 3000 	ldr.w	r3, [sl]
 800b5c2:	ea49 0903 	orr.w	r9, r9, r3
 800b5c6:	f019 0f01 	tst.w	r9, #1
 800b5ca:	d10e      	bne.n	800b5ea <__gethex+0x33e>
 800b5cc:	f045 0510 	orr.w	r5, r5, #16
 800b5d0:	e032      	b.n	800b638 <__gethex+0x38c>
 800b5d2:	f04f 0901 	mov.w	r9, #1
 800b5d6:	e7d1      	b.n	800b57c <__gethex+0x2d0>
 800b5d8:	2501      	movs	r5, #1
 800b5da:	e7e2      	b.n	800b5a2 <__gethex+0x2f6>
 800b5dc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b5de:	f1c3 0301 	rsb	r3, r3, #1
 800b5e2:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b5e4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b5e6:	2b00      	cmp	r3, #0
 800b5e8:	d0f0      	beq.n	800b5cc <__gethex+0x320>
 800b5ea:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800b5ee:	f104 0314 	add.w	r3, r4, #20
 800b5f2:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800b5f6:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800b5fa:	f04f 0c00 	mov.w	ip, #0
 800b5fe:	4618      	mov	r0, r3
 800b600:	f853 2b04 	ldr.w	r2, [r3], #4
 800b604:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 800b608:	d01b      	beq.n	800b642 <__gethex+0x396>
 800b60a:	3201      	adds	r2, #1
 800b60c:	6002      	str	r2, [r0, #0]
 800b60e:	2d02      	cmp	r5, #2
 800b610:	f104 0314 	add.w	r3, r4, #20
 800b614:	d13c      	bne.n	800b690 <__gethex+0x3e4>
 800b616:	f8d8 2000 	ldr.w	r2, [r8]
 800b61a:	3a01      	subs	r2, #1
 800b61c:	42b2      	cmp	r2, r6
 800b61e:	d109      	bne.n	800b634 <__gethex+0x388>
 800b620:	1171      	asrs	r1, r6, #5
 800b622:	2201      	movs	r2, #1
 800b624:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b628:	f006 061f 	and.w	r6, r6, #31
 800b62c:	fa02 f606 	lsl.w	r6, r2, r6
 800b630:	421e      	tst	r6, r3
 800b632:	d13a      	bne.n	800b6aa <__gethex+0x3fe>
 800b634:	f045 0520 	orr.w	r5, r5, #32
 800b638:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b63a:	601c      	str	r4, [r3, #0]
 800b63c:	9b02      	ldr	r3, [sp, #8]
 800b63e:	601f      	str	r7, [r3, #0]
 800b640:	e6b0      	b.n	800b3a4 <__gethex+0xf8>
 800b642:	4299      	cmp	r1, r3
 800b644:	f843 cc04 	str.w	ip, [r3, #-4]
 800b648:	d8d9      	bhi.n	800b5fe <__gethex+0x352>
 800b64a:	68a3      	ldr	r3, [r4, #8]
 800b64c:	459b      	cmp	fp, r3
 800b64e:	db17      	blt.n	800b680 <__gethex+0x3d4>
 800b650:	6861      	ldr	r1, [r4, #4]
 800b652:	9801      	ldr	r0, [sp, #4]
 800b654:	3101      	adds	r1, #1
 800b656:	f7fd faaf 	bl	8008bb8 <_Balloc>
 800b65a:	4681      	mov	r9, r0
 800b65c:	b918      	cbnz	r0, 800b666 <__gethex+0x3ba>
 800b65e:	4b1a      	ldr	r3, [pc, #104]	@ (800b6c8 <__gethex+0x41c>)
 800b660:	4602      	mov	r2, r0
 800b662:	2184      	movs	r1, #132	@ 0x84
 800b664:	e6c5      	b.n	800b3f2 <__gethex+0x146>
 800b666:	6922      	ldr	r2, [r4, #16]
 800b668:	3202      	adds	r2, #2
 800b66a:	f104 010c 	add.w	r1, r4, #12
 800b66e:	0092      	lsls	r2, r2, #2
 800b670:	300c      	adds	r0, #12
 800b672:	f7ff fd6b 	bl	800b14c <memcpy>
 800b676:	4621      	mov	r1, r4
 800b678:	9801      	ldr	r0, [sp, #4]
 800b67a:	f7fd fadd 	bl	8008c38 <_Bfree>
 800b67e:	464c      	mov	r4, r9
 800b680:	6923      	ldr	r3, [r4, #16]
 800b682:	1c5a      	adds	r2, r3, #1
 800b684:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b688:	6122      	str	r2, [r4, #16]
 800b68a:	2201      	movs	r2, #1
 800b68c:	615a      	str	r2, [r3, #20]
 800b68e:	e7be      	b.n	800b60e <__gethex+0x362>
 800b690:	6922      	ldr	r2, [r4, #16]
 800b692:	455a      	cmp	r2, fp
 800b694:	dd0b      	ble.n	800b6ae <__gethex+0x402>
 800b696:	2101      	movs	r1, #1
 800b698:	4620      	mov	r0, r4
 800b69a:	f7ff fd9f 	bl	800b1dc <rshift>
 800b69e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b6a2:	3701      	adds	r7, #1
 800b6a4:	42bb      	cmp	r3, r7
 800b6a6:	f6ff aee0 	blt.w	800b46a <__gethex+0x1be>
 800b6aa:	2501      	movs	r5, #1
 800b6ac:	e7c2      	b.n	800b634 <__gethex+0x388>
 800b6ae:	f016 061f 	ands.w	r6, r6, #31
 800b6b2:	d0fa      	beq.n	800b6aa <__gethex+0x3fe>
 800b6b4:	4453      	add	r3, sl
 800b6b6:	f1c6 0620 	rsb	r6, r6, #32
 800b6ba:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800b6be:	f7fd fb6d 	bl	8008d9c <__hi0bits>
 800b6c2:	42b0      	cmp	r0, r6
 800b6c4:	dbe7      	blt.n	800b696 <__gethex+0x3ea>
 800b6c6:	e7f0      	b.n	800b6aa <__gethex+0x3fe>
 800b6c8:	0800be54 	.word	0x0800be54

0800b6cc <L_shift>:
 800b6cc:	f1c2 0208 	rsb	r2, r2, #8
 800b6d0:	0092      	lsls	r2, r2, #2
 800b6d2:	b570      	push	{r4, r5, r6, lr}
 800b6d4:	f1c2 0620 	rsb	r6, r2, #32
 800b6d8:	6843      	ldr	r3, [r0, #4]
 800b6da:	6804      	ldr	r4, [r0, #0]
 800b6dc:	fa03 f506 	lsl.w	r5, r3, r6
 800b6e0:	432c      	orrs	r4, r5
 800b6e2:	40d3      	lsrs	r3, r2
 800b6e4:	6004      	str	r4, [r0, #0]
 800b6e6:	f840 3f04 	str.w	r3, [r0, #4]!
 800b6ea:	4288      	cmp	r0, r1
 800b6ec:	d3f4      	bcc.n	800b6d8 <L_shift+0xc>
 800b6ee:	bd70      	pop	{r4, r5, r6, pc}

0800b6f0 <__match>:
 800b6f0:	b530      	push	{r4, r5, lr}
 800b6f2:	6803      	ldr	r3, [r0, #0]
 800b6f4:	3301      	adds	r3, #1
 800b6f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b6fa:	b914      	cbnz	r4, 800b702 <__match+0x12>
 800b6fc:	6003      	str	r3, [r0, #0]
 800b6fe:	2001      	movs	r0, #1
 800b700:	bd30      	pop	{r4, r5, pc}
 800b702:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b706:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800b70a:	2d19      	cmp	r5, #25
 800b70c:	bf98      	it	ls
 800b70e:	3220      	addls	r2, #32
 800b710:	42a2      	cmp	r2, r4
 800b712:	d0f0      	beq.n	800b6f6 <__match+0x6>
 800b714:	2000      	movs	r0, #0
 800b716:	e7f3      	b.n	800b700 <__match+0x10>

0800b718 <__hexnan>:
 800b718:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b71c:	680b      	ldr	r3, [r1, #0]
 800b71e:	6801      	ldr	r1, [r0, #0]
 800b720:	115e      	asrs	r6, r3, #5
 800b722:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800b726:	f013 031f 	ands.w	r3, r3, #31
 800b72a:	b087      	sub	sp, #28
 800b72c:	bf18      	it	ne
 800b72e:	3604      	addne	r6, #4
 800b730:	2500      	movs	r5, #0
 800b732:	1f37      	subs	r7, r6, #4
 800b734:	4682      	mov	sl, r0
 800b736:	4690      	mov	r8, r2
 800b738:	9301      	str	r3, [sp, #4]
 800b73a:	f846 5c04 	str.w	r5, [r6, #-4]
 800b73e:	46b9      	mov	r9, r7
 800b740:	463c      	mov	r4, r7
 800b742:	9502      	str	r5, [sp, #8]
 800b744:	46ab      	mov	fp, r5
 800b746:	784a      	ldrb	r2, [r1, #1]
 800b748:	1c4b      	adds	r3, r1, #1
 800b74a:	9303      	str	r3, [sp, #12]
 800b74c:	b342      	cbz	r2, 800b7a0 <__hexnan+0x88>
 800b74e:	4610      	mov	r0, r2
 800b750:	9105      	str	r1, [sp, #20]
 800b752:	9204      	str	r2, [sp, #16]
 800b754:	f7ff fd94 	bl	800b280 <__hexdig_fun>
 800b758:	2800      	cmp	r0, #0
 800b75a:	d151      	bne.n	800b800 <__hexnan+0xe8>
 800b75c:	9a04      	ldr	r2, [sp, #16]
 800b75e:	9905      	ldr	r1, [sp, #20]
 800b760:	2a20      	cmp	r2, #32
 800b762:	d818      	bhi.n	800b796 <__hexnan+0x7e>
 800b764:	9b02      	ldr	r3, [sp, #8]
 800b766:	459b      	cmp	fp, r3
 800b768:	dd13      	ble.n	800b792 <__hexnan+0x7a>
 800b76a:	454c      	cmp	r4, r9
 800b76c:	d206      	bcs.n	800b77c <__hexnan+0x64>
 800b76e:	2d07      	cmp	r5, #7
 800b770:	dc04      	bgt.n	800b77c <__hexnan+0x64>
 800b772:	462a      	mov	r2, r5
 800b774:	4649      	mov	r1, r9
 800b776:	4620      	mov	r0, r4
 800b778:	f7ff ffa8 	bl	800b6cc <L_shift>
 800b77c:	4544      	cmp	r4, r8
 800b77e:	d952      	bls.n	800b826 <__hexnan+0x10e>
 800b780:	2300      	movs	r3, #0
 800b782:	f1a4 0904 	sub.w	r9, r4, #4
 800b786:	f844 3c04 	str.w	r3, [r4, #-4]
 800b78a:	f8cd b008 	str.w	fp, [sp, #8]
 800b78e:	464c      	mov	r4, r9
 800b790:	461d      	mov	r5, r3
 800b792:	9903      	ldr	r1, [sp, #12]
 800b794:	e7d7      	b.n	800b746 <__hexnan+0x2e>
 800b796:	2a29      	cmp	r2, #41	@ 0x29
 800b798:	d157      	bne.n	800b84a <__hexnan+0x132>
 800b79a:	3102      	adds	r1, #2
 800b79c:	f8ca 1000 	str.w	r1, [sl]
 800b7a0:	f1bb 0f00 	cmp.w	fp, #0
 800b7a4:	d051      	beq.n	800b84a <__hexnan+0x132>
 800b7a6:	454c      	cmp	r4, r9
 800b7a8:	d206      	bcs.n	800b7b8 <__hexnan+0xa0>
 800b7aa:	2d07      	cmp	r5, #7
 800b7ac:	dc04      	bgt.n	800b7b8 <__hexnan+0xa0>
 800b7ae:	462a      	mov	r2, r5
 800b7b0:	4649      	mov	r1, r9
 800b7b2:	4620      	mov	r0, r4
 800b7b4:	f7ff ff8a 	bl	800b6cc <L_shift>
 800b7b8:	4544      	cmp	r4, r8
 800b7ba:	d936      	bls.n	800b82a <__hexnan+0x112>
 800b7bc:	f1a8 0204 	sub.w	r2, r8, #4
 800b7c0:	4623      	mov	r3, r4
 800b7c2:	f853 1b04 	ldr.w	r1, [r3], #4
 800b7c6:	f842 1f04 	str.w	r1, [r2, #4]!
 800b7ca:	429f      	cmp	r7, r3
 800b7cc:	d2f9      	bcs.n	800b7c2 <__hexnan+0xaa>
 800b7ce:	1b3b      	subs	r3, r7, r4
 800b7d0:	f023 0303 	bic.w	r3, r3, #3
 800b7d4:	3304      	adds	r3, #4
 800b7d6:	3401      	adds	r4, #1
 800b7d8:	3e03      	subs	r6, #3
 800b7da:	42b4      	cmp	r4, r6
 800b7dc:	bf88      	it	hi
 800b7de:	2304      	movhi	r3, #4
 800b7e0:	4443      	add	r3, r8
 800b7e2:	2200      	movs	r2, #0
 800b7e4:	f843 2b04 	str.w	r2, [r3], #4
 800b7e8:	429f      	cmp	r7, r3
 800b7ea:	d2fb      	bcs.n	800b7e4 <__hexnan+0xcc>
 800b7ec:	683b      	ldr	r3, [r7, #0]
 800b7ee:	b91b      	cbnz	r3, 800b7f8 <__hexnan+0xe0>
 800b7f0:	4547      	cmp	r7, r8
 800b7f2:	d128      	bne.n	800b846 <__hexnan+0x12e>
 800b7f4:	2301      	movs	r3, #1
 800b7f6:	603b      	str	r3, [r7, #0]
 800b7f8:	2005      	movs	r0, #5
 800b7fa:	b007      	add	sp, #28
 800b7fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b800:	3501      	adds	r5, #1
 800b802:	2d08      	cmp	r5, #8
 800b804:	f10b 0b01 	add.w	fp, fp, #1
 800b808:	dd06      	ble.n	800b818 <__hexnan+0x100>
 800b80a:	4544      	cmp	r4, r8
 800b80c:	d9c1      	bls.n	800b792 <__hexnan+0x7a>
 800b80e:	2300      	movs	r3, #0
 800b810:	f844 3c04 	str.w	r3, [r4, #-4]
 800b814:	2501      	movs	r5, #1
 800b816:	3c04      	subs	r4, #4
 800b818:	6822      	ldr	r2, [r4, #0]
 800b81a:	f000 000f 	and.w	r0, r0, #15
 800b81e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800b822:	6020      	str	r0, [r4, #0]
 800b824:	e7b5      	b.n	800b792 <__hexnan+0x7a>
 800b826:	2508      	movs	r5, #8
 800b828:	e7b3      	b.n	800b792 <__hexnan+0x7a>
 800b82a:	9b01      	ldr	r3, [sp, #4]
 800b82c:	2b00      	cmp	r3, #0
 800b82e:	d0dd      	beq.n	800b7ec <__hexnan+0xd4>
 800b830:	f1c3 0320 	rsb	r3, r3, #32
 800b834:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800b838:	40da      	lsrs	r2, r3
 800b83a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800b83e:	4013      	ands	r3, r2
 800b840:	f846 3c04 	str.w	r3, [r6, #-4]
 800b844:	e7d2      	b.n	800b7ec <__hexnan+0xd4>
 800b846:	3f04      	subs	r7, #4
 800b848:	e7d0      	b.n	800b7ec <__hexnan+0xd4>
 800b84a:	2004      	movs	r0, #4
 800b84c:	e7d5      	b.n	800b7fa <__hexnan+0xe2>

0800b84e <__ascii_mbtowc>:
 800b84e:	b082      	sub	sp, #8
 800b850:	b901      	cbnz	r1, 800b854 <__ascii_mbtowc+0x6>
 800b852:	a901      	add	r1, sp, #4
 800b854:	b142      	cbz	r2, 800b868 <__ascii_mbtowc+0x1a>
 800b856:	b14b      	cbz	r3, 800b86c <__ascii_mbtowc+0x1e>
 800b858:	7813      	ldrb	r3, [r2, #0]
 800b85a:	600b      	str	r3, [r1, #0]
 800b85c:	7812      	ldrb	r2, [r2, #0]
 800b85e:	1e10      	subs	r0, r2, #0
 800b860:	bf18      	it	ne
 800b862:	2001      	movne	r0, #1
 800b864:	b002      	add	sp, #8
 800b866:	4770      	bx	lr
 800b868:	4610      	mov	r0, r2
 800b86a:	e7fb      	b.n	800b864 <__ascii_mbtowc+0x16>
 800b86c:	f06f 0001 	mvn.w	r0, #1
 800b870:	e7f8      	b.n	800b864 <__ascii_mbtowc+0x16>

0800b872 <_realloc_r>:
 800b872:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b876:	4680      	mov	r8, r0
 800b878:	4615      	mov	r5, r2
 800b87a:	460c      	mov	r4, r1
 800b87c:	b921      	cbnz	r1, 800b888 <_realloc_r+0x16>
 800b87e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b882:	4611      	mov	r1, r2
 800b884:	f7fd b90c 	b.w	8008aa0 <_malloc_r>
 800b888:	b92a      	cbnz	r2, 800b896 <_realloc_r+0x24>
 800b88a:	f7fd f895 	bl	80089b8 <_free_r>
 800b88e:	2400      	movs	r4, #0
 800b890:	4620      	mov	r0, r4
 800b892:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b896:	f000 f840 	bl	800b91a <_malloc_usable_size_r>
 800b89a:	4285      	cmp	r5, r0
 800b89c:	4606      	mov	r6, r0
 800b89e:	d802      	bhi.n	800b8a6 <_realloc_r+0x34>
 800b8a0:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800b8a4:	d8f4      	bhi.n	800b890 <_realloc_r+0x1e>
 800b8a6:	4629      	mov	r1, r5
 800b8a8:	4640      	mov	r0, r8
 800b8aa:	f7fd f8f9 	bl	8008aa0 <_malloc_r>
 800b8ae:	4607      	mov	r7, r0
 800b8b0:	2800      	cmp	r0, #0
 800b8b2:	d0ec      	beq.n	800b88e <_realloc_r+0x1c>
 800b8b4:	42b5      	cmp	r5, r6
 800b8b6:	462a      	mov	r2, r5
 800b8b8:	4621      	mov	r1, r4
 800b8ba:	bf28      	it	cs
 800b8bc:	4632      	movcs	r2, r6
 800b8be:	f7ff fc45 	bl	800b14c <memcpy>
 800b8c2:	4621      	mov	r1, r4
 800b8c4:	4640      	mov	r0, r8
 800b8c6:	f7fd f877 	bl	80089b8 <_free_r>
 800b8ca:	463c      	mov	r4, r7
 800b8cc:	e7e0      	b.n	800b890 <_realloc_r+0x1e>

0800b8ce <__ascii_wctomb>:
 800b8ce:	4603      	mov	r3, r0
 800b8d0:	4608      	mov	r0, r1
 800b8d2:	b141      	cbz	r1, 800b8e6 <__ascii_wctomb+0x18>
 800b8d4:	2aff      	cmp	r2, #255	@ 0xff
 800b8d6:	d904      	bls.n	800b8e2 <__ascii_wctomb+0x14>
 800b8d8:	228a      	movs	r2, #138	@ 0x8a
 800b8da:	601a      	str	r2, [r3, #0]
 800b8dc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b8e0:	4770      	bx	lr
 800b8e2:	700a      	strb	r2, [r1, #0]
 800b8e4:	2001      	movs	r0, #1
 800b8e6:	4770      	bx	lr

0800b8e8 <fiprintf>:
 800b8e8:	b40e      	push	{r1, r2, r3}
 800b8ea:	b503      	push	{r0, r1, lr}
 800b8ec:	4601      	mov	r1, r0
 800b8ee:	ab03      	add	r3, sp, #12
 800b8f0:	4805      	ldr	r0, [pc, #20]	@ (800b908 <fiprintf+0x20>)
 800b8f2:	f853 2b04 	ldr.w	r2, [r3], #4
 800b8f6:	6800      	ldr	r0, [r0, #0]
 800b8f8:	9301      	str	r3, [sp, #4]
 800b8fa:	f7fe ffe1 	bl	800a8c0 <_vfiprintf_r>
 800b8fe:	b002      	add	sp, #8
 800b900:	f85d eb04 	ldr.w	lr, [sp], #4
 800b904:	b003      	add	sp, #12
 800b906:	4770      	bx	lr
 800b908:	20000018 	.word	0x20000018

0800b90c <abort>:
 800b90c:	b508      	push	{r3, lr}
 800b90e:	2006      	movs	r0, #6
 800b910:	f000 f834 	bl	800b97c <raise>
 800b914:	2001      	movs	r0, #1
 800b916:	f7f6 fed9 	bl	80026cc <_exit>

0800b91a <_malloc_usable_size_r>:
 800b91a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b91e:	1f18      	subs	r0, r3, #4
 800b920:	2b00      	cmp	r3, #0
 800b922:	bfbc      	itt	lt
 800b924:	580b      	ldrlt	r3, [r1, r0]
 800b926:	18c0      	addlt	r0, r0, r3
 800b928:	4770      	bx	lr

0800b92a <_raise_r>:
 800b92a:	291f      	cmp	r1, #31
 800b92c:	b538      	push	{r3, r4, r5, lr}
 800b92e:	4605      	mov	r5, r0
 800b930:	460c      	mov	r4, r1
 800b932:	d904      	bls.n	800b93e <_raise_r+0x14>
 800b934:	2316      	movs	r3, #22
 800b936:	6003      	str	r3, [r0, #0]
 800b938:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b93c:	bd38      	pop	{r3, r4, r5, pc}
 800b93e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800b940:	b112      	cbz	r2, 800b948 <_raise_r+0x1e>
 800b942:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b946:	b94b      	cbnz	r3, 800b95c <_raise_r+0x32>
 800b948:	4628      	mov	r0, r5
 800b94a:	f000 f831 	bl	800b9b0 <_getpid_r>
 800b94e:	4622      	mov	r2, r4
 800b950:	4601      	mov	r1, r0
 800b952:	4628      	mov	r0, r5
 800b954:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b958:	f000 b818 	b.w	800b98c <_kill_r>
 800b95c:	2b01      	cmp	r3, #1
 800b95e:	d00a      	beq.n	800b976 <_raise_r+0x4c>
 800b960:	1c59      	adds	r1, r3, #1
 800b962:	d103      	bne.n	800b96c <_raise_r+0x42>
 800b964:	2316      	movs	r3, #22
 800b966:	6003      	str	r3, [r0, #0]
 800b968:	2001      	movs	r0, #1
 800b96a:	e7e7      	b.n	800b93c <_raise_r+0x12>
 800b96c:	2100      	movs	r1, #0
 800b96e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800b972:	4620      	mov	r0, r4
 800b974:	4798      	blx	r3
 800b976:	2000      	movs	r0, #0
 800b978:	e7e0      	b.n	800b93c <_raise_r+0x12>
	...

0800b97c <raise>:
 800b97c:	4b02      	ldr	r3, [pc, #8]	@ (800b988 <raise+0xc>)
 800b97e:	4601      	mov	r1, r0
 800b980:	6818      	ldr	r0, [r3, #0]
 800b982:	f7ff bfd2 	b.w	800b92a <_raise_r>
 800b986:	bf00      	nop
 800b988:	20000018 	.word	0x20000018

0800b98c <_kill_r>:
 800b98c:	b538      	push	{r3, r4, r5, lr}
 800b98e:	4d07      	ldr	r5, [pc, #28]	@ (800b9ac <_kill_r+0x20>)
 800b990:	2300      	movs	r3, #0
 800b992:	4604      	mov	r4, r0
 800b994:	4608      	mov	r0, r1
 800b996:	4611      	mov	r1, r2
 800b998:	602b      	str	r3, [r5, #0]
 800b99a:	f7f6 fe87 	bl	80026ac <_kill>
 800b99e:	1c43      	adds	r3, r0, #1
 800b9a0:	d102      	bne.n	800b9a8 <_kill_r+0x1c>
 800b9a2:	682b      	ldr	r3, [r5, #0]
 800b9a4:	b103      	cbz	r3, 800b9a8 <_kill_r+0x1c>
 800b9a6:	6023      	str	r3, [r4, #0]
 800b9a8:	bd38      	pop	{r3, r4, r5, pc}
 800b9aa:	bf00      	nop
 800b9ac:	20005448 	.word	0x20005448

0800b9b0 <_getpid_r>:
 800b9b0:	f7f6 be74 	b.w	800269c <_getpid>

0800b9b4 <_init>:
 800b9b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b9b6:	bf00      	nop
 800b9b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b9ba:	bc08      	pop	{r3}
 800b9bc:	469e      	mov	lr, r3
 800b9be:	4770      	bx	lr

0800b9c0 <_fini>:
 800b9c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b9c2:	bf00      	nop
 800b9c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b9c6:	bc08      	pop	{r3}
 800b9c8:	469e      	mov	lr, r3
 800b9ca:	4770      	bx	lr
