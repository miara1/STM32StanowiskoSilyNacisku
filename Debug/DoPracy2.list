
DoPracy2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b6a4  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000648  0800b848  0800b848  0000c848  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800be90  0800be90  0000d1d4  2**0
                  CONTENTS
  4 .ARM          00000008  0800be90  0800be90  0000ce90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800be98  0800be98  0000d1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800be98  0800be98  0000ce98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800be9c  0800be9c  0000ce9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  0800bea0  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000053c0  200001d4  0800c074  0000d1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20005594  0800c074  0000d594  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000d1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010194  00000000  00000000  0000d204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002452  00000000  00000000  0001d398  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f28  00000000  00000000  0001f7f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000be8  00000000  00000000  00020718  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018712  00000000  00000000  00021300  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010d49  00000000  00000000  00039a12  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009b807  00000000  00000000  0004a75b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e5f62  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005914  00000000  00000000  000e5fa8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  000eb8bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001d4 	.word	0x200001d4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800b82c 	.word	0x0800b82c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001d8 	.word	0x200001d8
 80001dc:	0800b82c 	.word	0x0800b82c

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <strlen>:
 80002a0:	4603      	mov	r3, r0
 80002a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d1fb      	bne.n	80002a2 <strlen+0x2>
 80002aa:	1a18      	subs	r0, r3, r0
 80002ac:	3801      	subs	r0, #1
 80002ae:	4770      	bx	lr

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	@ 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_uldivmod>:
 8000cb8:	b953      	cbnz	r3, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cba:	b94a      	cbnz	r2, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	bf08      	it	eq
 8000cc0:	2800      	cmpeq	r0, #0
 8000cc2:	bf1c      	itt	ne
 8000cc4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000cc8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000ccc:	f000 b9a0 	b.w	8001010 <__aeabi_idiv0>
 8000cd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cd8:	f000 f83c 	bl	8000d54 <__udivmoddi4>
 8000cdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce4:	b004      	add	sp, #16
 8000ce6:	4770      	bx	lr

08000ce8 <__aeabi_d2lz>:
 8000ce8:	b538      	push	{r3, r4, r5, lr}
 8000cea:	2200      	movs	r2, #0
 8000cec:	2300      	movs	r3, #0
 8000cee:	4604      	mov	r4, r0
 8000cf0:	460d      	mov	r5, r1
 8000cf2:	f7ff ff0b 	bl	8000b0c <__aeabi_dcmplt>
 8000cf6:	b928      	cbnz	r0, 8000d04 <__aeabi_d2lz+0x1c>
 8000cf8:	4620      	mov	r0, r4
 8000cfa:	4629      	mov	r1, r5
 8000cfc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d00:	f000 b80a 	b.w	8000d18 <__aeabi_d2ulz>
 8000d04:	4620      	mov	r0, r4
 8000d06:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d0a:	f000 f805 	bl	8000d18 <__aeabi_d2ulz>
 8000d0e:	4240      	negs	r0, r0
 8000d10:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d14:	bd38      	pop	{r3, r4, r5, pc}
 8000d16:	bf00      	nop

08000d18 <__aeabi_d2ulz>:
 8000d18:	b5d0      	push	{r4, r6, r7, lr}
 8000d1a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d4c <__aeabi_d2ulz+0x34>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	4606      	mov	r6, r0
 8000d20:	460f      	mov	r7, r1
 8000d22:	f7ff fc81 	bl	8000628 <__aeabi_dmul>
 8000d26:	f7ff ff57 	bl	8000bd8 <__aeabi_d2uiz>
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	f7ff fc02 	bl	8000534 <__aeabi_ui2d>
 8000d30:	4b07      	ldr	r3, [pc, #28]	@ (8000d50 <__aeabi_d2ulz+0x38>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	f7ff fc78 	bl	8000628 <__aeabi_dmul>
 8000d38:	4602      	mov	r2, r0
 8000d3a:	460b      	mov	r3, r1
 8000d3c:	4630      	mov	r0, r6
 8000d3e:	4639      	mov	r1, r7
 8000d40:	f7ff faba 	bl	80002b8 <__aeabi_dsub>
 8000d44:	f7ff ff48 	bl	8000bd8 <__aeabi_d2uiz>
 8000d48:	4621      	mov	r1, r4
 8000d4a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d4c:	3df00000 	.word	0x3df00000
 8000d50:	41f00000 	.word	0x41f00000

08000d54 <__udivmoddi4>:
 8000d54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d58:	9d08      	ldr	r5, [sp, #32]
 8000d5a:	460c      	mov	r4, r1
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d14e      	bne.n	8000dfe <__udivmoddi4+0xaa>
 8000d60:	4694      	mov	ip, r2
 8000d62:	458c      	cmp	ip, r1
 8000d64:	4686      	mov	lr, r0
 8000d66:	fab2 f282 	clz	r2, r2
 8000d6a:	d962      	bls.n	8000e32 <__udivmoddi4+0xde>
 8000d6c:	b14a      	cbz	r2, 8000d82 <__udivmoddi4+0x2e>
 8000d6e:	f1c2 0320 	rsb	r3, r2, #32
 8000d72:	4091      	lsls	r1, r2
 8000d74:	fa20 f303 	lsr.w	r3, r0, r3
 8000d78:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d7c:	4319      	orrs	r1, r3
 8000d7e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d82:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d86:	fa1f f68c 	uxth.w	r6, ip
 8000d8a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d8e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d92:	fb07 1114 	mls	r1, r7, r4, r1
 8000d96:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d9a:	fb04 f106 	mul.w	r1, r4, r6
 8000d9e:	4299      	cmp	r1, r3
 8000da0:	d90a      	bls.n	8000db8 <__udivmoddi4+0x64>
 8000da2:	eb1c 0303 	adds.w	r3, ip, r3
 8000da6:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000daa:	f080 8112 	bcs.w	8000fd2 <__udivmoddi4+0x27e>
 8000dae:	4299      	cmp	r1, r3
 8000db0:	f240 810f 	bls.w	8000fd2 <__udivmoddi4+0x27e>
 8000db4:	3c02      	subs	r4, #2
 8000db6:	4463      	add	r3, ip
 8000db8:	1a59      	subs	r1, r3, r1
 8000dba:	fa1f f38e 	uxth.w	r3, lr
 8000dbe:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dc2:	fb07 1110 	mls	r1, r7, r0, r1
 8000dc6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dca:	fb00 f606 	mul.w	r6, r0, r6
 8000dce:	429e      	cmp	r6, r3
 8000dd0:	d90a      	bls.n	8000de8 <__udivmoddi4+0x94>
 8000dd2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dd6:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000dda:	f080 80fc 	bcs.w	8000fd6 <__udivmoddi4+0x282>
 8000dde:	429e      	cmp	r6, r3
 8000de0:	f240 80f9 	bls.w	8000fd6 <__udivmoddi4+0x282>
 8000de4:	4463      	add	r3, ip
 8000de6:	3802      	subs	r0, #2
 8000de8:	1b9b      	subs	r3, r3, r6
 8000dea:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dee:	2100      	movs	r1, #0
 8000df0:	b11d      	cbz	r5, 8000dfa <__udivmoddi4+0xa6>
 8000df2:	40d3      	lsrs	r3, r2
 8000df4:	2200      	movs	r2, #0
 8000df6:	e9c5 3200 	strd	r3, r2, [r5]
 8000dfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dfe:	428b      	cmp	r3, r1
 8000e00:	d905      	bls.n	8000e0e <__udivmoddi4+0xba>
 8000e02:	b10d      	cbz	r5, 8000e08 <__udivmoddi4+0xb4>
 8000e04:	e9c5 0100 	strd	r0, r1, [r5]
 8000e08:	2100      	movs	r1, #0
 8000e0a:	4608      	mov	r0, r1
 8000e0c:	e7f5      	b.n	8000dfa <__udivmoddi4+0xa6>
 8000e0e:	fab3 f183 	clz	r1, r3
 8000e12:	2900      	cmp	r1, #0
 8000e14:	d146      	bne.n	8000ea4 <__udivmoddi4+0x150>
 8000e16:	42a3      	cmp	r3, r4
 8000e18:	d302      	bcc.n	8000e20 <__udivmoddi4+0xcc>
 8000e1a:	4290      	cmp	r0, r2
 8000e1c:	f0c0 80f0 	bcc.w	8001000 <__udivmoddi4+0x2ac>
 8000e20:	1a86      	subs	r6, r0, r2
 8000e22:	eb64 0303 	sbc.w	r3, r4, r3
 8000e26:	2001      	movs	r0, #1
 8000e28:	2d00      	cmp	r5, #0
 8000e2a:	d0e6      	beq.n	8000dfa <__udivmoddi4+0xa6>
 8000e2c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e30:	e7e3      	b.n	8000dfa <__udivmoddi4+0xa6>
 8000e32:	2a00      	cmp	r2, #0
 8000e34:	f040 8090 	bne.w	8000f58 <__udivmoddi4+0x204>
 8000e38:	eba1 040c 	sub.w	r4, r1, ip
 8000e3c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e40:	fa1f f78c 	uxth.w	r7, ip
 8000e44:	2101      	movs	r1, #1
 8000e46:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e4a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e4e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e52:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e56:	fb07 f006 	mul.w	r0, r7, r6
 8000e5a:	4298      	cmp	r0, r3
 8000e5c:	d908      	bls.n	8000e70 <__udivmoddi4+0x11c>
 8000e5e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e62:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000e66:	d202      	bcs.n	8000e6e <__udivmoddi4+0x11a>
 8000e68:	4298      	cmp	r0, r3
 8000e6a:	f200 80cd 	bhi.w	8001008 <__udivmoddi4+0x2b4>
 8000e6e:	4626      	mov	r6, r4
 8000e70:	1a1c      	subs	r4, r3, r0
 8000e72:	fa1f f38e 	uxth.w	r3, lr
 8000e76:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e7a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e7e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e82:	fb00 f707 	mul.w	r7, r0, r7
 8000e86:	429f      	cmp	r7, r3
 8000e88:	d908      	bls.n	8000e9c <__udivmoddi4+0x148>
 8000e8a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e8e:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000e92:	d202      	bcs.n	8000e9a <__udivmoddi4+0x146>
 8000e94:	429f      	cmp	r7, r3
 8000e96:	f200 80b0 	bhi.w	8000ffa <__udivmoddi4+0x2a6>
 8000e9a:	4620      	mov	r0, r4
 8000e9c:	1bdb      	subs	r3, r3, r7
 8000e9e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ea2:	e7a5      	b.n	8000df0 <__udivmoddi4+0x9c>
 8000ea4:	f1c1 0620 	rsb	r6, r1, #32
 8000ea8:	408b      	lsls	r3, r1
 8000eaa:	fa22 f706 	lsr.w	r7, r2, r6
 8000eae:	431f      	orrs	r7, r3
 8000eb0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000eb4:	fa04 f301 	lsl.w	r3, r4, r1
 8000eb8:	ea43 030c 	orr.w	r3, r3, ip
 8000ebc:	40f4      	lsrs	r4, r6
 8000ebe:	fa00 f801 	lsl.w	r8, r0, r1
 8000ec2:	0c38      	lsrs	r0, r7, #16
 8000ec4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ec8:	fbb4 fef0 	udiv	lr, r4, r0
 8000ecc:	fa1f fc87 	uxth.w	ip, r7
 8000ed0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ed4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ed8:	fb0e f90c 	mul.w	r9, lr, ip
 8000edc:	45a1      	cmp	r9, r4
 8000ede:	fa02 f201 	lsl.w	r2, r2, r1
 8000ee2:	d90a      	bls.n	8000efa <__udivmoddi4+0x1a6>
 8000ee4:	193c      	adds	r4, r7, r4
 8000ee6:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000eea:	f080 8084 	bcs.w	8000ff6 <__udivmoddi4+0x2a2>
 8000eee:	45a1      	cmp	r9, r4
 8000ef0:	f240 8081 	bls.w	8000ff6 <__udivmoddi4+0x2a2>
 8000ef4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ef8:	443c      	add	r4, r7
 8000efa:	eba4 0409 	sub.w	r4, r4, r9
 8000efe:	fa1f f983 	uxth.w	r9, r3
 8000f02:	fbb4 f3f0 	udiv	r3, r4, r0
 8000f06:	fb00 4413 	mls	r4, r0, r3, r4
 8000f0a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f0e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f12:	45a4      	cmp	ip, r4
 8000f14:	d907      	bls.n	8000f26 <__udivmoddi4+0x1d2>
 8000f16:	193c      	adds	r4, r7, r4
 8000f18:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000f1c:	d267      	bcs.n	8000fee <__udivmoddi4+0x29a>
 8000f1e:	45a4      	cmp	ip, r4
 8000f20:	d965      	bls.n	8000fee <__udivmoddi4+0x29a>
 8000f22:	3b02      	subs	r3, #2
 8000f24:	443c      	add	r4, r7
 8000f26:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f2a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f2e:	eba4 040c 	sub.w	r4, r4, ip
 8000f32:	429c      	cmp	r4, r3
 8000f34:	46ce      	mov	lr, r9
 8000f36:	469c      	mov	ip, r3
 8000f38:	d351      	bcc.n	8000fde <__udivmoddi4+0x28a>
 8000f3a:	d04e      	beq.n	8000fda <__udivmoddi4+0x286>
 8000f3c:	b155      	cbz	r5, 8000f54 <__udivmoddi4+0x200>
 8000f3e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f42:	eb64 040c 	sbc.w	r4, r4, ip
 8000f46:	fa04 f606 	lsl.w	r6, r4, r6
 8000f4a:	40cb      	lsrs	r3, r1
 8000f4c:	431e      	orrs	r6, r3
 8000f4e:	40cc      	lsrs	r4, r1
 8000f50:	e9c5 6400 	strd	r6, r4, [r5]
 8000f54:	2100      	movs	r1, #0
 8000f56:	e750      	b.n	8000dfa <__udivmoddi4+0xa6>
 8000f58:	f1c2 0320 	rsb	r3, r2, #32
 8000f5c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f60:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f64:	fa24 f303 	lsr.w	r3, r4, r3
 8000f68:	4094      	lsls	r4, r2
 8000f6a:	430c      	orrs	r4, r1
 8000f6c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f70:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f74:	fa1f f78c 	uxth.w	r7, ip
 8000f78:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f7c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f80:	0c23      	lsrs	r3, r4, #16
 8000f82:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f86:	fb00 f107 	mul.w	r1, r0, r7
 8000f8a:	4299      	cmp	r1, r3
 8000f8c:	d908      	bls.n	8000fa0 <__udivmoddi4+0x24c>
 8000f8e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f92:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000f96:	d22c      	bcs.n	8000ff2 <__udivmoddi4+0x29e>
 8000f98:	4299      	cmp	r1, r3
 8000f9a:	d92a      	bls.n	8000ff2 <__udivmoddi4+0x29e>
 8000f9c:	3802      	subs	r0, #2
 8000f9e:	4463      	add	r3, ip
 8000fa0:	1a5b      	subs	r3, r3, r1
 8000fa2:	b2a4      	uxth	r4, r4
 8000fa4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000fa8:	fb08 3311 	mls	r3, r8, r1, r3
 8000fac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000fb0:	fb01 f307 	mul.w	r3, r1, r7
 8000fb4:	42a3      	cmp	r3, r4
 8000fb6:	d908      	bls.n	8000fca <__udivmoddi4+0x276>
 8000fb8:	eb1c 0404 	adds.w	r4, ip, r4
 8000fbc:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000fc0:	d213      	bcs.n	8000fea <__udivmoddi4+0x296>
 8000fc2:	42a3      	cmp	r3, r4
 8000fc4:	d911      	bls.n	8000fea <__udivmoddi4+0x296>
 8000fc6:	3902      	subs	r1, #2
 8000fc8:	4464      	add	r4, ip
 8000fca:	1ae4      	subs	r4, r4, r3
 8000fcc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fd0:	e739      	b.n	8000e46 <__udivmoddi4+0xf2>
 8000fd2:	4604      	mov	r4, r0
 8000fd4:	e6f0      	b.n	8000db8 <__udivmoddi4+0x64>
 8000fd6:	4608      	mov	r0, r1
 8000fd8:	e706      	b.n	8000de8 <__udivmoddi4+0x94>
 8000fda:	45c8      	cmp	r8, r9
 8000fdc:	d2ae      	bcs.n	8000f3c <__udivmoddi4+0x1e8>
 8000fde:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fe2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000fe6:	3801      	subs	r0, #1
 8000fe8:	e7a8      	b.n	8000f3c <__udivmoddi4+0x1e8>
 8000fea:	4631      	mov	r1, r6
 8000fec:	e7ed      	b.n	8000fca <__udivmoddi4+0x276>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	e799      	b.n	8000f26 <__udivmoddi4+0x1d2>
 8000ff2:	4630      	mov	r0, r6
 8000ff4:	e7d4      	b.n	8000fa0 <__udivmoddi4+0x24c>
 8000ff6:	46d6      	mov	lr, sl
 8000ff8:	e77f      	b.n	8000efa <__udivmoddi4+0x1a6>
 8000ffa:	4463      	add	r3, ip
 8000ffc:	3802      	subs	r0, #2
 8000ffe:	e74d      	b.n	8000e9c <__udivmoddi4+0x148>
 8001000:	4606      	mov	r6, r0
 8001002:	4623      	mov	r3, r4
 8001004:	4608      	mov	r0, r1
 8001006:	e70f      	b.n	8000e28 <__udivmoddi4+0xd4>
 8001008:	3e02      	subs	r6, #2
 800100a:	4463      	add	r3, ip
 800100c:	e730      	b.n	8000e70 <__udivmoddi4+0x11c>
 800100e:	bf00      	nop

08001010 <__aeabi_idiv0>:
 8001010:	4770      	bx	lr
 8001012:	bf00      	nop

08001014 <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b082      	sub	sp, #8
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]

	HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 800101c:	1d39      	adds	r1, r7, #4
 800101e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001022:	2201      	movs	r2, #1
 8001024:	4803      	ldr	r0, [pc, #12]	@ (8001034 <__io_putchar+0x20>)
 8001026:	f004 fb83 	bl	8005730 <HAL_UART_Transmit>
	return ch;
 800102a:	687b      	ldr	r3, [r7, #4]
}
 800102c:	4618      	mov	r0, r3
 800102e:	3708      	adds	r7, #8
 8001030:	46bd      	mov	sp, r7
 8001032:	bd80      	pop	{r7, pc}
 8001034:	20000370 	.word	0x20000370

08001038 <crc16_ccitt_false>:




uint16_t crc16_ccitt_false(const char* pData, int length)
{
 8001038:	b480      	push	{r7}
 800103a:	b085      	sub	sp, #20
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
 8001040:	6039      	str	r1, [r7, #0]
    uint16_t wCrc = 0xffff;
 8001042:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001046:	81fb      	strh	r3, [r7, #14]
    while (length--) {
 8001048:	e025      	b.n	8001096 <crc16_ccitt_false+0x5e>
        wCrc ^= *(unsigned const char *)pData++ << 8;
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	1c5a      	adds	r2, r3, #1
 800104e:	607a      	str	r2, [r7, #4]
 8001050:	781b      	ldrb	r3, [r3, #0]
 8001052:	021b      	lsls	r3, r3, #8
 8001054:	b21a      	sxth	r2, r3
 8001056:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800105a:	4053      	eors	r3, r2
 800105c:	b21b      	sxth	r3, r3
 800105e:	81fb      	strh	r3, [r7, #14]
        for (int i=0; i < 8; i++)
 8001060:	2300      	movs	r3, #0
 8001062:	60bb      	str	r3, [r7, #8]
 8001064:	e014      	b.n	8001090 <crc16_ccitt_false+0x58>
            wCrc = wCrc & 0x8000 ? (wCrc << 1) ^ 0x1021 : wCrc << 1;
 8001066:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800106a:	2b00      	cmp	r3, #0
 800106c:	da09      	bge.n	8001082 <crc16_ccitt_false+0x4a>
 800106e:	89fb      	ldrh	r3, [r7, #14]
 8001070:	005b      	lsls	r3, r3, #1
 8001072:	b21b      	sxth	r3, r3
 8001074:	f483 5381 	eor.w	r3, r3, #4128	@ 0x1020
 8001078:	f083 0301 	eor.w	r3, r3, #1
 800107c:	b21b      	sxth	r3, r3
 800107e:	b29b      	uxth	r3, r3
 8001080:	e002      	b.n	8001088 <crc16_ccitt_false+0x50>
 8001082:	89fb      	ldrh	r3, [r7, #14]
 8001084:	005b      	lsls	r3, r3, #1
 8001086:	b29b      	uxth	r3, r3
 8001088:	81fb      	strh	r3, [r7, #14]
        for (int i=0; i < 8; i++)
 800108a:	68bb      	ldr	r3, [r7, #8]
 800108c:	3301      	adds	r3, #1
 800108e:	60bb      	str	r3, [r7, #8]
 8001090:	68bb      	ldr	r3, [r7, #8]
 8001092:	2b07      	cmp	r3, #7
 8001094:	dde7      	ble.n	8001066 <crc16_ccitt_false+0x2e>
    while (length--) {
 8001096:	683b      	ldr	r3, [r7, #0]
 8001098:	1e5a      	subs	r2, r3, #1
 800109a:	603a      	str	r2, [r7, #0]
 800109c:	2b00      	cmp	r3, #0
 800109e:	d1d4      	bne.n	800104a <crc16_ccitt_false+0x12>
    }
    return wCrc;
 80010a0:	89fb      	ldrh	r3, [r7, #14]
}
 80010a2:	4618      	mov	r0, r3
 80010a4:	3714      	adds	r7, #20
 80010a6:	46bd      	mov	sp, r7
 80010a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ac:	4770      	bx	lr
	...

080010b0 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b082      	sub	sp, #8
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART2) {
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	4a20      	ldr	r2, [pc, #128]	@ (8001140 <HAL_UART_RxCpltCallback+0x90>)
 80010be:	4293      	cmp	r3, r2
 80010c0:	d13a      	bne.n	8001138 <HAL_UART_RxCpltCallback+0x88>
        static uint16_t length = 0;

        // Sprawdzamy, czy ramka zaczyna się od 'U'
        if (length == 0 && receivedData != 'U') {
 80010c2:	4b20      	ldr	r3, [pc, #128]	@ (8001144 <HAL_UART_RxCpltCallback+0x94>)
 80010c4:	881b      	ldrh	r3, [r3, #0]
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d10c      	bne.n	80010e4 <HAL_UART_RxCpltCallback+0x34>
 80010ca:	4b1f      	ldr	r3, [pc, #124]	@ (8001148 <HAL_UART_RxCpltCallback+0x98>)
 80010cc:	781b      	ldrb	r3, [r3, #0]
 80010ce:	2b55      	cmp	r3, #85	@ 0x55
 80010d0:	d008      	beq.n	80010e4 <HAL_UART_RxCpltCallback+0x34>
        	printf("Nie ma U na poczatku\r\n");
 80010d2:	481e      	ldr	r0, [pc, #120]	@ (800114c <HAL_UART_RxCpltCallback+0x9c>)
 80010d4:	f006 fb42 	bl	800775c <puts>
            // Ignorujemy, jeśli pierwszy znak nie jest 'U'
            HAL_UART_Receive_IT(&huart2, &receivedData, 1);
 80010d8:	2201      	movs	r2, #1
 80010da:	491b      	ldr	r1, [pc, #108]	@ (8001148 <HAL_UART_RxCpltCallback+0x98>)
 80010dc:	481c      	ldr	r0, [pc, #112]	@ (8001150 <HAL_UART_RxCpltCallback+0xa0>)
 80010de:	f004 fbb2 	bl	8005846 <HAL_UART_Receive_IT>
            return;
 80010e2:	e029      	b.n	8001138 <HAL_UART_RxCpltCallback+0x88>
        }

        buffer[length++] = receivedData;  // Buforowanie odebranego znaku
 80010e4:	4b17      	ldr	r3, [pc, #92]	@ (8001144 <HAL_UART_RxCpltCallback+0x94>)
 80010e6:	881b      	ldrh	r3, [r3, #0]
 80010e8:	1c5a      	adds	r2, r3, #1
 80010ea:	b291      	uxth	r1, r2
 80010ec:	4a15      	ldr	r2, [pc, #84]	@ (8001144 <HAL_UART_RxCpltCallback+0x94>)
 80010ee:	8011      	strh	r1, [r2, #0]
 80010f0:	461a      	mov	r2, r3
 80010f2:	4b15      	ldr	r3, [pc, #84]	@ (8001148 <HAL_UART_RxCpltCallback+0x98>)
 80010f4:	7819      	ldrb	r1, [r3, #0]
 80010f6:	4b17      	ldr	r3, [pc, #92]	@ (8001154 <HAL_UART_RxCpltCallback+0xa4>)
 80010f8:	5499      	strb	r1, [r3, r2]

        // Sprawdzamy, czy ramka kończy się na '\r\n'
        if (length >= 2 && buffer[length - 2] == '\r' && buffer[length - 1] == '\n') {
 80010fa:	4b12      	ldr	r3, [pc, #72]	@ (8001144 <HAL_UART_RxCpltCallback+0x94>)
 80010fc:	881b      	ldrh	r3, [r3, #0]
 80010fe:	2b01      	cmp	r3, #1
 8001100:	d915      	bls.n	800112e <HAL_UART_RxCpltCallback+0x7e>
 8001102:	4b10      	ldr	r3, [pc, #64]	@ (8001144 <HAL_UART_RxCpltCallback+0x94>)
 8001104:	881b      	ldrh	r3, [r3, #0]
 8001106:	3b02      	subs	r3, #2
 8001108:	4a12      	ldr	r2, [pc, #72]	@ (8001154 <HAL_UART_RxCpltCallback+0xa4>)
 800110a:	5cd3      	ldrb	r3, [r2, r3]
 800110c:	2b0d      	cmp	r3, #13
 800110e:	d10e      	bne.n	800112e <HAL_UART_RxCpltCallback+0x7e>
 8001110:	4b0c      	ldr	r3, [pc, #48]	@ (8001144 <HAL_UART_RxCpltCallback+0x94>)
 8001112:	881b      	ldrh	r3, [r3, #0]
 8001114:	3b01      	subs	r3, #1
 8001116:	4a0f      	ldr	r2, [pc, #60]	@ (8001154 <HAL_UART_RxCpltCallback+0xa4>)
 8001118:	5cd3      	ldrb	r3, [r2, r3]
 800111a:	2b0a      	cmp	r3, #10
 800111c:	d107      	bne.n	800112e <HAL_UART_RxCpltCallback+0x7e>
            receive_data_frame(length);  // Przetwarzamy ramkę danych
 800111e:	4b09      	ldr	r3, [pc, #36]	@ (8001144 <HAL_UART_RxCpltCallback+0x94>)
 8001120:	881b      	ldrh	r3, [r3, #0]
 8001122:	4618      	mov	r0, r3
 8001124:	f000 feaa 	bl	8001e7c <receive_data_frame>
            length = 0;  // Resetujemy długość bufora po zakończeniu ramki
 8001128:	4b06      	ldr	r3, [pc, #24]	@ (8001144 <HAL_UART_RxCpltCallback+0x94>)
 800112a:	2200      	movs	r2, #0
 800112c:	801a      	strh	r2, [r3, #0]
        }

        // Włączamy ponownie przerwanie odbioru danych UART
        HAL_UART_Receive_IT(&huart2, &receivedData, 1);
 800112e:	2201      	movs	r2, #1
 8001130:	4905      	ldr	r1, [pc, #20]	@ (8001148 <HAL_UART_RxCpltCallback+0x98>)
 8001132:	4807      	ldr	r0, [pc, #28]	@ (8001150 <HAL_UART_RxCpltCallback+0xa0>)
 8001134:	f004 fb87 	bl	8005846 <HAL_UART_Receive_IT>
    }
}
 8001138:	3708      	adds	r7, #8
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}
 800113e:	bf00      	nop
 8001140:	40004400 	.word	0x40004400
 8001144:	2000543c 	.word	0x2000543c
 8001148:	20000434 	.word	0x20000434
 800114c:	0800b848 	.word	0x0800b848
 8001150:	20000370 	.word	0x20000370
 8001154:	20000438 	.word	0x20000438

08001158 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b088      	sub	sp, #32
 800115c:	af02      	add	r7, sp, #8
 800115e:	6078      	str	r0, [r7, #4]

	if(htim == &htim2)
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	4aa6      	ldr	r2, [pc, #664]	@ (80013fc <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8001164:	4293      	cmp	r3, r2
 8001166:	f040 80ff 	bne.w	8001368 <HAL_TIM_PeriodElapsedCallback+0x210>
	{
		if( idPomiaru == 'S' )
 800116a:	4ba5      	ldr	r3, [pc, #660]	@ (8001400 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 800116c:	781b      	ldrb	r3, [r3, #0]
 800116e:	2b53      	cmp	r3, #83	@ 0x53
 8001170:	d163      	bne.n	800123a <HAL_TIM_PeriodElapsedCallback+0xe2>
		{
			if(strcmp(idCzujnika, "C5") == 0)
 8001172:	49a4      	ldr	r1, [pc, #656]	@ (8001404 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8001174:	48a4      	ldr	r0, [pc, #656]	@ (8001408 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8001176:	f7ff f833 	bl	80001e0 <strcmp>
 800117a:	4603      	mov	r3, r0
 800117c:	2b00      	cmp	r3, #0
 800117e:	d12a      	bne.n	80011d6 <HAL_TIM_PeriodElapsedCallback+0x7e>
			{
				  HAL_ADC_Stop(&hadc1);
 8001180:	48a2      	ldr	r0, [pc, #648]	@ (800140c <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8001182:	f001 fc31 	bl	80029e8 <HAL_ADC_Stop>
				  ADC_Select_CH11();
 8001186:	f000 fab3 	bl	80016f0 <ADC_Select_CH11>
				  HAL_ADC_Start(&hadc1);
 800118a:	48a0      	ldr	r0, [pc, #640]	@ (800140c <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 800118c:	f001 fb78 	bl	8002880 <HAL_ADC_Start>
				  HAL_ADC_PollForConversion(&hadc1, 1000);
 8001190:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001194:	489d      	ldr	r0, [pc, #628]	@ (800140c <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8001196:	f001 fc5a 	bl	8002a4e <HAL_ADC_PollForConversion>
				  adc_value5=HAL_ADC_GetValue(&hadc1);
 800119a:	489c      	ldr	r0, [pc, #624]	@ (800140c <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 800119c:	f001 fffa 	bl	8003194 <HAL_ADC_GetValue>
 80011a0:	4603      	mov	r3, r0
 80011a2:	461a      	mov	r2, r3
 80011a4:	4b9a      	ldr	r3, [pc, #616]	@ (8001410 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 80011a6:	601a      	str	r2, [r3, #0]

				sprintf(dane, "P S C5 %d", adc_value5);
 80011a8:	4b99      	ldr	r3, [pc, #612]	@ (8001410 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	461a      	mov	r2, r3
 80011ae:	4999      	ldr	r1, [pc, #612]	@ (8001414 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 80011b0:	4899      	ldr	r0, [pc, #612]	@ (8001418 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 80011b2:	f006 fb0f 	bl	80077d4 <siprintf>
				int crc16=crc16_ccitt_false(dane, strlen(dane));
 80011b6:	4898      	ldr	r0, [pc, #608]	@ (8001418 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 80011b8:	f7ff f872 	bl	80002a0 <strlen>
 80011bc:	4603      	mov	r3, r0
 80011be:	4619      	mov	r1, r3
 80011c0:	4895      	ldr	r0, [pc, #596]	@ (8001418 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 80011c2:	f7ff ff39 	bl	8001038 <crc16_ccitt_false>
 80011c6:	4603      	mov	r3, r0
 80011c8:	613b      	str	r3, [r7, #16]
				printf( "%s %0*d\r\n", dane, 5, crc16);
 80011ca:	693b      	ldr	r3, [r7, #16]
 80011cc:	2205      	movs	r2, #5
 80011ce:	4992      	ldr	r1, [pc, #584]	@ (8001418 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 80011d0:	4892      	ldr	r0, [pc, #584]	@ (800141c <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 80011d2:	f006 fa5b 	bl	800768c <iprintf>
			}

			if(strcmp(idCzujnika, "C6") == 0)
 80011d6:	4992      	ldr	r1, [pc, #584]	@ (8001420 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 80011d8:	488b      	ldr	r0, [pc, #556]	@ (8001408 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 80011da:	f7ff f801 	bl	80001e0 <strcmp>
 80011de:	4603      	mov	r3, r0
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d12a      	bne.n	800123a <HAL_TIM_PeriodElapsedCallback+0xe2>
			{
				  HAL_ADC_Stop(&hadc1);
 80011e4:	4889      	ldr	r0, [pc, #548]	@ (800140c <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 80011e6:	f001 fbff 	bl	80029e8 <HAL_ADC_Stop>
				  ADC_Select_CH10();
 80011ea:	f000 fa61 	bl	80016b0 <ADC_Select_CH10>
				  HAL_ADC_Start(&hadc1);
 80011ee:	4887      	ldr	r0, [pc, #540]	@ (800140c <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 80011f0:	f001 fb46 	bl	8002880 <HAL_ADC_Start>
				  HAL_ADC_PollForConversion(&hadc1, 1000);
 80011f4:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80011f8:	4884      	ldr	r0, [pc, #528]	@ (800140c <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 80011fa:	f001 fc28 	bl	8002a4e <HAL_ADC_PollForConversion>
				  adc_value6=HAL_ADC_GetValue(&hadc1);
 80011fe:	4883      	ldr	r0, [pc, #524]	@ (800140c <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8001200:	f001 ffc8 	bl	8003194 <HAL_ADC_GetValue>
 8001204:	4603      	mov	r3, r0
 8001206:	461a      	mov	r2, r3
 8001208:	4b86      	ldr	r3, [pc, #536]	@ (8001424 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 800120a:	601a      	str	r2, [r3, #0]


				sprintf(dane, "P S C6 %d", adc_value6);
 800120c:	4b85      	ldr	r3, [pc, #532]	@ (8001424 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	461a      	mov	r2, r3
 8001212:	4985      	ldr	r1, [pc, #532]	@ (8001428 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8001214:	4880      	ldr	r0, [pc, #512]	@ (8001418 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8001216:	f006 fadd 	bl	80077d4 <siprintf>
				int crc16=crc16_ccitt_false(dane, strlen(dane));
 800121a:	487f      	ldr	r0, [pc, #508]	@ (8001418 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 800121c:	f7ff f840 	bl	80002a0 <strlen>
 8001220:	4603      	mov	r3, r0
 8001222:	4619      	mov	r1, r3
 8001224:	487c      	ldr	r0, [pc, #496]	@ (8001418 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8001226:	f7ff ff07 	bl	8001038 <crc16_ccitt_false>
 800122a:	4603      	mov	r3, r0
 800122c:	60fb      	str	r3, [r7, #12]
				printf( "%s %0*d\r\n", dane, 5, crc16);
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	2205      	movs	r2, #5
 8001232:	4979      	ldr	r1, [pc, #484]	@ (8001418 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8001234:	4879      	ldr	r0, [pc, #484]	@ (800141c <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8001236:	f006 fa29 	bl	800768c <iprintf>
			}
		}

		if( idPomiaru == 'M')
 800123a:	4b71      	ldr	r3, [pc, #452]	@ (8001400 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 800123c:	781b      	ldrb	r3, [r3, #0]
 800123e:	2b4d      	cmp	r3, #77	@ 0x4d
 8001240:	f040 8092 	bne.w	8001368 <HAL_TIM_PeriodElapsedCallback+0x210>
		{
			switch(licznikDoPomiaruMatrycy)
 8001244:	4b79      	ldr	r3, [pc, #484]	@ (800142c <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8001246:	781b      	ldrb	r3, [r3, #0]
 8001248:	2b03      	cmp	r3, #3
 800124a:	d87f      	bhi.n	800134c <HAL_TIM_PeriodElapsedCallback+0x1f4>
 800124c:	a201      	add	r2, pc, #4	@ (adr r2, 8001254 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 800124e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001252:	bf00      	nop
 8001254:	08001265 	.word	0x08001265
 8001258:	0800128f 	.word	0x0800128f
 800125c:	080012b9 	.word	0x080012b9
 8001260:	080012e3 	.word	0x080012e3
			{
			case 0:
			  HAL_ADC_Stop(&hadc1);
 8001264:	4869      	ldr	r0, [pc, #420]	@ (800140c <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8001266:	f001 fbbf 	bl	80029e8 <HAL_ADC_Stop>
			  ADC_Select_CH0();
 800126a:	f000 f9a1 	bl	80015b0 <ADC_Select_CH0>
			  HAL_ADC_Start(&hadc1);
 800126e:	4867      	ldr	r0, [pc, #412]	@ (800140c <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8001270:	f001 fb06 	bl	8002880 <HAL_ADC_Start>
			  HAL_ADC_PollForConversion(&hadc1, 1000);
 8001274:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001278:	4864      	ldr	r0, [pc, #400]	@ (800140c <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 800127a:	f001 fbe8 	bl	8002a4e <HAL_ADC_PollForConversion>
			  adc_value1=HAL_ADC_GetValue(&hadc1);
 800127e:	4863      	ldr	r0, [pc, #396]	@ (800140c <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8001280:	f001 ff88 	bl	8003194 <HAL_ADC_GetValue>
 8001284:	4603      	mov	r3, r0
 8001286:	461a      	mov	r2, r3
 8001288:	4b69      	ldr	r3, [pc, #420]	@ (8001430 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 800128a:	601a      	str	r2, [r3, #0]
			  break;
 800128c:	e05f      	b.n	800134e <HAL_TIM_PeriodElapsedCallback+0x1f6>

			case 1:
			  HAL_ADC_Stop(&hadc1);
 800128e:	485f      	ldr	r0, [pc, #380]	@ (800140c <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8001290:	f001 fbaa 	bl	80029e8 <HAL_ADC_Stop>
			  ADC_Select_CH1();
 8001294:	f000 f9ac 	bl	80015f0 <ADC_Select_CH1>
			  HAL_ADC_Start(&hadc1);
 8001298:	485c      	ldr	r0, [pc, #368]	@ (800140c <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 800129a:	f001 faf1 	bl	8002880 <HAL_ADC_Start>
			  HAL_ADC_PollForConversion(&hadc1, 1000);
 800129e:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80012a2:	485a      	ldr	r0, [pc, #360]	@ (800140c <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 80012a4:	f001 fbd3 	bl	8002a4e <HAL_ADC_PollForConversion>
			  adc_value2=HAL_ADC_GetValue(&hadc1);
 80012a8:	4858      	ldr	r0, [pc, #352]	@ (800140c <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 80012aa:	f001 ff73 	bl	8003194 <HAL_ADC_GetValue>
 80012ae:	4603      	mov	r3, r0
 80012b0:	461a      	mov	r2, r3
 80012b2:	4b60      	ldr	r3, [pc, #384]	@ (8001434 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 80012b4:	601a      	str	r2, [r3, #0]
			  break;
 80012b6:	e04a      	b.n	800134e <HAL_TIM_PeriodElapsedCallback+0x1f6>

			case 2:
			  HAL_ADC_Stop(&hadc1);
 80012b8:	4854      	ldr	r0, [pc, #336]	@ (800140c <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 80012ba:	f001 fb95 	bl	80029e8 <HAL_ADC_Stop>
			  ADC_Select_CH4();
 80012be:	f000 f9b7 	bl	8001630 <ADC_Select_CH4>
			  HAL_ADC_Start(&hadc1);
 80012c2:	4852      	ldr	r0, [pc, #328]	@ (800140c <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 80012c4:	f001 fadc 	bl	8002880 <HAL_ADC_Start>
			  HAL_ADC_PollForConversion(&hadc1, 1000);
 80012c8:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80012cc:	484f      	ldr	r0, [pc, #316]	@ (800140c <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 80012ce:	f001 fbbe 	bl	8002a4e <HAL_ADC_PollForConversion>
			  adc_value3=HAL_ADC_GetValue(&hadc1);
 80012d2:	484e      	ldr	r0, [pc, #312]	@ (800140c <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 80012d4:	f001 ff5e 	bl	8003194 <HAL_ADC_GetValue>
 80012d8:	4603      	mov	r3, r0
 80012da:	461a      	mov	r2, r3
 80012dc:	4b56      	ldr	r3, [pc, #344]	@ (8001438 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 80012de:	601a      	str	r2, [r3, #0]
			  break;
 80012e0:	e035      	b.n	800134e <HAL_TIM_PeriodElapsedCallback+0x1f6>

			case 3:
			  HAL_ADC_Stop(&hadc1);
 80012e2:	484a      	ldr	r0, [pc, #296]	@ (800140c <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 80012e4:	f001 fb80 	bl	80029e8 <HAL_ADC_Stop>
			  ADC_Select_CH8();
 80012e8:	f000 f9c2 	bl	8001670 <ADC_Select_CH8>
			  HAL_ADC_Start(&hadc1);
 80012ec:	4847      	ldr	r0, [pc, #284]	@ (800140c <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 80012ee:	f001 fac7 	bl	8002880 <HAL_ADC_Start>
			  HAL_ADC_PollForConversion(&hadc1, 1000);
 80012f2:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80012f6:	4845      	ldr	r0, [pc, #276]	@ (800140c <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 80012f8:	f001 fba9 	bl	8002a4e <HAL_ADC_PollForConversion>
			  adc_value4=HAL_ADC_GetValue(&hadc1);
 80012fc:	4843      	ldr	r0, [pc, #268]	@ (800140c <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 80012fe:	f001 ff49 	bl	8003194 <HAL_ADC_GetValue>
 8001302:	4603      	mov	r3, r0
 8001304:	461a      	mov	r2, r3
 8001306:	4b4d      	ldr	r3, [pc, #308]	@ (800143c <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 8001308:	601a      	str	r2, [r3, #0]

			// Wyslij raz na 4 przerwania zegara
			sprintf(dane, "P M C1 %d C2 %d C3 %d C4 %d", adc_value1, adc_value2, adc_value3, adc_value4 );
 800130a:	4b49      	ldr	r3, [pc, #292]	@ (8001430 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 800130c:	6819      	ldr	r1, [r3, #0]
 800130e:	4b49      	ldr	r3, [pc, #292]	@ (8001434 <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8001310:	6818      	ldr	r0, [r3, #0]
 8001312:	4b49      	ldr	r3, [pc, #292]	@ (8001438 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	4a49      	ldr	r2, [pc, #292]	@ (800143c <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 8001318:	6812      	ldr	r2, [r2, #0]
 800131a:	9201      	str	r2, [sp, #4]
 800131c:	9300      	str	r3, [sp, #0]
 800131e:	4603      	mov	r3, r0
 8001320:	460a      	mov	r2, r1
 8001322:	4947      	ldr	r1, [pc, #284]	@ (8001440 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 8001324:	483c      	ldr	r0, [pc, #240]	@ (8001418 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8001326:	f006 fa55 	bl	80077d4 <siprintf>
			int crc16=crc16_ccitt_false(dane, strlen(dane));
 800132a:	483b      	ldr	r0, [pc, #236]	@ (8001418 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 800132c:	f7fe ffb8 	bl	80002a0 <strlen>
 8001330:	4603      	mov	r3, r0
 8001332:	4619      	mov	r1, r3
 8001334:	4838      	ldr	r0, [pc, #224]	@ (8001418 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8001336:	f7ff fe7f 	bl	8001038 <crc16_ccitt_false>
 800133a:	4603      	mov	r3, r0
 800133c:	60bb      	str	r3, [r7, #8]
			printf( "%s %0*d\r\n", dane, 5, crc16);
 800133e:	68bb      	ldr	r3, [r7, #8]
 8001340:	2205      	movs	r2, #5
 8001342:	4935      	ldr	r1, [pc, #212]	@ (8001418 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8001344:	4835      	ldr	r0, [pc, #212]	@ (800141c <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8001346:	f006 f9a1 	bl	800768c <iprintf>
			  break;
 800134a:	e000      	b.n	800134e <HAL_TIM_PeriodElapsedCallback+0x1f6>

			default:
			  break;
 800134c:	bf00      	nop
			}

			licznikDoPomiaruMatrycy = (licznikDoPomiaruMatrycy + 1) %4;
 800134e:	4b37      	ldr	r3, [pc, #220]	@ (800142c <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8001350:	781b      	ldrb	r3, [r3, #0]
 8001352:	3301      	adds	r3, #1
 8001354:	425a      	negs	r2, r3
 8001356:	f003 0303 	and.w	r3, r3, #3
 800135a:	f002 0203 	and.w	r2, r2, #3
 800135e:	bf58      	it	pl
 8001360:	4253      	negpl	r3, r2
 8001362:	b2da      	uxtb	r2, r3
 8001364:	4b31      	ldr	r3, [pc, #196]	@ (800142c <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8001366:	701a      	strb	r2, [r3, #0]
		  int crc16=crc16_ccitt_false(dane, strlen(dane));
		  printf( "%s %0*d\r\n", dane, 5, crc16);
		  */
	}

	if (htim == &htim3)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	4a36      	ldr	r2, [pc, #216]	@ (8001444 <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 800136c:	4293      	cmp	r3, r2
 800136e:	f040 80dc 	bne.w	800152a <HAL_TIM_PeriodElapsedCallback+0x3d2>
	    {
		//printf( "htim3\r\n" );

		int tempValPom = 0;
 8001372:	2300      	movs	r3, #0
 8001374:	617b      	str	r3, [r7, #20]
			if( idPomiaruDynam[0] == 'T' )
 8001376:	4b34      	ldr	r3, [pc, #208]	@ (8001448 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8001378:	781b      	ldrb	r3, [r3, #0]
 800137a:	2b54      	cmp	r3, #84	@ 0x54
 800137c:	f040 80ce 	bne.w	800151c <HAL_TIM_PeriodElapsedCallback+0x3c4>
			{
				if ( idCzujnika[1] == '5' )
 8001380:	4b21      	ldr	r3, [pc, #132]	@ (8001408 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8001382:	785b      	ldrb	r3, [r3, #1]
 8001384:	2b35      	cmp	r3, #53	@ 0x35
 8001386:	d167      	bne.n	8001458 <HAL_TIM_PeriodElapsedCallback+0x300>
				{

					tmpVal = (++tmpVal)%10000;
 8001388:	4b30      	ldr	r3, [pc, #192]	@ (800144c <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	3301      	adds	r3, #1
 800138e:	4a2f      	ldr	r2, [pc, #188]	@ (800144c <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 8001390:	6013      	str	r3, [r2, #0]
 8001392:	4b2e      	ldr	r3, [pc, #184]	@ (800144c <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 8001394:	681a      	ldr	r2, [r3, #0]
 8001396:	4b2e      	ldr	r3, [pc, #184]	@ (8001450 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 8001398:	fb83 1302 	smull	r1, r3, r3, r2
 800139c:	1319      	asrs	r1, r3, #12
 800139e:	17d3      	asrs	r3, r2, #31
 80013a0:	1acb      	subs	r3, r1, r3
 80013a2:	f242 7110 	movw	r1, #10000	@ 0x2710
 80013a6:	fb01 f303 	mul.w	r3, r1, r3
 80013aa:	1ad3      	subs	r3, r2, r3
 80013ac:	4a27      	ldr	r2, [pc, #156]	@ (800144c <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 80013ae:	6013      	str	r3, [r2, #0]
					  HAL_ADC_Stop(&hadc1);
 80013b0:	4816      	ldr	r0, [pc, #88]	@ (800140c <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 80013b2:	f001 fb19 	bl	80029e8 <HAL_ADC_Stop>
					  ADC_Select_CH11();
 80013b6:	f000 f99b 	bl	80016f0 <ADC_Select_CH11>
					  HAL_ADC_Start(&hadc1);
 80013ba:	4814      	ldr	r0, [pc, #80]	@ (800140c <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 80013bc:	f001 fa60 	bl	8002880 <HAL_ADC_Start>
					  HAL_ADC_PollForConversion(&hadc1, 1000);
 80013c0:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80013c4:	4811      	ldr	r0, [pc, #68]	@ (800140c <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 80013c6:	f001 fb42 	bl	8002a4e <HAL_ADC_PollForConversion>
					  adc_value5=HAL_ADC_GetValue(&hadc1);
 80013ca:	4810      	ldr	r0, [pc, #64]	@ (800140c <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 80013cc:	f001 fee2 	bl	8003194 <HAL_ADC_GetValue>
 80013d0:	4603      	mov	r3, r0
 80013d2:	461a      	mov	r2, r3
 80013d4:	4b0e      	ldr	r3, [pc, #56]	@ (8001410 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 80013d6:	601a      	str	r2, [r3, #0]
					  HAL_ADC_Stop(&hadc1);
 80013d8:	480c      	ldr	r0, [pc, #48]	@ (800140c <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 80013da:	f001 fb05 	bl	80029e8 <HAL_ADC_Stop>
					  if ( !tmpVal )
 80013de:	4b1b      	ldr	r3, [pc, #108]	@ (800144c <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d105      	bne.n	80013f2 <HAL_TIM_PeriodElapsedCallback+0x29a>
					  {
						  printf("htim3 cz5: %d\r\n", adc_value5);
 80013e6:	4b0a      	ldr	r3, [pc, #40]	@ (8001410 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	4619      	mov	r1, r3
 80013ec:	4819      	ldr	r0, [pc, #100]	@ (8001454 <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 80013ee:	f006 f94d 	bl	800768c <iprintf>
						  //printf("Prog pomiarow: %d\r\n", progPomiaruDynam);
					  }
					  tempValPom = adc_value5;
 80013f2:	4b07      	ldr	r3, [pc, #28]	@ (8001410 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	617b      	str	r3, [r7, #20]
 80013f8:	e04c      	b.n	8001494 <HAL_TIM_PeriodElapsedCallback+0x33c>
 80013fa:	bf00      	nop
 80013fc:	200002e0 	.word	0x200002e0
 8001400:	20000472 	.word	0x20000472
 8001404:	0800b860 	.word	0x0800b860
 8001408:	2000046c 	.word	0x2000046c
 800140c:	200001f0 	.word	0x200001f0
 8001410:	200003c8 	.word	0x200003c8
 8001414:	0800b864 	.word	0x0800b864
 8001418:	200003d0 	.word	0x200003d0
 800141c:	0800b870 	.word	0x0800b870
 8001420:	0800b87c 	.word	0x0800b87c
 8001424:	200003cc 	.word	0x200003cc
 8001428:	0800b880 	.word	0x0800b880
 800142c:	2000047c 	.word	0x2000047c
 8001430:	200003b8 	.word	0x200003b8
 8001434:	200003bc 	.word	0x200003bc
 8001438:	200003c0 	.word	0x200003c0
 800143c:	200003c4 	.word	0x200003c4
 8001440:	0800b88c 	.word	0x0800b88c
 8001444:	20000328 	.word	0x20000328
 8001448:	20000470 	.word	0x20000470
 800144c:	20000478 	.word	0x20000478
 8001450:	68db8bad 	.word	0x68db8bad
 8001454:	0800b8a8 	.word	0x0800b8a8

				} else if( idCzujnika[1] == '6' ) {
 8001458:	4b44      	ldr	r3, [pc, #272]	@ (800156c <HAL_TIM_PeriodElapsedCallback+0x414>)
 800145a:	785b      	ldrb	r3, [r3, #1]
 800145c:	2b36      	cmp	r3, #54	@ 0x36
 800145e:	d119      	bne.n	8001494 <HAL_TIM_PeriodElapsedCallback+0x33c>

					  HAL_ADC_Stop(&hadc1);
 8001460:	4843      	ldr	r0, [pc, #268]	@ (8001570 <HAL_TIM_PeriodElapsedCallback+0x418>)
 8001462:	f001 fac1 	bl	80029e8 <HAL_ADC_Stop>
					  ADC_Select_CH10();
 8001466:	f000 f923 	bl	80016b0 <ADC_Select_CH10>
					  HAL_ADC_Start(&hadc1);
 800146a:	4841      	ldr	r0, [pc, #260]	@ (8001570 <HAL_TIM_PeriodElapsedCallback+0x418>)
 800146c:	f001 fa08 	bl	8002880 <HAL_ADC_Start>
					  HAL_ADC_PollForConversion(&hadc1, 1000);
 8001470:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001474:	483e      	ldr	r0, [pc, #248]	@ (8001570 <HAL_TIM_PeriodElapsedCallback+0x418>)
 8001476:	f001 faea 	bl	8002a4e <HAL_ADC_PollForConversion>
					  adc_value6=HAL_ADC_GetValue(&hadc1);
 800147a:	483d      	ldr	r0, [pc, #244]	@ (8001570 <HAL_TIM_PeriodElapsedCallback+0x418>)
 800147c:	f001 fe8a 	bl	8003194 <HAL_ADC_GetValue>
 8001480:	4603      	mov	r3, r0
 8001482:	461a      	mov	r2, r3
 8001484:	4b3b      	ldr	r3, [pc, #236]	@ (8001574 <HAL_TIM_PeriodElapsedCallback+0x41c>)
 8001486:	601a      	str	r2, [r3, #0]
					  HAL_ADC_Stop(&hadc1);
 8001488:	4839      	ldr	r0, [pc, #228]	@ (8001570 <HAL_TIM_PeriodElapsedCallback+0x418>)
 800148a:	f001 faad 	bl	80029e8 <HAL_ADC_Stop>

					  tempValPom = adc_value6;
 800148e:	4b39      	ldr	r3, [pc, #228]	@ (8001574 <HAL_TIM_PeriodElapsedCallback+0x41c>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	617b      	str	r3, [r7, #20]
				}

				if ( !flagaZmiany)
 8001494:	4b38      	ldr	r3, [pc, #224]	@ (8001578 <HAL_TIM_PeriodElapsedCallback+0x420>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	2b00      	cmp	r3, #0
 800149a:	d116      	bne.n	80014ca <HAL_TIM_PeriodElapsedCallback+0x372>
				{
			    tablicaHistoriiPrzedPomiarem[indeksHistorii] = tempValPom;
 800149c:	4b37      	ldr	r3, [pc, #220]	@ (800157c <HAL_TIM_PeriodElapsedCallback+0x424>)
 800149e:	881b      	ldrh	r3, [r3, #0]
 80014a0:	4619      	mov	r1, r3
 80014a2:	697b      	ldr	r3, [r7, #20]
 80014a4:	4a36      	ldr	r2, [pc, #216]	@ (8001580 <HAL_TIM_PeriodElapsedCallback+0x428>)
 80014a6:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
			    indeksHistorii = (indeksHistorii + 1) % ROZM_HISTORIA;  // Przejście na kolejny indeks cyklicznie
 80014aa:	4b34      	ldr	r3, [pc, #208]	@ (800157c <HAL_TIM_PeriodElapsedCallback+0x424>)
 80014ac:	881b      	ldrh	r3, [r3, #0]
 80014ae:	3301      	adds	r3, #1
 80014b0:	4a34      	ldr	r2, [pc, #208]	@ (8001584 <HAL_TIM_PeriodElapsedCallback+0x42c>)
 80014b2:	fb82 1203 	smull	r1, r2, r2, r3
 80014b6:	1151      	asrs	r1, r2, #5
 80014b8:	17da      	asrs	r2, r3, #31
 80014ba:	1a8a      	subs	r2, r1, r2
 80014bc:	2164      	movs	r1, #100	@ 0x64
 80014be:	fb01 f202 	mul.w	r2, r1, r2
 80014c2:	1a9a      	subs	r2, r3, r2
 80014c4:	b292      	uxth	r2, r2
 80014c6:	4b2d      	ldr	r3, [pc, #180]	@ (800157c <HAL_TIM_PeriodElapsedCallback+0x424>)
 80014c8:	801a      	strh	r2, [r3, #0]
				}
//				if ( (adc_value5 <= progPomiaruDynam) && flagaZmiany ) flagaZmiany = 0;

		        if (( (adc_value6 > progPomiaruDynam) && idCzujnika[1] == '6') ||
 80014ca:	4b2f      	ldr	r3, [pc, #188]	@ (8001588 <HAL_TIM_PeriodElapsedCallback+0x430>)
 80014cc:	881b      	ldrh	r3, [r3, #0]
 80014ce:	461a      	mov	r2, r3
 80014d0:	4b28      	ldr	r3, [pc, #160]	@ (8001574 <HAL_TIM_PeriodElapsedCallback+0x41c>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	429a      	cmp	r2, r3
 80014d6:	da03      	bge.n	80014e0 <HAL_TIM_PeriodElapsedCallback+0x388>
 80014d8:	4b24      	ldr	r3, [pc, #144]	@ (800156c <HAL_TIM_PeriodElapsedCallback+0x414>)
 80014da:	785b      	ldrb	r3, [r3, #1]
 80014dc:	2b36      	cmp	r3, #54	@ 0x36
 80014de:	d00a      	beq.n	80014f6 <HAL_TIM_PeriodElapsedCallback+0x39e>
		        	( (adc_value5 > progPomiaruDynam) && idCzujnika[1] == '5'))
 80014e0:	4b29      	ldr	r3, [pc, #164]	@ (8001588 <HAL_TIM_PeriodElapsedCallback+0x430>)
 80014e2:	881b      	ldrh	r3, [r3, #0]
 80014e4:	461a      	mov	r2, r3
 80014e6:	4b29      	ldr	r3, [pc, #164]	@ (800158c <HAL_TIM_PeriodElapsedCallback+0x434>)
 80014e8:	681b      	ldr	r3, [r3, #0]
		        if (( (adc_value6 > progPomiaruDynam) && idCzujnika[1] == '6') ||
 80014ea:	429a      	cmp	r2, r3
 80014ec:	da39      	bge.n	8001562 <HAL_TIM_PeriodElapsedCallback+0x40a>
		        	( (adc_value5 > progPomiaruDynam) && idCzujnika[1] == '5'))
 80014ee:	4b1f      	ldr	r3, [pc, #124]	@ (800156c <HAL_TIM_PeriodElapsedCallback+0x414>)
 80014f0:	785b      	ldrb	r3, [r3, #1]
 80014f2:	2b35      	cmp	r3, #53	@ 0x35
 80014f4:	d135      	bne.n	8001562 <HAL_TIM_PeriodElapsedCallback+0x40a>
		        {
		        	//printf("aasddasdasd");
		            // Sprawdzenie, czy zmieniło się z <30 na >30
		            if (!flagaZmiany)
 80014f6:	4b20      	ldr	r3, [pc, #128]	@ (8001578 <HAL_TIM_PeriodElapsedCallback+0x420>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d131      	bne.n	8001562 <HAL_TIM_PeriodElapsedCallback+0x40a>
		            {
		            	//printf("ZaczynamDynamT!!!\r\n");
		            	HAL_ADC_Stop(&hadc1);
 80014fe:	481c      	ldr	r0, [pc, #112]	@ (8001570 <HAL_TIM_PeriodElapsedCallback+0x418>)
 8001500:	f001 fa72 	bl	80029e8 <HAL_ADC_Stop>
		            	ADC_Select_CH11();
 8001504:	f000 f8f4 	bl	80016f0 <ADC_Select_CH11>
		            	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)tablicaPomiarowDynamicznych, MAX_POMIARY);
 8001508:	f241 3288 	movw	r2, #5000	@ 0x1388
 800150c:	4920      	ldr	r1, [pc, #128]	@ (8001590 <HAL_TIM_PeriodElapsedCallback+0x438>)
 800150e:	4818      	ldr	r0, [pc, #96]	@ (8001570 <HAL_TIM_PeriodElapsedCallback+0x418>)
 8001510:	f001 fcf6 	bl	8002f00 <HAL_ADC_Start_DMA>
		                flagaZmiany = 1;  // Ustawienie flagi zmiany
 8001514:	4b18      	ldr	r3, [pc, #96]	@ (8001578 <HAL_TIM_PeriodElapsedCallback+0x420>)
 8001516:	2201      	movs	r2, #1
 8001518:	601a      	str	r2, [r3, #0]

				} else if(strcmp(idCzujnika, "C6") == 0)

					printf("D C6 oraz X\r\n");
				}
			}
 800151a:	e022      	b.n	8001562 <HAL_TIM_PeriodElapsedCallback+0x40a>
		            flagaZmiany = 0;
 800151c:	4b16      	ldr	r3, [pc, #88]	@ (8001578 <HAL_TIM_PeriodElapsedCallback+0x420>)
 800151e:	2200      	movs	r2, #0
 8001520:	601a      	str	r2, [r3, #0]
		            licznikDanychPowyzej30 = 0;  // Reset licznika tylko po spadku wartości poniżej 30
 8001522:	4b1c      	ldr	r3, [pc, #112]	@ (8001594 <HAL_TIM_PeriodElapsedCallback+0x43c>)
 8001524:	2200      	movs	r2, #0
 8001526:	601a      	str	r2, [r3, #0]
			}
 8001528:	e01b      	b.n	8001562 <HAL_TIM_PeriodElapsedCallback+0x40a>
			} else if(strcmp(idPomiaruDynam, "X") == 0) {
 800152a:	491b      	ldr	r1, [pc, #108]	@ (8001598 <HAL_TIM_PeriodElapsedCallback+0x440>)
 800152c:	481b      	ldr	r0, [pc, #108]	@ (800159c <HAL_TIM_PeriodElapsedCallback+0x444>)
 800152e:	f7fe fe57 	bl	80001e0 <strcmp>
 8001532:	4603      	mov	r3, r0
 8001534:	2b00      	cmp	r3, #0
 8001536:	d114      	bne.n	8001562 <HAL_TIM_PeriodElapsedCallback+0x40a>
				if(strcmp(idCzujnika, "C5") == 0)
 8001538:	4919      	ldr	r1, [pc, #100]	@ (80015a0 <HAL_TIM_PeriodElapsedCallback+0x448>)
 800153a:	480c      	ldr	r0, [pc, #48]	@ (800156c <HAL_TIM_PeriodElapsedCallback+0x414>)
 800153c:	f7fe fe50 	bl	80001e0 <strcmp>
 8001540:	4603      	mov	r3, r0
 8001542:	2b00      	cmp	r3, #0
 8001544:	d103      	bne.n	800154e <HAL_TIM_PeriodElapsedCallback+0x3f6>
					printf("D C5 oraz X\r\n");
 8001546:	4817      	ldr	r0, [pc, #92]	@ (80015a4 <HAL_TIM_PeriodElapsedCallback+0x44c>)
 8001548:	f006 f908 	bl	800775c <puts>
			}
 800154c:	e009      	b.n	8001562 <HAL_TIM_PeriodElapsedCallback+0x40a>
				} else if(strcmp(idCzujnika, "C6") == 0)
 800154e:	4916      	ldr	r1, [pc, #88]	@ (80015a8 <HAL_TIM_PeriodElapsedCallback+0x450>)
 8001550:	4806      	ldr	r0, [pc, #24]	@ (800156c <HAL_TIM_PeriodElapsedCallback+0x414>)
 8001552:	f7fe fe45 	bl	80001e0 <strcmp>
 8001556:	4603      	mov	r3, r0
 8001558:	2b00      	cmp	r3, #0
 800155a:	d102      	bne.n	8001562 <HAL_TIM_PeriodElapsedCallback+0x40a>
					printf("D C6 oraz X\r\n");
 800155c:	4813      	ldr	r0, [pc, #76]	@ (80015ac <HAL_TIM_PeriodElapsedCallback+0x454>)
 800155e:	f006 f8fd 	bl	800775c <puts>
			}
 8001562:	bf00      	nop
 8001564:	3718      	adds	r7, #24
 8001566:	46bd      	mov	sp, r7
 8001568:	bd80      	pop	{r7, pc}
 800156a:	bf00      	nop
 800156c:	2000046c 	.word	0x2000046c
 8001570:	200001f0 	.word	0x200001f0
 8001574:	200003cc 	.word	0x200003cc
 8001578:	20005438 	.word	0x20005438
 800157c:	20005430 	.word	0x20005430
 8001580:	200052a0 	.word	0x200052a0
 8001584:	51eb851f 	.word	0x51eb851f
 8001588:	20000476 	.word	0x20000476
 800158c:	200003c8 	.word	0x200003c8
 8001590:	20000480 	.word	0x20000480
 8001594:	20005434 	.word	0x20005434
 8001598:	0800b8b8 	.word	0x0800b8b8
 800159c:	20000470 	.word	0x20000470
 80015a0:	0800b860 	.word	0x0800b860
 80015a4:	0800b8bc 	.word	0x0800b8bc
 80015a8:	0800b87c 	.word	0x0800b87c
 80015ac:	0800b8cc 	.word	0x0800b8cc

080015b0 <ADC_Select_CH0>:
	        }
	        	    */
//	    }

void ADC_Select_CH0 (void)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b084      	sub	sp, #16
 80015b4:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig ={0};
 80015b6:	463b      	mov	r3, r7
 80015b8:	2200      	movs	r2, #0
 80015ba:	601a      	str	r2, [r3, #0]
 80015bc:	605a      	str	r2, [r3, #4]
 80015be:	609a      	str	r2, [r3, #8]
 80015c0:	60da      	str	r2, [r3, #12]

	  sConfig.Channel = ADC_CHANNEL_0;
 80015c2:	2300      	movs	r3, #0
 80015c4:	603b      	str	r3, [r7, #0]
	  sConfig.Rank = 1;
 80015c6:	2301      	movs	r3, #1
 80015c8:	607b      	str	r3, [r7, #4]
	  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 80015ca:	2301      	movs	r3, #1
 80015cc:	60bb      	str	r3, [r7, #8]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80015ce:	463b      	mov	r3, r7
 80015d0:	4619      	mov	r1, r3
 80015d2:	4806      	ldr	r0, [pc, #24]	@ (80015ec <ADC_Select_CH0+0x3c>)
 80015d4:	f001 fe00 	bl	80031d8 <HAL_ADC_ConfigChannel>
 80015d8:	4603      	mov	r3, r0
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d001      	beq.n	80015e2 <ADC_Select_CH0+0x32>
	  {
	    Error_Handler();
 80015de:	f000 fda3 	bl	8002128 <Error_Handler>
	  }
	  //HAL_Delay_us(1);
}
 80015e2:	bf00      	nop
 80015e4:	3710      	adds	r7, #16
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}
 80015ea:	bf00      	nop
 80015ec:	200001f0 	.word	0x200001f0

080015f0 <ADC_Select_CH1>:

void ADC_Select_CH1 (void)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b084      	sub	sp, #16
 80015f4:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig ={0};
 80015f6:	463b      	mov	r3, r7
 80015f8:	2200      	movs	r2, #0
 80015fa:	601a      	str	r2, [r3, #0]
 80015fc:	605a      	str	r2, [r3, #4]
 80015fe:	609a      	str	r2, [r3, #8]
 8001600:	60da      	str	r2, [r3, #12]
	  sConfig.Channel = ADC_CHANNEL_1;
 8001602:	2301      	movs	r3, #1
 8001604:	603b      	str	r3, [r7, #0]
	  sConfig.Rank = 1;
 8001606:	2301      	movs	r3, #1
 8001608:	607b      	str	r3, [r7, #4]
	  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 800160a:	2301      	movs	r3, #1
 800160c:	60bb      	str	r3, [r7, #8]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800160e:	463b      	mov	r3, r7
 8001610:	4619      	mov	r1, r3
 8001612:	4806      	ldr	r0, [pc, #24]	@ (800162c <ADC_Select_CH1+0x3c>)
 8001614:	f001 fde0 	bl	80031d8 <HAL_ADC_ConfigChannel>
 8001618:	4603      	mov	r3, r0
 800161a:	2b00      	cmp	r3, #0
 800161c:	d001      	beq.n	8001622 <ADC_Select_CH1+0x32>
	  {
	    Error_Handler();
 800161e:	f000 fd83 	bl	8002128 <Error_Handler>
	  }
	  //HAL_Delay_us(1);
}
 8001622:	bf00      	nop
 8001624:	3710      	adds	r7, #16
 8001626:	46bd      	mov	sp, r7
 8001628:	bd80      	pop	{r7, pc}
 800162a:	bf00      	nop
 800162c:	200001f0 	.word	0x200001f0

08001630 <ADC_Select_CH4>:

void ADC_Select_CH4 (void)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b084      	sub	sp, #16
 8001634:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig ={0};
 8001636:	463b      	mov	r3, r7
 8001638:	2200      	movs	r2, #0
 800163a:	601a      	str	r2, [r3, #0]
 800163c:	605a      	str	r2, [r3, #4]
 800163e:	609a      	str	r2, [r3, #8]
 8001640:	60da      	str	r2, [r3, #12]
	  sConfig.Channel = ADC_CHANNEL_4;
 8001642:	2304      	movs	r3, #4
 8001644:	603b      	str	r3, [r7, #0]
	  sConfig.Rank = 1;
 8001646:	2301      	movs	r3, #1
 8001648:	607b      	str	r3, [r7, #4]
	  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 800164a:	2301      	movs	r3, #1
 800164c:	60bb      	str	r3, [r7, #8]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800164e:	463b      	mov	r3, r7
 8001650:	4619      	mov	r1, r3
 8001652:	4806      	ldr	r0, [pc, #24]	@ (800166c <ADC_Select_CH4+0x3c>)
 8001654:	f001 fdc0 	bl	80031d8 <HAL_ADC_ConfigChannel>
 8001658:	4603      	mov	r3, r0
 800165a:	2b00      	cmp	r3, #0
 800165c:	d001      	beq.n	8001662 <ADC_Select_CH4+0x32>
	  {
	    Error_Handler();
 800165e:	f000 fd63 	bl	8002128 <Error_Handler>
	  }
	  //HAL_Delay_us(1);
}
 8001662:	bf00      	nop
 8001664:	3710      	adds	r7, #16
 8001666:	46bd      	mov	sp, r7
 8001668:	bd80      	pop	{r7, pc}
 800166a:	bf00      	nop
 800166c:	200001f0 	.word	0x200001f0

08001670 <ADC_Select_CH8>:

void ADC_Select_CH8 (void)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b084      	sub	sp, #16
 8001674:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig ={0};
 8001676:	463b      	mov	r3, r7
 8001678:	2200      	movs	r2, #0
 800167a:	601a      	str	r2, [r3, #0]
 800167c:	605a      	str	r2, [r3, #4]
 800167e:	609a      	str	r2, [r3, #8]
 8001680:	60da      	str	r2, [r3, #12]
	  sConfig.Channel = ADC_CHANNEL_8;
 8001682:	2308      	movs	r3, #8
 8001684:	603b      	str	r3, [r7, #0]
	  sConfig.Rank = 1;
 8001686:	2301      	movs	r3, #1
 8001688:	607b      	str	r3, [r7, #4]
	  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 800168a:	2301      	movs	r3, #1
 800168c:	60bb      	str	r3, [r7, #8]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800168e:	463b      	mov	r3, r7
 8001690:	4619      	mov	r1, r3
 8001692:	4806      	ldr	r0, [pc, #24]	@ (80016ac <ADC_Select_CH8+0x3c>)
 8001694:	f001 fda0 	bl	80031d8 <HAL_ADC_ConfigChannel>
 8001698:	4603      	mov	r3, r0
 800169a:	2b00      	cmp	r3, #0
 800169c:	d001      	beq.n	80016a2 <ADC_Select_CH8+0x32>
	  {
	    Error_Handler();
 800169e:	f000 fd43 	bl	8002128 <Error_Handler>
	  }
	  //HAL_Delay_us(1);
}
 80016a2:	bf00      	nop
 80016a4:	3710      	adds	r7, #16
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bd80      	pop	{r7, pc}
 80016aa:	bf00      	nop
 80016ac:	200001f0 	.word	0x200001f0

080016b0 <ADC_Select_CH10>:

void ADC_Select_CH10 (void)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b084      	sub	sp, #16
 80016b4:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig ={0};
 80016b6:	463b      	mov	r3, r7
 80016b8:	2200      	movs	r2, #0
 80016ba:	601a      	str	r2, [r3, #0]
 80016bc:	605a      	str	r2, [r3, #4]
 80016be:	609a      	str	r2, [r3, #8]
 80016c0:	60da      	str	r2, [r3, #12]
	  sConfig.Channel = ADC_CHANNEL_10;
 80016c2:	230a      	movs	r3, #10
 80016c4:	603b      	str	r3, [r7, #0]
	  sConfig.Rank = 1;
 80016c6:	2301      	movs	r3, #1
 80016c8:	607b      	str	r3, [r7, #4]
	  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 80016ca:	2303      	movs	r3, #3
 80016cc:	60bb      	str	r3, [r7, #8]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80016ce:	463b      	mov	r3, r7
 80016d0:	4619      	mov	r1, r3
 80016d2:	4806      	ldr	r0, [pc, #24]	@ (80016ec <ADC_Select_CH10+0x3c>)
 80016d4:	f001 fd80 	bl	80031d8 <HAL_ADC_ConfigChannel>
 80016d8:	4603      	mov	r3, r0
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d001      	beq.n	80016e2 <ADC_Select_CH10+0x32>
	  {
	    Error_Handler();
 80016de:	f000 fd23 	bl	8002128 <Error_Handler>
	  }
	  //HAL_Delay_us(1);
}
 80016e2:	bf00      	nop
 80016e4:	3710      	adds	r7, #16
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}
 80016ea:	bf00      	nop
 80016ec:	200001f0 	.word	0x200001f0

080016f0 <ADC_Select_CH11>:

void ADC_Select_CH11 (void)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b084      	sub	sp, #16
 80016f4:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig ={0};
 80016f6:	463b      	mov	r3, r7
 80016f8:	2200      	movs	r2, #0
 80016fa:	601a      	str	r2, [r3, #0]
 80016fc:	605a      	str	r2, [r3, #4]
 80016fe:	609a      	str	r2, [r3, #8]
 8001700:	60da      	str	r2, [r3, #12]
	  sConfig.Channel = ADC_CHANNEL_11;
 8001702:	230b      	movs	r3, #11
 8001704:	603b      	str	r3, [r7, #0]
	  sConfig.Rank = 1;
 8001706:	2301      	movs	r3, #1
 8001708:	607b      	str	r3, [r7, #4]
	  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 800170a:	2303      	movs	r3, #3
 800170c:	60bb      	str	r3, [r7, #8]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800170e:	463b      	mov	r3, r7
 8001710:	4619      	mov	r1, r3
 8001712:	4806      	ldr	r0, [pc, #24]	@ (800172c <ADC_Select_CH11+0x3c>)
 8001714:	f001 fd60 	bl	80031d8 <HAL_ADC_ConfigChannel>
 8001718:	4603      	mov	r3, r0
 800171a:	2b00      	cmp	r3, #0
 800171c:	d001      	beq.n	8001722 <ADC_Select_CH11+0x32>
	  {
	    Error_Handler();
 800171e:	f000 fd03 	bl	8002128 <Error_Handler>
	  }
	  //HAL_Delay_us(1);
}
 8001722:	bf00      	nop
 8001724:	3710      	adds	r7, #16
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}
 800172a:	bf00      	nop
 800172c:	200001f0 	.word	0x200001f0

08001730 <HAL_ADC_ConvCpltCallback>:


void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b082      	sub	sp, #8
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
//        for (int i = 0; i < 10; i++) { // Wyświetl kilka pierwszych wartości
//            printf("tablica[%d] = %lu\r\n", i, tablicaPomiarowDynamicznych[i]);
//        }
//    }

	if( (hadc->Instance == ADC1) && (flagaZmiany == 1) && (idPomiaruDynam[0] == 'T') )
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	4a0b      	ldr	r2, [pc, #44]	@ (800176c <HAL_ADC_ConvCpltCallback+0x3c>)
 800173e:	4293      	cmp	r3, r2
 8001740:	d110      	bne.n	8001764 <HAL_ADC_ConvCpltCallback+0x34>
 8001742:	4b0b      	ldr	r3, [pc, #44]	@ (8001770 <HAL_ADC_ConvCpltCallback+0x40>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	2b01      	cmp	r3, #1
 8001748:	d10c      	bne.n	8001764 <HAL_ADC_ConvCpltCallback+0x34>
 800174a:	4b0a      	ldr	r3, [pc, #40]	@ (8001774 <HAL_ADC_ConvCpltCallback+0x44>)
 800174c:	781b      	ldrb	r3, [r3, #0]
 800174e:	2b54      	cmp	r3, #84	@ 0x54
 8001750:	d108      	bne.n	8001764 <HAL_ADC_ConvCpltCallback+0x34>
	{
		sendDataRamkaDynamT(tablicaPomiarowDynamicznych, czasPomiaruDynam);
 8001752:	4b09      	ldr	r3, [pc, #36]	@ (8001778 <HAL_ADC_ConvCpltCallback+0x48>)
 8001754:	881b      	ldrh	r3, [r3, #0]
 8001756:	4619      	mov	r1, r3
 8001758:	4808      	ldr	r0, [pc, #32]	@ (800177c <HAL_ADC_ConvCpltCallback+0x4c>)
 800175a:	f000 fa93 	bl	8001c84 <sendDataRamkaDynamT>
		HAL_ADC_Stop_DMA(&hadc1);
 800175e:	4808      	ldr	r0, [pc, #32]	@ (8001780 <HAL_ADC_ConvCpltCallback+0x50>)
 8001760:	f001 fcbe 	bl	80030e0 <HAL_ADC_Stop_DMA>
//		counter = 0;
//		break;
//	}
//
//	HAL_ADC_Start_IT(&hadc1);
}
 8001764:	bf00      	nop
 8001766:	3708      	adds	r7, #8
 8001768:	46bd      	mov	sp, r7
 800176a:	bd80      	pop	{r7, pc}
 800176c:	40012000 	.word	0x40012000
 8001770:	20005438 	.word	0x20005438
 8001774:	20000470 	.word	0x20000470
 8001778:	20000474 	.word	0x20000474
 800177c:	20000480 	.word	0x20000480
 8001780:	200001f0 	.word	0x200001f0

08001784 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001788:	f000 ffc4 	bl	8002714 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800178c:	f000 f81e 	bl	80017cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001790:	f000 fa0a 	bl	8001ba8 <MX_GPIO_Init>
  MX_DMA_Init();
 8001794:	f000 f9e8 	bl	8001b68 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001798:	f000 f9bc 	bl	8001b14 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 800179c:	f000 f880 	bl	80018a0 <MX_ADC1_Init>
  MX_TIM2_Init();
 80017a0:	f000 f920 	bl	80019e4 <MX_TIM2_Init>
  MX_TIM3_Init();
 80017a4:	f000 f96a 	bl	8001a7c <MX_TIM3_Init>
  MX_TIM1_Init();
 80017a8:	f000 f8cc 	bl	8001944 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_IT(&hadc1);
 80017ac:	4804      	ldr	r0, [pc, #16]	@ (80017c0 <main+0x3c>)
 80017ae:	f001 f9d9 	bl	8002b64 <HAL_ADC_Start_IT>
  //HAL_ADC_Start_DMA(&hadc1, tablicaPomiarowDynamicznych, MAX_POMIARY);

  //HAL_TIM_Base_Start_IT(&htim2);
  //HAL_TIM_Base_Start_IT(&htim3);

  HAL_UART_Receive_IT(&huart2, &receivedData, 1);
 80017b2:	2201      	movs	r2, #1
 80017b4:	4903      	ldr	r1, [pc, #12]	@ (80017c4 <main+0x40>)
 80017b6:	4804      	ldr	r0, [pc, #16]	@ (80017c8 <main+0x44>)
 80017b8:	f004 f845 	bl	8005846 <HAL_UART_Receive_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80017bc:	bf00      	nop
 80017be:	e7fd      	b.n	80017bc <main+0x38>
 80017c0:	200001f0 	.word	0x200001f0
 80017c4:	20000434 	.word	0x20000434
 80017c8:	20000370 	.word	0x20000370

080017cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b094      	sub	sp, #80	@ 0x50
 80017d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80017d2:	f107 0320 	add.w	r3, r7, #32
 80017d6:	2230      	movs	r2, #48	@ 0x30
 80017d8:	2100      	movs	r1, #0
 80017da:	4618      	mov	r0, r3
 80017dc:	f006 f91e 	bl	8007a1c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80017e0:	f107 030c 	add.w	r3, r7, #12
 80017e4:	2200      	movs	r2, #0
 80017e6:	601a      	str	r2, [r3, #0]
 80017e8:	605a      	str	r2, [r3, #4]
 80017ea:	609a      	str	r2, [r3, #8]
 80017ec:	60da      	str	r2, [r3, #12]
 80017ee:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80017f0:	2300      	movs	r3, #0
 80017f2:	60bb      	str	r3, [r7, #8]
 80017f4:	4b28      	ldr	r3, [pc, #160]	@ (8001898 <SystemClock_Config+0xcc>)
 80017f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017f8:	4a27      	ldr	r2, [pc, #156]	@ (8001898 <SystemClock_Config+0xcc>)
 80017fa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80017fe:	6413      	str	r3, [r2, #64]	@ 0x40
 8001800:	4b25      	ldr	r3, [pc, #148]	@ (8001898 <SystemClock_Config+0xcc>)
 8001802:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001804:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001808:	60bb      	str	r3, [r7, #8]
 800180a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800180c:	2300      	movs	r3, #0
 800180e:	607b      	str	r3, [r7, #4]
 8001810:	4b22      	ldr	r3, [pc, #136]	@ (800189c <SystemClock_Config+0xd0>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001818:	4a20      	ldr	r2, [pc, #128]	@ (800189c <SystemClock_Config+0xd0>)
 800181a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800181e:	6013      	str	r3, [r2, #0]
 8001820:	4b1e      	ldr	r3, [pc, #120]	@ (800189c <SystemClock_Config+0xd0>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001828:	607b      	str	r3, [r7, #4]
 800182a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800182c:	2302      	movs	r3, #2
 800182e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001830:	2301      	movs	r3, #1
 8001832:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001834:	2310      	movs	r3, #16
 8001836:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001838:	2302      	movs	r3, #2
 800183a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800183c:	2300      	movs	r3, #0
 800183e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001840:	2308      	movs	r3, #8
 8001842:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 68;
 8001844:	2344      	movs	r3, #68	@ 0x44
 8001846:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001848:	2302      	movs	r3, #2
 800184a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800184c:	2307      	movs	r3, #7
 800184e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001850:	f107 0320 	add.w	r3, r7, #32
 8001854:	4618      	mov	r0, r3
 8001856:	f002 fe1b 	bl	8004490 <HAL_RCC_OscConfig>
 800185a:	4603      	mov	r3, r0
 800185c:	2b00      	cmp	r3, #0
 800185e:	d001      	beq.n	8001864 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001860:	f000 fc62 	bl	8002128 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001864:	230f      	movs	r3, #15
 8001866:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001868:	2302      	movs	r3, #2
 800186a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800186c:	2300      	movs	r3, #0
 800186e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001870:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001874:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001876:	2300      	movs	r3, #0
 8001878:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800187a:	f107 030c 	add.w	r3, r7, #12
 800187e:	2102      	movs	r1, #2
 8001880:	4618      	mov	r0, r3
 8001882:	f003 f87d 	bl	8004980 <HAL_RCC_ClockConfig>
 8001886:	4603      	mov	r3, r0
 8001888:	2b00      	cmp	r3, #0
 800188a:	d001      	beq.n	8001890 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 800188c:	f000 fc4c 	bl	8002128 <Error_Handler>
  }
}
 8001890:	bf00      	nop
 8001892:	3750      	adds	r7, #80	@ 0x50
 8001894:	46bd      	mov	sp, r7
 8001896:	bd80      	pop	{r7, pc}
 8001898:	40023800 	.word	0x40023800
 800189c:	40007000 	.word	0x40007000

080018a0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b084      	sub	sp, #16
 80018a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80018a6:	463b      	mov	r3, r7
 80018a8:	2200      	movs	r2, #0
 80018aa:	601a      	str	r2, [r3, #0]
 80018ac:	605a      	str	r2, [r3, #4]
 80018ae:	609a      	str	r2, [r3, #8]
 80018b0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80018b2:	4b21      	ldr	r3, [pc, #132]	@ (8001938 <MX_ADC1_Init+0x98>)
 80018b4:	4a21      	ldr	r2, [pc, #132]	@ (800193c <MX_ADC1_Init+0x9c>)
 80018b6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80018b8:	4b1f      	ldr	r3, [pc, #124]	@ (8001938 <MX_ADC1_Init+0x98>)
 80018ba:	2200      	movs	r2, #0
 80018bc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80018be:	4b1e      	ldr	r3, [pc, #120]	@ (8001938 <MX_ADC1_Init+0x98>)
 80018c0:	2200      	movs	r2, #0
 80018c2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80018c4:	4b1c      	ldr	r3, [pc, #112]	@ (8001938 <MX_ADC1_Init+0x98>)
 80018c6:	2200      	movs	r2, #0
 80018c8:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80018ca:	4b1b      	ldr	r3, [pc, #108]	@ (8001938 <MX_ADC1_Init+0x98>)
 80018cc:	2201      	movs	r2, #1
 80018ce:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80018d0:	4b19      	ldr	r3, [pc, #100]	@ (8001938 <MX_ADC1_Init+0x98>)
 80018d2:	2200      	movs	r2, #0
 80018d4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80018d8:	4b17      	ldr	r3, [pc, #92]	@ (8001938 <MX_ADC1_Init+0x98>)
 80018da:	2200      	movs	r2, #0
 80018dc:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80018de:	4b16      	ldr	r3, [pc, #88]	@ (8001938 <MX_ADC1_Init+0x98>)
 80018e0:	4a17      	ldr	r2, [pc, #92]	@ (8001940 <MX_ADC1_Init+0xa0>)
 80018e2:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80018e4:	4b14      	ldr	r3, [pc, #80]	@ (8001938 <MX_ADC1_Init+0x98>)
 80018e6:	2200      	movs	r2, #0
 80018e8:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80018ea:	4b13      	ldr	r3, [pc, #76]	@ (8001938 <MX_ADC1_Init+0x98>)
 80018ec:	2201      	movs	r2, #1
 80018ee:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80018f0:	4b11      	ldr	r3, [pc, #68]	@ (8001938 <MX_ADC1_Init+0x98>)
 80018f2:	2201      	movs	r2, #1
 80018f4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80018f8:	4b0f      	ldr	r3, [pc, #60]	@ (8001938 <MX_ADC1_Init+0x98>)
 80018fa:	2201      	movs	r2, #1
 80018fc:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80018fe:	480e      	ldr	r0, [pc, #56]	@ (8001938 <MX_ADC1_Init+0x98>)
 8001900:	f000 ff7a 	bl	80027f8 <HAL_ADC_Init>
 8001904:	4603      	mov	r3, r0
 8001906:	2b00      	cmp	r3, #0
 8001908:	d001      	beq.n	800190e <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800190a:	f000 fc0d 	bl	8002128 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 800190e:	230b      	movs	r3, #11
 8001910:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001912:	2301      	movs	r3, #1
 8001914:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 8001916:	2303      	movs	r3, #3
 8001918:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800191a:	463b      	mov	r3, r7
 800191c:	4619      	mov	r1, r3
 800191e:	4806      	ldr	r0, [pc, #24]	@ (8001938 <MX_ADC1_Init+0x98>)
 8001920:	f001 fc5a 	bl	80031d8 <HAL_ADC_ConfigChannel>
 8001924:	4603      	mov	r3, r0
 8001926:	2b00      	cmp	r3, #0
 8001928:	d001      	beq.n	800192e <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800192a:	f000 fbfd 	bl	8002128 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800192e:	bf00      	nop
 8001930:	3710      	adds	r7, #16
 8001932:	46bd      	mov	sp, r7
 8001934:	bd80      	pop	{r7, pc}
 8001936:	bf00      	nop
 8001938:	200001f0 	.word	0x200001f0
 800193c:	40012000 	.word	0x40012000
 8001940:	0f000001 	.word	0x0f000001

08001944 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b086      	sub	sp, #24
 8001948:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800194a:	f107 0308 	add.w	r3, r7, #8
 800194e:	2200      	movs	r2, #0
 8001950:	601a      	str	r2, [r3, #0]
 8001952:	605a      	str	r2, [r3, #4]
 8001954:	609a      	str	r2, [r3, #8]
 8001956:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001958:	463b      	mov	r3, r7
 800195a:	2200      	movs	r2, #0
 800195c:	601a      	str	r2, [r3, #0]
 800195e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001960:	4b1e      	ldr	r3, [pc, #120]	@ (80019dc <MX_TIM1_Init+0x98>)
 8001962:	4a1f      	ldr	r2, [pc, #124]	@ (80019e0 <MX_TIM1_Init+0x9c>)
 8001964:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = TIM1_PERIOD;
 8001966:	4b1d      	ldr	r3, [pc, #116]	@ (80019dc <MX_TIM1_Init+0x98>)
 8001968:	2200      	movs	r2, #0
 800196a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800196c:	4b1b      	ldr	r3, [pc, #108]	@ (80019dc <MX_TIM1_Init+0x98>)
 800196e:	2200      	movs	r2, #0
 8001970:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = TIM1_PRESCALER;
 8001972:	4b1a      	ldr	r3, [pc, #104]	@ (80019dc <MX_TIM1_Init+0x98>)
 8001974:	2243      	movs	r2, #67	@ 0x43
 8001976:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001978:	4b18      	ldr	r3, [pc, #96]	@ (80019dc <MX_TIM1_Init+0x98>)
 800197a:	2200      	movs	r2, #0
 800197c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800197e:	4b17      	ldr	r3, [pc, #92]	@ (80019dc <MX_TIM1_Init+0x98>)
 8001980:	2200      	movs	r2, #0
 8001982:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001984:	4b15      	ldr	r3, [pc, #84]	@ (80019dc <MX_TIM1_Init+0x98>)
 8001986:	2200      	movs	r2, #0
 8001988:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800198a:	4814      	ldr	r0, [pc, #80]	@ (80019dc <MX_TIM1_Init+0x98>)
 800198c:	f003 fa18 	bl	8004dc0 <HAL_TIM_Base_Init>
 8001990:	4603      	mov	r3, r0
 8001992:	2b00      	cmp	r3, #0
 8001994:	d001      	beq.n	800199a <MX_TIM1_Init+0x56>
  {
    Error_Handler();
 8001996:	f000 fbc7 	bl	8002128 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800199a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800199e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80019a0:	f107 0308 	add.w	r3, r7, #8
 80019a4:	4619      	mov	r1, r3
 80019a6:	480d      	ldr	r0, [pc, #52]	@ (80019dc <MX_TIM1_Init+0x98>)
 80019a8:	f003 fbdb 	bl	8005162 <HAL_TIM_ConfigClockSource>
 80019ac:	4603      	mov	r3, r0
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d001      	beq.n	80019b6 <MX_TIM1_Init+0x72>
  {
    Error_Handler();
 80019b2:	f000 fbb9 	bl	8002128 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019b6:	2300      	movs	r3, #0
 80019b8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019ba:	2300      	movs	r3, #0
 80019bc:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80019be:	463b      	mov	r3, r7
 80019c0:	4619      	mov	r1, r3
 80019c2:	4806      	ldr	r0, [pc, #24]	@ (80019dc <MX_TIM1_Init+0x98>)
 80019c4:	f003 fde2 	bl	800558c <HAL_TIMEx_MasterConfigSynchronization>
 80019c8:	4603      	mov	r3, r0
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d001      	beq.n	80019d2 <MX_TIM1_Init+0x8e>
  {
    Error_Handler();
 80019ce:	f000 fbab 	bl	8002128 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80019d2:	bf00      	nop
 80019d4:	3718      	adds	r7, #24
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bd80      	pop	{r7, pc}
 80019da:	bf00      	nop
 80019dc:	20000298 	.word	0x20000298
 80019e0:	40010000 	.word	0x40010000

080019e4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b086      	sub	sp, #24
 80019e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80019ea:	f107 0308 	add.w	r3, r7, #8
 80019ee:	2200      	movs	r2, #0
 80019f0:	601a      	str	r2, [r3, #0]
 80019f2:	605a      	str	r2, [r3, #4]
 80019f4:	609a      	str	r2, [r3, #8]
 80019f6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019f8:	463b      	mov	r3, r7
 80019fa:	2200      	movs	r2, #0
 80019fc:	601a      	str	r2, [r3, #0]
 80019fe:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001a00:	4b1d      	ldr	r3, [pc, #116]	@ (8001a78 <MX_TIM2_Init+0x94>)
 8001a02:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001a06:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = TIM2_PRESCALER;
 8001a08:	4b1b      	ldr	r3, [pc, #108]	@ (8001a78 <MX_TIM2_Init+0x94>)
 8001a0a:	2243      	movs	r2, #67	@ 0x43
 8001a0c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a0e:	4b1a      	ldr	r3, [pc, #104]	@ (8001a78 <MX_TIM2_Init+0x94>)
 8001a10:	2200      	movs	r2, #0
 8001a12:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = TIM2_PERIOD;
 8001a14:	4b18      	ldr	r3, [pc, #96]	@ (8001a78 <MX_TIM2_Init+0x94>)
 8001a16:	f246 12a7 	movw	r2, #24999	@ 0x61a7
 8001a1a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a1c:	4b16      	ldr	r3, [pc, #88]	@ (8001a78 <MX_TIM2_Init+0x94>)
 8001a1e:	2200      	movs	r2, #0
 8001a20:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a22:	4b15      	ldr	r3, [pc, #84]	@ (8001a78 <MX_TIM2_Init+0x94>)
 8001a24:	2200      	movs	r2, #0
 8001a26:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001a28:	4813      	ldr	r0, [pc, #76]	@ (8001a78 <MX_TIM2_Init+0x94>)
 8001a2a:	f003 f9c9 	bl	8004dc0 <HAL_TIM_Base_Init>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d001      	beq.n	8001a38 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001a34:	f000 fb78 	bl	8002128 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a38:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001a3c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001a3e:	f107 0308 	add.w	r3, r7, #8
 8001a42:	4619      	mov	r1, r3
 8001a44:	480c      	ldr	r0, [pc, #48]	@ (8001a78 <MX_TIM2_Init+0x94>)
 8001a46:	f003 fb8c 	bl	8005162 <HAL_TIM_ConfigClockSource>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d001      	beq.n	8001a54 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001a50:	f000 fb6a 	bl	8002128 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a54:	2300      	movs	r3, #0
 8001a56:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a58:	2300      	movs	r3, #0
 8001a5a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001a5c:	463b      	mov	r3, r7
 8001a5e:	4619      	mov	r1, r3
 8001a60:	4805      	ldr	r0, [pc, #20]	@ (8001a78 <MX_TIM2_Init+0x94>)
 8001a62:	f003 fd93 	bl	800558c <HAL_TIMEx_MasterConfigSynchronization>
 8001a66:	4603      	mov	r3, r0
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d001      	beq.n	8001a70 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001a6c:	f000 fb5c 	bl	8002128 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001a70:	bf00      	nop
 8001a72:	3718      	adds	r7, #24
 8001a74:	46bd      	mov	sp, r7
 8001a76:	bd80      	pop	{r7, pc}
 8001a78:	200002e0 	.word	0x200002e0

08001a7c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b086      	sub	sp, #24
 8001a80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a82:	f107 0308 	add.w	r3, r7, #8
 8001a86:	2200      	movs	r2, #0
 8001a88:	601a      	str	r2, [r3, #0]
 8001a8a:	605a      	str	r2, [r3, #4]
 8001a8c:	609a      	str	r2, [r3, #8]
 8001a8e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a90:	463b      	mov	r3, r7
 8001a92:	2200      	movs	r2, #0
 8001a94:	601a      	str	r2, [r3, #0]
 8001a96:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001a98:	4b1c      	ldr	r3, [pc, #112]	@ (8001b0c <MX_TIM3_Init+0x90>)
 8001a9a:	4a1d      	ldr	r2, [pc, #116]	@ (8001b10 <MX_TIM3_Init+0x94>)
 8001a9c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = TIM3_PRESCALER;
 8001a9e:	4b1b      	ldr	r3, [pc, #108]	@ (8001b0c <MX_TIM3_Init+0x90>)
 8001aa0:	2243      	movs	r2, #67	@ 0x43
 8001aa2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001aa4:	4b19      	ldr	r3, [pc, #100]	@ (8001b0c <MX_TIM3_Init+0x90>)
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = TIM3_PERIOD;
 8001aaa:	4b18      	ldr	r3, [pc, #96]	@ (8001b0c <MX_TIM3_Init+0x90>)
 8001aac:	2263      	movs	r2, #99	@ 0x63
 8001aae:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ab0:	4b16      	ldr	r3, [pc, #88]	@ (8001b0c <MX_TIM3_Init+0x90>)
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ab6:	4b15      	ldr	r3, [pc, #84]	@ (8001b0c <MX_TIM3_Init+0x90>)
 8001ab8:	2200      	movs	r2, #0
 8001aba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001abc:	4813      	ldr	r0, [pc, #76]	@ (8001b0c <MX_TIM3_Init+0x90>)
 8001abe:	f003 f97f 	bl	8004dc0 <HAL_TIM_Base_Init>
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d001      	beq.n	8001acc <MX_TIM3_Init+0x50>
  {
    Error_Handler();
 8001ac8:	f000 fb2e 	bl	8002128 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001acc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001ad0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001ad2:	f107 0308 	add.w	r3, r7, #8
 8001ad6:	4619      	mov	r1, r3
 8001ad8:	480c      	ldr	r0, [pc, #48]	@ (8001b0c <MX_TIM3_Init+0x90>)
 8001ada:	f003 fb42 	bl	8005162 <HAL_TIM_ConfigClockSource>
 8001ade:	4603      	mov	r3, r0
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d001      	beq.n	8001ae8 <MX_TIM3_Init+0x6c>
  {
    Error_Handler();
 8001ae4:	f000 fb20 	bl	8002128 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001aec:	2300      	movs	r3, #0
 8001aee:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001af0:	463b      	mov	r3, r7
 8001af2:	4619      	mov	r1, r3
 8001af4:	4805      	ldr	r0, [pc, #20]	@ (8001b0c <MX_TIM3_Init+0x90>)
 8001af6:	f003 fd49 	bl	800558c <HAL_TIMEx_MasterConfigSynchronization>
 8001afa:	4603      	mov	r3, r0
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d001      	beq.n	8001b04 <MX_TIM3_Init+0x88>
  {
    Error_Handler();
 8001b00:	f000 fb12 	bl	8002128 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001b04:	bf00      	nop
 8001b06:	3718      	adds	r7, #24
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	bd80      	pop	{r7, pc}
 8001b0c:	20000328 	.word	0x20000328
 8001b10:	40000400 	.word	0x40000400

08001b14 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001b18:	4b11      	ldr	r3, [pc, #68]	@ (8001b60 <MX_USART2_UART_Init+0x4c>)
 8001b1a:	4a12      	ldr	r2, [pc, #72]	@ (8001b64 <MX_USART2_UART_Init+0x50>)
 8001b1c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001b1e:	4b10      	ldr	r3, [pc, #64]	@ (8001b60 <MX_USART2_UART_Init+0x4c>)
 8001b20:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001b24:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001b26:	4b0e      	ldr	r3, [pc, #56]	@ (8001b60 <MX_USART2_UART_Init+0x4c>)
 8001b28:	2200      	movs	r2, #0
 8001b2a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001b2c:	4b0c      	ldr	r3, [pc, #48]	@ (8001b60 <MX_USART2_UART_Init+0x4c>)
 8001b2e:	2200      	movs	r2, #0
 8001b30:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001b32:	4b0b      	ldr	r3, [pc, #44]	@ (8001b60 <MX_USART2_UART_Init+0x4c>)
 8001b34:	2200      	movs	r2, #0
 8001b36:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001b38:	4b09      	ldr	r3, [pc, #36]	@ (8001b60 <MX_USART2_UART_Init+0x4c>)
 8001b3a:	220c      	movs	r2, #12
 8001b3c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b3e:	4b08      	ldr	r3, [pc, #32]	@ (8001b60 <MX_USART2_UART_Init+0x4c>)
 8001b40:	2200      	movs	r2, #0
 8001b42:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b44:	4b06      	ldr	r3, [pc, #24]	@ (8001b60 <MX_USART2_UART_Init+0x4c>)
 8001b46:	2200      	movs	r2, #0
 8001b48:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001b4a:	4805      	ldr	r0, [pc, #20]	@ (8001b60 <MX_USART2_UART_Init+0x4c>)
 8001b4c:	f003 fda0 	bl	8005690 <HAL_UART_Init>
 8001b50:	4603      	mov	r3, r0
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d001      	beq.n	8001b5a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001b56:	f000 fae7 	bl	8002128 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001b5a:	bf00      	nop
 8001b5c:	bd80      	pop	{r7, pc}
 8001b5e:	bf00      	nop
 8001b60:	20000370 	.word	0x20000370
 8001b64:	40004400 	.word	0x40004400

08001b68 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b082      	sub	sp, #8
 8001b6c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001b6e:	2300      	movs	r3, #0
 8001b70:	607b      	str	r3, [r7, #4]
 8001b72:	4b0c      	ldr	r3, [pc, #48]	@ (8001ba4 <MX_DMA_Init+0x3c>)
 8001b74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b76:	4a0b      	ldr	r2, [pc, #44]	@ (8001ba4 <MX_DMA_Init+0x3c>)
 8001b78:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001b7c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b7e:	4b09      	ldr	r3, [pc, #36]	@ (8001ba4 <MX_DMA_Init+0x3c>)
 8001b80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b82:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001b86:	607b      	str	r3, [r7, #4]
 8001b88:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	2100      	movs	r1, #0
 8001b8e:	2038      	movs	r0, #56	@ 0x38
 8001b90:	f001 fea7 	bl	80038e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001b94:	2038      	movs	r0, #56	@ 0x38
 8001b96:	f001 fec0 	bl	800391a <HAL_NVIC_EnableIRQ>

}
 8001b9a:	bf00      	nop
 8001b9c:	3708      	adds	r7, #8
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bd80      	pop	{r7, pc}
 8001ba2:	bf00      	nop
 8001ba4:	40023800 	.word	0x40023800

08001ba8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b08a      	sub	sp, #40	@ 0x28
 8001bac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bae:	f107 0314 	add.w	r3, r7, #20
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	601a      	str	r2, [r3, #0]
 8001bb6:	605a      	str	r2, [r3, #4]
 8001bb8:	609a      	str	r2, [r3, #8]
 8001bba:	60da      	str	r2, [r3, #12]
 8001bbc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	613b      	str	r3, [r7, #16]
 8001bc2:	4b2d      	ldr	r3, [pc, #180]	@ (8001c78 <MX_GPIO_Init+0xd0>)
 8001bc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bc6:	4a2c      	ldr	r2, [pc, #176]	@ (8001c78 <MX_GPIO_Init+0xd0>)
 8001bc8:	f043 0304 	orr.w	r3, r3, #4
 8001bcc:	6313      	str	r3, [r2, #48]	@ 0x30
 8001bce:	4b2a      	ldr	r3, [pc, #168]	@ (8001c78 <MX_GPIO_Init+0xd0>)
 8001bd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bd2:	f003 0304 	and.w	r3, r3, #4
 8001bd6:	613b      	str	r3, [r7, #16]
 8001bd8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001bda:	2300      	movs	r3, #0
 8001bdc:	60fb      	str	r3, [r7, #12]
 8001bde:	4b26      	ldr	r3, [pc, #152]	@ (8001c78 <MX_GPIO_Init+0xd0>)
 8001be0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001be2:	4a25      	ldr	r2, [pc, #148]	@ (8001c78 <MX_GPIO_Init+0xd0>)
 8001be4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001be8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001bea:	4b23      	ldr	r3, [pc, #140]	@ (8001c78 <MX_GPIO_Init+0xd0>)
 8001bec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001bf2:	60fb      	str	r3, [r7, #12]
 8001bf4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	60bb      	str	r3, [r7, #8]
 8001bfa:	4b1f      	ldr	r3, [pc, #124]	@ (8001c78 <MX_GPIO_Init+0xd0>)
 8001bfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bfe:	4a1e      	ldr	r2, [pc, #120]	@ (8001c78 <MX_GPIO_Init+0xd0>)
 8001c00:	f043 0301 	orr.w	r3, r3, #1
 8001c04:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c06:	4b1c      	ldr	r3, [pc, #112]	@ (8001c78 <MX_GPIO_Init+0xd0>)
 8001c08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c0a:	f003 0301 	and.w	r3, r3, #1
 8001c0e:	60bb      	str	r3, [r7, #8]
 8001c10:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c12:	2300      	movs	r3, #0
 8001c14:	607b      	str	r3, [r7, #4]
 8001c16:	4b18      	ldr	r3, [pc, #96]	@ (8001c78 <MX_GPIO_Init+0xd0>)
 8001c18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c1a:	4a17      	ldr	r2, [pc, #92]	@ (8001c78 <MX_GPIO_Init+0xd0>)
 8001c1c:	f043 0302 	orr.w	r3, r3, #2
 8001c20:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c22:	4b15      	ldr	r3, [pc, #84]	@ (8001c78 <MX_GPIO_Init+0xd0>)
 8001c24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c26:	f003 0302 	and.w	r3, r3, #2
 8001c2a:	607b      	str	r3, [r7, #4]
 8001c2c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001c2e:	2200      	movs	r2, #0
 8001c30:	2120      	movs	r1, #32
 8001c32:	4812      	ldr	r0, [pc, #72]	@ (8001c7c <MX_GPIO_Init+0xd4>)
 8001c34:	f002 fc12 	bl	800445c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001c38:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001c3c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001c3e:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001c42:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c44:	2300      	movs	r3, #0
 8001c46:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001c48:	f107 0314 	add.w	r3, r7, #20
 8001c4c:	4619      	mov	r1, r3
 8001c4e:	480c      	ldr	r0, [pc, #48]	@ (8001c80 <MX_GPIO_Init+0xd8>)
 8001c50:	f002 fa80 	bl	8004154 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001c54:	2320      	movs	r3, #32
 8001c56:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c58:	2301      	movs	r3, #1
 8001c5a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c60:	2300      	movs	r3, #0
 8001c62:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001c64:	f107 0314 	add.w	r3, r7, #20
 8001c68:	4619      	mov	r1, r3
 8001c6a:	4804      	ldr	r0, [pc, #16]	@ (8001c7c <MX_GPIO_Init+0xd4>)
 8001c6c:	f002 fa72 	bl	8004154 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001c70:	bf00      	nop
 8001c72:	3728      	adds	r7, #40	@ 0x28
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bd80      	pop	{r7, pc}
 8001c78:	40023800 	.word	0x40023800
 8001c7c:	40020000 	.word	0x40020000
 8001c80:	40020800 	.word	0x40020800

08001c84 <sendDataRamkaDynamT>:

/* USER CODE BEGIN 4 */
void sendDataRamkaDynamT(uint32_t *tablicaPomiarowDynamicznych, int czasPomiaruDynam)
{
 8001c84:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001c88:	b08d      	sub	sp, #52	@ 0x34
 8001c8a:	af00      	add	r7, sp, #0
 8001c8c:	6078      	str	r0, [r7, #4]
 8001c8e:	6039      	str	r1, [r7, #0]
 8001c90:	466b      	mov	r3, sp
 8001c92:	461e      	mov	r6, r3
    const int maxBufSize = 3*MAX_POMIARY;  // Większy bufor, aby zmieścić całą ramkę
 8001c94:	f643 2398 	movw	r3, #15000	@ 0x3a98
 8001c98:	61fb      	str	r3, [r7, #28]
    char frame[maxBufSize];      // Bufor dla całej ramki
 8001c9a:	69fb      	ldr	r3, [r7, #28]
 8001c9c:	3b01      	subs	r3, #1
 8001c9e:	61bb      	str	r3, [r7, #24]
 8001ca0:	69fb      	ldr	r3, [r7, #28]
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	4698      	mov	r8, r3
 8001ca6:	4691      	mov	r9, r2
 8001ca8:	f04f 0200 	mov.w	r2, #0
 8001cac:	f04f 0300 	mov.w	r3, #0
 8001cb0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001cb4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001cb8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001cbc:	69fb      	ldr	r3, [r7, #28]
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	461c      	mov	r4, r3
 8001cc2:	4615      	mov	r5, r2
 8001cc4:	f04f 0200 	mov.w	r2, #0
 8001cc8:	f04f 0300 	mov.w	r3, #0
 8001ccc:	00eb      	lsls	r3, r5, #3
 8001cce:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001cd2:	00e2      	lsls	r2, r4, #3
 8001cd4:	69fb      	ldr	r3, [r7, #28]
 8001cd6:	3307      	adds	r3, #7
 8001cd8:	08db      	lsrs	r3, r3, #3
 8001cda:	00db      	lsls	r3, r3, #3
 8001cdc:	ebad 0d03 	sub.w	sp, sp, r3
 8001ce0:	466b      	mov	r3, sp
 8001ce2:	3300      	adds	r3, #0
 8001ce4:	617b      	str	r3, [r7, #20]
    int czasPomNa2 = czasPomiaruDynam/2;
 8001ce6:	683b      	ldr	r3, [r7, #0]
 8001ce8:	0fda      	lsrs	r2, r3, #31
 8001cea:	4413      	add	r3, r2
 8001cec:	105b      	asrs	r3, r3, #1
 8001cee:	613b      	str	r3, [r7, #16]
    int index = 0;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	62fb      	str	r3, [r7, #44]	@ 0x2c

    // Dodanie nagłówka "P D [C5 lub C6]"
    index += snprintf(frame + index, sizeof(frame) - index, "P D %s ", idCzujnika);
 8001cf4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001cf6:	697a      	ldr	r2, [r7, #20]
 8001cf8:	18d0      	adds	r0, r2, r3
 8001cfa:	69fa      	ldr	r2, [r7, #28]
 8001cfc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001cfe:	1ad1      	subs	r1, r2, r3
 8001d00:	4b4b      	ldr	r3, [pc, #300]	@ (8001e30 <sendDataRamkaDynamT+0x1ac>)
 8001d02:	4a4c      	ldr	r2, [pc, #304]	@ (8001e34 <sendDataRamkaDynamT+0x1b0>)
 8001d04:	f005 fd32 	bl	800776c <sniprintf>
 8001d08:	4602      	mov	r2, r0
 8001d0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001d0c:	4413      	add	r3, r2
 8001d0e:	62fb      	str	r3, [r7, #44]	@ 0x2c

    // Dodanie informacji o rodzaju pomiaru: "T [czasPomiaruDynam]"
    index += snprintf(frame + index, sizeof(frame) - index, "T %d ", czasPomiaruDynam);
 8001d10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001d12:	697a      	ldr	r2, [r7, #20]
 8001d14:	18d0      	adds	r0, r2, r3
 8001d16:	69fa      	ldr	r2, [r7, #28]
 8001d18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001d1a:	1ad1      	subs	r1, r2, r3
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	4a46      	ldr	r2, [pc, #280]	@ (8001e38 <sendDataRamkaDynamT+0x1b4>)
 8001d20:	f005 fd24 	bl	800776c <sniprintf>
 8001d24:	4602      	mov	r2, r0
 8001d26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001d28:	4413      	add	r3, r2
 8001d2a:	62fb      	str	r3, [r7, #44]	@ 0x2c


    int wyliczonyIdxHistorii = indeksHistorii;
 8001d2c:	4b43      	ldr	r3, [pc, #268]	@ (8001e3c <sendDataRamkaDynamT+0x1b8>)
 8001d2e:	881b      	ldrh	r3, [r3, #0]
 8001d30:	62bb      	str	r3, [r7, #40]	@ 0x28
    // Dodanie historii pomiaru
    for ( int licznik = 0; licznik<ROZM_HISTORIA; licznik++)
 8001d32:	2300      	movs	r3, #0
 8001d34:	627b      	str	r3, [r7, #36]	@ 0x24
 8001d36:	e020      	b.n	8001d7a <sendDataRamkaDynamT+0xf6>
    {
    	index += snprintf(frame + index, sizeof(frame) - index, "%lu ", tablicaHistoriiPrzedPomiarem[wyliczonyIdxHistorii]);
 8001d38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001d3a:	697a      	ldr	r2, [r7, #20]
 8001d3c:	18d0      	adds	r0, r2, r3
 8001d3e:	69fa      	ldr	r2, [r7, #28]
 8001d40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001d42:	1ad1      	subs	r1, r2, r3
 8001d44:	4a3e      	ldr	r2, [pc, #248]	@ (8001e40 <sendDataRamkaDynamT+0x1bc>)
 8001d46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d4c:	4a3d      	ldr	r2, [pc, #244]	@ (8001e44 <sendDataRamkaDynamT+0x1c0>)
 8001d4e:	f005 fd0d 	bl	800776c <sniprintf>
 8001d52:	4602      	mov	r2, r0
 8001d54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001d56:	4413      	add	r3, r2
 8001d58:	62fb      	str	r3, [r7, #44]	@ 0x2c
    	wyliczonyIdxHistorii = (wyliczonyIdxHistorii + 1) % ROZM_HISTORIA;
 8001d5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d5c:	3301      	adds	r3, #1
 8001d5e:	4a3a      	ldr	r2, [pc, #232]	@ (8001e48 <sendDataRamkaDynamT+0x1c4>)
 8001d60:	fb82 1203 	smull	r1, r2, r2, r3
 8001d64:	1151      	asrs	r1, r2, #5
 8001d66:	17da      	asrs	r2, r3, #31
 8001d68:	1a8a      	subs	r2, r1, r2
 8001d6a:	2164      	movs	r1, #100	@ 0x64
 8001d6c:	fb01 f202 	mul.w	r2, r1, r2
 8001d70:	1a9b      	subs	r3, r3, r2
 8001d72:	62bb      	str	r3, [r7, #40]	@ 0x28
    for ( int licznik = 0; licznik<ROZM_HISTORIA; licznik++)
 8001d74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d76:	3301      	adds	r3, #1
 8001d78:	627b      	str	r3, [r7, #36]	@ 0x24
 8001d7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d7c:	2b63      	cmp	r3, #99	@ 0x63
 8001d7e:	dddb      	ble.n	8001d38 <sendDataRamkaDynamT+0xb4>
    }
    // Dodanie danych pomiarowych

    for (int i = 0; i < czasPomNa2; i++) {
 8001d80:	2300      	movs	r3, #0
 8001d82:	623b      	str	r3, [r7, #32]
 8001d84:	e01b      	b.n	8001dbe <sendDataRamkaDynamT+0x13a>
        //int pozycja = (licznikPoczatku + i) % liczbaPomiarow;
    	if(tablicaPomiarowDynamicznych[i] > 0)
 8001d86:	6a3b      	ldr	r3, [r7, #32]
 8001d88:	009b      	lsls	r3, r3, #2
 8001d8a:	687a      	ldr	r2, [r7, #4]
 8001d8c:	4413      	add	r3, r2
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d011      	beq.n	8001db8 <sendDataRamkaDynamT+0x134>
    	{
        index += snprintf(frame + index, sizeof(frame) - index, "%lu ", tablicaPomiarowDynamicznych[i] );
 8001d94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001d96:	697a      	ldr	r2, [r7, #20]
 8001d98:	18d0      	adds	r0, r2, r3
 8001d9a:	69fa      	ldr	r2, [r7, #28]
 8001d9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001d9e:	1ad1      	subs	r1, r2, r3
 8001da0:	6a3b      	ldr	r3, [r7, #32]
 8001da2:	009b      	lsls	r3, r3, #2
 8001da4:	687a      	ldr	r2, [r7, #4]
 8001da6:	4413      	add	r3, r2
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	4a26      	ldr	r2, [pc, #152]	@ (8001e44 <sendDataRamkaDynamT+0x1c0>)
 8001dac:	f005 fcde 	bl	800776c <sniprintf>
 8001db0:	4602      	mov	r2, r0
 8001db2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001db4:	4413      	add	r3, r2
 8001db6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    for (int i = 0; i < czasPomNa2; i++) {
 8001db8:	6a3b      	ldr	r3, [r7, #32]
 8001dba:	3301      	adds	r3, #1
 8001dbc:	623b      	str	r3, [r7, #32]
 8001dbe:	6a3a      	ldr	r2, [r7, #32]
 8001dc0:	693b      	ldr	r3, [r7, #16]
 8001dc2:	429a      	cmp	r2, r3
 8001dc4:	dbdf      	blt.n	8001d86 <sendDataRamkaDynamT+0x102>
    	}
    }

    // Usuwanie ostatniej spacji, jeśli istnieje
    if (index > 0 && frame[index - 1] == ' ') {
 8001dc6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	dd08      	ble.n	8001dde <sendDataRamkaDynamT+0x15a>
 8001dcc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001dce:	3b01      	subs	r3, #1
 8001dd0:	697a      	ldr	r2, [r7, #20]
 8001dd2:	5cd3      	ldrb	r3, [r2, r3]
 8001dd4:	2b20      	cmp	r3, #32
 8001dd6:	d102      	bne.n	8001dde <sendDataRamkaDynamT+0x15a>
        index--; // Cofnięcie indeksu, aby pominąć końcową spację
 8001dd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001dda:	3b01      	subs	r3, #1
 8001ddc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }

    // Obliczenie CRC dla danych w ramce (bez końcowej spacji)
    uint16_t crc = crc16_ccitt_false((char *)frame, index);
 8001dde:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8001de0:	6978      	ldr	r0, [r7, #20]
 8001de2:	f7ff f929 	bl	8001038 <crc16_ccitt_false>
 8001de6:	4603      	mov	r3, r0
 8001de8:	81fb      	strh	r3, [r7, #14]

    // Dodanie CRC na końcu ramki
    index += snprintf(frame + index, sizeof(frame) - index, " %u\r\n", crc);
 8001dea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001dec:	697a      	ldr	r2, [r7, #20]
 8001dee:	18d0      	adds	r0, r2, r3
 8001df0:	69fa      	ldr	r2, [r7, #28]
 8001df2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001df4:	1ad1      	subs	r1, r2, r3
 8001df6:	89fb      	ldrh	r3, [r7, #14]
 8001df8:	4a14      	ldr	r2, [pc, #80]	@ (8001e4c <sendDataRamkaDynamT+0x1c8>)
 8001dfa:	f005 fcb7 	bl	800776c <sniprintf>
 8001dfe:	4602      	mov	r2, r0
 8001e00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001e02:	4413      	add	r3, r2
 8001e04:	62fb      	str	r3, [r7, #44]	@ 0x2c

    // Wysyłanie całej ramki jednorazowo
    HAL_UART_Transmit(&huart2, (uint8_t *)frame, index, HAL_MAX_DELAY);
 8001e06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001e08:	b29a      	uxth	r2, r3
 8001e0a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001e0e:	6979      	ldr	r1, [r7, #20]
 8001e10:	480f      	ldr	r0, [pc, #60]	@ (8001e50 <sendDataRamkaDynamT+0x1cc>)
 8001e12:	f003 fc8d 	bl	8005730 <HAL_UART_Transmit>

    // Wyczyszczenie tablicy po wysłaniu danych
//    licznikPoczatku = 0;  // Reset wskaźnika na początek
//    liczbaPomiarow = 0;   // Reset liczby pomiarów
    memset(tablicaPomiarowDynamicznych, 0, sizeof(int) * MAX_POMIARY);  // Zerowanie zawartości tablicy
 8001e16:	f644 6220 	movw	r2, #20000	@ 0x4e20
 8001e1a:	2100      	movs	r1, #0
 8001e1c:	6878      	ldr	r0, [r7, #4]
 8001e1e:	f005 fdfd 	bl	8007a1c <memset>
 8001e22:	46b5      	mov	sp, r6
}
 8001e24:	bf00      	nop
 8001e26:	3734      	adds	r7, #52	@ 0x34
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001e2e:	bf00      	nop
 8001e30:	2000046c 	.word	0x2000046c
 8001e34:	0800b8dc 	.word	0x0800b8dc
 8001e38:	0800b8e4 	.word	0x0800b8e4
 8001e3c:	20005430 	.word	0x20005430
 8001e40:	200052a0 	.word	0x200052a0
 8001e44:	0800b8ec 	.word	0x0800b8ec
 8001e48:	51eb851f 	.word	0x51eb851f
 8001e4c:	0800b8f4 	.word	0x0800b8f4
 8001e50:	20000370 	.word	0x20000370

08001e54 <parse_crc_from_text>:



uint16_t parse_crc_from_text(const char *crc_text) {
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b084      	sub	sp, #16
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
    uint16_t crc_value = 0;
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	81fb      	strh	r3, [r7, #14]
    sscanf(crc_text, "%4hx", &crc_value);  // Parsowanie jako 16-bitowy hex
 8001e60:	f107 030e 	add.w	r3, r7, #14
 8001e64:	461a      	mov	r2, r3
 8001e66:	4904      	ldr	r1, [pc, #16]	@ (8001e78 <parse_crc_from_text+0x24>)
 8001e68:	6878      	ldr	r0, [r7, #4]
 8001e6a:	f005 fcd3 	bl	8007814 <siscanf>
    return crc_value;
 8001e6e:	89fb      	ldrh	r3, [r7, #14]
}
 8001e70:	4618      	mov	r0, r3
 8001e72:	3710      	adds	r7, #16
 8001e74:	46bd      	mov	sp, r7
 8001e76:	bd80      	pop	{r7, pc}
 8001e78:	0800b8fc 	.word	0x0800b8fc

08001e7c <receive_data_frame>:

// Funkcja odbierająca ramkę danych
void receive_data_frame(uint16_t length) {
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b086      	sub	sp, #24
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	4603      	mov	r3, r0
 8001e84:	80fb      	strh	r3, [r7, #6]
    // Sprawdzamy, czy ramka jest wystarczająco długa oraz czy zaczyna się od 'U'
    if (length < 9 || buffer[0] != 'U') {  // Zakładamy minimalną długość: U + dane + 4 znaki CRC + \r\n
 8001e86:	88fb      	ldrh	r3, [r7, #6]
 8001e88:	2b08      	cmp	r3, #8
 8001e8a:	d903      	bls.n	8001e94 <receive_data_frame+0x18>
 8001e8c:	4b1a      	ldr	r3, [pc, #104]	@ (8001ef8 <receive_data_frame+0x7c>)
 8001e8e:	781b      	ldrb	r3, [r3, #0]
 8001e90:	2b55      	cmp	r3, #85	@ 0x55
 8001e92:	d003      	beq.n	8001e9c <receive_data_frame+0x20>
        printf("Błąd: Niepoprawna ramka lub brak nagłówka 'U'\n");
 8001e94:	4819      	ldr	r0, [pc, #100]	@ (8001efc <receive_data_frame+0x80>)
 8001e96:	f005 fc61 	bl	800775c <puts>
 8001e9a:	e02a      	b.n	8001ef2 <receive_data_frame+0x76>
        return;
    }

    // Oddzielamy dane od CRC (ostatnie 4 znaki przed '\r\n' to tekstowe CRC)
    char crc_text[5] = {0};
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	60fb      	str	r3, [r7, #12]
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	743b      	strb	r3, [r7, #16]
    memcpy(crc_text, &buffer[length - 6], 4);  // Kopiujemy 4 znaki tekstowego CRC (np. "a9f9")
 8001ea4:	88fb      	ldrh	r3, [r7, #6]
 8001ea6:	3b06      	subs	r3, #6
 8001ea8:	4a13      	ldr	r2, [pc, #76]	@ (8001ef8 <receive_data_frame+0x7c>)
 8001eaa:	4413      	add	r3, r2
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	60fb      	str	r3, [r7, #12]

    // Parsujemy tekstowe CRC na wartość liczbową
    uint16_t crc_received = parse_crc_from_text(crc_text);
 8001eb0:	f107 030c 	add.w	r3, r7, #12
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	f7ff ffcd 	bl	8001e54 <parse_crc_from_text>
 8001eba:	4603      	mov	r3, r0
 8001ebc:	82fb      	strh	r3, [r7, #22]
    //printf("Mam nowe crc_received: %d\r\n", crc_received);

    // Obliczamy CRC dla odebranych danych (bez 'U' i bez CRC)
    uint16_t crc_calculated = crc16_ccitt_false((const char*)buffer, length - 6);
 8001ebe:	88fb      	ldrh	r3, [r7, #6]
 8001ec0:	3b06      	subs	r3, #6
 8001ec2:	4619      	mov	r1, r3
 8001ec4:	480c      	ldr	r0, [pc, #48]	@ (8001ef8 <receive_data_frame+0x7c>)
 8001ec6:	f7ff f8b7 	bl	8001038 <crc16_ccitt_false>
 8001eca:	4603      	mov	r3, r0
 8001ecc:	82bb      	strh	r3, [r7, #20]
    //printf("A crc calculated t o : %d\r\n", crc_calculated);

    // Sprawdzamy poprawność CRC
    if (crc_calculated == crc_received) {
 8001ece:	8aba      	ldrh	r2, [r7, #20]
 8001ed0:	8afb      	ldrh	r3, [r7, #22]
 8001ed2:	429a      	cmp	r2, r3
 8001ed4:	d107      	bne.n	8001ee6 <receive_data_frame+0x6a>
        // Przekazujemy dane bez CRC i nagłówka 'U' do przetworzenia
        process_received_data(buffer + 2, length - 7);  // -7 to U + CRC (4 znaki) + \r\n
 8001ed6:	4a0a      	ldr	r2, [pc, #40]	@ (8001f00 <receive_data_frame+0x84>)
 8001ed8:	88fb      	ldrh	r3, [r7, #6]
 8001eda:	3b07      	subs	r3, #7
 8001edc:	4619      	mov	r1, r3
 8001ede:	4610      	mov	r0, r2
 8001ee0:	f000 f812 	bl	8001f08 <process_received_data>
 8001ee4:	e005      	b.n	8001ef2 <receive_data_frame+0x76>
    } else {
        printf("Błąd CRC! Odebrano: %u, Obliczono: %u\n", crc_received, crc_calculated);
 8001ee6:	8afb      	ldrh	r3, [r7, #22]
 8001ee8:	8aba      	ldrh	r2, [r7, #20]
 8001eea:	4619      	mov	r1, r3
 8001eec:	4805      	ldr	r0, [pc, #20]	@ (8001f04 <receive_data_frame+0x88>)
 8001eee:	f005 fbcd 	bl	800768c <iprintf>
    }
}
 8001ef2:	3718      	adds	r7, #24
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	bd80      	pop	{r7, pc}
 8001ef8:	20000438 	.word	0x20000438
 8001efc:	0800b904 	.word	0x0800b904
 8001f00:	2000043a 	.word	0x2000043a
 8001f04:	0800b938 	.word	0x0800b938

08001f08 <process_received_data>:


void process_received_data(uint8_t *data, uint16_t length) {
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b08a      	sub	sp, #40	@ 0x28
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
 8001f10:	460b      	mov	r3, r1
 8001f12:	807b      	strh	r3, [r7, #2]
    char command = data[0];  // 'command' jest teraz w pierwszym znaku danych
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	781b      	ldrb	r3, [r3, #0]
 8001f18:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    idPomiaru = command;
 8001f1c:	4a6a      	ldr	r2, [pc, #424]	@ (80020c8 <process_received_data+0x1c0>)
 8001f1e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001f22:	7013      	strb	r3, [r2, #0]


    if ( !(command == 'M') )
 8001f24:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001f28:	2b4d      	cmp	r3, #77	@ 0x4d
 8001f2a:	d00a      	beq.n	8001f42 <process_received_data+0x3a>
    {

    strncpy(idCzujnika, (char*)&data[2], 2);  // Kopiowanie dwóch znaków od indeksu 2
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	3302      	adds	r3, #2
 8001f30:	2202      	movs	r2, #2
 8001f32:	4619      	mov	r1, r3
 8001f34:	4865      	ldr	r0, [pc, #404]	@ (80020cc <process_received_data+0x1c4>)
 8001f36:	f005 fd86 	bl	8007a46 <strncpy>
    idCzujnika[2] = '\0';
 8001f3a:	4b64      	ldr	r3, [pc, #400]	@ (80020cc <process_received_data+0x1c4>)
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	709a      	strb	r2, [r3, #2]
 8001f40:	e008      	b.n	8001f54 <process_received_data+0x4c>

    } else {

    	idCzujnika[0] = '0';
 8001f42:	4b62      	ldr	r3, [pc, #392]	@ (80020cc <process_received_data+0x1c4>)
 8001f44:	2230      	movs	r2, #48	@ 0x30
 8001f46:	701a      	strb	r2, [r3, #0]
    	idCzujnika[1] = '0';
 8001f48:	4b60      	ldr	r3, [pc, #384]	@ (80020cc <process_received_data+0x1c4>)
 8001f4a:	2230      	movs	r2, #48	@ 0x30
 8001f4c:	705a      	strb	r2, [r3, #1]
    	idCzujnika[2] = '\0';
 8001f4e:	4b5f      	ldr	r3, [pc, #380]	@ (80020cc <process_received_data+0x1c4>)
 8001f50:	2200      	movs	r2, #0
 8001f52:	709a      	strb	r2, [r3, #2]
    }
    // Wyszukiwanie wartości po "P "
        char *ptrP = strstr((char *)data, "P ");
 8001f54:	495e      	ldr	r1, [pc, #376]	@ (80020d0 <process_received_data+0x1c8>)
 8001f56:	6878      	ldr	r0, [r7, #4]
 8001f58:	f005 fd88 	bl	8007a6c <strstr>
 8001f5c:	61f8      	str	r0, [r7, #28]
        if (ptrP != NULL) {
 8001f5e:	69fb      	ldr	r3, [r7, #28]
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d03c      	beq.n	8001fde <process_received_data+0xd6>
            ptrP += 2;  // Przesunięcie wskaźnika za "P "
 8001f64:	69fb      	ldr	r3, [r7, #28]
 8001f66:	3302      	adds	r3, #2
 8001f68:	61fb      	str	r3, [r7, #28]
            char *endPtr = strchr(ptrP, ' ');  // Znalezienie końca wartości (pierwszej spacji)
 8001f6a:	2120      	movs	r1, #32
 8001f6c:	69f8      	ldr	r0, [r7, #28]
 8001f6e:	f005 fd5d 	bl	8007a2c <strchr>
 8001f72:	6278      	str	r0, [r7, #36]	@ 0x24

            if (endPtr == NULL) {  // Jeśli brak spacji, zakładamy koniec danych
 8001f74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d103      	bne.n	8001f82 <process_received_data+0x7a>
                endPtr = (char *)data + length;
 8001f7a:	887b      	ldrh	r3, [r7, #2]
 8001f7c:	687a      	ldr	r2, [r7, #4]
 8001f7e:	4413      	add	r3, r2
 8001f80:	627b      	str	r3, [r7, #36]	@ 0x24
            }

            // Obliczanie długości wartości
            size_t len = endPtr - ptrP;
 8001f82:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001f84:	69fb      	ldr	r3, [r7, #28]
 8001f86:	1ad3      	subs	r3, r2, r3
 8001f88:	61bb      	str	r3, [r7, #24]
            if (len < 6) {  // Sprawdzamy, czy długość jest poprawna
 8001f8a:	69bb      	ldr	r3, [r7, #24]
 8001f8c:	2b05      	cmp	r3, #5
 8001f8e:	d822      	bhi.n	8001fd6 <process_received_data+0xce>
                char progStr[6] = {0};  // Bufor na wartość progu
 8001f90:	2300      	movs	r3, #0
 8001f92:	613b      	str	r3, [r7, #16]
 8001f94:	2300      	movs	r3, #0
 8001f96:	82bb      	strh	r3, [r7, #20]
                strncpy(progStr, ptrP, len);
 8001f98:	f107 0310 	add.w	r3, r7, #16
 8001f9c:	69ba      	ldr	r2, [r7, #24]
 8001f9e:	69f9      	ldr	r1, [r7, #28]
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	f005 fd50 	bl	8007a46 <strncpy>
                progStr[len] = '\0';  // Zakończenie ciągu znaków
 8001fa6:	f107 0210 	add.w	r2, r7, #16
 8001faa:	69bb      	ldr	r3, [r7, #24]
 8001fac:	4413      	add	r3, r2
 8001fae:	2200      	movs	r2, #0
 8001fb0:	701a      	strb	r2, [r3, #0]
                progPomiaruDynam = (uint16_t)strtoul(progStr, NULL, 10);  // Konwersja na uint16_t
 8001fb2:	f107 0310 	add.w	r3, r7, #16
 8001fb6:	220a      	movs	r2, #10
 8001fb8:	2100      	movs	r1, #0
 8001fba:	4618      	mov	r0, r3
 8001fbc:	f004 fc2e 	bl	800681c <strtoul>
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	b29a      	uxth	r2, r3
 8001fc4:	4b43      	ldr	r3, [pc, #268]	@ (80020d4 <process_received_data+0x1cc>)
 8001fc6:	801a      	strh	r2, [r3, #0]
                printf("Prog pomiaru dynam: %u\r\n", progPomiaruDynam);
 8001fc8:	4b42      	ldr	r3, [pc, #264]	@ (80020d4 <process_received_data+0x1cc>)
 8001fca:	881b      	ldrh	r3, [r3, #0]
 8001fcc:	4619      	mov	r1, r3
 8001fce:	4842      	ldr	r0, [pc, #264]	@ (80020d8 <process_received_data+0x1d0>)
 8001fd0:	f005 fb5c 	bl	800768c <iprintf>
 8001fd4:	e006      	b.n	8001fe4 <process_received_data+0xdc>
            } else {
                printf("Błąd: Długość wartości progu przekracza limit!\r\n");
 8001fd6:	4841      	ldr	r0, [pc, #260]	@ (80020dc <process_received_data+0x1d4>)
 8001fd8:	f005 fbc0 	bl	800775c <puts>
 8001fdc:	e002      	b.n	8001fe4 <process_received_data+0xdc>
            }
        } else {
            printf("Błąd: Nie znaleziono ciągu 'P '.\r\n");
 8001fde:	4840      	ldr	r0, [pc, #256]	@ (80020e0 <process_received_data+0x1d8>)
 8001fe0:	f005 fbbc 	bl	800775c <puts>
        }

    printf("IdCzujnika: %s\r\n", idCzujnika);
 8001fe4:	4939      	ldr	r1, [pc, #228]	@ (80020cc <process_received_data+0x1c4>)
 8001fe6:	483f      	ldr	r0, [pc, #252]	@ (80020e4 <process_received_data+0x1dc>)
 8001fe8:	f005 fb50 	bl	800768c <iprintf>
    printf("Command: %c\r\n", command);
 8001fec:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001ff0:	4619      	mov	r1, r3
 8001ff2:	483d      	ldr	r0, [pc, #244]	@ (80020e8 <process_received_data+0x1e0>)
 8001ff4:	f005 fb4a 	bl	800768c <iprintf>

    if (command == 'S' || command == 'M') {
 8001ff8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001ffc:	2b53      	cmp	r3, #83	@ 0x53
 8001ffe:	d003      	beq.n	8002008 <process_received_data+0x100>
 8002000:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002004:	2b4d      	cmp	r3, #77	@ 0x4d
 8002006:	d109      	bne.n	800201c <process_received_data+0x114>

    	HAL_ADC_Stop_DMA(&hadc1);
 8002008:	4838      	ldr	r0, [pc, #224]	@ (80020ec <process_received_data+0x1e4>)
 800200a:	f001 f869 	bl	80030e0 <HAL_ADC_Stop_DMA>
        HAL_TIM_Base_Start_IT(&htim2);
 800200e:	4838      	ldr	r0, [pc, #224]	@ (80020f0 <process_received_data+0x1e8>)
 8002010:	f002 ff26 	bl	8004e60 <HAL_TIM_Base_Start_IT>
        HAL_TIM_Base_Stop_IT(&htim3);
 8002014:	4837      	ldr	r0, [pc, #220]	@ (80020f4 <process_received_data+0x1ec>)
 8002016:	f002 ff85 	bl	8004f24 <HAL_TIM_Base_Stop_IT>
    	}
    	flagaZmiany = 0;
        HAL_TIM_Base_Stop_IT(&htim2);
        HAL_TIM_Base_Start_IT(&htim3);
    }
}
 800201a:	e050      	b.n	80020be <process_received_data+0x1b6>
    } else if (command == 'D') {
 800201c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002020:	2b44      	cmp	r3, #68	@ 0x44
 8002022:	d14c      	bne.n	80020be <process_received_data+0x1b6>
    	HAL_ADC_Stop(&hadc1);
 8002024:	4831      	ldr	r0, [pc, #196]	@ (80020ec <process_received_data+0x1e4>)
 8002026:	f000 fcdf 	bl	80029e8 <HAL_ADC_Stop>
    	if (strncmp((char*)data + 5, "T", 1) == 0) {  // Komenda "T" zaczyna się od indeksu 5
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	3305      	adds	r3, #5
 800202e:	781a      	ldrb	r2, [r3, #0]
 8002030:	4b31      	ldr	r3, [pc, #196]	@ (80020f8 <process_received_data+0x1f0>)
 8002032:	781b      	ldrb	r3, [r3, #0]
 8002034:	1ad3      	subs	r3, r2, r3
 8002036:	2b00      	cmp	r3, #0
 8002038:	d11d      	bne.n	8002076 <process_received_data+0x16e>
            strncpy(idPomiaruDynam, "T", 2);
 800203a:	4b30      	ldr	r3, [pc, #192]	@ (80020fc <process_received_data+0x1f4>)
 800203c:	2254      	movs	r2, #84	@ 0x54
 800203e:	801a      	strh	r2, [r3, #0]
            idPomiaruDynam[2] = '\0';  // Dodanie końca stringa
 8002040:	4b2e      	ldr	r3, [pc, #184]	@ (80020fc <process_received_data+0x1f4>)
 8002042:	2200      	movs	r2, #0
 8002044:	709a      	strb	r2, [r3, #2]
            char param_str[6] = {0};
 8002046:	2300      	movs	r3, #0
 8002048:	60bb      	str	r3, [r7, #8]
 800204a:	2300      	movs	r3, #0
 800204c:	81bb      	strh	r3, [r7, #12]
            strncpy(param_str, (char*)data + 7, 5);  // Parametr zaczyna się od indeksu 7
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	1dd9      	adds	r1, r3, #7
 8002052:	f107 0308 	add.w	r3, r7, #8
 8002056:	2205      	movs	r2, #5
 8002058:	4618      	mov	r0, r3
 800205a:	f005 fcf4 	bl	8007a46 <strncpy>
            czasPomiaruDynam = (uint16_t)strtoul(param_str, NULL, 10);  // Konwersja na uint16_t
 800205e:	f107 0308 	add.w	r3, r7, #8
 8002062:	220a      	movs	r2, #10
 8002064:	2100      	movs	r1, #0
 8002066:	4618      	mov	r0, r3
 8002068:	f004 fbd8 	bl	800681c <strtoul>
 800206c:	4603      	mov	r3, r0
 800206e:	b29a      	uxth	r2, r3
 8002070:	4b23      	ldr	r3, [pc, #140]	@ (8002100 <process_received_data+0x1f8>)
 8002072:	801a      	strh	r2, [r3, #0]
 8002074:	e00d      	b.n	8002092 <process_received_data+0x18a>
        } else if (strncmp((char*)data + 5, "X", 1) == 0) {  // Komenda "X" zaczyna się od indeksu 5
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	3305      	adds	r3, #5
 800207a:	781a      	ldrb	r2, [r3, #0]
 800207c:	4b21      	ldr	r3, [pc, #132]	@ (8002104 <process_received_data+0x1fc>)
 800207e:	781b      	ldrb	r3, [r3, #0]
 8002080:	1ad3      	subs	r3, r2, r3
 8002082:	2b00      	cmp	r3, #0
 8002084:	d105      	bne.n	8002092 <process_received_data+0x18a>
            strncpy(idPomiaruDynam, "X", 2);
 8002086:	4b1d      	ldr	r3, [pc, #116]	@ (80020fc <process_received_data+0x1f4>)
 8002088:	2258      	movs	r2, #88	@ 0x58
 800208a:	801a      	strh	r2, [r3, #0]
            idPomiaruDynam[2] = '\0';  // Dodanie końca stringa
 800208c:	4b1b      	ldr	r3, [pc, #108]	@ (80020fc <process_received_data+0x1f4>)
 800208e:	2200      	movs	r2, #0
 8002090:	709a      	strb	r2, [r3, #2]
    	if ( idCzujnika[1] == '5' )
 8002092:	4b0e      	ldr	r3, [pc, #56]	@ (80020cc <process_received_data+0x1c4>)
 8002094:	785b      	ldrb	r3, [r3, #1]
 8002096:	2b35      	cmp	r3, #53	@ 0x35
 8002098:	d102      	bne.n	80020a0 <process_received_data+0x198>
    		ADC_Select_CH11();
 800209a:	f7ff fb29 	bl	80016f0 <ADC_Select_CH11>
 800209e:	e005      	b.n	80020ac <process_received_data+0x1a4>
    	} else if( idCzujnika[1] == '6' ) {
 80020a0:	4b0a      	ldr	r3, [pc, #40]	@ (80020cc <process_received_data+0x1c4>)
 80020a2:	785b      	ldrb	r3, [r3, #1]
 80020a4:	2b36      	cmp	r3, #54	@ 0x36
 80020a6:	d101      	bne.n	80020ac <process_received_data+0x1a4>
    		ADC_Select_CH10();
 80020a8:	f7ff fb02 	bl	80016b0 <ADC_Select_CH10>
    	flagaZmiany = 0;
 80020ac:	4b16      	ldr	r3, [pc, #88]	@ (8002108 <process_received_data+0x200>)
 80020ae:	2200      	movs	r2, #0
 80020b0:	601a      	str	r2, [r3, #0]
        HAL_TIM_Base_Stop_IT(&htim2);
 80020b2:	480f      	ldr	r0, [pc, #60]	@ (80020f0 <process_received_data+0x1e8>)
 80020b4:	f002 ff36 	bl	8004f24 <HAL_TIM_Base_Stop_IT>
        HAL_TIM_Base_Start_IT(&htim3);
 80020b8:	480e      	ldr	r0, [pc, #56]	@ (80020f4 <process_received_data+0x1ec>)
 80020ba:	f002 fed1 	bl	8004e60 <HAL_TIM_Base_Start_IT>
}
 80020be:	bf00      	nop
 80020c0:	3728      	adds	r7, #40	@ 0x28
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bd80      	pop	{r7, pc}
 80020c6:	bf00      	nop
 80020c8:	20000472 	.word	0x20000472
 80020cc:	2000046c 	.word	0x2000046c
 80020d0:	0800b964 	.word	0x0800b964
 80020d4:	20000476 	.word	0x20000476
 80020d8:	0800b968 	.word	0x0800b968
 80020dc:	0800b984 	.word	0x0800b984
 80020e0:	0800b9bc 	.word	0x0800b9bc
 80020e4:	0800b9e4 	.word	0x0800b9e4
 80020e8:	0800b9f8 	.word	0x0800b9f8
 80020ec:	200001f0 	.word	0x200001f0
 80020f0:	200002e0 	.word	0x200002e0
 80020f4:	20000328 	.word	0x20000328
 80020f8:	0800ba08 	.word	0x0800ba08
 80020fc:	20000470 	.word	0x20000470
 8002100:	20000474 	.word	0x20000474
 8002104:	0800b8b8 	.word	0x0800b8b8
 8002108:	20005438 	.word	0x20005438

0800210c <HAL_ADC_ErrorCallback>:
void HAL_Delay_us(uint16_t us) {
    uint32_t start = __HAL_TIM_GET_COUNTER(&htim1); // Załóżmy, że htim1 jest skonfigurowany na 1 MHz (1 µs na tick)
    while ((__HAL_TIM_GET_COUNTER(&htim1) - start) < us);
}

void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc) {
 800210c:	b580      	push	{r7, lr}
 800210e:	b082      	sub	sp, #8
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
    printf("ADC DMA Error\n");
 8002114:	4803      	ldr	r0, [pc, #12]	@ (8002124 <HAL_ADC_ErrorCallback+0x18>)
 8002116:	f005 fb21 	bl	800775c <puts>
}
 800211a:	bf00      	nop
 800211c:	3708      	adds	r7, #8
 800211e:	46bd      	mov	sp, r7
 8002120:	bd80      	pop	{r7, pc}
 8002122:	bf00      	nop
 8002124:	0800ba0c 	.word	0x0800ba0c

08002128 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002128:	b480      	push	{r7}
 800212a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800212c:	b672      	cpsid	i
}
 800212e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002130:	bf00      	nop
 8002132:	e7fd      	b.n	8002130 <Error_Handler+0x8>

08002134 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b082      	sub	sp, #8
 8002138:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800213a:	2300      	movs	r3, #0
 800213c:	607b      	str	r3, [r7, #4]
 800213e:	4b10      	ldr	r3, [pc, #64]	@ (8002180 <HAL_MspInit+0x4c>)
 8002140:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002142:	4a0f      	ldr	r2, [pc, #60]	@ (8002180 <HAL_MspInit+0x4c>)
 8002144:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002148:	6453      	str	r3, [r2, #68]	@ 0x44
 800214a:	4b0d      	ldr	r3, [pc, #52]	@ (8002180 <HAL_MspInit+0x4c>)
 800214c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800214e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002152:	607b      	str	r3, [r7, #4]
 8002154:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002156:	2300      	movs	r3, #0
 8002158:	603b      	str	r3, [r7, #0]
 800215a:	4b09      	ldr	r3, [pc, #36]	@ (8002180 <HAL_MspInit+0x4c>)
 800215c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800215e:	4a08      	ldr	r2, [pc, #32]	@ (8002180 <HAL_MspInit+0x4c>)
 8002160:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002164:	6413      	str	r3, [r2, #64]	@ 0x40
 8002166:	4b06      	ldr	r3, [pc, #24]	@ (8002180 <HAL_MspInit+0x4c>)
 8002168:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800216a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800216e:	603b      	str	r3, [r7, #0]
 8002170:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002172:	2007      	movs	r0, #7
 8002174:	f001 fbaa 	bl	80038cc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002178:	bf00      	nop
 800217a:	3708      	adds	r7, #8
 800217c:	46bd      	mov	sp, r7
 800217e:	bd80      	pop	{r7, pc}
 8002180:	40023800 	.word	0x40023800

08002184 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b08c      	sub	sp, #48	@ 0x30
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800218c:	f107 031c 	add.w	r3, r7, #28
 8002190:	2200      	movs	r2, #0
 8002192:	601a      	str	r2, [r3, #0]
 8002194:	605a      	str	r2, [r3, #4]
 8002196:	609a      	str	r2, [r3, #8]
 8002198:	60da      	str	r2, [r3, #12]
 800219a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	4a4e      	ldr	r2, [pc, #312]	@ (80022dc <HAL_ADC_MspInit+0x158>)
 80021a2:	4293      	cmp	r3, r2
 80021a4:	f040 8095 	bne.w	80022d2 <HAL_ADC_MspInit+0x14e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80021a8:	2300      	movs	r3, #0
 80021aa:	61bb      	str	r3, [r7, #24]
 80021ac:	4b4c      	ldr	r3, [pc, #304]	@ (80022e0 <HAL_ADC_MspInit+0x15c>)
 80021ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021b0:	4a4b      	ldr	r2, [pc, #300]	@ (80022e0 <HAL_ADC_MspInit+0x15c>)
 80021b2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80021b6:	6453      	str	r3, [r2, #68]	@ 0x44
 80021b8:	4b49      	ldr	r3, [pc, #292]	@ (80022e0 <HAL_ADC_MspInit+0x15c>)
 80021ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021c0:	61bb      	str	r3, [r7, #24]
 80021c2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80021c4:	2300      	movs	r3, #0
 80021c6:	617b      	str	r3, [r7, #20]
 80021c8:	4b45      	ldr	r3, [pc, #276]	@ (80022e0 <HAL_ADC_MspInit+0x15c>)
 80021ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021cc:	4a44      	ldr	r2, [pc, #272]	@ (80022e0 <HAL_ADC_MspInit+0x15c>)
 80021ce:	f043 0304 	orr.w	r3, r3, #4
 80021d2:	6313      	str	r3, [r2, #48]	@ 0x30
 80021d4:	4b42      	ldr	r3, [pc, #264]	@ (80022e0 <HAL_ADC_MspInit+0x15c>)
 80021d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021d8:	f003 0304 	and.w	r3, r3, #4
 80021dc:	617b      	str	r3, [r7, #20]
 80021de:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021e0:	2300      	movs	r3, #0
 80021e2:	613b      	str	r3, [r7, #16]
 80021e4:	4b3e      	ldr	r3, [pc, #248]	@ (80022e0 <HAL_ADC_MspInit+0x15c>)
 80021e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021e8:	4a3d      	ldr	r2, [pc, #244]	@ (80022e0 <HAL_ADC_MspInit+0x15c>)
 80021ea:	f043 0301 	orr.w	r3, r3, #1
 80021ee:	6313      	str	r3, [r2, #48]	@ 0x30
 80021f0:	4b3b      	ldr	r3, [pc, #236]	@ (80022e0 <HAL_ADC_MspInit+0x15c>)
 80021f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021f4:	f003 0301 	and.w	r3, r3, #1
 80021f8:	613b      	str	r3, [r7, #16]
 80021fa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021fc:	2300      	movs	r3, #0
 80021fe:	60fb      	str	r3, [r7, #12]
 8002200:	4b37      	ldr	r3, [pc, #220]	@ (80022e0 <HAL_ADC_MspInit+0x15c>)
 8002202:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002204:	4a36      	ldr	r2, [pc, #216]	@ (80022e0 <HAL_ADC_MspInit+0x15c>)
 8002206:	f043 0302 	orr.w	r3, r3, #2
 800220a:	6313      	str	r3, [r2, #48]	@ 0x30
 800220c:	4b34      	ldr	r3, [pc, #208]	@ (80022e0 <HAL_ADC_MspInit+0x15c>)
 800220e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002210:	f003 0302 	and.w	r3, r3, #2
 8002214:	60fb      	str	r3, [r7, #12]
 8002216:	68fb      	ldr	r3, [r7, #12]
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA4     ------> ADC1_IN4
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002218:	2303      	movs	r3, #3
 800221a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800221c:	2303      	movs	r3, #3
 800221e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002220:	2300      	movs	r3, #0
 8002222:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002224:	f107 031c 	add.w	r3, r7, #28
 8002228:	4619      	mov	r1, r3
 800222a:	482e      	ldr	r0, [pc, #184]	@ (80022e4 <HAL_ADC_MspInit+0x160>)
 800222c:	f001 ff92 	bl	8004154 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4;
 8002230:	2313      	movs	r3, #19
 8002232:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002234:	2303      	movs	r3, #3
 8002236:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002238:	2300      	movs	r3, #0
 800223a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800223c:	f107 031c 	add.w	r3, r7, #28
 8002240:	4619      	mov	r1, r3
 8002242:	4829      	ldr	r0, [pc, #164]	@ (80022e8 <HAL_ADC_MspInit+0x164>)
 8002244:	f001 ff86 	bl	8004154 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002248:	2301      	movs	r3, #1
 800224a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800224c:	2303      	movs	r3, #3
 800224e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002250:	2300      	movs	r3, #0
 8002252:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002254:	f107 031c 	add.w	r3, r7, #28
 8002258:	4619      	mov	r1, r3
 800225a:	4824      	ldr	r0, [pc, #144]	@ (80022ec <HAL_ADC_MspInit+0x168>)
 800225c:	f001 ff7a 	bl	8004154 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8002260:	4b23      	ldr	r3, [pc, #140]	@ (80022f0 <HAL_ADC_MspInit+0x16c>)
 8002262:	4a24      	ldr	r2, [pc, #144]	@ (80022f4 <HAL_ADC_MspInit+0x170>)
 8002264:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8002266:	4b22      	ldr	r3, [pc, #136]	@ (80022f0 <HAL_ADC_MspInit+0x16c>)
 8002268:	2200      	movs	r2, #0
 800226a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800226c:	4b20      	ldr	r3, [pc, #128]	@ (80022f0 <HAL_ADC_MspInit+0x16c>)
 800226e:	2200      	movs	r2, #0
 8002270:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002272:	4b1f      	ldr	r3, [pc, #124]	@ (80022f0 <HAL_ADC_MspInit+0x16c>)
 8002274:	2200      	movs	r2, #0
 8002276:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002278:	4b1d      	ldr	r3, [pc, #116]	@ (80022f0 <HAL_ADC_MspInit+0x16c>)
 800227a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800227e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002280:	4b1b      	ldr	r3, [pc, #108]	@ (80022f0 <HAL_ADC_MspInit+0x16c>)
 8002282:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002286:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002288:	4b19      	ldr	r3, [pc, #100]	@ (80022f0 <HAL_ADC_MspInit+0x16c>)
 800228a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800228e:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002290:	4b17      	ldr	r3, [pc, #92]	@ (80022f0 <HAL_ADC_MspInit+0x16c>)
 8002292:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002296:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002298:	4b15      	ldr	r3, [pc, #84]	@ (80022f0 <HAL_ADC_MspInit+0x16c>)
 800229a:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800229e:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80022a0:	4b13      	ldr	r3, [pc, #76]	@ (80022f0 <HAL_ADC_MspInit+0x16c>)
 80022a2:	2200      	movs	r2, #0
 80022a4:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80022a6:	4812      	ldr	r0, [pc, #72]	@ (80022f0 <HAL_ADC_MspInit+0x16c>)
 80022a8:	f001 fb52 	bl	8003950 <HAL_DMA_Init>
 80022ac:	4603      	mov	r3, r0
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d001      	beq.n	80022b6 <HAL_ADC_MspInit+0x132>
    {
      Error_Handler();
 80022b2:	f7ff ff39 	bl	8002128 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	4a0d      	ldr	r2, [pc, #52]	@ (80022f0 <HAL_ADC_MspInit+0x16c>)
 80022ba:	639a      	str	r2, [r3, #56]	@ 0x38
 80022bc:	4a0c      	ldr	r2, [pc, #48]	@ (80022f0 <HAL_ADC_MspInit+0x16c>)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6393      	str	r3, [r2, #56]	@ 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 80022c2:	2200      	movs	r2, #0
 80022c4:	2100      	movs	r1, #0
 80022c6:	2012      	movs	r0, #18
 80022c8:	f001 fb0b 	bl	80038e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80022cc:	2012      	movs	r0, #18
 80022ce:	f001 fb24 	bl	800391a <HAL_NVIC_EnableIRQ>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 80022d2:	bf00      	nop
 80022d4:	3730      	adds	r7, #48	@ 0x30
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bd80      	pop	{r7, pc}
 80022da:	bf00      	nop
 80022dc:	40012000 	.word	0x40012000
 80022e0:	40023800 	.word	0x40023800
 80022e4:	40020800 	.word	0x40020800
 80022e8:	40020000 	.word	0x40020000
 80022ec:	40020400 	.word	0x40020400
 80022f0:	20000238 	.word	0x20000238
 80022f4:	40026410 	.word	0x40026410

080022f8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b086      	sub	sp, #24
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	4a26      	ldr	r2, [pc, #152]	@ (80023a0 <HAL_TIM_Base_MspInit+0xa8>)
 8002306:	4293      	cmp	r3, r2
 8002308:	d10e      	bne.n	8002328 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800230a:	2300      	movs	r3, #0
 800230c:	617b      	str	r3, [r7, #20]
 800230e:	4b25      	ldr	r3, [pc, #148]	@ (80023a4 <HAL_TIM_Base_MspInit+0xac>)
 8002310:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002312:	4a24      	ldr	r2, [pc, #144]	@ (80023a4 <HAL_TIM_Base_MspInit+0xac>)
 8002314:	f043 0301 	orr.w	r3, r3, #1
 8002318:	6453      	str	r3, [r2, #68]	@ 0x44
 800231a:	4b22      	ldr	r3, [pc, #136]	@ (80023a4 <HAL_TIM_Base_MspInit+0xac>)
 800231c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800231e:	f003 0301 	and.w	r3, r3, #1
 8002322:	617b      	str	r3, [r7, #20]
 8002324:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002326:	e036      	b.n	8002396 <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM2)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002330:	d116      	bne.n	8002360 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002332:	2300      	movs	r3, #0
 8002334:	613b      	str	r3, [r7, #16]
 8002336:	4b1b      	ldr	r3, [pc, #108]	@ (80023a4 <HAL_TIM_Base_MspInit+0xac>)
 8002338:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800233a:	4a1a      	ldr	r2, [pc, #104]	@ (80023a4 <HAL_TIM_Base_MspInit+0xac>)
 800233c:	f043 0301 	orr.w	r3, r3, #1
 8002340:	6413      	str	r3, [r2, #64]	@ 0x40
 8002342:	4b18      	ldr	r3, [pc, #96]	@ (80023a4 <HAL_TIM_Base_MspInit+0xac>)
 8002344:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002346:	f003 0301 	and.w	r3, r3, #1
 800234a:	613b      	str	r3, [r7, #16]
 800234c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800234e:	2200      	movs	r2, #0
 8002350:	2100      	movs	r1, #0
 8002352:	201c      	movs	r0, #28
 8002354:	f001 fac5 	bl	80038e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002358:	201c      	movs	r0, #28
 800235a:	f001 fade 	bl	800391a <HAL_NVIC_EnableIRQ>
}
 800235e:	e01a      	b.n	8002396 <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM3)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	4a10      	ldr	r2, [pc, #64]	@ (80023a8 <HAL_TIM_Base_MspInit+0xb0>)
 8002366:	4293      	cmp	r3, r2
 8002368:	d115      	bne.n	8002396 <HAL_TIM_Base_MspInit+0x9e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800236a:	2300      	movs	r3, #0
 800236c:	60fb      	str	r3, [r7, #12]
 800236e:	4b0d      	ldr	r3, [pc, #52]	@ (80023a4 <HAL_TIM_Base_MspInit+0xac>)
 8002370:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002372:	4a0c      	ldr	r2, [pc, #48]	@ (80023a4 <HAL_TIM_Base_MspInit+0xac>)
 8002374:	f043 0302 	orr.w	r3, r3, #2
 8002378:	6413      	str	r3, [r2, #64]	@ 0x40
 800237a:	4b0a      	ldr	r3, [pc, #40]	@ (80023a4 <HAL_TIM_Base_MspInit+0xac>)
 800237c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800237e:	f003 0302 	and.w	r3, r3, #2
 8002382:	60fb      	str	r3, [r7, #12]
 8002384:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002386:	2200      	movs	r2, #0
 8002388:	2100      	movs	r1, #0
 800238a:	201d      	movs	r0, #29
 800238c:	f001 faa9 	bl	80038e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002390:	201d      	movs	r0, #29
 8002392:	f001 fac2 	bl	800391a <HAL_NVIC_EnableIRQ>
}
 8002396:	bf00      	nop
 8002398:	3718      	adds	r7, #24
 800239a:	46bd      	mov	sp, r7
 800239c:	bd80      	pop	{r7, pc}
 800239e:	bf00      	nop
 80023a0:	40010000 	.word	0x40010000
 80023a4:	40023800 	.word	0x40023800
 80023a8:	40000400 	.word	0x40000400

080023ac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b08a      	sub	sp, #40	@ 0x28
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023b4:	f107 0314 	add.w	r3, r7, #20
 80023b8:	2200      	movs	r2, #0
 80023ba:	601a      	str	r2, [r3, #0]
 80023bc:	605a      	str	r2, [r3, #4]
 80023be:	609a      	str	r2, [r3, #8]
 80023c0:	60da      	str	r2, [r3, #12]
 80023c2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	4a1d      	ldr	r2, [pc, #116]	@ (8002440 <HAL_UART_MspInit+0x94>)
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d133      	bne.n	8002436 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80023ce:	2300      	movs	r3, #0
 80023d0:	613b      	str	r3, [r7, #16]
 80023d2:	4b1c      	ldr	r3, [pc, #112]	@ (8002444 <HAL_UART_MspInit+0x98>)
 80023d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023d6:	4a1b      	ldr	r2, [pc, #108]	@ (8002444 <HAL_UART_MspInit+0x98>)
 80023d8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80023dc:	6413      	str	r3, [r2, #64]	@ 0x40
 80023de:	4b19      	ldr	r3, [pc, #100]	@ (8002444 <HAL_UART_MspInit+0x98>)
 80023e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023e6:	613b      	str	r3, [r7, #16]
 80023e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023ea:	2300      	movs	r3, #0
 80023ec:	60fb      	str	r3, [r7, #12]
 80023ee:	4b15      	ldr	r3, [pc, #84]	@ (8002444 <HAL_UART_MspInit+0x98>)
 80023f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023f2:	4a14      	ldr	r2, [pc, #80]	@ (8002444 <HAL_UART_MspInit+0x98>)
 80023f4:	f043 0301 	orr.w	r3, r3, #1
 80023f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80023fa:	4b12      	ldr	r3, [pc, #72]	@ (8002444 <HAL_UART_MspInit+0x98>)
 80023fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023fe:	f003 0301 	and.w	r3, r3, #1
 8002402:	60fb      	str	r3, [r7, #12]
 8002404:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002406:	230c      	movs	r3, #12
 8002408:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800240a:	2302      	movs	r3, #2
 800240c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800240e:	2300      	movs	r3, #0
 8002410:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002412:	2300      	movs	r3, #0
 8002414:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002416:	2307      	movs	r3, #7
 8002418:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800241a:	f107 0314 	add.w	r3, r7, #20
 800241e:	4619      	mov	r1, r3
 8002420:	4809      	ldr	r0, [pc, #36]	@ (8002448 <HAL_UART_MspInit+0x9c>)
 8002422:	f001 fe97 	bl	8004154 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002426:	2200      	movs	r2, #0
 8002428:	2100      	movs	r1, #0
 800242a:	2026      	movs	r0, #38	@ 0x26
 800242c:	f001 fa59 	bl	80038e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002430:	2026      	movs	r0, #38	@ 0x26
 8002432:	f001 fa72 	bl	800391a <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8002436:	bf00      	nop
 8002438:	3728      	adds	r7, #40	@ 0x28
 800243a:	46bd      	mov	sp, r7
 800243c:	bd80      	pop	{r7, pc}
 800243e:	bf00      	nop
 8002440:	40004400 	.word	0x40004400
 8002444:	40023800 	.word	0x40023800
 8002448:	40020000 	.word	0x40020000

0800244c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800244c:	b480      	push	{r7}
 800244e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002450:	bf00      	nop
 8002452:	e7fd      	b.n	8002450 <NMI_Handler+0x4>

08002454 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002454:	b480      	push	{r7}
 8002456:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002458:	bf00      	nop
 800245a:	e7fd      	b.n	8002458 <HardFault_Handler+0x4>

0800245c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800245c:	b480      	push	{r7}
 800245e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002460:	bf00      	nop
 8002462:	e7fd      	b.n	8002460 <MemManage_Handler+0x4>

08002464 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002464:	b480      	push	{r7}
 8002466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002468:	bf00      	nop
 800246a:	e7fd      	b.n	8002468 <BusFault_Handler+0x4>

0800246c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800246c:	b480      	push	{r7}
 800246e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002470:	bf00      	nop
 8002472:	e7fd      	b.n	8002470 <UsageFault_Handler+0x4>

08002474 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002474:	b480      	push	{r7}
 8002476:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002478:	bf00      	nop
 800247a:	46bd      	mov	sp, r7
 800247c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002480:	4770      	bx	lr

08002482 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002482:	b480      	push	{r7}
 8002484:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002486:	bf00      	nop
 8002488:	46bd      	mov	sp, r7
 800248a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248e:	4770      	bx	lr

08002490 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002490:	b480      	push	{r7}
 8002492:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002494:	bf00      	nop
 8002496:	46bd      	mov	sp, r7
 8002498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249c:	4770      	bx	lr

0800249e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800249e:	b580      	push	{r7, lr}
 80024a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80024a2:	f000 f989 	bl	80027b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80024a6:	bf00      	nop
 80024a8:	bd80      	pop	{r7, pc}
	...

080024ac <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80024b0:	4802      	ldr	r0, [pc, #8]	@ (80024bc <ADC_IRQHandler+0x10>)
 80024b2:	f000 fc15 	bl	8002ce0 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 80024b6:	bf00      	nop
 80024b8:	bd80      	pop	{r7, pc}
 80024ba:	bf00      	nop
 80024bc:	200001f0 	.word	0x200001f0

080024c0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80024c4:	4802      	ldr	r0, [pc, #8]	@ (80024d0 <TIM2_IRQHandler+0x10>)
 80024c6:	f002 fd5c 	bl	8004f82 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80024ca:	bf00      	nop
 80024cc:	bd80      	pop	{r7, pc}
 80024ce:	bf00      	nop
 80024d0:	200002e0 	.word	0x200002e0

080024d4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80024d8:	4802      	ldr	r0, [pc, #8]	@ (80024e4 <TIM3_IRQHandler+0x10>)
 80024da:	f002 fd52 	bl	8004f82 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80024de:	bf00      	nop
 80024e0:	bd80      	pop	{r7, pc}
 80024e2:	bf00      	nop
 80024e4:	20000328 	.word	0x20000328

080024e8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80024ec:	4802      	ldr	r0, [pc, #8]	@ (80024f8 <USART2_IRQHandler+0x10>)
 80024ee:	f003 f9cf 	bl	8005890 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80024f2:	bf00      	nop
 80024f4:	bd80      	pop	{r7, pc}
 80024f6:	bf00      	nop
 80024f8:	20000370 	.word	0x20000370

080024fc <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002500:	4802      	ldr	r0, [pc, #8]	@ (800250c <DMA2_Stream0_IRQHandler+0x10>)
 8002502:	f001 fbbd 	bl	8003c80 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002506:	bf00      	nop
 8002508:	bd80      	pop	{r7, pc}
 800250a:	bf00      	nop
 800250c:	20000238 	.word	0x20000238

08002510 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002510:	b480      	push	{r7}
 8002512:	af00      	add	r7, sp, #0
	return 1;
 8002514:	2301      	movs	r3, #1
}
 8002516:	4618      	mov	r0, r3
 8002518:	46bd      	mov	sp, r7
 800251a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251e:	4770      	bx	lr

08002520 <_kill>:

int _kill(int pid, int sig)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b082      	sub	sp, #8
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
 8002528:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800252a:	f005 faff 	bl	8007b2c <__errno>
 800252e:	4603      	mov	r3, r0
 8002530:	2216      	movs	r2, #22
 8002532:	601a      	str	r2, [r3, #0]
	return -1;
 8002534:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8002538:	4618      	mov	r0, r3
 800253a:	3708      	adds	r7, #8
 800253c:	46bd      	mov	sp, r7
 800253e:	bd80      	pop	{r7, pc}

08002540 <_exit>:

void _exit (int status)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b082      	sub	sp, #8
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002548:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800254c:	6878      	ldr	r0, [r7, #4]
 800254e:	f7ff ffe7 	bl	8002520 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002552:	bf00      	nop
 8002554:	e7fd      	b.n	8002552 <_exit+0x12>

08002556 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002556:	b580      	push	{r7, lr}
 8002558:	b086      	sub	sp, #24
 800255a:	af00      	add	r7, sp, #0
 800255c:	60f8      	str	r0, [r7, #12]
 800255e:	60b9      	str	r1, [r7, #8]
 8002560:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002562:	2300      	movs	r3, #0
 8002564:	617b      	str	r3, [r7, #20]
 8002566:	e00a      	b.n	800257e <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002568:	f3af 8000 	nop.w
 800256c:	4601      	mov	r1, r0
 800256e:	68bb      	ldr	r3, [r7, #8]
 8002570:	1c5a      	adds	r2, r3, #1
 8002572:	60ba      	str	r2, [r7, #8]
 8002574:	b2ca      	uxtb	r2, r1
 8002576:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002578:	697b      	ldr	r3, [r7, #20]
 800257a:	3301      	adds	r3, #1
 800257c:	617b      	str	r3, [r7, #20]
 800257e:	697a      	ldr	r2, [r7, #20]
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	429a      	cmp	r2, r3
 8002584:	dbf0      	blt.n	8002568 <_read+0x12>
	}

return len;
 8002586:	687b      	ldr	r3, [r7, #4]
}
 8002588:	4618      	mov	r0, r3
 800258a:	3718      	adds	r7, #24
 800258c:	46bd      	mov	sp, r7
 800258e:	bd80      	pop	{r7, pc}

08002590 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b086      	sub	sp, #24
 8002594:	af00      	add	r7, sp, #0
 8002596:	60f8      	str	r0, [r7, #12]
 8002598:	60b9      	str	r1, [r7, #8]
 800259a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800259c:	2300      	movs	r3, #0
 800259e:	617b      	str	r3, [r7, #20]
 80025a0:	e009      	b.n	80025b6 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80025a2:	68bb      	ldr	r3, [r7, #8]
 80025a4:	1c5a      	adds	r2, r3, #1
 80025a6:	60ba      	str	r2, [r7, #8]
 80025a8:	781b      	ldrb	r3, [r3, #0]
 80025aa:	4618      	mov	r0, r3
 80025ac:	f7fe fd32 	bl	8001014 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025b0:	697b      	ldr	r3, [r7, #20]
 80025b2:	3301      	adds	r3, #1
 80025b4:	617b      	str	r3, [r7, #20]
 80025b6:	697a      	ldr	r2, [r7, #20]
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	429a      	cmp	r2, r3
 80025bc:	dbf1      	blt.n	80025a2 <_write+0x12>
	}
	return len;
 80025be:	687b      	ldr	r3, [r7, #4]
}
 80025c0:	4618      	mov	r0, r3
 80025c2:	3718      	adds	r7, #24
 80025c4:	46bd      	mov	sp, r7
 80025c6:	bd80      	pop	{r7, pc}

080025c8 <_close>:

int _close(int file)
{
 80025c8:	b480      	push	{r7}
 80025ca:	b083      	sub	sp, #12
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
	return -1;
 80025d0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80025d4:	4618      	mov	r0, r3
 80025d6:	370c      	adds	r7, #12
 80025d8:	46bd      	mov	sp, r7
 80025da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025de:	4770      	bx	lr

080025e0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80025e0:	b480      	push	{r7}
 80025e2:	b083      	sub	sp, #12
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
 80025e8:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80025f0:	605a      	str	r2, [r3, #4]
	return 0;
 80025f2:	2300      	movs	r3, #0
}
 80025f4:	4618      	mov	r0, r3
 80025f6:	370c      	adds	r7, #12
 80025f8:	46bd      	mov	sp, r7
 80025fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fe:	4770      	bx	lr

08002600 <_isatty>:

int _isatty(int file)
{
 8002600:	b480      	push	{r7}
 8002602:	b083      	sub	sp, #12
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
	return 1;
 8002608:	2301      	movs	r3, #1
}
 800260a:	4618      	mov	r0, r3
 800260c:	370c      	adds	r7, #12
 800260e:	46bd      	mov	sp, r7
 8002610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002614:	4770      	bx	lr

08002616 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002616:	b480      	push	{r7}
 8002618:	b085      	sub	sp, #20
 800261a:	af00      	add	r7, sp, #0
 800261c:	60f8      	str	r0, [r7, #12]
 800261e:	60b9      	str	r1, [r7, #8]
 8002620:	607a      	str	r2, [r7, #4]
	return 0;
 8002622:	2300      	movs	r3, #0
}
 8002624:	4618      	mov	r0, r3
 8002626:	3714      	adds	r7, #20
 8002628:	46bd      	mov	sp, r7
 800262a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262e:	4770      	bx	lr

08002630 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b086      	sub	sp, #24
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002638:	4a14      	ldr	r2, [pc, #80]	@ (800268c <_sbrk+0x5c>)
 800263a:	4b15      	ldr	r3, [pc, #84]	@ (8002690 <_sbrk+0x60>)
 800263c:	1ad3      	subs	r3, r2, r3
 800263e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002640:	697b      	ldr	r3, [r7, #20]
 8002642:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002644:	4b13      	ldr	r3, [pc, #76]	@ (8002694 <_sbrk+0x64>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	2b00      	cmp	r3, #0
 800264a:	d102      	bne.n	8002652 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800264c:	4b11      	ldr	r3, [pc, #68]	@ (8002694 <_sbrk+0x64>)
 800264e:	4a12      	ldr	r2, [pc, #72]	@ (8002698 <_sbrk+0x68>)
 8002650:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002652:	4b10      	ldr	r3, [pc, #64]	@ (8002694 <_sbrk+0x64>)
 8002654:	681a      	ldr	r2, [r3, #0]
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	4413      	add	r3, r2
 800265a:	693a      	ldr	r2, [r7, #16]
 800265c:	429a      	cmp	r2, r3
 800265e:	d207      	bcs.n	8002670 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002660:	f005 fa64 	bl	8007b2c <__errno>
 8002664:	4603      	mov	r3, r0
 8002666:	220c      	movs	r2, #12
 8002668:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800266a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800266e:	e009      	b.n	8002684 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002670:	4b08      	ldr	r3, [pc, #32]	@ (8002694 <_sbrk+0x64>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002676:	4b07      	ldr	r3, [pc, #28]	@ (8002694 <_sbrk+0x64>)
 8002678:	681a      	ldr	r2, [r3, #0]
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	4413      	add	r3, r2
 800267e:	4a05      	ldr	r2, [pc, #20]	@ (8002694 <_sbrk+0x64>)
 8002680:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002682:	68fb      	ldr	r3, [r7, #12]
}
 8002684:	4618      	mov	r0, r3
 8002686:	3718      	adds	r7, #24
 8002688:	46bd      	mov	sp, r7
 800268a:	bd80      	pop	{r7, pc}
 800268c:	20018000 	.word	0x20018000
 8002690:	00000400 	.word	0x00000400
 8002694:	20005440 	.word	0x20005440
 8002698:	20005598 	.word	0x20005598

0800269c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800269c:	b480      	push	{r7}
 800269e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80026a0:	4b06      	ldr	r3, [pc, #24]	@ (80026bc <SystemInit+0x20>)
 80026a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80026a6:	4a05      	ldr	r2, [pc, #20]	@ (80026bc <SystemInit+0x20>)
 80026a8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80026ac:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80026b0:	bf00      	nop
 80026b2:	46bd      	mov	sp, r7
 80026b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b8:	4770      	bx	lr
 80026ba:	bf00      	nop
 80026bc:	e000ed00 	.word	0xe000ed00

080026c0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80026c0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80026f8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80026c4:	480d      	ldr	r0, [pc, #52]	@ (80026fc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80026c6:	490e      	ldr	r1, [pc, #56]	@ (8002700 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80026c8:	4a0e      	ldr	r2, [pc, #56]	@ (8002704 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80026ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80026cc:	e002      	b.n	80026d4 <LoopCopyDataInit>

080026ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80026ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80026d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80026d2:	3304      	adds	r3, #4

080026d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80026d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80026d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80026d8:	d3f9      	bcc.n	80026ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80026da:	4a0b      	ldr	r2, [pc, #44]	@ (8002708 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80026dc:	4c0b      	ldr	r4, [pc, #44]	@ (800270c <LoopFillZerobss+0x26>)
  movs r3, #0
 80026de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80026e0:	e001      	b.n	80026e6 <LoopFillZerobss>

080026e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80026e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80026e4:	3204      	adds	r2, #4

080026e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80026e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80026e8:	d3fb      	bcc.n	80026e2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80026ea:	f7ff ffd7 	bl	800269c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80026ee:	f005 fa23 	bl	8007b38 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80026f2:	f7ff f847 	bl	8001784 <main>
  bx  lr    
 80026f6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80026f8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80026fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002700:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8002704:	0800bea0 	.word	0x0800bea0
  ldr r2, =_sbss
 8002708:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 800270c:	20005594 	.word	0x20005594

08002710 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002710:	e7fe      	b.n	8002710 <DMA1_Stream0_IRQHandler>
	...

08002714 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002718:	4b0e      	ldr	r3, [pc, #56]	@ (8002754 <HAL_Init+0x40>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	4a0d      	ldr	r2, [pc, #52]	@ (8002754 <HAL_Init+0x40>)
 800271e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002722:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002724:	4b0b      	ldr	r3, [pc, #44]	@ (8002754 <HAL_Init+0x40>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	4a0a      	ldr	r2, [pc, #40]	@ (8002754 <HAL_Init+0x40>)
 800272a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800272e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002730:	4b08      	ldr	r3, [pc, #32]	@ (8002754 <HAL_Init+0x40>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	4a07      	ldr	r2, [pc, #28]	@ (8002754 <HAL_Init+0x40>)
 8002736:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800273a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800273c:	2003      	movs	r0, #3
 800273e:	f001 f8c5 	bl	80038cc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002742:	2000      	movs	r0, #0
 8002744:	f000 f808 	bl	8002758 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002748:	f7ff fcf4 	bl	8002134 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800274c:	2300      	movs	r3, #0
}
 800274e:	4618      	mov	r0, r3
 8002750:	bd80      	pop	{r7, pc}
 8002752:	bf00      	nop
 8002754:	40023c00 	.word	0x40023c00

08002758 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	b082      	sub	sp, #8
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002760:	4b12      	ldr	r3, [pc, #72]	@ (80027ac <HAL_InitTick+0x54>)
 8002762:	681a      	ldr	r2, [r3, #0]
 8002764:	4b12      	ldr	r3, [pc, #72]	@ (80027b0 <HAL_InitTick+0x58>)
 8002766:	781b      	ldrb	r3, [r3, #0]
 8002768:	4619      	mov	r1, r3
 800276a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800276e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002772:	fbb2 f3f3 	udiv	r3, r2, r3
 8002776:	4618      	mov	r0, r3
 8002778:	f001 f8dd 	bl	8003936 <HAL_SYSTICK_Config>
 800277c:	4603      	mov	r3, r0
 800277e:	2b00      	cmp	r3, #0
 8002780:	d001      	beq.n	8002786 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002782:	2301      	movs	r3, #1
 8002784:	e00e      	b.n	80027a4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	2b0f      	cmp	r3, #15
 800278a:	d80a      	bhi.n	80027a2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800278c:	2200      	movs	r2, #0
 800278e:	6879      	ldr	r1, [r7, #4]
 8002790:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002794:	f001 f8a5 	bl	80038e2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002798:	4a06      	ldr	r2, [pc, #24]	@ (80027b4 <HAL_InitTick+0x5c>)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800279e:	2300      	movs	r3, #0
 80027a0:	e000      	b.n	80027a4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80027a2:	2301      	movs	r3, #1
}
 80027a4:	4618      	mov	r0, r3
 80027a6:	3708      	adds	r7, #8
 80027a8:	46bd      	mov	sp, r7
 80027aa:	bd80      	pop	{r7, pc}
 80027ac:	20000000 	.word	0x20000000
 80027b0:	20000008 	.word	0x20000008
 80027b4:	20000004 	.word	0x20000004

080027b8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80027b8:	b480      	push	{r7}
 80027ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80027bc:	4b06      	ldr	r3, [pc, #24]	@ (80027d8 <HAL_IncTick+0x20>)
 80027be:	781b      	ldrb	r3, [r3, #0]
 80027c0:	461a      	mov	r2, r3
 80027c2:	4b06      	ldr	r3, [pc, #24]	@ (80027dc <HAL_IncTick+0x24>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	4413      	add	r3, r2
 80027c8:	4a04      	ldr	r2, [pc, #16]	@ (80027dc <HAL_IncTick+0x24>)
 80027ca:	6013      	str	r3, [r2, #0]
}
 80027cc:	bf00      	nop
 80027ce:	46bd      	mov	sp, r7
 80027d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d4:	4770      	bx	lr
 80027d6:	bf00      	nop
 80027d8:	20000008 	.word	0x20000008
 80027dc:	20005444 	.word	0x20005444

080027e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80027e0:	b480      	push	{r7}
 80027e2:	af00      	add	r7, sp, #0
  return uwTick;
 80027e4:	4b03      	ldr	r3, [pc, #12]	@ (80027f4 <HAL_GetTick+0x14>)
 80027e6:	681b      	ldr	r3, [r3, #0]
}
 80027e8:	4618      	mov	r0, r3
 80027ea:	46bd      	mov	sp, r7
 80027ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f0:	4770      	bx	lr
 80027f2:	bf00      	nop
 80027f4:	20005444 	.word	0x20005444

080027f8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b084      	sub	sp, #16
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002800:	2300      	movs	r3, #0
 8002802:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2b00      	cmp	r3, #0
 8002808:	d101      	bne.n	800280e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800280a:	2301      	movs	r3, #1
 800280c:	e033      	b.n	8002876 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002812:	2b00      	cmp	r3, #0
 8002814:	d109      	bne.n	800282a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002816:	6878      	ldr	r0, [r7, #4]
 8002818:	f7ff fcb4 	bl	8002184 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2200      	movs	r2, #0
 8002820:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	2200      	movs	r2, #0
 8002826:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800282e:	f003 0310 	and.w	r3, r3, #16
 8002832:	2b00      	cmp	r3, #0
 8002834:	d118      	bne.n	8002868 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800283a:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800283e:	f023 0302 	bic.w	r3, r3, #2
 8002842:	f043 0202 	orr.w	r2, r3, #2
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 800284a:	6878      	ldr	r0, [r7, #4]
 800284c:	f000 fde6 	bl	800341c <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2200      	movs	r2, #0
 8002854:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800285a:	f023 0303 	bic.w	r3, r3, #3
 800285e:	f043 0201 	orr.w	r2, r3, #1
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	641a      	str	r2, [r3, #64]	@ 0x40
 8002866:	e001      	b.n	800286c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002868:	2301      	movs	r3, #1
 800286a:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2200      	movs	r2, #0
 8002870:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002874:	7bfb      	ldrb	r3, [r7, #15]
}
 8002876:	4618      	mov	r0, r3
 8002878:	3710      	adds	r7, #16
 800287a:	46bd      	mov	sp, r7
 800287c:	bd80      	pop	{r7, pc}
	...

08002880 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002880:	b480      	push	{r7}
 8002882:	b085      	sub	sp, #20
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002888:	2300      	movs	r3, #0
 800288a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002892:	2b01      	cmp	r3, #1
 8002894:	d101      	bne.n	800289a <HAL_ADC_Start+0x1a>
 8002896:	2302      	movs	r3, #2
 8002898:	e097      	b.n	80029ca <HAL_ADC_Start+0x14a>
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	2201      	movs	r2, #1
 800289e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	689b      	ldr	r3, [r3, #8]
 80028a8:	f003 0301 	and.w	r3, r3, #1
 80028ac:	2b01      	cmp	r3, #1
 80028ae:	d018      	beq.n	80028e2 <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	689a      	ldr	r2, [r3, #8]
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f042 0201 	orr.w	r2, r2, #1
 80028be:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80028c0:	4b45      	ldr	r3, [pc, #276]	@ (80029d8 <HAL_ADC_Start+0x158>)
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	4a45      	ldr	r2, [pc, #276]	@ (80029dc <HAL_ADC_Start+0x15c>)
 80028c6:	fba2 2303 	umull	r2, r3, r2, r3
 80028ca:	0c9a      	lsrs	r2, r3, #18
 80028cc:	4613      	mov	r3, r2
 80028ce:	005b      	lsls	r3, r3, #1
 80028d0:	4413      	add	r3, r2
 80028d2:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 80028d4:	e002      	b.n	80028dc <HAL_ADC_Start+0x5c>
    {
      counter--;
 80028d6:	68bb      	ldr	r3, [r7, #8]
 80028d8:	3b01      	subs	r3, #1
 80028da:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 80028dc:	68bb      	ldr	r3, [r7, #8]
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d1f9      	bne.n	80028d6 <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	689b      	ldr	r3, [r3, #8]
 80028e8:	f003 0301 	and.w	r3, r3, #1
 80028ec:	2b01      	cmp	r3, #1
 80028ee:	d15f      	bne.n	80029b0 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028f4:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80028f8:	f023 0301 	bic.w	r3, r3, #1
 80028fc:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	685b      	ldr	r3, [r3, #4]
 800290a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800290e:	2b00      	cmp	r3, #0
 8002910:	d007      	beq.n	8002922 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002916:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800291a:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002926:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800292a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800292e:	d106      	bne.n	800293e <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002934:	f023 0206 	bic.w	r2, r3, #6
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	645a      	str	r2, [r3, #68]	@ 0x44
 800293c:	e002      	b.n	8002944 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	2200      	movs	r2, #0
 8002942:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2200      	movs	r2, #0
 8002948:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800294c:	4b24      	ldr	r3, [pc, #144]	@ (80029e0 <HAL_ADC_Start+0x160>)
 800294e:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8002958:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	685b      	ldr	r3, [r3, #4]
 800295e:	f003 031f 	and.w	r3, r3, #31
 8002962:	2b00      	cmp	r3, #0
 8002964:	d10f      	bne.n	8002986 <HAL_ADC_Start+0x106>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	689b      	ldr	r3, [r3, #8]
 800296c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002970:	2b00      	cmp	r3, #0
 8002972:	d129      	bne.n	80029c8 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	689a      	ldr	r2, [r3, #8]
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002982:	609a      	str	r2, [r3, #8]
 8002984:	e020      	b.n	80029c8 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	4a16      	ldr	r2, [pc, #88]	@ (80029e4 <HAL_ADC_Start+0x164>)
 800298c:	4293      	cmp	r3, r2
 800298e:	d11b      	bne.n	80029c8 <HAL_ADC_Start+0x148>
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	689b      	ldr	r3, [r3, #8]
 8002996:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800299a:	2b00      	cmp	r3, #0
 800299c:	d114      	bne.n	80029c8 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	689a      	ldr	r2, [r3, #8]
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80029ac:	609a      	str	r2, [r3, #8]
 80029ae:	e00b      	b.n	80029c8 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029b4:	f043 0210 	orr.w	r2, r3, #16
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029c0:	f043 0201 	orr.w	r2, r3, #1
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 80029c8:	2300      	movs	r3, #0
}
 80029ca:	4618      	mov	r0, r3
 80029cc:	3714      	adds	r7, #20
 80029ce:	46bd      	mov	sp, r7
 80029d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d4:	4770      	bx	lr
 80029d6:	bf00      	nop
 80029d8:	20000000 	.word	0x20000000
 80029dc:	431bde83 	.word	0x431bde83
 80029e0:	40012300 	.word	0x40012300
 80029e4:	40012000 	.word	0x40012000

080029e8 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 80029e8:	b480      	push	{r7}
 80029ea:	b083      	sub	sp, #12
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80029f6:	2b01      	cmp	r3, #1
 80029f8:	d101      	bne.n	80029fe <HAL_ADC_Stop+0x16>
 80029fa:	2302      	movs	r3, #2
 80029fc:	e021      	b.n	8002a42 <HAL_ADC_Stop+0x5a>
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	2201      	movs	r2, #1
 8002a02:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	689a      	ldr	r2, [r3, #8]
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f022 0201 	bic.w	r2, r2, #1
 8002a14:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	689b      	ldr	r3, [r3, #8]
 8002a1c:	f003 0301 	and.w	r3, r3, #1
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d109      	bne.n	8002a38 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a28:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002a2c:	f023 0301 	bic.w	r3, r3, #1
 8002a30:	f043 0201 	orr.w	r2, r3, #1
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8002a40:	2300      	movs	r3, #0
}
 8002a42:	4618      	mov	r0, r3
 8002a44:	370c      	adds	r7, #12
 8002a46:	46bd      	mov	sp, r7
 8002a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4c:	4770      	bx	lr

08002a4e <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002a4e:	b580      	push	{r7, lr}
 8002a50:	b084      	sub	sp, #16
 8002a52:	af00      	add	r7, sp, #0
 8002a54:	6078      	str	r0, [r7, #4]
 8002a56:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002a58:	2300      	movs	r3, #0
 8002a5a:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	689b      	ldr	r3, [r3, #8]
 8002a62:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a66:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002a6a:	d113      	bne.n	8002a94 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	689b      	ldr	r3, [r3, #8]
 8002a72:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002a76:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002a7a:	d10b      	bne.n	8002a94 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a80:	f043 0220 	orr.w	r2, r3, #32
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002a90:	2301      	movs	r3, #1
 8002a92:	e063      	b.n	8002b5c <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8002a94:	f7ff fea4 	bl	80027e0 <HAL_GetTick>
 8002a98:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002a9a:	e021      	b.n	8002ae0 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002aa2:	d01d      	beq.n	8002ae0 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d007      	beq.n	8002aba <HAL_ADC_PollForConversion+0x6c>
 8002aaa:	f7ff fe99 	bl	80027e0 <HAL_GetTick>
 8002aae:	4602      	mov	r2, r0
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	1ad3      	subs	r3, r2, r3
 8002ab4:	683a      	ldr	r2, [r7, #0]
 8002ab6:	429a      	cmp	r2, r3
 8002ab8:	d212      	bcs.n	8002ae0 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f003 0302 	and.w	r3, r3, #2
 8002ac4:	2b02      	cmp	r3, #2
 8002ac6:	d00b      	beq.n	8002ae0 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002acc:	f043 0204 	orr.w	r2, r3, #4
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 8002adc:	2303      	movs	r3, #3
 8002ade:	e03d      	b.n	8002b5c <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f003 0302 	and.w	r3, r3, #2
 8002aea:	2b02      	cmp	r3, #2
 8002aec:	d1d6      	bne.n	8002a9c <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f06f 0212 	mvn.w	r2, #18
 8002af6:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002afc:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	689b      	ldr	r3, [r3, #8]
 8002b0a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d123      	bne.n	8002b5a <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d11f      	bne.n	8002b5a <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b20:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d006      	beq.n	8002b36 <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	689b      	ldr	r3, [r3, #8]
 8002b2e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d111      	bne.n	8002b5a <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b3a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b46:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d105      	bne.n	8002b5a <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b52:	f043 0201 	orr.w	r2, r3, #1
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 8002b5a:	2300      	movs	r3, #0
}
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	3710      	adds	r7, #16
 8002b60:	46bd      	mov	sp, r7
 8002b62:	bd80      	pop	{r7, pc}

08002b64 <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 8002b64:	b480      	push	{r7}
 8002b66:	b085      	sub	sp, #20
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002b76:	2b01      	cmp	r3, #1
 8002b78:	d101      	bne.n	8002b7e <HAL_ADC_Start_IT+0x1a>
 8002b7a:	2302      	movs	r3, #2
 8002b7c:	e0a1      	b.n	8002cc2 <HAL_ADC_Start_IT+0x15e>
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	2201      	movs	r2, #1
 8002b82:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	689b      	ldr	r3, [r3, #8]
 8002b8c:	f003 0301 	and.w	r3, r3, #1
 8002b90:	2b01      	cmp	r3, #1
 8002b92:	d018      	beq.n	8002bc6 <HAL_ADC_Start_IT+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	689a      	ldr	r2, [r3, #8]
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f042 0201 	orr.w	r2, r2, #1
 8002ba2:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002ba4:	4b4a      	ldr	r3, [pc, #296]	@ (8002cd0 <HAL_ADC_Start_IT+0x16c>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	4a4a      	ldr	r2, [pc, #296]	@ (8002cd4 <HAL_ADC_Start_IT+0x170>)
 8002baa:	fba2 2303 	umull	r2, r3, r2, r3
 8002bae:	0c9a      	lsrs	r2, r3, #18
 8002bb0:	4613      	mov	r3, r2
 8002bb2:	005b      	lsls	r3, r3, #1
 8002bb4:	4413      	add	r3, r2
 8002bb6:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8002bb8:	e002      	b.n	8002bc0 <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 8002bba:	68bb      	ldr	r3, [r7, #8]
 8002bbc:	3b01      	subs	r3, #1
 8002bbe:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8002bc0:	68bb      	ldr	r3, [r7, #8]
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d1f9      	bne.n	8002bba <HAL_ADC_Start_IT+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	689b      	ldr	r3, [r3, #8]
 8002bcc:	f003 0301 	and.w	r3, r3, #1
 8002bd0:	2b01      	cmp	r3, #1
 8002bd2:	d169      	bne.n	8002ca8 <HAL_ADC_Start_IT+0x144>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bd8:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8002bdc:	f023 0301 	bic.w	r3, r3, #1
 8002be0:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	685b      	ldr	r3, [r3, #4]
 8002bee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d007      	beq.n	8002c06 <HAL_ADC_Start_IT+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bfa:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002bfe:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c0a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002c0e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002c12:	d106      	bne.n	8002c22 <HAL_ADC_Start_IT+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c18:	f023 0206 	bic.w	r2, r3, #6
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	645a      	str	r2, [r3, #68]	@ 0x44
 8002c20:	e002      	b.n	8002c28 <HAL_ADC_Start_IT+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	2200      	movs	r2, #0
 8002c26:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002c30:	4b29      	ldr	r3, [pc, #164]	@ (8002cd8 <HAL_ADC_Start_IT+0x174>)
 8002c32:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8002c3c:	601a      	str	r2, [r3, #0]

    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	685b      	ldr	r3, [r3, #4]
 8002c44:	687a      	ldr	r2, [r7, #4]
 8002c46:	6812      	ldr	r2, [r2, #0]
 8002c48:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002c4c:	f043 0320 	orr.w	r3, r3, #32
 8002c50:	6053      	str	r3, [r2, #4]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	685b      	ldr	r3, [r3, #4]
 8002c56:	f003 031f 	and.w	r3, r3, #31
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d10f      	bne.n	8002c7e <HAL_ADC_Start_IT+0x11a>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	689b      	ldr	r3, [r3, #8]
 8002c64:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d129      	bne.n	8002cc0 <HAL_ADC_Start_IT+0x15c>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	689a      	ldr	r2, [r3, #8]
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002c7a:	609a      	str	r2, [r3, #8]
 8002c7c:	e020      	b.n	8002cc0 <HAL_ADC_Start_IT+0x15c>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	4a16      	ldr	r2, [pc, #88]	@ (8002cdc <HAL_ADC_Start_IT+0x178>)
 8002c84:	4293      	cmp	r3, r2
 8002c86:	d11b      	bne.n	8002cc0 <HAL_ADC_Start_IT+0x15c>
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	689b      	ldr	r3, [r3, #8]
 8002c8e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d114      	bne.n	8002cc0 <HAL_ADC_Start_IT+0x15c>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	689a      	ldr	r2, [r3, #8]
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002ca4:	609a      	str	r2, [r3, #8]
 8002ca6:	e00b      	b.n	8002cc0 <HAL_ADC_Start_IT+0x15c>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cac:	f043 0210 	orr.w	r2, r3, #16
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cb8:	f043 0201 	orr.w	r2, r3, #1
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8002cc0:	2300      	movs	r3, #0
}
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	3714      	adds	r7, #20
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ccc:	4770      	bx	lr
 8002cce:	bf00      	nop
 8002cd0:	20000000 	.word	0x20000000
 8002cd4:	431bde83 	.word	0x431bde83
 8002cd8:	40012300 	.word	0x40012300
 8002cdc:	40012000 	.word	0x40012000

08002ce0 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b086      	sub	sp, #24
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8002ce8:	2300      	movs	r3, #0
 8002cea:	617b      	str	r3, [r7, #20]
 8002cec:	2300      	movs	r3, #0
 8002cee:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	685b      	ldr	r3, [r3, #4]
 8002cfe:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	f003 0302 	and.w	r3, r3, #2
 8002d06:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8002d08:	68bb      	ldr	r3, [r7, #8]
 8002d0a:	f003 0320 	and.w	r3, r3, #32
 8002d0e:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 8002d10:	697b      	ldr	r3, [r7, #20]
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d049      	beq.n	8002daa <HAL_ADC_IRQHandler+0xca>
 8002d16:	693b      	ldr	r3, [r7, #16]
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d046      	beq.n	8002daa <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d20:	f003 0310 	and.w	r3, r3, #16
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d105      	bne.n	8002d34 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d2c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	689b      	ldr	r3, [r3, #8]
 8002d3a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d12b      	bne.n	8002d9a <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d127      	bne.n	8002d9a <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d50:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d006      	beq.n	8002d66 <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	689b      	ldr	r3, [r3, #8]
 8002d5e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d119      	bne.n	8002d9a <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	685a      	ldr	r2, [r3, #4]
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f022 0220 	bic.w	r2, r2, #32
 8002d74:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d7a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d86:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d105      	bne.n	8002d9a <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d92:	f043 0201 	orr.w	r2, r3, #1
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002d9a:	6878      	ldr	r0, [r7, #4]
 8002d9c:	f7fe fcc8 	bl	8001730 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f06f 0212 	mvn.w	r2, #18
 8002da8:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	f003 0304 	and.w	r3, r3, #4
 8002db0:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8002db2:	68bb      	ldr	r3, [r7, #8]
 8002db4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002db8:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 8002dba:	697b      	ldr	r3, [r7, #20]
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d057      	beq.n	8002e70 <HAL_ADC_IRQHandler+0x190>
 8002dc0:	693b      	ldr	r3, [r7, #16]
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d054      	beq.n	8002e70 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dca:	f003 0310 	and.w	r3, r3, #16
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d105      	bne.n	8002dde <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dd6:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	689b      	ldr	r3, [r3, #8]
 8002de4:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d139      	bne.n	8002e60 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002df2:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d006      	beq.n	8002e08 <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	689b      	ldr	r3, [r3, #8]
 8002e00:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d12b      	bne.n	8002e60 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	685b      	ldr	r3, [r3, #4]
 8002e0e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d124      	bne.n	8002e60 <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	689b      	ldr	r3, [r3, #8]
 8002e1c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d11d      	bne.n	8002e60 <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d119      	bne.n	8002e60 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	685a      	ldr	r2, [r3, #4]
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002e3a:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e40:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e4c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d105      	bne.n	8002e60 <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e58:	f043 0201 	orr.w	r2, r3, #1
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002e60:	6878      	ldr	r0, [r7, #4]
 8002e62:	f000 fc59 	bl	8003718 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f06f 020c 	mvn.w	r2, #12
 8002e6e:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	f003 0301 	and.w	r3, r3, #1
 8002e76:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8002e78:	68bb      	ldr	r3, [r7, #8]
 8002e7a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e7e:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 8002e80:	697b      	ldr	r3, [r7, #20]
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d017      	beq.n	8002eb6 <HAL_ADC_IRQHandler+0x1d6>
 8002e86:	693b      	ldr	r3, [r7, #16]
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d014      	beq.n	8002eb6 <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f003 0301 	and.w	r3, r3, #1
 8002e96:	2b01      	cmp	r3, #1
 8002e98:	d10d      	bne.n	8002eb6 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e9e:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002ea6:	6878      	ldr	r0, [r7, #4]
 8002ea8:	f000 f98b 	bl	80031c2 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f06f 0201 	mvn.w	r2, #1
 8002eb4:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	f003 0320 	and.w	r3, r3, #32
 8002ebc:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8002ebe:	68bb      	ldr	r3, [r7, #8]
 8002ec0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002ec4:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 8002ec6:	697b      	ldr	r3, [r7, #20]
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d015      	beq.n	8002ef8 <HAL_ADC_IRQHandler+0x218>
 8002ecc:	693b      	ldr	r3, [r7, #16]
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d012      	beq.n	8002ef8 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ed6:	f043 0202 	orr.w	r2, r3, #2
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f06f 0220 	mvn.w	r2, #32
 8002ee6:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 8002ee8:	6878      	ldr	r0, [r7, #4]
 8002eea:	f7ff f90f 	bl	800210c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f06f 0220 	mvn.w	r2, #32
 8002ef6:	601a      	str	r2, [r3, #0]
  }
}
 8002ef8:	bf00      	nop
 8002efa:	3718      	adds	r7, #24
 8002efc:	46bd      	mov	sp, r7
 8002efe:	bd80      	pop	{r7, pc}

08002f00 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b086      	sub	sp, #24
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	60f8      	str	r0, [r7, #12]
 8002f08:	60b9      	str	r1, [r7, #8]
 8002f0a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002f16:	2b01      	cmp	r3, #1
 8002f18:	d101      	bne.n	8002f1e <HAL_ADC_Start_DMA+0x1e>
 8002f1a:	2302      	movs	r3, #2
 8002f1c:	e0ce      	b.n	80030bc <HAL_ADC_Start_DMA+0x1bc>
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	2201      	movs	r2, #1
 8002f22:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	689b      	ldr	r3, [r3, #8]
 8002f2c:	f003 0301 	and.w	r3, r3, #1
 8002f30:	2b01      	cmp	r3, #1
 8002f32:	d018      	beq.n	8002f66 <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	689a      	ldr	r2, [r3, #8]
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f042 0201 	orr.w	r2, r2, #1
 8002f42:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002f44:	4b5f      	ldr	r3, [pc, #380]	@ (80030c4 <HAL_ADC_Start_DMA+0x1c4>)
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	4a5f      	ldr	r2, [pc, #380]	@ (80030c8 <HAL_ADC_Start_DMA+0x1c8>)
 8002f4a:	fba2 2303 	umull	r2, r3, r2, r3
 8002f4e:	0c9a      	lsrs	r2, r3, #18
 8002f50:	4613      	mov	r3, r2
 8002f52:	005b      	lsls	r3, r3, #1
 8002f54:	4413      	add	r3, r2
 8002f56:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8002f58:	e002      	b.n	8002f60 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8002f5a:	693b      	ldr	r3, [r7, #16]
 8002f5c:	3b01      	subs	r3, #1
 8002f5e:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8002f60:	693b      	ldr	r3, [r7, #16]
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d1f9      	bne.n	8002f5a <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	689b      	ldr	r3, [r3, #8]
 8002f6c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f70:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002f74:	d107      	bne.n	8002f86 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	689a      	ldr	r2, [r3, #8]
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002f84:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	689b      	ldr	r3, [r3, #8]
 8002f8c:	f003 0301 	and.w	r3, r3, #1
 8002f90:	2b01      	cmp	r3, #1
 8002f92:	f040 8086 	bne.w	80030a2 <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f9a:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8002f9e:	f023 0301 	bic.w	r3, r3, #1
 8002fa2:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	685b      	ldr	r3, [r3, #4]
 8002fb0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d007      	beq.n	8002fc8 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fbc:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002fc0:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fcc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002fd0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002fd4:	d106      	bne.n	8002fe4 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fda:	f023 0206 	bic.w	r2, r3, #6
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	645a      	str	r2, [r3, #68]	@ 0x44
 8002fe2:	e002      	b.n	8002fea <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	2200      	movs	r2, #0
 8002fee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002ff2:	4b36      	ldr	r3, [pc, #216]	@ (80030cc <HAL_ADC_Start_DMA+0x1cc>)
 8002ff4:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ffa:	4a35      	ldr	r2, [pc, #212]	@ (80030d0 <HAL_ADC_Start_DMA+0x1d0>)
 8002ffc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003002:	4a34      	ldr	r2, [pc, #208]	@ (80030d4 <HAL_ADC_Start_DMA+0x1d4>)
 8003004:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800300a:	4a33      	ldr	r2, [pc, #204]	@ (80030d8 <HAL_ADC_Start_DMA+0x1d8>)
 800300c:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8003016:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	685a      	ldr	r2, [r3, #4]
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8003026:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	689a      	ldr	r2, [r3, #8]
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003036:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	334c      	adds	r3, #76	@ 0x4c
 8003042:	4619      	mov	r1, r3
 8003044:	68ba      	ldr	r2, [r7, #8]
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	f000 fd30 	bl	8003aac <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800304c:	697b      	ldr	r3, [r7, #20]
 800304e:	685b      	ldr	r3, [r3, #4]
 8003050:	f003 031f 	and.w	r3, r3, #31
 8003054:	2b00      	cmp	r3, #0
 8003056:	d10f      	bne.n	8003078 <HAL_ADC_Start_DMA+0x178>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	689b      	ldr	r3, [r3, #8]
 800305e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003062:	2b00      	cmp	r3, #0
 8003064:	d129      	bne.n	80030ba <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	689a      	ldr	r2, [r3, #8]
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8003074:	609a      	str	r2, [r3, #8]
 8003076:	e020      	b.n	80030ba <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	4a17      	ldr	r2, [pc, #92]	@ (80030dc <HAL_ADC_Start_DMA+0x1dc>)
 800307e:	4293      	cmp	r3, r2
 8003080:	d11b      	bne.n	80030ba <HAL_ADC_Start_DMA+0x1ba>
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	689b      	ldr	r3, [r3, #8]
 8003088:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800308c:	2b00      	cmp	r3, #0
 800308e:	d114      	bne.n	80030ba <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	689a      	ldr	r2, [r3, #8]
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800309e:	609a      	str	r2, [r3, #8]
 80030a0:	e00b      	b.n	80030ba <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030a6:	f043 0210 	orr.w	r2, r3, #16
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030b2:	f043 0201 	orr.w	r2, r3, #1
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 80030ba:	2300      	movs	r3, #0
}
 80030bc:	4618      	mov	r0, r3
 80030be:	3718      	adds	r7, #24
 80030c0:	46bd      	mov	sp, r7
 80030c2:	bd80      	pop	{r7, pc}
 80030c4:	20000000 	.word	0x20000000
 80030c8:	431bde83 	.word	0x431bde83
 80030cc:	40012300 	.word	0x40012300
 80030d0:	08003615 	.word	0x08003615
 80030d4:	080036cf 	.word	0x080036cf
 80030d8:	080036eb 	.word	0x080036eb
 80030dc:	40012000 	.word	0x40012000

080030e0 <HAL_ADC_Stop_DMA>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b084      	sub	sp, #16
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80030e8:	2300      	movs	r3, #0
 80030ea:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80030f2:	2b01      	cmp	r3, #1
 80030f4:	d101      	bne.n	80030fa <HAL_ADC_Stop_DMA+0x1a>
 80030f6:	2302      	movs	r3, #2
 80030f8:	e048      	b.n	800318c <HAL_ADC_Stop_DMA+0xac>
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	2201      	movs	r2, #1
 80030fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	689a      	ldr	r2, [r3, #8]
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f022 0201 	bic.w	r2, r2, #1
 8003110:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	689b      	ldr	r3, [r3, #8]
 8003118:	f003 0301 	and.w	r3, r3, #1
 800311c:	2b00      	cmp	r3, #0
 800311e:	d130      	bne.n	8003182 <HAL_ADC_Stop_DMA+0xa2>
  {
    /* Disable the selected ADC DMA mode */
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	689a      	ldr	r2, [r3, #8]
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800312e:	609a      	str	r2, [r3, #8]

    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003134:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003138:	b2db      	uxtb	r3, r3
 800313a:	2b02      	cmp	r3, #2
 800313c:	d10f      	bne.n	800315e <HAL_ADC_Stop_DMA+0x7e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003142:	4618      	mov	r0, r3
 8003144:	f000 fd0a 	bl	8003b5c <HAL_DMA_Abort>
 8003148:	4603      	mov	r3, r0
 800314a:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 800314c:	7bfb      	ldrb	r3, [r7, #15]
 800314e:	2b00      	cmp	r3, #0
 8003150:	d005      	beq.n	800315e <HAL_ADC_Stop_DMA+0x7e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003156:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	641a      	str	r2, [r3, #64]	@ 0x40
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	685a      	ldr	r2, [r3, #4]
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f022 6280 	bic.w	r2, r2, #67108864	@ 0x4000000
 800316c:	605a      	str	r2, [r3, #4]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003172:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8003176:	f023 0301 	bic.w	r3, r3, #1
 800317a:	f043 0201 	orr.w	r2, r3, #1
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	2200      	movs	r2, #0
 8003186:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 800318a:	7bfb      	ldrb	r3, [r7, #15]
}
 800318c:	4618      	mov	r0, r3
 800318e:	3710      	adds	r7, #16
 8003190:	46bd      	mov	sp, r7
 8003192:	bd80      	pop	{r7, pc}

08003194 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8003194:	b480      	push	{r7}
 8003196:	b083      	sub	sp, #12
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 80031a2:	4618      	mov	r0, r3
 80031a4:	370c      	adds	r7, #12
 80031a6:	46bd      	mov	sp, r7
 80031a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ac:	4770      	bx	lr

080031ae <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80031ae:	b480      	push	{r7}
 80031b0:	b083      	sub	sp, #12
 80031b2:	af00      	add	r7, sp, #0
 80031b4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80031b6:	bf00      	nop
 80031b8:	370c      	adds	r7, #12
 80031ba:	46bd      	mov	sp, r7
 80031bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c0:	4770      	bx	lr

080031c2 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80031c2:	b480      	push	{r7}
 80031c4:	b083      	sub	sp, #12
 80031c6:	af00      	add	r7, sp, #0
 80031c8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 80031ca:	bf00      	nop
 80031cc:	370c      	adds	r7, #12
 80031ce:	46bd      	mov	sp, r7
 80031d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d4:	4770      	bx	lr
	...

080031d8 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80031d8:	b480      	push	{r7}
 80031da:	b085      	sub	sp, #20
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
 80031e0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80031e2:	2300      	movs	r3, #0
 80031e4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80031ec:	2b01      	cmp	r3, #1
 80031ee:	d101      	bne.n	80031f4 <HAL_ADC_ConfigChannel+0x1c>
 80031f0:	2302      	movs	r3, #2
 80031f2:	e105      	b.n	8003400 <HAL_ADC_ConfigChannel+0x228>
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2201      	movs	r2, #1
 80031f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80031fc:	683b      	ldr	r3, [r7, #0]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	2b09      	cmp	r3, #9
 8003202:	d925      	bls.n	8003250 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	68d9      	ldr	r1, [r3, #12]
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	b29b      	uxth	r3, r3
 8003210:	461a      	mov	r2, r3
 8003212:	4613      	mov	r3, r2
 8003214:	005b      	lsls	r3, r3, #1
 8003216:	4413      	add	r3, r2
 8003218:	3b1e      	subs	r3, #30
 800321a:	2207      	movs	r2, #7
 800321c:	fa02 f303 	lsl.w	r3, r2, r3
 8003220:	43da      	mvns	r2, r3
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	400a      	ands	r2, r1
 8003228:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	68d9      	ldr	r1, [r3, #12]
 8003230:	683b      	ldr	r3, [r7, #0]
 8003232:	689a      	ldr	r2, [r3, #8]
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	b29b      	uxth	r3, r3
 800323a:	4618      	mov	r0, r3
 800323c:	4603      	mov	r3, r0
 800323e:	005b      	lsls	r3, r3, #1
 8003240:	4403      	add	r3, r0
 8003242:	3b1e      	subs	r3, #30
 8003244:	409a      	lsls	r2, r3
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	430a      	orrs	r2, r1
 800324c:	60da      	str	r2, [r3, #12]
 800324e:	e022      	b.n	8003296 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	6919      	ldr	r1, [r3, #16]
 8003256:	683b      	ldr	r3, [r7, #0]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	b29b      	uxth	r3, r3
 800325c:	461a      	mov	r2, r3
 800325e:	4613      	mov	r3, r2
 8003260:	005b      	lsls	r3, r3, #1
 8003262:	4413      	add	r3, r2
 8003264:	2207      	movs	r2, #7
 8003266:	fa02 f303 	lsl.w	r3, r2, r3
 800326a:	43da      	mvns	r2, r3
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	400a      	ands	r2, r1
 8003272:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	6919      	ldr	r1, [r3, #16]
 800327a:	683b      	ldr	r3, [r7, #0]
 800327c:	689a      	ldr	r2, [r3, #8]
 800327e:	683b      	ldr	r3, [r7, #0]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	b29b      	uxth	r3, r3
 8003284:	4618      	mov	r0, r3
 8003286:	4603      	mov	r3, r0
 8003288:	005b      	lsls	r3, r3, #1
 800328a:	4403      	add	r3, r0
 800328c:	409a      	lsls	r2, r3
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	430a      	orrs	r2, r1
 8003294:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003296:	683b      	ldr	r3, [r7, #0]
 8003298:	685b      	ldr	r3, [r3, #4]
 800329a:	2b06      	cmp	r3, #6
 800329c:	d824      	bhi.n	80032e8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	685a      	ldr	r2, [r3, #4]
 80032a8:	4613      	mov	r3, r2
 80032aa:	009b      	lsls	r3, r3, #2
 80032ac:	4413      	add	r3, r2
 80032ae:	3b05      	subs	r3, #5
 80032b0:	221f      	movs	r2, #31
 80032b2:	fa02 f303 	lsl.w	r3, r2, r3
 80032b6:	43da      	mvns	r2, r3
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	400a      	ands	r2, r1
 80032be:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	b29b      	uxth	r3, r3
 80032cc:	4618      	mov	r0, r3
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	685a      	ldr	r2, [r3, #4]
 80032d2:	4613      	mov	r3, r2
 80032d4:	009b      	lsls	r3, r3, #2
 80032d6:	4413      	add	r3, r2
 80032d8:	3b05      	subs	r3, #5
 80032da:	fa00 f203 	lsl.w	r2, r0, r3
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	430a      	orrs	r2, r1
 80032e4:	635a      	str	r2, [r3, #52]	@ 0x34
 80032e6:	e04c      	b.n	8003382 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	685b      	ldr	r3, [r3, #4]
 80032ec:	2b0c      	cmp	r3, #12
 80032ee:	d824      	bhi.n	800333a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	685a      	ldr	r2, [r3, #4]
 80032fa:	4613      	mov	r3, r2
 80032fc:	009b      	lsls	r3, r3, #2
 80032fe:	4413      	add	r3, r2
 8003300:	3b23      	subs	r3, #35	@ 0x23
 8003302:	221f      	movs	r2, #31
 8003304:	fa02 f303 	lsl.w	r3, r2, r3
 8003308:	43da      	mvns	r2, r3
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	400a      	ands	r2, r1
 8003310:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	b29b      	uxth	r3, r3
 800331e:	4618      	mov	r0, r3
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	685a      	ldr	r2, [r3, #4]
 8003324:	4613      	mov	r3, r2
 8003326:	009b      	lsls	r3, r3, #2
 8003328:	4413      	add	r3, r2
 800332a:	3b23      	subs	r3, #35	@ 0x23
 800332c:	fa00 f203 	lsl.w	r2, r0, r3
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	430a      	orrs	r2, r1
 8003336:	631a      	str	r2, [r3, #48]	@ 0x30
 8003338:	e023      	b.n	8003382 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	685a      	ldr	r2, [r3, #4]
 8003344:	4613      	mov	r3, r2
 8003346:	009b      	lsls	r3, r3, #2
 8003348:	4413      	add	r3, r2
 800334a:	3b41      	subs	r3, #65	@ 0x41
 800334c:	221f      	movs	r2, #31
 800334e:	fa02 f303 	lsl.w	r3, r2, r3
 8003352:	43da      	mvns	r2, r3
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	400a      	ands	r2, r1
 800335a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	b29b      	uxth	r3, r3
 8003368:	4618      	mov	r0, r3
 800336a:	683b      	ldr	r3, [r7, #0]
 800336c:	685a      	ldr	r2, [r3, #4]
 800336e:	4613      	mov	r3, r2
 8003370:	009b      	lsls	r3, r3, #2
 8003372:	4413      	add	r3, r2
 8003374:	3b41      	subs	r3, #65	@ 0x41
 8003376:	fa00 f203 	lsl.w	r2, r0, r3
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	430a      	orrs	r2, r1
 8003380:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003382:	4b22      	ldr	r3, [pc, #136]	@ (800340c <HAL_ADC_ConfigChannel+0x234>)
 8003384:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	4a21      	ldr	r2, [pc, #132]	@ (8003410 <HAL_ADC_ConfigChannel+0x238>)
 800338c:	4293      	cmp	r3, r2
 800338e:	d109      	bne.n	80033a4 <HAL_ADC_ConfigChannel+0x1cc>
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	2b12      	cmp	r3, #18
 8003396:	d105      	bne.n	80033a4 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	685b      	ldr	r3, [r3, #4]
 800339c:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	4a19      	ldr	r2, [pc, #100]	@ (8003410 <HAL_ADC_ConfigChannel+0x238>)
 80033aa:	4293      	cmp	r3, r2
 80033ac:	d123      	bne.n	80033f6 <HAL_ADC_ConfigChannel+0x21e>
 80033ae:	683b      	ldr	r3, [r7, #0]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	2b10      	cmp	r3, #16
 80033b4:	d003      	beq.n	80033be <HAL_ADC_ConfigChannel+0x1e6>
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	2b11      	cmp	r3, #17
 80033bc:	d11b      	bne.n	80033f6 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	685b      	ldr	r3, [r3, #4]
 80033c2:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	2b10      	cmp	r3, #16
 80033d0:	d111      	bne.n	80033f6 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80033d2:	4b10      	ldr	r3, [pc, #64]	@ (8003414 <HAL_ADC_ConfigChannel+0x23c>)
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	4a10      	ldr	r2, [pc, #64]	@ (8003418 <HAL_ADC_ConfigChannel+0x240>)
 80033d8:	fba2 2303 	umull	r2, r3, r2, r3
 80033dc:	0c9a      	lsrs	r2, r3, #18
 80033de:	4613      	mov	r3, r2
 80033e0:	009b      	lsls	r3, r3, #2
 80033e2:	4413      	add	r3, r2
 80033e4:	005b      	lsls	r3, r3, #1
 80033e6:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80033e8:	e002      	b.n	80033f0 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80033ea:	68bb      	ldr	r3, [r7, #8]
 80033ec:	3b01      	subs	r3, #1
 80033ee:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80033f0:	68bb      	ldr	r3, [r7, #8]
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d1f9      	bne.n	80033ea <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	2200      	movs	r2, #0
 80033fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80033fe:	2300      	movs	r3, #0
}
 8003400:	4618      	mov	r0, r3
 8003402:	3714      	adds	r7, #20
 8003404:	46bd      	mov	sp, r7
 8003406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340a:	4770      	bx	lr
 800340c:	40012300 	.word	0x40012300
 8003410:	40012000 	.word	0x40012000
 8003414:	20000000 	.word	0x20000000
 8003418:	431bde83 	.word	0x431bde83

0800341c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 800341c:	b480      	push	{r7}
 800341e:	b085      	sub	sp, #20
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003424:	4b79      	ldr	r3, [pc, #484]	@ (800360c <ADC_Init+0x1f0>)
 8003426:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	685b      	ldr	r3, [r3, #4]
 800342c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	685a      	ldr	r2, [r3, #4]
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	685b      	ldr	r3, [r3, #4]
 800343c:	431a      	orrs	r2, r3
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	685a      	ldr	r2, [r3, #4]
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003450:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	6859      	ldr	r1, [r3, #4]
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	691b      	ldr	r3, [r3, #16]
 800345c:	021a      	lsls	r2, r3, #8
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	430a      	orrs	r2, r1
 8003464:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	685a      	ldr	r2, [r3, #4]
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8003474:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	6859      	ldr	r1, [r3, #4]
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	689a      	ldr	r2, [r3, #8]
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	430a      	orrs	r2, r1
 8003486:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	689a      	ldr	r2, [r3, #8]
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003496:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	6899      	ldr	r1, [r3, #8]
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	68da      	ldr	r2, [r3, #12]
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	430a      	orrs	r2, r1
 80034a8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034ae:	4a58      	ldr	r2, [pc, #352]	@ (8003610 <ADC_Init+0x1f4>)
 80034b0:	4293      	cmp	r3, r2
 80034b2:	d022      	beq.n	80034fa <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	689a      	ldr	r2, [r3, #8]
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80034c2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	6899      	ldr	r1, [r3, #8]
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	430a      	orrs	r2, r1
 80034d4:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	689a      	ldr	r2, [r3, #8]
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80034e4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	6899      	ldr	r1, [r3, #8]
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	430a      	orrs	r2, r1
 80034f6:	609a      	str	r2, [r3, #8]
 80034f8:	e00f      	b.n	800351a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	689a      	ldr	r2, [r3, #8]
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003508:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	689a      	ldr	r2, [r3, #8]
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003518:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	689a      	ldr	r2, [r3, #8]
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f022 0202 	bic.w	r2, r2, #2
 8003528:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	6899      	ldr	r1, [r3, #8]
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	7e1b      	ldrb	r3, [r3, #24]
 8003534:	005a      	lsls	r2, r3, #1
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	430a      	orrs	r2, r1
 800353c:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003544:	2b00      	cmp	r3, #0
 8003546:	d01b      	beq.n	8003580 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	685a      	ldr	r2, [r3, #4]
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003556:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	685a      	ldr	r2, [r3, #4]
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8003566:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	6859      	ldr	r1, [r3, #4]
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003572:	3b01      	subs	r3, #1
 8003574:	035a      	lsls	r2, r3, #13
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	430a      	orrs	r2, r1
 800357c:	605a      	str	r2, [r3, #4]
 800357e:	e007      	b.n	8003590 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	685a      	ldr	r2, [r3, #4]
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800358e:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800359e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	69db      	ldr	r3, [r3, #28]
 80035aa:	3b01      	subs	r3, #1
 80035ac:	051a      	lsls	r2, r3, #20
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	430a      	orrs	r2, r1
 80035b4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	689a      	ldr	r2, [r3, #8]
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80035c4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	6899      	ldr	r1, [r3, #8]
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80035d2:	025a      	lsls	r2, r3, #9
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	430a      	orrs	r2, r1
 80035da:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	689a      	ldr	r2, [r3, #8]
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80035ea:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	6899      	ldr	r1, [r3, #8]
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	695b      	ldr	r3, [r3, #20]
 80035f6:	029a      	lsls	r2, r3, #10
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	430a      	orrs	r2, r1
 80035fe:	609a      	str	r2, [r3, #8]
}
 8003600:	bf00      	nop
 8003602:	3714      	adds	r7, #20
 8003604:	46bd      	mov	sp, r7
 8003606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360a:	4770      	bx	lr
 800360c:	40012300 	.word	0x40012300
 8003610:	0f000001 	.word	0x0f000001

08003614 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003614:	b580      	push	{r7, lr}
 8003616:	b084      	sub	sp, #16
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003620:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003626:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800362a:	2b00      	cmp	r3, #0
 800362c:	d13c      	bne.n	80036a8 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003632:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	689b      	ldr	r3, [r3, #8]
 8003640:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003644:	2b00      	cmp	r3, #0
 8003646:	d12b      	bne.n	80036a0 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800364c:	2b00      	cmp	r3, #0
 800364e:	d127      	bne.n	80036a0 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003656:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800365a:	2b00      	cmp	r3, #0
 800365c:	d006      	beq.n	800366c <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	689b      	ldr	r3, [r3, #8]
 8003664:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003668:	2b00      	cmp	r3, #0
 800366a:	d119      	bne.n	80036a0 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	685a      	ldr	r2, [r3, #4]
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f022 0220 	bic.w	r2, r2, #32
 800367a:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003680:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800368c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003690:	2b00      	cmp	r3, #0
 8003692:	d105      	bne.n	80036a0 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003698:	f043 0201 	orr.w	r2, r3, #1
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80036a0:	68f8      	ldr	r0, [r7, #12]
 80036a2:	f7fe f845 	bl	8001730 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80036a6:	e00e      	b.n	80036c6 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036ac:	f003 0310 	and.w	r3, r3, #16
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d003      	beq.n	80036bc <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80036b4:	68f8      	ldr	r0, [r7, #12]
 80036b6:	f7fe fd29 	bl	800210c <HAL_ADC_ErrorCallback>
}
 80036ba:	e004      	b.n	80036c6 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80036c2:	6878      	ldr	r0, [r7, #4]
 80036c4:	4798      	blx	r3
}
 80036c6:	bf00      	nop
 80036c8:	3710      	adds	r7, #16
 80036ca:	46bd      	mov	sp, r7
 80036cc:	bd80      	pop	{r7, pc}

080036ce <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80036ce:	b580      	push	{r7, lr}
 80036d0:	b084      	sub	sp, #16
 80036d2:	af00      	add	r7, sp, #0
 80036d4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036da:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80036dc:	68f8      	ldr	r0, [r7, #12]
 80036de:	f7ff fd66 	bl	80031ae <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80036e2:	bf00      	nop
 80036e4:	3710      	adds	r7, #16
 80036e6:	46bd      	mov	sp, r7
 80036e8:	bd80      	pop	{r7, pc}

080036ea <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80036ea:	b580      	push	{r7, lr}
 80036ec:	b084      	sub	sp, #16
 80036ee:	af00      	add	r7, sp, #0
 80036f0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036f6:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	2240      	movs	r2, #64	@ 0x40
 80036fc:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003702:	f043 0204 	orr.w	r2, r3, #4
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800370a:	68f8      	ldr	r0, [r7, #12]
 800370c:	f7fe fcfe 	bl	800210c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003710:	bf00      	nop
 8003712:	3710      	adds	r7, #16
 8003714:	46bd      	mov	sp, r7
 8003716:	bd80      	pop	{r7, pc}

08003718 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003718:	b480      	push	{r7}
 800371a:	b083      	sub	sp, #12
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8003720:	bf00      	nop
 8003722:	370c      	adds	r7, #12
 8003724:	46bd      	mov	sp, r7
 8003726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372a:	4770      	bx	lr

0800372c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800372c:	b480      	push	{r7}
 800372e:	b085      	sub	sp, #20
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	f003 0307 	and.w	r3, r3, #7
 800373a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800373c:	4b0c      	ldr	r3, [pc, #48]	@ (8003770 <__NVIC_SetPriorityGrouping+0x44>)
 800373e:	68db      	ldr	r3, [r3, #12]
 8003740:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003742:	68ba      	ldr	r2, [r7, #8]
 8003744:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003748:	4013      	ands	r3, r2
 800374a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003750:	68bb      	ldr	r3, [r7, #8]
 8003752:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003754:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003758:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800375c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800375e:	4a04      	ldr	r2, [pc, #16]	@ (8003770 <__NVIC_SetPriorityGrouping+0x44>)
 8003760:	68bb      	ldr	r3, [r7, #8]
 8003762:	60d3      	str	r3, [r2, #12]
}
 8003764:	bf00      	nop
 8003766:	3714      	adds	r7, #20
 8003768:	46bd      	mov	sp, r7
 800376a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376e:	4770      	bx	lr
 8003770:	e000ed00 	.word	0xe000ed00

08003774 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003774:	b480      	push	{r7}
 8003776:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003778:	4b04      	ldr	r3, [pc, #16]	@ (800378c <__NVIC_GetPriorityGrouping+0x18>)
 800377a:	68db      	ldr	r3, [r3, #12]
 800377c:	0a1b      	lsrs	r3, r3, #8
 800377e:	f003 0307 	and.w	r3, r3, #7
}
 8003782:	4618      	mov	r0, r3
 8003784:	46bd      	mov	sp, r7
 8003786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378a:	4770      	bx	lr
 800378c:	e000ed00 	.word	0xe000ed00

08003790 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003790:	b480      	push	{r7}
 8003792:	b083      	sub	sp, #12
 8003794:	af00      	add	r7, sp, #0
 8003796:	4603      	mov	r3, r0
 8003798:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800379a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800379e:	2b00      	cmp	r3, #0
 80037a0:	db0b      	blt.n	80037ba <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80037a2:	79fb      	ldrb	r3, [r7, #7]
 80037a4:	f003 021f 	and.w	r2, r3, #31
 80037a8:	4907      	ldr	r1, [pc, #28]	@ (80037c8 <__NVIC_EnableIRQ+0x38>)
 80037aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037ae:	095b      	lsrs	r3, r3, #5
 80037b0:	2001      	movs	r0, #1
 80037b2:	fa00 f202 	lsl.w	r2, r0, r2
 80037b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80037ba:	bf00      	nop
 80037bc:	370c      	adds	r7, #12
 80037be:	46bd      	mov	sp, r7
 80037c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c4:	4770      	bx	lr
 80037c6:	bf00      	nop
 80037c8:	e000e100 	.word	0xe000e100

080037cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80037cc:	b480      	push	{r7}
 80037ce:	b083      	sub	sp, #12
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	4603      	mov	r3, r0
 80037d4:	6039      	str	r1, [r7, #0]
 80037d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80037d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037dc:	2b00      	cmp	r3, #0
 80037de:	db0a      	blt.n	80037f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	b2da      	uxtb	r2, r3
 80037e4:	490c      	ldr	r1, [pc, #48]	@ (8003818 <__NVIC_SetPriority+0x4c>)
 80037e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037ea:	0112      	lsls	r2, r2, #4
 80037ec:	b2d2      	uxtb	r2, r2
 80037ee:	440b      	add	r3, r1
 80037f0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80037f4:	e00a      	b.n	800380c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037f6:	683b      	ldr	r3, [r7, #0]
 80037f8:	b2da      	uxtb	r2, r3
 80037fa:	4908      	ldr	r1, [pc, #32]	@ (800381c <__NVIC_SetPriority+0x50>)
 80037fc:	79fb      	ldrb	r3, [r7, #7]
 80037fe:	f003 030f 	and.w	r3, r3, #15
 8003802:	3b04      	subs	r3, #4
 8003804:	0112      	lsls	r2, r2, #4
 8003806:	b2d2      	uxtb	r2, r2
 8003808:	440b      	add	r3, r1
 800380a:	761a      	strb	r2, [r3, #24]
}
 800380c:	bf00      	nop
 800380e:	370c      	adds	r7, #12
 8003810:	46bd      	mov	sp, r7
 8003812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003816:	4770      	bx	lr
 8003818:	e000e100 	.word	0xe000e100
 800381c:	e000ed00 	.word	0xe000ed00

08003820 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003820:	b480      	push	{r7}
 8003822:	b089      	sub	sp, #36	@ 0x24
 8003824:	af00      	add	r7, sp, #0
 8003826:	60f8      	str	r0, [r7, #12]
 8003828:	60b9      	str	r1, [r7, #8]
 800382a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	f003 0307 	and.w	r3, r3, #7
 8003832:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003834:	69fb      	ldr	r3, [r7, #28]
 8003836:	f1c3 0307 	rsb	r3, r3, #7
 800383a:	2b04      	cmp	r3, #4
 800383c:	bf28      	it	cs
 800383e:	2304      	movcs	r3, #4
 8003840:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003842:	69fb      	ldr	r3, [r7, #28]
 8003844:	3304      	adds	r3, #4
 8003846:	2b06      	cmp	r3, #6
 8003848:	d902      	bls.n	8003850 <NVIC_EncodePriority+0x30>
 800384a:	69fb      	ldr	r3, [r7, #28]
 800384c:	3b03      	subs	r3, #3
 800384e:	e000      	b.n	8003852 <NVIC_EncodePriority+0x32>
 8003850:	2300      	movs	r3, #0
 8003852:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003854:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003858:	69bb      	ldr	r3, [r7, #24]
 800385a:	fa02 f303 	lsl.w	r3, r2, r3
 800385e:	43da      	mvns	r2, r3
 8003860:	68bb      	ldr	r3, [r7, #8]
 8003862:	401a      	ands	r2, r3
 8003864:	697b      	ldr	r3, [r7, #20]
 8003866:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003868:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800386c:	697b      	ldr	r3, [r7, #20]
 800386e:	fa01 f303 	lsl.w	r3, r1, r3
 8003872:	43d9      	mvns	r1, r3
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003878:	4313      	orrs	r3, r2
         );
}
 800387a:	4618      	mov	r0, r3
 800387c:	3724      	adds	r7, #36	@ 0x24
 800387e:	46bd      	mov	sp, r7
 8003880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003884:	4770      	bx	lr
	...

08003888 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003888:	b580      	push	{r7, lr}
 800388a:	b082      	sub	sp, #8
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	3b01      	subs	r3, #1
 8003894:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003898:	d301      	bcc.n	800389e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800389a:	2301      	movs	r3, #1
 800389c:	e00f      	b.n	80038be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800389e:	4a0a      	ldr	r2, [pc, #40]	@ (80038c8 <SysTick_Config+0x40>)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	3b01      	subs	r3, #1
 80038a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80038a6:	210f      	movs	r1, #15
 80038a8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80038ac:	f7ff ff8e 	bl	80037cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80038b0:	4b05      	ldr	r3, [pc, #20]	@ (80038c8 <SysTick_Config+0x40>)
 80038b2:	2200      	movs	r2, #0
 80038b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80038b6:	4b04      	ldr	r3, [pc, #16]	@ (80038c8 <SysTick_Config+0x40>)
 80038b8:	2207      	movs	r2, #7
 80038ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80038bc:	2300      	movs	r3, #0
}
 80038be:	4618      	mov	r0, r3
 80038c0:	3708      	adds	r7, #8
 80038c2:	46bd      	mov	sp, r7
 80038c4:	bd80      	pop	{r7, pc}
 80038c6:	bf00      	nop
 80038c8:	e000e010 	.word	0xe000e010

080038cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b082      	sub	sp, #8
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80038d4:	6878      	ldr	r0, [r7, #4]
 80038d6:	f7ff ff29 	bl	800372c <__NVIC_SetPriorityGrouping>
}
 80038da:	bf00      	nop
 80038dc:	3708      	adds	r7, #8
 80038de:	46bd      	mov	sp, r7
 80038e0:	bd80      	pop	{r7, pc}

080038e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80038e2:	b580      	push	{r7, lr}
 80038e4:	b086      	sub	sp, #24
 80038e6:	af00      	add	r7, sp, #0
 80038e8:	4603      	mov	r3, r0
 80038ea:	60b9      	str	r1, [r7, #8]
 80038ec:	607a      	str	r2, [r7, #4]
 80038ee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80038f0:	2300      	movs	r3, #0
 80038f2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80038f4:	f7ff ff3e 	bl	8003774 <__NVIC_GetPriorityGrouping>
 80038f8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80038fa:	687a      	ldr	r2, [r7, #4]
 80038fc:	68b9      	ldr	r1, [r7, #8]
 80038fe:	6978      	ldr	r0, [r7, #20]
 8003900:	f7ff ff8e 	bl	8003820 <NVIC_EncodePriority>
 8003904:	4602      	mov	r2, r0
 8003906:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800390a:	4611      	mov	r1, r2
 800390c:	4618      	mov	r0, r3
 800390e:	f7ff ff5d 	bl	80037cc <__NVIC_SetPriority>
}
 8003912:	bf00      	nop
 8003914:	3718      	adds	r7, #24
 8003916:	46bd      	mov	sp, r7
 8003918:	bd80      	pop	{r7, pc}

0800391a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800391a:	b580      	push	{r7, lr}
 800391c:	b082      	sub	sp, #8
 800391e:	af00      	add	r7, sp, #0
 8003920:	4603      	mov	r3, r0
 8003922:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003924:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003928:	4618      	mov	r0, r3
 800392a:	f7ff ff31 	bl	8003790 <__NVIC_EnableIRQ>
}
 800392e:	bf00      	nop
 8003930:	3708      	adds	r7, #8
 8003932:	46bd      	mov	sp, r7
 8003934:	bd80      	pop	{r7, pc}

08003936 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003936:	b580      	push	{r7, lr}
 8003938:	b082      	sub	sp, #8
 800393a:	af00      	add	r7, sp, #0
 800393c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800393e:	6878      	ldr	r0, [r7, #4]
 8003940:	f7ff ffa2 	bl	8003888 <SysTick_Config>
 8003944:	4603      	mov	r3, r0
}
 8003946:	4618      	mov	r0, r3
 8003948:	3708      	adds	r7, #8
 800394a:	46bd      	mov	sp, r7
 800394c:	bd80      	pop	{r7, pc}
	...

08003950 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003950:	b580      	push	{r7, lr}
 8003952:	b086      	sub	sp, #24
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003958:	2300      	movs	r3, #0
 800395a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800395c:	f7fe ff40 	bl	80027e0 <HAL_GetTick>
 8003960:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	2b00      	cmp	r3, #0
 8003966:	d101      	bne.n	800396c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003968:	2301      	movs	r3, #1
 800396a:	e099      	b.n	8003aa0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2202      	movs	r2, #2
 8003970:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2200      	movs	r2, #0
 8003978:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	681a      	ldr	r2, [r3, #0]
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f022 0201 	bic.w	r2, r2, #1
 800398a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800398c:	e00f      	b.n	80039ae <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800398e:	f7fe ff27 	bl	80027e0 <HAL_GetTick>
 8003992:	4602      	mov	r2, r0
 8003994:	693b      	ldr	r3, [r7, #16]
 8003996:	1ad3      	subs	r3, r2, r3
 8003998:	2b05      	cmp	r3, #5
 800399a:	d908      	bls.n	80039ae <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2220      	movs	r2, #32
 80039a0:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	2203      	movs	r2, #3
 80039a6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80039aa:	2303      	movs	r3, #3
 80039ac:	e078      	b.n	8003aa0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f003 0301 	and.w	r3, r3, #1
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d1e8      	bne.n	800398e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80039c4:	697a      	ldr	r2, [r7, #20]
 80039c6:	4b38      	ldr	r3, [pc, #224]	@ (8003aa8 <HAL_DMA_Init+0x158>)
 80039c8:	4013      	ands	r3, r2
 80039ca:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	685a      	ldr	r2, [r3, #4]
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	689b      	ldr	r3, [r3, #8]
 80039d4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80039da:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	691b      	ldr	r3, [r3, #16]
 80039e0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80039e6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	699b      	ldr	r3, [r3, #24]
 80039ec:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80039f2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6a1b      	ldr	r3, [r3, #32]
 80039f8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80039fa:	697a      	ldr	r2, [r7, #20]
 80039fc:	4313      	orrs	r3, r2
 80039fe:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a04:	2b04      	cmp	r3, #4
 8003a06:	d107      	bne.n	8003a18 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a10:	4313      	orrs	r3, r2
 8003a12:	697a      	ldr	r2, [r7, #20]
 8003a14:	4313      	orrs	r3, r2
 8003a16:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	697a      	ldr	r2, [r7, #20]
 8003a1e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	695b      	ldr	r3, [r3, #20]
 8003a26:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003a28:	697b      	ldr	r3, [r7, #20]
 8003a2a:	f023 0307 	bic.w	r3, r3, #7
 8003a2e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a34:	697a      	ldr	r2, [r7, #20]
 8003a36:	4313      	orrs	r3, r2
 8003a38:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a3e:	2b04      	cmp	r3, #4
 8003a40:	d117      	bne.n	8003a72 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a46:	697a      	ldr	r2, [r7, #20]
 8003a48:	4313      	orrs	r3, r2
 8003a4a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d00e      	beq.n	8003a72 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003a54:	6878      	ldr	r0, [r7, #4]
 8003a56:	f000 fb01 	bl	800405c <DMA_CheckFifoParam>
 8003a5a:	4603      	mov	r3, r0
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d008      	beq.n	8003a72 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2240      	movs	r2, #64	@ 0x40
 8003a64:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	2201      	movs	r2, #1
 8003a6a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8003a6e:	2301      	movs	r3, #1
 8003a70:	e016      	b.n	8003aa0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	697a      	ldr	r2, [r7, #20]
 8003a78:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003a7a:	6878      	ldr	r0, [r7, #4]
 8003a7c:	f000 fab8 	bl	8003ff0 <DMA_CalcBaseAndBitshift>
 8003a80:	4603      	mov	r3, r0
 8003a82:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a88:	223f      	movs	r2, #63	@ 0x3f
 8003a8a:	409a      	lsls	r2, r3
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2200      	movs	r2, #0
 8003a94:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	2201      	movs	r2, #1
 8003a9a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8003a9e:	2300      	movs	r3, #0
}
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	3718      	adds	r7, #24
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	bd80      	pop	{r7, pc}
 8003aa8:	f010803f 	.word	0xf010803f

08003aac <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003aac:	b580      	push	{r7, lr}
 8003aae:	b086      	sub	sp, #24
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	60f8      	str	r0, [r7, #12]
 8003ab4:	60b9      	str	r1, [r7, #8]
 8003ab6:	607a      	str	r2, [r7, #4]
 8003ab8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003aba:	2300      	movs	r3, #0
 8003abc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ac2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003aca:	2b01      	cmp	r3, #1
 8003acc:	d101      	bne.n	8003ad2 <HAL_DMA_Start_IT+0x26>
 8003ace:	2302      	movs	r3, #2
 8003ad0:	e040      	b.n	8003b54 <HAL_DMA_Start_IT+0xa8>
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	2201      	movs	r2, #1
 8003ad6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003ae0:	b2db      	uxtb	r3, r3
 8003ae2:	2b01      	cmp	r3, #1
 8003ae4:	d12f      	bne.n	8003b46 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	2202      	movs	r2, #2
 8003aea:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	2200      	movs	r2, #0
 8003af2:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	687a      	ldr	r2, [r7, #4]
 8003af8:	68b9      	ldr	r1, [r7, #8]
 8003afa:	68f8      	ldr	r0, [r7, #12]
 8003afc:	f000 fa4a 	bl	8003f94 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b04:	223f      	movs	r2, #63	@ 0x3f
 8003b06:	409a      	lsls	r2, r3
 8003b08:	693b      	ldr	r3, [r7, #16]
 8003b0a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	681a      	ldr	r2, [r3, #0]
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f042 0216 	orr.w	r2, r2, #22
 8003b1a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d007      	beq.n	8003b34 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	681a      	ldr	r2, [r3, #0]
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f042 0208 	orr.w	r2, r2, #8
 8003b32:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	681a      	ldr	r2, [r3, #0]
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f042 0201 	orr.w	r2, r2, #1
 8003b42:	601a      	str	r2, [r3, #0]
 8003b44:	e005      	b.n	8003b52 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	2200      	movs	r2, #0
 8003b4a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003b4e:	2302      	movs	r3, #2
 8003b50:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003b52:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b54:	4618      	mov	r0, r3
 8003b56:	3718      	adds	r7, #24
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	bd80      	pop	{r7, pc}

08003b5c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	b084      	sub	sp, #16
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b68:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003b6a:	f7fe fe39 	bl	80027e0 <HAL_GetTick>
 8003b6e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003b76:	b2db      	uxtb	r3, r3
 8003b78:	2b02      	cmp	r3, #2
 8003b7a:	d008      	beq.n	8003b8e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2280      	movs	r2, #128	@ 0x80
 8003b80:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	2200      	movs	r2, #0
 8003b86:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8003b8a:	2301      	movs	r3, #1
 8003b8c:	e052      	b.n	8003c34 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	681a      	ldr	r2, [r3, #0]
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f022 0216 	bic.w	r2, r2, #22
 8003b9c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	695a      	ldr	r2, [r3, #20]
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003bac:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d103      	bne.n	8003bbe <HAL_DMA_Abort+0x62>
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d007      	beq.n	8003bce <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	681a      	ldr	r2, [r3, #0]
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f022 0208 	bic.w	r2, r2, #8
 8003bcc:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	681a      	ldr	r2, [r3, #0]
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f022 0201 	bic.w	r2, r2, #1
 8003bdc:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003bde:	e013      	b.n	8003c08 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003be0:	f7fe fdfe 	bl	80027e0 <HAL_GetTick>
 8003be4:	4602      	mov	r2, r0
 8003be6:	68bb      	ldr	r3, [r7, #8]
 8003be8:	1ad3      	subs	r3, r2, r3
 8003bea:	2b05      	cmp	r3, #5
 8003bec:	d90c      	bls.n	8003c08 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	2220      	movs	r2, #32
 8003bf2:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2203      	movs	r2, #3
 8003bf8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2200      	movs	r2, #0
 8003c00:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8003c04:	2303      	movs	r3, #3
 8003c06:	e015      	b.n	8003c34 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f003 0301 	and.w	r3, r3, #1
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d1e4      	bne.n	8003be0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c1a:	223f      	movs	r2, #63	@ 0x3f
 8003c1c:	409a      	lsls	r2, r3
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	2201      	movs	r2, #1
 8003c26:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8003c32:	2300      	movs	r3, #0
}
 8003c34:	4618      	mov	r0, r3
 8003c36:	3710      	adds	r7, #16
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	bd80      	pop	{r7, pc}

08003c3c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003c3c:	b480      	push	{r7}
 8003c3e:	b083      	sub	sp, #12
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003c4a:	b2db      	uxtb	r3, r3
 8003c4c:	2b02      	cmp	r3, #2
 8003c4e:	d004      	beq.n	8003c5a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2280      	movs	r2, #128	@ 0x80
 8003c54:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8003c56:	2301      	movs	r3, #1
 8003c58:	e00c      	b.n	8003c74 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	2205      	movs	r2, #5
 8003c5e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	681a      	ldr	r2, [r3, #0]
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f022 0201 	bic.w	r2, r2, #1
 8003c70:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003c72:	2300      	movs	r3, #0
}
 8003c74:	4618      	mov	r0, r3
 8003c76:	370c      	adds	r7, #12
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7e:	4770      	bx	lr

08003c80 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b086      	sub	sp, #24
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003c88:	2300      	movs	r3, #0
 8003c8a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003c8c:	4b8e      	ldr	r3, [pc, #568]	@ (8003ec8 <HAL_DMA_IRQHandler+0x248>)
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	4a8e      	ldr	r2, [pc, #568]	@ (8003ecc <HAL_DMA_IRQHandler+0x24c>)
 8003c92:	fba2 2303 	umull	r2, r3, r2, r3
 8003c96:	0a9b      	lsrs	r3, r3, #10
 8003c98:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c9e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003ca0:	693b      	ldr	r3, [r7, #16]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003caa:	2208      	movs	r2, #8
 8003cac:	409a      	lsls	r2, r3
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	4013      	ands	r3, r2
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d01a      	beq.n	8003cec <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f003 0304 	and.w	r3, r3, #4
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d013      	beq.n	8003cec <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	681a      	ldr	r2, [r3, #0]
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f022 0204 	bic.w	r2, r2, #4
 8003cd2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003cd8:	2208      	movs	r2, #8
 8003cda:	409a      	lsls	r2, r3
 8003cdc:	693b      	ldr	r3, [r7, #16]
 8003cde:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ce4:	f043 0201 	orr.w	r2, r3, #1
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003cf0:	2201      	movs	r2, #1
 8003cf2:	409a      	lsls	r2, r3
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	4013      	ands	r3, r2
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d012      	beq.n	8003d22 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	695b      	ldr	r3, [r3, #20]
 8003d02:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d00b      	beq.n	8003d22 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d0e:	2201      	movs	r2, #1
 8003d10:	409a      	lsls	r2, r3
 8003d12:	693b      	ldr	r3, [r7, #16]
 8003d14:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d1a:	f043 0202 	orr.w	r2, r3, #2
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d26:	2204      	movs	r2, #4
 8003d28:	409a      	lsls	r2, r3
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	4013      	ands	r3, r2
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d012      	beq.n	8003d58 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f003 0302 	and.w	r3, r3, #2
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d00b      	beq.n	8003d58 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d44:	2204      	movs	r2, #4
 8003d46:	409a      	lsls	r2, r3
 8003d48:	693b      	ldr	r3, [r7, #16]
 8003d4a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d50:	f043 0204 	orr.w	r2, r3, #4
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d5c:	2210      	movs	r2, #16
 8003d5e:	409a      	lsls	r2, r3
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	4013      	ands	r3, r2
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d043      	beq.n	8003df0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f003 0308 	and.w	r3, r3, #8
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d03c      	beq.n	8003df0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d7a:	2210      	movs	r2, #16
 8003d7c:	409a      	lsls	r2, r3
 8003d7e:	693b      	ldr	r3, [r7, #16]
 8003d80:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d018      	beq.n	8003dc2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d108      	bne.n	8003db0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d024      	beq.n	8003df0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003daa:	6878      	ldr	r0, [r7, #4]
 8003dac:	4798      	blx	r3
 8003dae:	e01f      	b.n	8003df0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d01b      	beq.n	8003df0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003dbc:	6878      	ldr	r0, [r7, #4]
 8003dbe:	4798      	blx	r3
 8003dc0:	e016      	b.n	8003df0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d107      	bne.n	8003de0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	681a      	ldr	r2, [r3, #0]
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f022 0208 	bic.w	r2, r2, #8
 8003dde:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d003      	beq.n	8003df0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dec:	6878      	ldr	r0, [r7, #4]
 8003dee:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003df4:	2220      	movs	r2, #32
 8003df6:	409a      	lsls	r2, r3
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	4013      	ands	r3, r2
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	f000 808f 	beq.w	8003f20 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f003 0310 	and.w	r3, r3, #16
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	f000 8087 	beq.w	8003f20 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e16:	2220      	movs	r2, #32
 8003e18:	409a      	lsls	r2, r3
 8003e1a:	693b      	ldr	r3, [r7, #16]
 8003e1c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003e24:	b2db      	uxtb	r3, r3
 8003e26:	2b05      	cmp	r3, #5
 8003e28:	d136      	bne.n	8003e98 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	681a      	ldr	r2, [r3, #0]
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f022 0216 	bic.w	r2, r2, #22
 8003e38:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	695a      	ldr	r2, [r3, #20]
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003e48:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d103      	bne.n	8003e5a <HAL_DMA_IRQHandler+0x1da>
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d007      	beq.n	8003e6a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	681a      	ldr	r2, [r3, #0]
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f022 0208 	bic.w	r2, r2, #8
 8003e68:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e6e:	223f      	movs	r2, #63	@ 0x3f
 8003e70:	409a      	lsls	r2, r3
 8003e72:	693b      	ldr	r3, [r7, #16]
 8003e74:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	2201      	movs	r2, #1
 8003e7a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	2200      	movs	r2, #0
 8003e82:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d07e      	beq.n	8003f8c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e92:	6878      	ldr	r0, [r7, #4]
 8003e94:	4798      	blx	r3
        }
        return;
 8003e96:	e079      	b.n	8003f8c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d01d      	beq.n	8003ee2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d10d      	bne.n	8003ed0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d031      	beq.n	8003f20 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ec0:	6878      	ldr	r0, [r7, #4]
 8003ec2:	4798      	blx	r3
 8003ec4:	e02c      	b.n	8003f20 <HAL_DMA_IRQHandler+0x2a0>
 8003ec6:	bf00      	nop
 8003ec8:	20000000 	.word	0x20000000
 8003ecc:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d023      	beq.n	8003f20 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003edc:	6878      	ldr	r0, [r7, #4]
 8003ede:	4798      	blx	r3
 8003ee0:	e01e      	b.n	8003f20 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d10f      	bne.n	8003f10 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	681a      	ldr	r2, [r3, #0]
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f022 0210 	bic.w	r2, r2, #16
 8003efe:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2201      	movs	r2, #1
 8003f04:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d003      	beq.n	8003f20 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f1c:	6878      	ldr	r0, [r7, #4]
 8003f1e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d032      	beq.n	8003f8e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f2c:	f003 0301 	and.w	r3, r3, #1
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d022      	beq.n	8003f7a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2205      	movs	r2, #5
 8003f38:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	681a      	ldr	r2, [r3, #0]
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f022 0201 	bic.w	r2, r2, #1
 8003f4a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003f4c:	68bb      	ldr	r3, [r7, #8]
 8003f4e:	3301      	adds	r3, #1
 8003f50:	60bb      	str	r3, [r7, #8]
 8003f52:	697a      	ldr	r2, [r7, #20]
 8003f54:	429a      	cmp	r2, r3
 8003f56:	d307      	bcc.n	8003f68 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f003 0301 	and.w	r3, r3, #1
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d1f2      	bne.n	8003f4c <HAL_DMA_IRQHandler+0x2cc>
 8003f66:	e000      	b.n	8003f6a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003f68:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	2201      	movs	r2, #1
 8003f6e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	2200      	movs	r2, #0
 8003f76:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d005      	beq.n	8003f8e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f86:	6878      	ldr	r0, [r7, #4]
 8003f88:	4798      	blx	r3
 8003f8a:	e000      	b.n	8003f8e <HAL_DMA_IRQHandler+0x30e>
        return;
 8003f8c:	bf00      	nop
    }
  }
}
 8003f8e:	3718      	adds	r7, #24
 8003f90:	46bd      	mov	sp, r7
 8003f92:	bd80      	pop	{r7, pc}

08003f94 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003f94:	b480      	push	{r7}
 8003f96:	b085      	sub	sp, #20
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	60f8      	str	r0, [r7, #12]
 8003f9c:	60b9      	str	r1, [r7, #8]
 8003f9e:	607a      	str	r2, [r7, #4]
 8003fa0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	681a      	ldr	r2, [r3, #0]
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003fb0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	683a      	ldr	r2, [r7, #0]
 8003fb8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	689b      	ldr	r3, [r3, #8]
 8003fbe:	2b40      	cmp	r3, #64	@ 0x40
 8003fc0:	d108      	bne.n	8003fd4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	687a      	ldr	r2, [r7, #4]
 8003fc8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	68ba      	ldr	r2, [r7, #8]
 8003fd0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003fd2:	e007      	b.n	8003fe4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	68ba      	ldr	r2, [r7, #8]
 8003fda:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	687a      	ldr	r2, [r7, #4]
 8003fe2:	60da      	str	r2, [r3, #12]
}
 8003fe4:	bf00      	nop
 8003fe6:	3714      	adds	r7, #20
 8003fe8:	46bd      	mov	sp, r7
 8003fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fee:	4770      	bx	lr

08003ff0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003ff0:	b480      	push	{r7}
 8003ff2:	b085      	sub	sp, #20
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	b2db      	uxtb	r3, r3
 8003ffe:	3b10      	subs	r3, #16
 8004000:	4a14      	ldr	r2, [pc, #80]	@ (8004054 <DMA_CalcBaseAndBitshift+0x64>)
 8004002:	fba2 2303 	umull	r2, r3, r2, r3
 8004006:	091b      	lsrs	r3, r3, #4
 8004008:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800400a:	4a13      	ldr	r2, [pc, #76]	@ (8004058 <DMA_CalcBaseAndBitshift+0x68>)
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	4413      	add	r3, r2
 8004010:	781b      	ldrb	r3, [r3, #0]
 8004012:	461a      	mov	r2, r3
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	2b03      	cmp	r3, #3
 800401c:	d909      	bls.n	8004032 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8004026:	f023 0303 	bic.w	r3, r3, #3
 800402a:	1d1a      	adds	r2, r3, #4
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	659a      	str	r2, [r3, #88]	@ 0x58
 8004030:	e007      	b.n	8004042 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800403a:	f023 0303 	bic.w	r3, r3, #3
 800403e:	687a      	ldr	r2, [r7, #4]
 8004040:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8004046:	4618      	mov	r0, r3
 8004048:	3714      	adds	r7, #20
 800404a:	46bd      	mov	sp, r7
 800404c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004050:	4770      	bx	lr
 8004052:	bf00      	nop
 8004054:	aaaaaaab 	.word	0xaaaaaaab
 8004058:	0800ba40 	.word	0x0800ba40

0800405c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800405c:	b480      	push	{r7}
 800405e:	b085      	sub	sp, #20
 8004060:	af00      	add	r7, sp, #0
 8004062:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004064:	2300      	movs	r3, #0
 8004066:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800406c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	699b      	ldr	r3, [r3, #24]
 8004072:	2b00      	cmp	r3, #0
 8004074:	d11f      	bne.n	80040b6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004076:	68bb      	ldr	r3, [r7, #8]
 8004078:	2b03      	cmp	r3, #3
 800407a:	d856      	bhi.n	800412a <DMA_CheckFifoParam+0xce>
 800407c:	a201      	add	r2, pc, #4	@ (adr r2, 8004084 <DMA_CheckFifoParam+0x28>)
 800407e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004082:	bf00      	nop
 8004084:	08004095 	.word	0x08004095
 8004088:	080040a7 	.word	0x080040a7
 800408c:	08004095 	.word	0x08004095
 8004090:	0800412b 	.word	0x0800412b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004098:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800409c:	2b00      	cmp	r3, #0
 800409e:	d046      	beq.n	800412e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80040a0:	2301      	movs	r3, #1
 80040a2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80040a4:	e043      	b.n	800412e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040aa:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80040ae:	d140      	bne.n	8004132 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80040b0:	2301      	movs	r3, #1
 80040b2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80040b4:	e03d      	b.n	8004132 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	699b      	ldr	r3, [r3, #24]
 80040ba:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80040be:	d121      	bne.n	8004104 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80040c0:	68bb      	ldr	r3, [r7, #8]
 80040c2:	2b03      	cmp	r3, #3
 80040c4:	d837      	bhi.n	8004136 <DMA_CheckFifoParam+0xda>
 80040c6:	a201      	add	r2, pc, #4	@ (adr r2, 80040cc <DMA_CheckFifoParam+0x70>)
 80040c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040cc:	080040dd 	.word	0x080040dd
 80040d0:	080040e3 	.word	0x080040e3
 80040d4:	080040dd 	.word	0x080040dd
 80040d8:	080040f5 	.word	0x080040f5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80040dc:	2301      	movs	r3, #1
 80040de:	73fb      	strb	r3, [r7, #15]
      break;
 80040e0:	e030      	b.n	8004144 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040e6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d025      	beq.n	800413a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80040ee:	2301      	movs	r3, #1
 80040f0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80040f2:	e022      	b.n	800413a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040f8:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80040fc:	d11f      	bne.n	800413e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80040fe:	2301      	movs	r3, #1
 8004100:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004102:	e01c      	b.n	800413e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004104:	68bb      	ldr	r3, [r7, #8]
 8004106:	2b02      	cmp	r3, #2
 8004108:	d903      	bls.n	8004112 <DMA_CheckFifoParam+0xb6>
 800410a:	68bb      	ldr	r3, [r7, #8]
 800410c:	2b03      	cmp	r3, #3
 800410e:	d003      	beq.n	8004118 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004110:	e018      	b.n	8004144 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004112:	2301      	movs	r3, #1
 8004114:	73fb      	strb	r3, [r7, #15]
      break;
 8004116:	e015      	b.n	8004144 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800411c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004120:	2b00      	cmp	r3, #0
 8004122:	d00e      	beq.n	8004142 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004124:	2301      	movs	r3, #1
 8004126:	73fb      	strb	r3, [r7, #15]
      break;
 8004128:	e00b      	b.n	8004142 <DMA_CheckFifoParam+0xe6>
      break;
 800412a:	bf00      	nop
 800412c:	e00a      	b.n	8004144 <DMA_CheckFifoParam+0xe8>
      break;
 800412e:	bf00      	nop
 8004130:	e008      	b.n	8004144 <DMA_CheckFifoParam+0xe8>
      break;
 8004132:	bf00      	nop
 8004134:	e006      	b.n	8004144 <DMA_CheckFifoParam+0xe8>
      break;
 8004136:	bf00      	nop
 8004138:	e004      	b.n	8004144 <DMA_CheckFifoParam+0xe8>
      break;
 800413a:	bf00      	nop
 800413c:	e002      	b.n	8004144 <DMA_CheckFifoParam+0xe8>
      break;   
 800413e:	bf00      	nop
 8004140:	e000      	b.n	8004144 <DMA_CheckFifoParam+0xe8>
      break;
 8004142:	bf00      	nop
    }
  } 
  
  return status; 
 8004144:	7bfb      	ldrb	r3, [r7, #15]
}
 8004146:	4618      	mov	r0, r3
 8004148:	3714      	adds	r7, #20
 800414a:	46bd      	mov	sp, r7
 800414c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004150:	4770      	bx	lr
 8004152:	bf00      	nop

08004154 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004154:	b480      	push	{r7}
 8004156:	b089      	sub	sp, #36	@ 0x24
 8004158:	af00      	add	r7, sp, #0
 800415a:	6078      	str	r0, [r7, #4]
 800415c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800415e:	2300      	movs	r3, #0
 8004160:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004162:	2300      	movs	r3, #0
 8004164:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004166:	2300      	movs	r3, #0
 8004168:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800416a:	2300      	movs	r3, #0
 800416c:	61fb      	str	r3, [r7, #28]
 800416e:	e159      	b.n	8004424 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004170:	2201      	movs	r2, #1
 8004172:	69fb      	ldr	r3, [r7, #28]
 8004174:	fa02 f303 	lsl.w	r3, r2, r3
 8004178:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800417a:	683b      	ldr	r3, [r7, #0]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	697a      	ldr	r2, [r7, #20]
 8004180:	4013      	ands	r3, r2
 8004182:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004184:	693a      	ldr	r2, [r7, #16]
 8004186:	697b      	ldr	r3, [r7, #20]
 8004188:	429a      	cmp	r2, r3
 800418a:	f040 8148 	bne.w	800441e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800418e:	683b      	ldr	r3, [r7, #0]
 8004190:	685b      	ldr	r3, [r3, #4]
 8004192:	f003 0303 	and.w	r3, r3, #3
 8004196:	2b01      	cmp	r3, #1
 8004198:	d005      	beq.n	80041a6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800419a:	683b      	ldr	r3, [r7, #0]
 800419c:	685b      	ldr	r3, [r3, #4]
 800419e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80041a2:	2b02      	cmp	r3, #2
 80041a4:	d130      	bne.n	8004208 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	689b      	ldr	r3, [r3, #8]
 80041aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80041ac:	69fb      	ldr	r3, [r7, #28]
 80041ae:	005b      	lsls	r3, r3, #1
 80041b0:	2203      	movs	r2, #3
 80041b2:	fa02 f303 	lsl.w	r3, r2, r3
 80041b6:	43db      	mvns	r3, r3
 80041b8:	69ba      	ldr	r2, [r7, #24]
 80041ba:	4013      	ands	r3, r2
 80041bc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80041be:	683b      	ldr	r3, [r7, #0]
 80041c0:	68da      	ldr	r2, [r3, #12]
 80041c2:	69fb      	ldr	r3, [r7, #28]
 80041c4:	005b      	lsls	r3, r3, #1
 80041c6:	fa02 f303 	lsl.w	r3, r2, r3
 80041ca:	69ba      	ldr	r2, [r7, #24]
 80041cc:	4313      	orrs	r3, r2
 80041ce:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	69ba      	ldr	r2, [r7, #24]
 80041d4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	685b      	ldr	r3, [r3, #4]
 80041da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80041dc:	2201      	movs	r2, #1
 80041de:	69fb      	ldr	r3, [r7, #28]
 80041e0:	fa02 f303 	lsl.w	r3, r2, r3
 80041e4:	43db      	mvns	r3, r3
 80041e6:	69ba      	ldr	r2, [r7, #24]
 80041e8:	4013      	ands	r3, r2
 80041ea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	685b      	ldr	r3, [r3, #4]
 80041f0:	091b      	lsrs	r3, r3, #4
 80041f2:	f003 0201 	and.w	r2, r3, #1
 80041f6:	69fb      	ldr	r3, [r7, #28]
 80041f8:	fa02 f303 	lsl.w	r3, r2, r3
 80041fc:	69ba      	ldr	r2, [r7, #24]
 80041fe:	4313      	orrs	r3, r2
 8004200:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	69ba      	ldr	r2, [r7, #24]
 8004206:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004208:	683b      	ldr	r3, [r7, #0]
 800420a:	685b      	ldr	r3, [r3, #4]
 800420c:	f003 0303 	and.w	r3, r3, #3
 8004210:	2b03      	cmp	r3, #3
 8004212:	d017      	beq.n	8004244 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	68db      	ldr	r3, [r3, #12]
 8004218:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800421a:	69fb      	ldr	r3, [r7, #28]
 800421c:	005b      	lsls	r3, r3, #1
 800421e:	2203      	movs	r2, #3
 8004220:	fa02 f303 	lsl.w	r3, r2, r3
 8004224:	43db      	mvns	r3, r3
 8004226:	69ba      	ldr	r2, [r7, #24]
 8004228:	4013      	ands	r3, r2
 800422a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800422c:	683b      	ldr	r3, [r7, #0]
 800422e:	689a      	ldr	r2, [r3, #8]
 8004230:	69fb      	ldr	r3, [r7, #28]
 8004232:	005b      	lsls	r3, r3, #1
 8004234:	fa02 f303 	lsl.w	r3, r2, r3
 8004238:	69ba      	ldr	r2, [r7, #24]
 800423a:	4313      	orrs	r3, r2
 800423c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	69ba      	ldr	r2, [r7, #24]
 8004242:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004244:	683b      	ldr	r3, [r7, #0]
 8004246:	685b      	ldr	r3, [r3, #4]
 8004248:	f003 0303 	and.w	r3, r3, #3
 800424c:	2b02      	cmp	r3, #2
 800424e:	d123      	bne.n	8004298 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004250:	69fb      	ldr	r3, [r7, #28]
 8004252:	08da      	lsrs	r2, r3, #3
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	3208      	adds	r2, #8
 8004258:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800425c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800425e:	69fb      	ldr	r3, [r7, #28]
 8004260:	f003 0307 	and.w	r3, r3, #7
 8004264:	009b      	lsls	r3, r3, #2
 8004266:	220f      	movs	r2, #15
 8004268:	fa02 f303 	lsl.w	r3, r2, r3
 800426c:	43db      	mvns	r3, r3
 800426e:	69ba      	ldr	r2, [r7, #24]
 8004270:	4013      	ands	r3, r2
 8004272:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004274:	683b      	ldr	r3, [r7, #0]
 8004276:	691a      	ldr	r2, [r3, #16]
 8004278:	69fb      	ldr	r3, [r7, #28]
 800427a:	f003 0307 	and.w	r3, r3, #7
 800427e:	009b      	lsls	r3, r3, #2
 8004280:	fa02 f303 	lsl.w	r3, r2, r3
 8004284:	69ba      	ldr	r2, [r7, #24]
 8004286:	4313      	orrs	r3, r2
 8004288:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800428a:	69fb      	ldr	r3, [r7, #28]
 800428c:	08da      	lsrs	r2, r3, #3
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	3208      	adds	r2, #8
 8004292:	69b9      	ldr	r1, [r7, #24]
 8004294:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800429e:	69fb      	ldr	r3, [r7, #28]
 80042a0:	005b      	lsls	r3, r3, #1
 80042a2:	2203      	movs	r2, #3
 80042a4:	fa02 f303 	lsl.w	r3, r2, r3
 80042a8:	43db      	mvns	r3, r3
 80042aa:	69ba      	ldr	r2, [r7, #24]
 80042ac:	4013      	ands	r3, r2
 80042ae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80042b0:	683b      	ldr	r3, [r7, #0]
 80042b2:	685b      	ldr	r3, [r3, #4]
 80042b4:	f003 0203 	and.w	r2, r3, #3
 80042b8:	69fb      	ldr	r3, [r7, #28]
 80042ba:	005b      	lsls	r3, r3, #1
 80042bc:	fa02 f303 	lsl.w	r3, r2, r3
 80042c0:	69ba      	ldr	r2, [r7, #24]
 80042c2:	4313      	orrs	r3, r2
 80042c4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	69ba      	ldr	r2, [r7, #24]
 80042ca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80042cc:	683b      	ldr	r3, [r7, #0]
 80042ce:	685b      	ldr	r3, [r3, #4]
 80042d0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	f000 80a2 	beq.w	800441e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80042da:	2300      	movs	r3, #0
 80042dc:	60fb      	str	r3, [r7, #12]
 80042de:	4b57      	ldr	r3, [pc, #348]	@ (800443c <HAL_GPIO_Init+0x2e8>)
 80042e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042e2:	4a56      	ldr	r2, [pc, #344]	@ (800443c <HAL_GPIO_Init+0x2e8>)
 80042e4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80042e8:	6453      	str	r3, [r2, #68]	@ 0x44
 80042ea:	4b54      	ldr	r3, [pc, #336]	@ (800443c <HAL_GPIO_Init+0x2e8>)
 80042ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042ee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80042f2:	60fb      	str	r3, [r7, #12]
 80042f4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80042f6:	4a52      	ldr	r2, [pc, #328]	@ (8004440 <HAL_GPIO_Init+0x2ec>)
 80042f8:	69fb      	ldr	r3, [r7, #28]
 80042fa:	089b      	lsrs	r3, r3, #2
 80042fc:	3302      	adds	r3, #2
 80042fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004302:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004304:	69fb      	ldr	r3, [r7, #28]
 8004306:	f003 0303 	and.w	r3, r3, #3
 800430a:	009b      	lsls	r3, r3, #2
 800430c:	220f      	movs	r2, #15
 800430e:	fa02 f303 	lsl.w	r3, r2, r3
 8004312:	43db      	mvns	r3, r3
 8004314:	69ba      	ldr	r2, [r7, #24]
 8004316:	4013      	ands	r3, r2
 8004318:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	4a49      	ldr	r2, [pc, #292]	@ (8004444 <HAL_GPIO_Init+0x2f0>)
 800431e:	4293      	cmp	r3, r2
 8004320:	d019      	beq.n	8004356 <HAL_GPIO_Init+0x202>
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	4a48      	ldr	r2, [pc, #288]	@ (8004448 <HAL_GPIO_Init+0x2f4>)
 8004326:	4293      	cmp	r3, r2
 8004328:	d013      	beq.n	8004352 <HAL_GPIO_Init+0x1fe>
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	4a47      	ldr	r2, [pc, #284]	@ (800444c <HAL_GPIO_Init+0x2f8>)
 800432e:	4293      	cmp	r3, r2
 8004330:	d00d      	beq.n	800434e <HAL_GPIO_Init+0x1fa>
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	4a46      	ldr	r2, [pc, #280]	@ (8004450 <HAL_GPIO_Init+0x2fc>)
 8004336:	4293      	cmp	r3, r2
 8004338:	d007      	beq.n	800434a <HAL_GPIO_Init+0x1f6>
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	4a45      	ldr	r2, [pc, #276]	@ (8004454 <HAL_GPIO_Init+0x300>)
 800433e:	4293      	cmp	r3, r2
 8004340:	d101      	bne.n	8004346 <HAL_GPIO_Init+0x1f2>
 8004342:	2304      	movs	r3, #4
 8004344:	e008      	b.n	8004358 <HAL_GPIO_Init+0x204>
 8004346:	2307      	movs	r3, #7
 8004348:	e006      	b.n	8004358 <HAL_GPIO_Init+0x204>
 800434a:	2303      	movs	r3, #3
 800434c:	e004      	b.n	8004358 <HAL_GPIO_Init+0x204>
 800434e:	2302      	movs	r3, #2
 8004350:	e002      	b.n	8004358 <HAL_GPIO_Init+0x204>
 8004352:	2301      	movs	r3, #1
 8004354:	e000      	b.n	8004358 <HAL_GPIO_Init+0x204>
 8004356:	2300      	movs	r3, #0
 8004358:	69fa      	ldr	r2, [r7, #28]
 800435a:	f002 0203 	and.w	r2, r2, #3
 800435e:	0092      	lsls	r2, r2, #2
 8004360:	4093      	lsls	r3, r2
 8004362:	69ba      	ldr	r2, [r7, #24]
 8004364:	4313      	orrs	r3, r2
 8004366:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004368:	4935      	ldr	r1, [pc, #212]	@ (8004440 <HAL_GPIO_Init+0x2ec>)
 800436a:	69fb      	ldr	r3, [r7, #28]
 800436c:	089b      	lsrs	r3, r3, #2
 800436e:	3302      	adds	r3, #2
 8004370:	69ba      	ldr	r2, [r7, #24]
 8004372:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004376:	4b38      	ldr	r3, [pc, #224]	@ (8004458 <HAL_GPIO_Init+0x304>)
 8004378:	689b      	ldr	r3, [r3, #8]
 800437a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800437c:	693b      	ldr	r3, [r7, #16]
 800437e:	43db      	mvns	r3, r3
 8004380:	69ba      	ldr	r2, [r7, #24]
 8004382:	4013      	ands	r3, r2
 8004384:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004386:	683b      	ldr	r3, [r7, #0]
 8004388:	685b      	ldr	r3, [r3, #4]
 800438a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800438e:	2b00      	cmp	r3, #0
 8004390:	d003      	beq.n	800439a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8004392:	69ba      	ldr	r2, [r7, #24]
 8004394:	693b      	ldr	r3, [r7, #16]
 8004396:	4313      	orrs	r3, r2
 8004398:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800439a:	4a2f      	ldr	r2, [pc, #188]	@ (8004458 <HAL_GPIO_Init+0x304>)
 800439c:	69bb      	ldr	r3, [r7, #24]
 800439e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80043a0:	4b2d      	ldr	r3, [pc, #180]	@ (8004458 <HAL_GPIO_Init+0x304>)
 80043a2:	68db      	ldr	r3, [r3, #12]
 80043a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80043a6:	693b      	ldr	r3, [r7, #16]
 80043a8:	43db      	mvns	r3, r3
 80043aa:	69ba      	ldr	r2, [r7, #24]
 80043ac:	4013      	ands	r3, r2
 80043ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	685b      	ldr	r3, [r3, #4]
 80043b4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d003      	beq.n	80043c4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80043bc:	69ba      	ldr	r2, [r7, #24]
 80043be:	693b      	ldr	r3, [r7, #16]
 80043c0:	4313      	orrs	r3, r2
 80043c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80043c4:	4a24      	ldr	r2, [pc, #144]	@ (8004458 <HAL_GPIO_Init+0x304>)
 80043c6:	69bb      	ldr	r3, [r7, #24]
 80043c8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80043ca:	4b23      	ldr	r3, [pc, #140]	@ (8004458 <HAL_GPIO_Init+0x304>)
 80043cc:	685b      	ldr	r3, [r3, #4]
 80043ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80043d0:	693b      	ldr	r3, [r7, #16]
 80043d2:	43db      	mvns	r3, r3
 80043d4:	69ba      	ldr	r2, [r7, #24]
 80043d6:	4013      	ands	r3, r2
 80043d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80043da:	683b      	ldr	r3, [r7, #0]
 80043dc:	685b      	ldr	r3, [r3, #4]
 80043de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d003      	beq.n	80043ee <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80043e6:	69ba      	ldr	r2, [r7, #24]
 80043e8:	693b      	ldr	r3, [r7, #16]
 80043ea:	4313      	orrs	r3, r2
 80043ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80043ee:	4a1a      	ldr	r2, [pc, #104]	@ (8004458 <HAL_GPIO_Init+0x304>)
 80043f0:	69bb      	ldr	r3, [r7, #24]
 80043f2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80043f4:	4b18      	ldr	r3, [pc, #96]	@ (8004458 <HAL_GPIO_Init+0x304>)
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80043fa:	693b      	ldr	r3, [r7, #16]
 80043fc:	43db      	mvns	r3, r3
 80043fe:	69ba      	ldr	r2, [r7, #24]
 8004400:	4013      	ands	r3, r2
 8004402:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004404:	683b      	ldr	r3, [r7, #0]
 8004406:	685b      	ldr	r3, [r3, #4]
 8004408:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800440c:	2b00      	cmp	r3, #0
 800440e:	d003      	beq.n	8004418 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8004410:	69ba      	ldr	r2, [r7, #24]
 8004412:	693b      	ldr	r3, [r7, #16]
 8004414:	4313      	orrs	r3, r2
 8004416:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004418:	4a0f      	ldr	r2, [pc, #60]	@ (8004458 <HAL_GPIO_Init+0x304>)
 800441a:	69bb      	ldr	r3, [r7, #24]
 800441c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800441e:	69fb      	ldr	r3, [r7, #28]
 8004420:	3301      	adds	r3, #1
 8004422:	61fb      	str	r3, [r7, #28]
 8004424:	69fb      	ldr	r3, [r7, #28]
 8004426:	2b0f      	cmp	r3, #15
 8004428:	f67f aea2 	bls.w	8004170 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800442c:	bf00      	nop
 800442e:	bf00      	nop
 8004430:	3724      	adds	r7, #36	@ 0x24
 8004432:	46bd      	mov	sp, r7
 8004434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004438:	4770      	bx	lr
 800443a:	bf00      	nop
 800443c:	40023800 	.word	0x40023800
 8004440:	40013800 	.word	0x40013800
 8004444:	40020000 	.word	0x40020000
 8004448:	40020400 	.word	0x40020400
 800444c:	40020800 	.word	0x40020800
 8004450:	40020c00 	.word	0x40020c00
 8004454:	40021000 	.word	0x40021000
 8004458:	40013c00 	.word	0x40013c00

0800445c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800445c:	b480      	push	{r7}
 800445e:	b083      	sub	sp, #12
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
 8004464:	460b      	mov	r3, r1
 8004466:	807b      	strh	r3, [r7, #2]
 8004468:	4613      	mov	r3, r2
 800446a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800446c:	787b      	ldrb	r3, [r7, #1]
 800446e:	2b00      	cmp	r3, #0
 8004470:	d003      	beq.n	800447a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004472:	887a      	ldrh	r2, [r7, #2]
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004478:	e003      	b.n	8004482 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800447a:	887b      	ldrh	r3, [r7, #2]
 800447c:	041a      	lsls	r2, r3, #16
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	619a      	str	r2, [r3, #24]
}
 8004482:	bf00      	nop
 8004484:	370c      	adds	r7, #12
 8004486:	46bd      	mov	sp, r7
 8004488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448c:	4770      	bx	lr
	...

08004490 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004490:	b580      	push	{r7, lr}
 8004492:	b086      	sub	sp, #24
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2b00      	cmp	r3, #0
 800449c:	d101      	bne.n	80044a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800449e:	2301      	movs	r3, #1
 80044a0:	e267      	b.n	8004972 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f003 0301 	and.w	r3, r3, #1
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d075      	beq.n	800459a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80044ae:	4b88      	ldr	r3, [pc, #544]	@ (80046d0 <HAL_RCC_OscConfig+0x240>)
 80044b0:	689b      	ldr	r3, [r3, #8]
 80044b2:	f003 030c 	and.w	r3, r3, #12
 80044b6:	2b04      	cmp	r3, #4
 80044b8:	d00c      	beq.n	80044d4 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80044ba:	4b85      	ldr	r3, [pc, #532]	@ (80046d0 <HAL_RCC_OscConfig+0x240>)
 80044bc:	689b      	ldr	r3, [r3, #8]
 80044be:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80044c2:	2b08      	cmp	r3, #8
 80044c4:	d112      	bne.n	80044ec <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80044c6:	4b82      	ldr	r3, [pc, #520]	@ (80046d0 <HAL_RCC_OscConfig+0x240>)
 80044c8:	685b      	ldr	r3, [r3, #4]
 80044ca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80044ce:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80044d2:	d10b      	bne.n	80044ec <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044d4:	4b7e      	ldr	r3, [pc, #504]	@ (80046d0 <HAL_RCC_OscConfig+0x240>)
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d05b      	beq.n	8004598 <HAL_RCC_OscConfig+0x108>
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	685b      	ldr	r3, [r3, #4]
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d157      	bne.n	8004598 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80044e8:	2301      	movs	r3, #1
 80044ea:	e242      	b.n	8004972 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	685b      	ldr	r3, [r3, #4]
 80044f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80044f4:	d106      	bne.n	8004504 <HAL_RCC_OscConfig+0x74>
 80044f6:	4b76      	ldr	r3, [pc, #472]	@ (80046d0 <HAL_RCC_OscConfig+0x240>)
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	4a75      	ldr	r2, [pc, #468]	@ (80046d0 <HAL_RCC_OscConfig+0x240>)
 80044fc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004500:	6013      	str	r3, [r2, #0]
 8004502:	e01d      	b.n	8004540 <HAL_RCC_OscConfig+0xb0>
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	685b      	ldr	r3, [r3, #4]
 8004508:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800450c:	d10c      	bne.n	8004528 <HAL_RCC_OscConfig+0x98>
 800450e:	4b70      	ldr	r3, [pc, #448]	@ (80046d0 <HAL_RCC_OscConfig+0x240>)
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	4a6f      	ldr	r2, [pc, #444]	@ (80046d0 <HAL_RCC_OscConfig+0x240>)
 8004514:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004518:	6013      	str	r3, [r2, #0]
 800451a:	4b6d      	ldr	r3, [pc, #436]	@ (80046d0 <HAL_RCC_OscConfig+0x240>)
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	4a6c      	ldr	r2, [pc, #432]	@ (80046d0 <HAL_RCC_OscConfig+0x240>)
 8004520:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004524:	6013      	str	r3, [r2, #0]
 8004526:	e00b      	b.n	8004540 <HAL_RCC_OscConfig+0xb0>
 8004528:	4b69      	ldr	r3, [pc, #420]	@ (80046d0 <HAL_RCC_OscConfig+0x240>)
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	4a68      	ldr	r2, [pc, #416]	@ (80046d0 <HAL_RCC_OscConfig+0x240>)
 800452e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004532:	6013      	str	r3, [r2, #0]
 8004534:	4b66      	ldr	r3, [pc, #408]	@ (80046d0 <HAL_RCC_OscConfig+0x240>)
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	4a65      	ldr	r2, [pc, #404]	@ (80046d0 <HAL_RCC_OscConfig+0x240>)
 800453a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800453e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	685b      	ldr	r3, [r3, #4]
 8004544:	2b00      	cmp	r3, #0
 8004546:	d013      	beq.n	8004570 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004548:	f7fe f94a 	bl	80027e0 <HAL_GetTick>
 800454c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800454e:	e008      	b.n	8004562 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004550:	f7fe f946 	bl	80027e0 <HAL_GetTick>
 8004554:	4602      	mov	r2, r0
 8004556:	693b      	ldr	r3, [r7, #16]
 8004558:	1ad3      	subs	r3, r2, r3
 800455a:	2b64      	cmp	r3, #100	@ 0x64
 800455c:	d901      	bls.n	8004562 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800455e:	2303      	movs	r3, #3
 8004560:	e207      	b.n	8004972 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004562:	4b5b      	ldr	r3, [pc, #364]	@ (80046d0 <HAL_RCC_OscConfig+0x240>)
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800456a:	2b00      	cmp	r3, #0
 800456c:	d0f0      	beq.n	8004550 <HAL_RCC_OscConfig+0xc0>
 800456e:	e014      	b.n	800459a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004570:	f7fe f936 	bl	80027e0 <HAL_GetTick>
 8004574:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004576:	e008      	b.n	800458a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004578:	f7fe f932 	bl	80027e0 <HAL_GetTick>
 800457c:	4602      	mov	r2, r0
 800457e:	693b      	ldr	r3, [r7, #16]
 8004580:	1ad3      	subs	r3, r2, r3
 8004582:	2b64      	cmp	r3, #100	@ 0x64
 8004584:	d901      	bls.n	800458a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004586:	2303      	movs	r3, #3
 8004588:	e1f3      	b.n	8004972 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800458a:	4b51      	ldr	r3, [pc, #324]	@ (80046d0 <HAL_RCC_OscConfig+0x240>)
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004592:	2b00      	cmp	r3, #0
 8004594:	d1f0      	bne.n	8004578 <HAL_RCC_OscConfig+0xe8>
 8004596:	e000      	b.n	800459a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004598:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f003 0302 	and.w	r3, r3, #2
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d063      	beq.n	800466e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80045a6:	4b4a      	ldr	r3, [pc, #296]	@ (80046d0 <HAL_RCC_OscConfig+0x240>)
 80045a8:	689b      	ldr	r3, [r3, #8]
 80045aa:	f003 030c 	and.w	r3, r3, #12
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d00b      	beq.n	80045ca <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80045b2:	4b47      	ldr	r3, [pc, #284]	@ (80046d0 <HAL_RCC_OscConfig+0x240>)
 80045b4:	689b      	ldr	r3, [r3, #8]
 80045b6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80045ba:	2b08      	cmp	r3, #8
 80045bc:	d11c      	bne.n	80045f8 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80045be:	4b44      	ldr	r3, [pc, #272]	@ (80046d0 <HAL_RCC_OscConfig+0x240>)
 80045c0:	685b      	ldr	r3, [r3, #4]
 80045c2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d116      	bne.n	80045f8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80045ca:	4b41      	ldr	r3, [pc, #260]	@ (80046d0 <HAL_RCC_OscConfig+0x240>)
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f003 0302 	and.w	r3, r3, #2
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d005      	beq.n	80045e2 <HAL_RCC_OscConfig+0x152>
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	68db      	ldr	r3, [r3, #12]
 80045da:	2b01      	cmp	r3, #1
 80045dc:	d001      	beq.n	80045e2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80045de:	2301      	movs	r3, #1
 80045e0:	e1c7      	b.n	8004972 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045e2:	4b3b      	ldr	r3, [pc, #236]	@ (80046d0 <HAL_RCC_OscConfig+0x240>)
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	691b      	ldr	r3, [r3, #16]
 80045ee:	00db      	lsls	r3, r3, #3
 80045f0:	4937      	ldr	r1, [pc, #220]	@ (80046d0 <HAL_RCC_OscConfig+0x240>)
 80045f2:	4313      	orrs	r3, r2
 80045f4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80045f6:	e03a      	b.n	800466e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	68db      	ldr	r3, [r3, #12]
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d020      	beq.n	8004642 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004600:	4b34      	ldr	r3, [pc, #208]	@ (80046d4 <HAL_RCC_OscConfig+0x244>)
 8004602:	2201      	movs	r2, #1
 8004604:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004606:	f7fe f8eb 	bl	80027e0 <HAL_GetTick>
 800460a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800460c:	e008      	b.n	8004620 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800460e:	f7fe f8e7 	bl	80027e0 <HAL_GetTick>
 8004612:	4602      	mov	r2, r0
 8004614:	693b      	ldr	r3, [r7, #16]
 8004616:	1ad3      	subs	r3, r2, r3
 8004618:	2b02      	cmp	r3, #2
 800461a:	d901      	bls.n	8004620 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800461c:	2303      	movs	r3, #3
 800461e:	e1a8      	b.n	8004972 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004620:	4b2b      	ldr	r3, [pc, #172]	@ (80046d0 <HAL_RCC_OscConfig+0x240>)
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f003 0302 	and.w	r3, r3, #2
 8004628:	2b00      	cmp	r3, #0
 800462a:	d0f0      	beq.n	800460e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800462c:	4b28      	ldr	r3, [pc, #160]	@ (80046d0 <HAL_RCC_OscConfig+0x240>)
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	691b      	ldr	r3, [r3, #16]
 8004638:	00db      	lsls	r3, r3, #3
 800463a:	4925      	ldr	r1, [pc, #148]	@ (80046d0 <HAL_RCC_OscConfig+0x240>)
 800463c:	4313      	orrs	r3, r2
 800463e:	600b      	str	r3, [r1, #0]
 8004640:	e015      	b.n	800466e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004642:	4b24      	ldr	r3, [pc, #144]	@ (80046d4 <HAL_RCC_OscConfig+0x244>)
 8004644:	2200      	movs	r2, #0
 8004646:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004648:	f7fe f8ca 	bl	80027e0 <HAL_GetTick>
 800464c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800464e:	e008      	b.n	8004662 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004650:	f7fe f8c6 	bl	80027e0 <HAL_GetTick>
 8004654:	4602      	mov	r2, r0
 8004656:	693b      	ldr	r3, [r7, #16]
 8004658:	1ad3      	subs	r3, r2, r3
 800465a:	2b02      	cmp	r3, #2
 800465c:	d901      	bls.n	8004662 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800465e:	2303      	movs	r3, #3
 8004660:	e187      	b.n	8004972 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004662:	4b1b      	ldr	r3, [pc, #108]	@ (80046d0 <HAL_RCC_OscConfig+0x240>)
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f003 0302 	and.w	r3, r3, #2
 800466a:	2b00      	cmp	r3, #0
 800466c:	d1f0      	bne.n	8004650 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f003 0308 	and.w	r3, r3, #8
 8004676:	2b00      	cmp	r3, #0
 8004678:	d036      	beq.n	80046e8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	695b      	ldr	r3, [r3, #20]
 800467e:	2b00      	cmp	r3, #0
 8004680:	d016      	beq.n	80046b0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004682:	4b15      	ldr	r3, [pc, #84]	@ (80046d8 <HAL_RCC_OscConfig+0x248>)
 8004684:	2201      	movs	r2, #1
 8004686:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004688:	f7fe f8aa 	bl	80027e0 <HAL_GetTick>
 800468c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800468e:	e008      	b.n	80046a2 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004690:	f7fe f8a6 	bl	80027e0 <HAL_GetTick>
 8004694:	4602      	mov	r2, r0
 8004696:	693b      	ldr	r3, [r7, #16]
 8004698:	1ad3      	subs	r3, r2, r3
 800469a:	2b02      	cmp	r3, #2
 800469c:	d901      	bls.n	80046a2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800469e:	2303      	movs	r3, #3
 80046a0:	e167      	b.n	8004972 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80046a2:	4b0b      	ldr	r3, [pc, #44]	@ (80046d0 <HAL_RCC_OscConfig+0x240>)
 80046a4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80046a6:	f003 0302 	and.w	r3, r3, #2
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d0f0      	beq.n	8004690 <HAL_RCC_OscConfig+0x200>
 80046ae:	e01b      	b.n	80046e8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80046b0:	4b09      	ldr	r3, [pc, #36]	@ (80046d8 <HAL_RCC_OscConfig+0x248>)
 80046b2:	2200      	movs	r2, #0
 80046b4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80046b6:	f7fe f893 	bl	80027e0 <HAL_GetTick>
 80046ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80046bc:	e00e      	b.n	80046dc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80046be:	f7fe f88f 	bl	80027e0 <HAL_GetTick>
 80046c2:	4602      	mov	r2, r0
 80046c4:	693b      	ldr	r3, [r7, #16]
 80046c6:	1ad3      	subs	r3, r2, r3
 80046c8:	2b02      	cmp	r3, #2
 80046ca:	d907      	bls.n	80046dc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80046cc:	2303      	movs	r3, #3
 80046ce:	e150      	b.n	8004972 <HAL_RCC_OscConfig+0x4e2>
 80046d0:	40023800 	.word	0x40023800
 80046d4:	42470000 	.word	0x42470000
 80046d8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80046dc:	4b88      	ldr	r3, [pc, #544]	@ (8004900 <HAL_RCC_OscConfig+0x470>)
 80046de:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80046e0:	f003 0302 	and.w	r3, r3, #2
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d1ea      	bne.n	80046be <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f003 0304 	and.w	r3, r3, #4
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	f000 8097 	beq.w	8004824 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80046f6:	2300      	movs	r3, #0
 80046f8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80046fa:	4b81      	ldr	r3, [pc, #516]	@ (8004900 <HAL_RCC_OscConfig+0x470>)
 80046fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004702:	2b00      	cmp	r3, #0
 8004704:	d10f      	bne.n	8004726 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004706:	2300      	movs	r3, #0
 8004708:	60bb      	str	r3, [r7, #8]
 800470a:	4b7d      	ldr	r3, [pc, #500]	@ (8004900 <HAL_RCC_OscConfig+0x470>)
 800470c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800470e:	4a7c      	ldr	r2, [pc, #496]	@ (8004900 <HAL_RCC_OscConfig+0x470>)
 8004710:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004714:	6413      	str	r3, [r2, #64]	@ 0x40
 8004716:	4b7a      	ldr	r3, [pc, #488]	@ (8004900 <HAL_RCC_OscConfig+0x470>)
 8004718:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800471a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800471e:	60bb      	str	r3, [r7, #8]
 8004720:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004722:	2301      	movs	r3, #1
 8004724:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004726:	4b77      	ldr	r3, [pc, #476]	@ (8004904 <HAL_RCC_OscConfig+0x474>)
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800472e:	2b00      	cmp	r3, #0
 8004730:	d118      	bne.n	8004764 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004732:	4b74      	ldr	r3, [pc, #464]	@ (8004904 <HAL_RCC_OscConfig+0x474>)
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	4a73      	ldr	r2, [pc, #460]	@ (8004904 <HAL_RCC_OscConfig+0x474>)
 8004738:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800473c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800473e:	f7fe f84f 	bl	80027e0 <HAL_GetTick>
 8004742:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004744:	e008      	b.n	8004758 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004746:	f7fe f84b 	bl	80027e0 <HAL_GetTick>
 800474a:	4602      	mov	r2, r0
 800474c:	693b      	ldr	r3, [r7, #16]
 800474e:	1ad3      	subs	r3, r2, r3
 8004750:	2b02      	cmp	r3, #2
 8004752:	d901      	bls.n	8004758 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004754:	2303      	movs	r3, #3
 8004756:	e10c      	b.n	8004972 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004758:	4b6a      	ldr	r3, [pc, #424]	@ (8004904 <HAL_RCC_OscConfig+0x474>)
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004760:	2b00      	cmp	r3, #0
 8004762:	d0f0      	beq.n	8004746 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	689b      	ldr	r3, [r3, #8]
 8004768:	2b01      	cmp	r3, #1
 800476a:	d106      	bne.n	800477a <HAL_RCC_OscConfig+0x2ea>
 800476c:	4b64      	ldr	r3, [pc, #400]	@ (8004900 <HAL_RCC_OscConfig+0x470>)
 800476e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004770:	4a63      	ldr	r2, [pc, #396]	@ (8004900 <HAL_RCC_OscConfig+0x470>)
 8004772:	f043 0301 	orr.w	r3, r3, #1
 8004776:	6713      	str	r3, [r2, #112]	@ 0x70
 8004778:	e01c      	b.n	80047b4 <HAL_RCC_OscConfig+0x324>
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	689b      	ldr	r3, [r3, #8]
 800477e:	2b05      	cmp	r3, #5
 8004780:	d10c      	bne.n	800479c <HAL_RCC_OscConfig+0x30c>
 8004782:	4b5f      	ldr	r3, [pc, #380]	@ (8004900 <HAL_RCC_OscConfig+0x470>)
 8004784:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004786:	4a5e      	ldr	r2, [pc, #376]	@ (8004900 <HAL_RCC_OscConfig+0x470>)
 8004788:	f043 0304 	orr.w	r3, r3, #4
 800478c:	6713      	str	r3, [r2, #112]	@ 0x70
 800478e:	4b5c      	ldr	r3, [pc, #368]	@ (8004900 <HAL_RCC_OscConfig+0x470>)
 8004790:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004792:	4a5b      	ldr	r2, [pc, #364]	@ (8004900 <HAL_RCC_OscConfig+0x470>)
 8004794:	f043 0301 	orr.w	r3, r3, #1
 8004798:	6713      	str	r3, [r2, #112]	@ 0x70
 800479a:	e00b      	b.n	80047b4 <HAL_RCC_OscConfig+0x324>
 800479c:	4b58      	ldr	r3, [pc, #352]	@ (8004900 <HAL_RCC_OscConfig+0x470>)
 800479e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047a0:	4a57      	ldr	r2, [pc, #348]	@ (8004900 <HAL_RCC_OscConfig+0x470>)
 80047a2:	f023 0301 	bic.w	r3, r3, #1
 80047a6:	6713      	str	r3, [r2, #112]	@ 0x70
 80047a8:	4b55      	ldr	r3, [pc, #340]	@ (8004900 <HAL_RCC_OscConfig+0x470>)
 80047aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047ac:	4a54      	ldr	r2, [pc, #336]	@ (8004900 <HAL_RCC_OscConfig+0x470>)
 80047ae:	f023 0304 	bic.w	r3, r3, #4
 80047b2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	689b      	ldr	r3, [r3, #8]
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d015      	beq.n	80047e8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047bc:	f7fe f810 	bl	80027e0 <HAL_GetTick>
 80047c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047c2:	e00a      	b.n	80047da <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047c4:	f7fe f80c 	bl	80027e0 <HAL_GetTick>
 80047c8:	4602      	mov	r2, r0
 80047ca:	693b      	ldr	r3, [r7, #16]
 80047cc:	1ad3      	subs	r3, r2, r3
 80047ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80047d2:	4293      	cmp	r3, r2
 80047d4:	d901      	bls.n	80047da <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80047d6:	2303      	movs	r3, #3
 80047d8:	e0cb      	b.n	8004972 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047da:	4b49      	ldr	r3, [pc, #292]	@ (8004900 <HAL_RCC_OscConfig+0x470>)
 80047dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047de:	f003 0302 	and.w	r3, r3, #2
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d0ee      	beq.n	80047c4 <HAL_RCC_OscConfig+0x334>
 80047e6:	e014      	b.n	8004812 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80047e8:	f7fd fffa 	bl	80027e0 <HAL_GetTick>
 80047ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80047ee:	e00a      	b.n	8004806 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047f0:	f7fd fff6 	bl	80027e0 <HAL_GetTick>
 80047f4:	4602      	mov	r2, r0
 80047f6:	693b      	ldr	r3, [r7, #16]
 80047f8:	1ad3      	subs	r3, r2, r3
 80047fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80047fe:	4293      	cmp	r3, r2
 8004800:	d901      	bls.n	8004806 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004802:	2303      	movs	r3, #3
 8004804:	e0b5      	b.n	8004972 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004806:	4b3e      	ldr	r3, [pc, #248]	@ (8004900 <HAL_RCC_OscConfig+0x470>)
 8004808:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800480a:	f003 0302 	and.w	r3, r3, #2
 800480e:	2b00      	cmp	r3, #0
 8004810:	d1ee      	bne.n	80047f0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004812:	7dfb      	ldrb	r3, [r7, #23]
 8004814:	2b01      	cmp	r3, #1
 8004816:	d105      	bne.n	8004824 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004818:	4b39      	ldr	r3, [pc, #228]	@ (8004900 <HAL_RCC_OscConfig+0x470>)
 800481a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800481c:	4a38      	ldr	r2, [pc, #224]	@ (8004900 <HAL_RCC_OscConfig+0x470>)
 800481e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004822:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	699b      	ldr	r3, [r3, #24]
 8004828:	2b00      	cmp	r3, #0
 800482a:	f000 80a1 	beq.w	8004970 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800482e:	4b34      	ldr	r3, [pc, #208]	@ (8004900 <HAL_RCC_OscConfig+0x470>)
 8004830:	689b      	ldr	r3, [r3, #8]
 8004832:	f003 030c 	and.w	r3, r3, #12
 8004836:	2b08      	cmp	r3, #8
 8004838:	d05c      	beq.n	80048f4 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	699b      	ldr	r3, [r3, #24]
 800483e:	2b02      	cmp	r3, #2
 8004840:	d141      	bne.n	80048c6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004842:	4b31      	ldr	r3, [pc, #196]	@ (8004908 <HAL_RCC_OscConfig+0x478>)
 8004844:	2200      	movs	r2, #0
 8004846:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004848:	f7fd ffca 	bl	80027e0 <HAL_GetTick>
 800484c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800484e:	e008      	b.n	8004862 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004850:	f7fd ffc6 	bl	80027e0 <HAL_GetTick>
 8004854:	4602      	mov	r2, r0
 8004856:	693b      	ldr	r3, [r7, #16]
 8004858:	1ad3      	subs	r3, r2, r3
 800485a:	2b02      	cmp	r3, #2
 800485c:	d901      	bls.n	8004862 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800485e:	2303      	movs	r3, #3
 8004860:	e087      	b.n	8004972 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004862:	4b27      	ldr	r3, [pc, #156]	@ (8004900 <HAL_RCC_OscConfig+0x470>)
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800486a:	2b00      	cmp	r3, #0
 800486c:	d1f0      	bne.n	8004850 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	69da      	ldr	r2, [r3, #28]
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	6a1b      	ldr	r3, [r3, #32]
 8004876:	431a      	orrs	r2, r3
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800487c:	019b      	lsls	r3, r3, #6
 800487e:	431a      	orrs	r2, r3
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004884:	085b      	lsrs	r3, r3, #1
 8004886:	3b01      	subs	r3, #1
 8004888:	041b      	lsls	r3, r3, #16
 800488a:	431a      	orrs	r2, r3
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004890:	061b      	lsls	r3, r3, #24
 8004892:	491b      	ldr	r1, [pc, #108]	@ (8004900 <HAL_RCC_OscConfig+0x470>)
 8004894:	4313      	orrs	r3, r2
 8004896:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004898:	4b1b      	ldr	r3, [pc, #108]	@ (8004908 <HAL_RCC_OscConfig+0x478>)
 800489a:	2201      	movs	r2, #1
 800489c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800489e:	f7fd ff9f 	bl	80027e0 <HAL_GetTick>
 80048a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80048a4:	e008      	b.n	80048b8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048a6:	f7fd ff9b 	bl	80027e0 <HAL_GetTick>
 80048aa:	4602      	mov	r2, r0
 80048ac:	693b      	ldr	r3, [r7, #16]
 80048ae:	1ad3      	subs	r3, r2, r3
 80048b0:	2b02      	cmp	r3, #2
 80048b2:	d901      	bls.n	80048b8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80048b4:	2303      	movs	r3, #3
 80048b6:	e05c      	b.n	8004972 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80048b8:	4b11      	ldr	r3, [pc, #68]	@ (8004900 <HAL_RCC_OscConfig+0x470>)
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d0f0      	beq.n	80048a6 <HAL_RCC_OscConfig+0x416>
 80048c4:	e054      	b.n	8004970 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80048c6:	4b10      	ldr	r3, [pc, #64]	@ (8004908 <HAL_RCC_OscConfig+0x478>)
 80048c8:	2200      	movs	r2, #0
 80048ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048cc:	f7fd ff88 	bl	80027e0 <HAL_GetTick>
 80048d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80048d2:	e008      	b.n	80048e6 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048d4:	f7fd ff84 	bl	80027e0 <HAL_GetTick>
 80048d8:	4602      	mov	r2, r0
 80048da:	693b      	ldr	r3, [r7, #16]
 80048dc:	1ad3      	subs	r3, r2, r3
 80048de:	2b02      	cmp	r3, #2
 80048e0:	d901      	bls.n	80048e6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80048e2:	2303      	movs	r3, #3
 80048e4:	e045      	b.n	8004972 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80048e6:	4b06      	ldr	r3, [pc, #24]	@ (8004900 <HAL_RCC_OscConfig+0x470>)
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d1f0      	bne.n	80048d4 <HAL_RCC_OscConfig+0x444>
 80048f2:	e03d      	b.n	8004970 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	699b      	ldr	r3, [r3, #24]
 80048f8:	2b01      	cmp	r3, #1
 80048fa:	d107      	bne.n	800490c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80048fc:	2301      	movs	r3, #1
 80048fe:	e038      	b.n	8004972 <HAL_RCC_OscConfig+0x4e2>
 8004900:	40023800 	.word	0x40023800
 8004904:	40007000 	.word	0x40007000
 8004908:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800490c:	4b1b      	ldr	r3, [pc, #108]	@ (800497c <HAL_RCC_OscConfig+0x4ec>)
 800490e:	685b      	ldr	r3, [r3, #4]
 8004910:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	699b      	ldr	r3, [r3, #24]
 8004916:	2b01      	cmp	r3, #1
 8004918:	d028      	beq.n	800496c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004924:	429a      	cmp	r2, r3
 8004926:	d121      	bne.n	800496c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004932:	429a      	cmp	r2, r3
 8004934:	d11a      	bne.n	800496c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004936:	68fa      	ldr	r2, [r7, #12]
 8004938:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800493c:	4013      	ands	r3, r2
 800493e:	687a      	ldr	r2, [r7, #4]
 8004940:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004942:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004944:	4293      	cmp	r3, r2
 8004946:	d111      	bne.n	800496c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004952:	085b      	lsrs	r3, r3, #1
 8004954:	3b01      	subs	r3, #1
 8004956:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004958:	429a      	cmp	r2, r3
 800495a:	d107      	bne.n	800496c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004966:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004968:	429a      	cmp	r2, r3
 800496a:	d001      	beq.n	8004970 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800496c:	2301      	movs	r3, #1
 800496e:	e000      	b.n	8004972 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004970:	2300      	movs	r3, #0
}
 8004972:	4618      	mov	r0, r3
 8004974:	3718      	adds	r7, #24
 8004976:	46bd      	mov	sp, r7
 8004978:	bd80      	pop	{r7, pc}
 800497a:	bf00      	nop
 800497c:	40023800 	.word	0x40023800

08004980 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004980:	b580      	push	{r7, lr}
 8004982:	b084      	sub	sp, #16
 8004984:	af00      	add	r7, sp, #0
 8004986:	6078      	str	r0, [r7, #4]
 8004988:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	2b00      	cmp	r3, #0
 800498e:	d101      	bne.n	8004994 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004990:	2301      	movs	r3, #1
 8004992:	e0cc      	b.n	8004b2e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004994:	4b68      	ldr	r3, [pc, #416]	@ (8004b38 <HAL_RCC_ClockConfig+0x1b8>)
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f003 0307 	and.w	r3, r3, #7
 800499c:	683a      	ldr	r2, [r7, #0]
 800499e:	429a      	cmp	r2, r3
 80049a0:	d90c      	bls.n	80049bc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049a2:	4b65      	ldr	r3, [pc, #404]	@ (8004b38 <HAL_RCC_ClockConfig+0x1b8>)
 80049a4:	683a      	ldr	r2, [r7, #0]
 80049a6:	b2d2      	uxtb	r2, r2
 80049a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80049aa:	4b63      	ldr	r3, [pc, #396]	@ (8004b38 <HAL_RCC_ClockConfig+0x1b8>)
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f003 0307 	and.w	r3, r3, #7
 80049b2:	683a      	ldr	r2, [r7, #0]
 80049b4:	429a      	cmp	r2, r3
 80049b6:	d001      	beq.n	80049bc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80049b8:	2301      	movs	r3, #1
 80049ba:	e0b8      	b.n	8004b2e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f003 0302 	and.w	r3, r3, #2
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d020      	beq.n	8004a0a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f003 0304 	and.w	r3, r3, #4
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d005      	beq.n	80049e0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80049d4:	4b59      	ldr	r3, [pc, #356]	@ (8004b3c <HAL_RCC_ClockConfig+0x1bc>)
 80049d6:	689b      	ldr	r3, [r3, #8]
 80049d8:	4a58      	ldr	r2, [pc, #352]	@ (8004b3c <HAL_RCC_ClockConfig+0x1bc>)
 80049da:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80049de:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f003 0308 	and.w	r3, r3, #8
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d005      	beq.n	80049f8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80049ec:	4b53      	ldr	r3, [pc, #332]	@ (8004b3c <HAL_RCC_ClockConfig+0x1bc>)
 80049ee:	689b      	ldr	r3, [r3, #8]
 80049f0:	4a52      	ldr	r2, [pc, #328]	@ (8004b3c <HAL_RCC_ClockConfig+0x1bc>)
 80049f2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80049f6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80049f8:	4b50      	ldr	r3, [pc, #320]	@ (8004b3c <HAL_RCC_ClockConfig+0x1bc>)
 80049fa:	689b      	ldr	r3, [r3, #8]
 80049fc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	689b      	ldr	r3, [r3, #8]
 8004a04:	494d      	ldr	r1, [pc, #308]	@ (8004b3c <HAL_RCC_ClockConfig+0x1bc>)
 8004a06:	4313      	orrs	r3, r2
 8004a08:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f003 0301 	and.w	r3, r3, #1
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d044      	beq.n	8004aa0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	685b      	ldr	r3, [r3, #4]
 8004a1a:	2b01      	cmp	r3, #1
 8004a1c:	d107      	bne.n	8004a2e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a1e:	4b47      	ldr	r3, [pc, #284]	@ (8004b3c <HAL_RCC_ClockConfig+0x1bc>)
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d119      	bne.n	8004a5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a2a:	2301      	movs	r3, #1
 8004a2c:	e07f      	b.n	8004b2e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	685b      	ldr	r3, [r3, #4]
 8004a32:	2b02      	cmp	r3, #2
 8004a34:	d003      	beq.n	8004a3e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004a3a:	2b03      	cmp	r3, #3
 8004a3c:	d107      	bne.n	8004a4e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a3e:	4b3f      	ldr	r3, [pc, #252]	@ (8004b3c <HAL_RCC_ClockConfig+0x1bc>)
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d109      	bne.n	8004a5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a4a:	2301      	movs	r3, #1
 8004a4c:	e06f      	b.n	8004b2e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a4e:	4b3b      	ldr	r3, [pc, #236]	@ (8004b3c <HAL_RCC_ClockConfig+0x1bc>)
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f003 0302 	and.w	r3, r3, #2
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d101      	bne.n	8004a5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a5a:	2301      	movs	r3, #1
 8004a5c:	e067      	b.n	8004b2e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004a5e:	4b37      	ldr	r3, [pc, #220]	@ (8004b3c <HAL_RCC_ClockConfig+0x1bc>)
 8004a60:	689b      	ldr	r3, [r3, #8]
 8004a62:	f023 0203 	bic.w	r2, r3, #3
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	685b      	ldr	r3, [r3, #4]
 8004a6a:	4934      	ldr	r1, [pc, #208]	@ (8004b3c <HAL_RCC_ClockConfig+0x1bc>)
 8004a6c:	4313      	orrs	r3, r2
 8004a6e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004a70:	f7fd feb6 	bl	80027e0 <HAL_GetTick>
 8004a74:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a76:	e00a      	b.n	8004a8e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a78:	f7fd feb2 	bl	80027e0 <HAL_GetTick>
 8004a7c:	4602      	mov	r2, r0
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	1ad3      	subs	r3, r2, r3
 8004a82:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a86:	4293      	cmp	r3, r2
 8004a88:	d901      	bls.n	8004a8e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004a8a:	2303      	movs	r3, #3
 8004a8c:	e04f      	b.n	8004b2e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a8e:	4b2b      	ldr	r3, [pc, #172]	@ (8004b3c <HAL_RCC_ClockConfig+0x1bc>)
 8004a90:	689b      	ldr	r3, [r3, #8]
 8004a92:	f003 020c 	and.w	r2, r3, #12
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	685b      	ldr	r3, [r3, #4]
 8004a9a:	009b      	lsls	r3, r3, #2
 8004a9c:	429a      	cmp	r2, r3
 8004a9e:	d1eb      	bne.n	8004a78 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004aa0:	4b25      	ldr	r3, [pc, #148]	@ (8004b38 <HAL_RCC_ClockConfig+0x1b8>)
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f003 0307 	and.w	r3, r3, #7
 8004aa8:	683a      	ldr	r2, [r7, #0]
 8004aaa:	429a      	cmp	r2, r3
 8004aac:	d20c      	bcs.n	8004ac8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004aae:	4b22      	ldr	r3, [pc, #136]	@ (8004b38 <HAL_RCC_ClockConfig+0x1b8>)
 8004ab0:	683a      	ldr	r2, [r7, #0]
 8004ab2:	b2d2      	uxtb	r2, r2
 8004ab4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ab6:	4b20      	ldr	r3, [pc, #128]	@ (8004b38 <HAL_RCC_ClockConfig+0x1b8>)
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f003 0307 	and.w	r3, r3, #7
 8004abe:	683a      	ldr	r2, [r7, #0]
 8004ac0:	429a      	cmp	r2, r3
 8004ac2:	d001      	beq.n	8004ac8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004ac4:	2301      	movs	r3, #1
 8004ac6:	e032      	b.n	8004b2e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f003 0304 	and.w	r3, r3, #4
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d008      	beq.n	8004ae6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004ad4:	4b19      	ldr	r3, [pc, #100]	@ (8004b3c <HAL_RCC_ClockConfig+0x1bc>)
 8004ad6:	689b      	ldr	r3, [r3, #8]
 8004ad8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	68db      	ldr	r3, [r3, #12]
 8004ae0:	4916      	ldr	r1, [pc, #88]	@ (8004b3c <HAL_RCC_ClockConfig+0x1bc>)
 8004ae2:	4313      	orrs	r3, r2
 8004ae4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f003 0308 	and.w	r3, r3, #8
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d009      	beq.n	8004b06 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004af2:	4b12      	ldr	r3, [pc, #72]	@ (8004b3c <HAL_RCC_ClockConfig+0x1bc>)
 8004af4:	689b      	ldr	r3, [r3, #8]
 8004af6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	691b      	ldr	r3, [r3, #16]
 8004afe:	00db      	lsls	r3, r3, #3
 8004b00:	490e      	ldr	r1, [pc, #56]	@ (8004b3c <HAL_RCC_ClockConfig+0x1bc>)
 8004b02:	4313      	orrs	r3, r2
 8004b04:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004b06:	f000 f821 	bl	8004b4c <HAL_RCC_GetSysClockFreq>
 8004b0a:	4602      	mov	r2, r0
 8004b0c:	4b0b      	ldr	r3, [pc, #44]	@ (8004b3c <HAL_RCC_ClockConfig+0x1bc>)
 8004b0e:	689b      	ldr	r3, [r3, #8]
 8004b10:	091b      	lsrs	r3, r3, #4
 8004b12:	f003 030f 	and.w	r3, r3, #15
 8004b16:	490a      	ldr	r1, [pc, #40]	@ (8004b40 <HAL_RCC_ClockConfig+0x1c0>)
 8004b18:	5ccb      	ldrb	r3, [r1, r3]
 8004b1a:	fa22 f303 	lsr.w	r3, r2, r3
 8004b1e:	4a09      	ldr	r2, [pc, #36]	@ (8004b44 <HAL_RCC_ClockConfig+0x1c4>)
 8004b20:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004b22:	4b09      	ldr	r3, [pc, #36]	@ (8004b48 <HAL_RCC_ClockConfig+0x1c8>)
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	4618      	mov	r0, r3
 8004b28:	f7fd fe16 	bl	8002758 <HAL_InitTick>

  return HAL_OK;
 8004b2c:	2300      	movs	r3, #0
}
 8004b2e:	4618      	mov	r0, r3
 8004b30:	3710      	adds	r7, #16
 8004b32:	46bd      	mov	sp, r7
 8004b34:	bd80      	pop	{r7, pc}
 8004b36:	bf00      	nop
 8004b38:	40023c00 	.word	0x40023c00
 8004b3c:	40023800 	.word	0x40023800
 8004b40:	0800ba28 	.word	0x0800ba28
 8004b44:	20000000 	.word	0x20000000
 8004b48:	20000004 	.word	0x20000004

08004b4c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004b4c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004b50:	b094      	sub	sp, #80	@ 0x50
 8004b52:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004b54:	2300      	movs	r3, #0
 8004b56:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8004b58:	2300      	movs	r3, #0
 8004b5a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8004b5c:	2300      	movs	r3, #0
 8004b5e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8004b60:	2300      	movs	r3, #0
 8004b62:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004b64:	4b79      	ldr	r3, [pc, #484]	@ (8004d4c <HAL_RCC_GetSysClockFreq+0x200>)
 8004b66:	689b      	ldr	r3, [r3, #8]
 8004b68:	f003 030c 	and.w	r3, r3, #12
 8004b6c:	2b08      	cmp	r3, #8
 8004b6e:	d00d      	beq.n	8004b8c <HAL_RCC_GetSysClockFreq+0x40>
 8004b70:	2b08      	cmp	r3, #8
 8004b72:	f200 80e1 	bhi.w	8004d38 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d002      	beq.n	8004b80 <HAL_RCC_GetSysClockFreq+0x34>
 8004b7a:	2b04      	cmp	r3, #4
 8004b7c:	d003      	beq.n	8004b86 <HAL_RCC_GetSysClockFreq+0x3a>
 8004b7e:	e0db      	b.n	8004d38 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004b80:	4b73      	ldr	r3, [pc, #460]	@ (8004d50 <HAL_RCC_GetSysClockFreq+0x204>)
 8004b82:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004b84:	e0db      	b.n	8004d3e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004b86:	4b73      	ldr	r3, [pc, #460]	@ (8004d54 <HAL_RCC_GetSysClockFreq+0x208>)
 8004b88:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004b8a:	e0d8      	b.n	8004d3e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004b8c:	4b6f      	ldr	r3, [pc, #444]	@ (8004d4c <HAL_RCC_GetSysClockFreq+0x200>)
 8004b8e:	685b      	ldr	r3, [r3, #4]
 8004b90:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004b94:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004b96:	4b6d      	ldr	r3, [pc, #436]	@ (8004d4c <HAL_RCC_GetSysClockFreq+0x200>)
 8004b98:	685b      	ldr	r3, [r3, #4]
 8004b9a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d063      	beq.n	8004c6a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004ba2:	4b6a      	ldr	r3, [pc, #424]	@ (8004d4c <HAL_RCC_GetSysClockFreq+0x200>)
 8004ba4:	685b      	ldr	r3, [r3, #4]
 8004ba6:	099b      	lsrs	r3, r3, #6
 8004ba8:	2200      	movs	r2, #0
 8004baa:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004bac:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004bae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004bb0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004bb4:	633b      	str	r3, [r7, #48]	@ 0x30
 8004bb6:	2300      	movs	r3, #0
 8004bb8:	637b      	str	r3, [r7, #52]	@ 0x34
 8004bba:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004bbe:	4622      	mov	r2, r4
 8004bc0:	462b      	mov	r3, r5
 8004bc2:	f04f 0000 	mov.w	r0, #0
 8004bc6:	f04f 0100 	mov.w	r1, #0
 8004bca:	0159      	lsls	r1, r3, #5
 8004bcc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004bd0:	0150      	lsls	r0, r2, #5
 8004bd2:	4602      	mov	r2, r0
 8004bd4:	460b      	mov	r3, r1
 8004bd6:	4621      	mov	r1, r4
 8004bd8:	1a51      	subs	r1, r2, r1
 8004bda:	6139      	str	r1, [r7, #16]
 8004bdc:	4629      	mov	r1, r5
 8004bde:	eb63 0301 	sbc.w	r3, r3, r1
 8004be2:	617b      	str	r3, [r7, #20]
 8004be4:	f04f 0200 	mov.w	r2, #0
 8004be8:	f04f 0300 	mov.w	r3, #0
 8004bec:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004bf0:	4659      	mov	r1, fp
 8004bf2:	018b      	lsls	r3, r1, #6
 8004bf4:	4651      	mov	r1, sl
 8004bf6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004bfa:	4651      	mov	r1, sl
 8004bfc:	018a      	lsls	r2, r1, #6
 8004bfe:	4651      	mov	r1, sl
 8004c00:	ebb2 0801 	subs.w	r8, r2, r1
 8004c04:	4659      	mov	r1, fp
 8004c06:	eb63 0901 	sbc.w	r9, r3, r1
 8004c0a:	f04f 0200 	mov.w	r2, #0
 8004c0e:	f04f 0300 	mov.w	r3, #0
 8004c12:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004c16:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004c1a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004c1e:	4690      	mov	r8, r2
 8004c20:	4699      	mov	r9, r3
 8004c22:	4623      	mov	r3, r4
 8004c24:	eb18 0303 	adds.w	r3, r8, r3
 8004c28:	60bb      	str	r3, [r7, #8]
 8004c2a:	462b      	mov	r3, r5
 8004c2c:	eb49 0303 	adc.w	r3, r9, r3
 8004c30:	60fb      	str	r3, [r7, #12]
 8004c32:	f04f 0200 	mov.w	r2, #0
 8004c36:	f04f 0300 	mov.w	r3, #0
 8004c3a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004c3e:	4629      	mov	r1, r5
 8004c40:	024b      	lsls	r3, r1, #9
 8004c42:	4621      	mov	r1, r4
 8004c44:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004c48:	4621      	mov	r1, r4
 8004c4a:	024a      	lsls	r2, r1, #9
 8004c4c:	4610      	mov	r0, r2
 8004c4e:	4619      	mov	r1, r3
 8004c50:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004c52:	2200      	movs	r2, #0
 8004c54:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004c56:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004c58:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004c5c:	f7fc f82c 	bl	8000cb8 <__aeabi_uldivmod>
 8004c60:	4602      	mov	r2, r0
 8004c62:	460b      	mov	r3, r1
 8004c64:	4613      	mov	r3, r2
 8004c66:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004c68:	e058      	b.n	8004d1c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004c6a:	4b38      	ldr	r3, [pc, #224]	@ (8004d4c <HAL_RCC_GetSysClockFreq+0x200>)
 8004c6c:	685b      	ldr	r3, [r3, #4]
 8004c6e:	099b      	lsrs	r3, r3, #6
 8004c70:	2200      	movs	r2, #0
 8004c72:	4618      	mov	r0, r3
 8004c74:	4611      	mov	r1, r2
 8004c76:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004c7a:	623b      	str	r3, [r7, #32]
 8004c7c:	2300      	movs	r3, #0
 8004c7e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004c80:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004c84:	4642      	mov	r2, r8
 8004c86:	464b      	mov	r3, r9
 8004c88:	f04f 0000 	mov.w	r0, #0
 8004c8c:	f04f 0100 	mov.w	r1, #0
 8004c90:	0159      	lsls	r1, r3, #5
 8004c92:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004c96:	0150      	lsls	r0, r2, #5
 8004c98:	4602      	mov	r2, r0
 8004c9a:	460b      	mov	r3, r1
 8004c9c:	4641      	mov	r1, r8
 8004c9e:	ebb2 0a01 	subs.w	sl, r2, r1
 8004ca2:	4649      	mov	r1, r9
 8004ca4:	eb63 0b01 	sbc.w	fp, r3, r1
 8004ca8:	f04f 0200 	mov.w	r2, #0
 8004cac:	f04f 0300 	mov.w	r3, #0
 8004cb0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004cb4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004cb8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004cbc:	ebb2 040a 	subs.w	r4, r2, sl
 8004cc0:	eb63 050b 	sbc.w	r5, r3, fp
 8004cc4:	f04f 0200 	mov.w	r2, #0
 8004cc8:	f04f 0300 	mov.w	r3, #0
 8004ccc:	00eb      	lsls	r3, r5, #3
 8004cce:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004cd2:	00e2      	lsls	r2, r4, #3
 8004cd4:	4614      	mov	r4, r2
 8004cd6:	461d      	mov	r5, r3
 8004cd8:	4643      	mov	r3, r8
 8004cda:	18e3      	adds	r3, r4, r3
 8004cdc:	603b      	str	r3, [r7, #0]
 8004cde:	464b      	mov	r3, r9
 8004ce0:	eb45 0303 	adc.w	r3, r5, r3
 8004ce4:	607b      	str	r3, [r7, #4]
 8004ce6:	f04f 0200 	mov.w	r2, #0
 8004cea:	f04f 0300 	mov.w	r3, #0
 8004cee:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004cf2:	4629      	mov	r1, r5
 8004cf4:	028b      	lsls	r3, r1, #10
 8004cf6:	4621      	mov	r1, r4
 8004cf8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004cfc:	4621      	mov	r1, r4
 8004cfe:	028a      	lsls	r2, r1, #10
 8004d00:	4610      	mov	r0, r2
 8004d02:	4619      	mov	r1, r3
 8004d04:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004d06:	2200      	movs	r2, #0
 8004d08:	61bb      	str	r3, [r7, #24]
 8004d0a:	61fa      	str	r2, [r7, #28]
 8004d0c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004d10:	f7fb ffd2 	bl	8000cb8 <__aeabi_uldivmod>
 8004d14:	4602      	mov	r2, r0
 8004d16:	460b      	mov	r3, r1
 8004d18:	4613      	mov	r3, r2
 8004d1a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004d1c:	4b0b      	ldr	r3, [pc, #44]	@ (8004d4c <HAL_RCC_GetSysClockFreq+0x200>)
 8004d1e:	685b      	ldr	r3, [r3, #4]
 8004d20:	0c1b      	lsrs	r3, r3, #16
 8004d22:	f003 0303 	and.w	r3, r3, #3
 8004d26:	3301      	adds	r3, #1
 8004d28:	005b      	lsls	r3, r3, #1
 8004d2a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8004d2c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004d2e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004d30:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d34:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004d36:	e002      	b.n	8004d3e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004d38:	4b05      	ldr	r3, [pc, #20]	@ (8004d50 <HAL_RCC_GetSysClockFreq+0x204>)
 8004d3a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004d3c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004d3e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004d40:	4618      	mov	r0, r3
 8004d42:	3750      	adds	r7, #80	@ 0x50
 8004d44:	46bd      	mov	sp, r7
 8004d46:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004d4a:	bf00      	nop
 8004d4c:	40023800 	.word	0x40023800
 8004d50:	00f42400 	.word	0x00f42400
 8004d54:	007a1200 	.word	0x007a1200

08004d58 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004d58:	b480      	push	{r7}
 8004d5a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004d5c:	4b03      	ldr	r3, [pc, #12]	@ (8004d6c <HAL_RCC_GetHCLKFreq+0x14>)
 8004d5e:	681b      	ldr	r3, [r3, #0]
}
 8004d60:	4618      	mov	r0, r3
 8004d62:	46bd      	mov	sp, r7
 8004d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d68:	4770      	bx	lr
 8004d6a:	bf00      	nop
 8004d6c:	20000000 	.word	0x20000000

08004d70 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004d70:	b580      	push	{r7, lr}
 8004d72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004d74:	f7ff fff0 	bl	8004d58 <HAL_RCC_GetHCLKFreq>
 8004d78:	4602      	mov	r2, r0
 8004d7a:	4b05      	ldr	r3, [pc, #20]	@ (8004d90 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004d7c:	689b      	ldr	r3, [r3, #8]
 8004d7e:	0a9b      	lsrs	r3, r3, #10
 8004d80:	f003 0307 	and.w	r3, r3, #7
 8004d84:	4903      	ldr	r1, [pc, #12]	@ (8004d94 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004d86:	5ccb      	ldrb	r3, [r1, r3]
 8004d88:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004d8c:	4618      	mov	r0, r3
 8004d8e:	bd80      	pop	{r7, pc}
 8004d90:	40023800 	.word	0x40023800
 8004d94:	0800ba38 	.word	0x0800ba38

08004d98 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004d98:	b580      	push	{r7, lr}
 8004d9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004d9c:	f7ff ffdc 	bl	8004d58 <HAL_RCC_GetHCLKFreq>
 8004da0:	4602      	mov	r2, r0
 8004da2:	4b05      	ldr	r3, [pc, #20]	@ (8004db8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004da4:	689b      	ldr	r3, [r3, #8]
 8004da6:	0b5b      	lsrs	r3, r3, #13
 8004da8:	f003 0307 	and.w	r3, r3, #7
 8004dac:	4903      	ldr	r1, [pc, #12]	@ (8004dbc <HAL_RCC_GetPCLK2Freq+0x24>)
 8004dae:	5ccb      	ldrb	r3, [r1, r3]
 8004db0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004db4:	4618      	mov	r0, r3
 8004db6:	bd80      	pop	{r7, pc}
 8004db8:	40023800 	.word	0x40023800
 8004dbc:	0800ba38 	.word	0x0800ba38

08004dc0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004dc0:	b580      	push	{r7, lr}
 8004dc2:	b082      	sub	sp, #8
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d101      	bne.n	8004dd2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004dce:	2301      	movs	r3, #1
 8004dd0:	e041      	b.n	8004e56 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004dd8:	b2db      	uxtb	r3, r3
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d106      	bne.n	8004dec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	2200      	movs	r2, #0
 8004de2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004de6:	6878      	ldr	r0, [r7, #4]
 8004de8:	f7fd fa86 	bl	80022f8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2202      	movs	r2, #2
 8004df0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681a      	ldr	r2, [r3, #0]
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	3304      	adds	r3, #4
 8004dfc:	4619      	mov	r1, r3
 8004dfe:	4610      	mov	r0, r2
 8004e00:	f000 fa9e 	bl	8005340 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2201      	movs	r2, #1
 8004e08:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2201      	movs	r2, #1
 8004e10:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	2201      	movs	r2, #1
 8004e18:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	2201      	movs	r2, #1
 8004e20:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2201      	movs	r2, #1
 8004e28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2201      	movs	r2, #1
 8004e30:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	2201      	movs	r2, #1
 8004e38:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2201      	movs	r2, #1
 8004e40:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2201      	movs	r2, #1
 8004e48:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2201      	movs	r2, #1
 8004e50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004e54:	2300      	movs	r3, #0
}
 8004e56:	4618      	mov	r0, r3
 8004e58:	3708      	adds	r7, #8
 8004e5a:	46bd      	mov	sp, r7
 8004e5c:	bd80      	pop	{r7, pc}
	...

08004e60 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004e60:	b480      	push	{r7}
 8004e62:	b085      	sub	sp, #20
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004e6e:	b2db      	uxtb	r3, r3
 8004e70:	2b01      	cmp	r3, #1
 8004e72:	d001      	beq.n	8004e78 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004e74:	2301      	movs	r3, #1
 8004e76:	e044      	b.n	8004f02 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2202      	movs	r2, #2
 8004e7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	68da      	ldr	r2, [r3, #12]
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f042 0201 	orr.w	r2, r2, #1
 8004e8e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	4a1e      	ldr	r2, [pc, #120]	@ (8004f10 <HAL_TIM_Base_Start_IT+0xb0>)
 8004e96:	4293      	cmp	r3, r2
 8004e98:	d018      	beq.n	8004ecc <HAL_TIM_Base_Start_IT+0x6c>
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004ea2:	d013      	beq.n	8004ecc <HAL_TIM_Base_Start_IT+0x6c>
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	4a1a      	ldr	r2, [pc, #104]	@ (8004f14 <HAL_TIM_Base_Start_IT+0xb4>)
 8004eaa:	4293      	cmp	r3, r2
 8004eac:	d00e      	beq.n	8004ecc <HAL_TIM_Base_Start_IT+0x6c>
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	4a19      	ldr	r2, [pc, #100]	@ (8004f18 <HAL_TIM_Base_Start_IT+0xb8>)
 8004eb4:	4293      	cmp	r3, r2
 8004eb6:	d009      	beq.n	8004ecc <HAL_TIM_Base_Start_IT+0x6c>
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	4a17      	ldr	r2, [pc, #92]	@ (8004f1c <HAL_TIM_Base_Start_IT+0xbc>)
 8004ebe:	4293      	cmp	r3, r2
 8004ec0:	d004      	beq.n	8004ecc <HAL_TIM_Base_Start_IT+0x6c>
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	4a16      	ldr	r2, [pc, #88]	@ (8004f20 <HAL_TIM_Base_Start_IT+0xc0>)
 8004ec8:	4293      	cmp	r3, r2
 8004eca:	d111      	bne.n	8004ef0 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	689b      	ldr	r3, [r3, #8]
 8004ed2:	f003 0307 	and.w	r3, r3, #7
 8004ed6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	2b06      	cmp	r3, #6
 8004edc:	d010      	beq.n	8004f00 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	681a      	ldr	r2, [r3, #0]
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f042 0201 	orr.w	r2, r2, #1
 8004eec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004eee:	e007      	b.n	8004f00 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	681a      	ldr	r2, [r3, #0]
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	f042 0201 	orr.w	r2, r2, #1
 8004efe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004f00:	2300      	movs	r3, #0
}
 8004f02:	4618      	mov	r0, r3
 8004f04:	3714      	adds	r7, #20
 8004f06:	46bd      	mov	sp, r7
 8004f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0c:	4770      	bx	lr
 8004f0e:	bf00      	nop
 8004f10:	40010000 	.word	0x40010000
 8004f14:	40000400 	.word	0x40000400
 8004f18:	40000800 	.word	0x40000800
 8004f1c:	40000c00 	.word	0x40000c00
 8004f20:	40014000 	.word	0x40014000

08004f24 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8004f24:	b480      	push	{r7}
 8004f26:	b083      	sub	sp, #12
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	68da      	ldr	r2, [r3, #12]
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f022 0201 	bic.w	r2, r2, #1
 8004f3a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	6a1a      	ldr	r2, [r3, #32]
 8004f42:	f241 1311 	movw	r3, #4369	@ 0x1111
 8004f46:	4013      	ands	r3, r2
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d10f      	bne.n	8004f6c <HAL_TIM_Base_Stop_IT+0x48>
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	6a1a      	ldr	r2, [r3, #32]
 8004f52:	f240 4344 	movw	r3, #1092	@ 0x444
 8004f56:	4013      	ands	r3, r2
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d107      	bne.n	8004f6c <HAL_TIM_Base_Stop_IT+0x48>
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	681a      	ldr	r2, [r3, #0]
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f022 0201 	bic.w	r2, r2, #1
 8004f6a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	2201      	movs	r2, #1
 8004f70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8004f74:	2300      	movs	r3, #0
}
 8004f76:	4618      	mov	r0, r3
 8004f78:	370c      	adds	r7, #12
 8004f7a:	46bd      	mov	sp, r7
 8004f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f80:	4770      	bx	lr

08004f82 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004f82:	b580      	push	{r7, lr}
 8004f84:	b084      	sub	sp, #16
 8004f86:	af00      	add	r7, sp, #0
 8004f88:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	68db      	ldr	r3, [r3, #12]
 8004f90:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	691b      	ldr	r3, [r3, #16]
 8004f98:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004f9a:	68bb      	ldr	r3, [r7, #8]
 8004f9c:	f003 0302 	and.w	r3, r3, #2
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d020      	beq.n	8004fe6 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	f003 0302 	and.w	r3, r3, #2
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d01b      	beq.n	8004fe6 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	f06f 0202 	mvn.w	r2, #2
 8004fb6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	2201      	movs	r2, #1
 8004fbc:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	699b      	ldr	r3, [r3, #24]
 8004fc4:	f003 0303 	and.w	r3, r3, #3
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d003      	beq.n	8004fd4 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004fcc:	6878      	ldr	r0, [r7, #4]
 8004fce:	f000 f999 	bl	8005304 <HAL_TIM_IC_CaptureCallback>
 8004fd2:	e005      	b.n	8004fe0 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004fd4:	6878      	ldr	r0, [r7, #4]
 8004fd6:	f000 f98b 	bl	80052f0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004fda:	6878      	ldr	r0, [r7, #4]
 8004fdc:	f000 f99c 	bl	8005318 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	2200      	movs	r2, #0
 8004fe4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004fe6:	68bb      	ldr	r3, [r7, #8]
 8004fe8:	f003 0304 	and.w	r3, r3, #4
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d020      	beq.n	8005032 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	f003 0304 	and.w	r3, r3, #4
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d01b      	beq.n	8005032 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	f06f 0204 	mvn.w	r2, #4
 8005002:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	2202      	movs	r2, #2
 8005008:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	699b      	ldr	r3, [r3, #24]
 8005010:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005014:	2b00      	cmp	r3, #0
 8005016:	d003      	beq.n	8005020 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005018:	6878      	ldr	r0, [r7, #4]
 800501a:	f000 f973 	bl	8005304 <HAL_TIM_IC_CaptureCallback>
 800501e:	e005      	b.n	800502c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005020:	6878      	ldr	r0, [r7, #4]
 8005022:	f000 f965 	bl	80052f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005026:	6878      	ldr	r0, [r7, #4]
 8005028:	f000 f976 	bl	8005318 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2200      	movs	r2, #0
 8005030:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005032:	68bb      	ldr	r3, [r7, #8]
 8005034:	f003 0308 	and.w	r3, r3, #8
 8005038:	2b00      	cmp	r3, #0
 800503a:	d020      	beq.n	800507e <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	f003 0308 	and.w	r3, r3, #8
 8005042:	2b00      	cmp	r3, #0
 8005044:	d01b      	beq.n	800507e <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	f06f 0208 	mvn.w	r2, #8
 800504e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	2204      	movs	r2, #4
 8005054:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	69db      	ldr	r3, [r3, #28]
 800505c:	f003 0303 	and.w	r3, r3, #3
 8005060:	2b00      	cmp	r3, #0
 8005062:	d003      	beq.n	800506c <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005064:	6878      	ldr	r0, [r7, #4]
 8005066:	f000 f94d 	bl	8005304 <HAL_TIM_IC_CaptureCallback>
 800506a:	e005      	b.n	8005078 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800506c:	6878      	ldr	r0, [r7, #4]
 800506e:	f000 f93f 	bl	80052f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005072:	6878      	ldr	r0, [r7, #4]
 8005074:	f000 f950 	bl	8005318 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2200      	movs	r2, #0
 800507c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800507e:	68bb      	ldr	r3, [r7, #8]
 8005080:	f003 0310 	and.w	r3, r3, #16
 8005084:	2b00      	cmp	r3, #0
 8005086:	d020      	beq.n	80050ca <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	f003 0310 	and.w	r3, r3, #16
 800508e:	2b00      	cmp	r3, #0
 8005090:	d01b      	beq.n	80050ca <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	f06f 0210 	mvn.w	r2, #16
 800509a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	2208      	movs	r2, #8
 80050a0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	69db      	ldr	r3, [r3, #28]
 80050a8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d003      	beq.n	80050b8 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80050b0:	6878      	ldr	r0, [r7, #4]
 80050b2:	f000 f927 	bl	8005304 <HAL_TIM_IC_CaptureCallback>
 80050b6:	e005      	b.n	80050c4 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80050b8:	6878      	ldr	r0, [r7, #4]
 80050ba:	f000 f919 	bl	80052f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80050be:	6878      	ldr	r0, [r7, #4]
 80050c0:	f000 f92a 	bl	8005318 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	2200      	movs	r2, #0
 80050c8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80050ca:	68bb      	ldr	r3, [r7, #8]
 80050cc:	f003 0301 	and.w	r3, r3, #1
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d00c      	beq.n	80050ee <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	f003 0301 	and.w	r3, r3, #1
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d007      	beq.n	80050ee <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f06f 0201 	mvn.w	r2, #1
 80050e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80050e8:	6878      	ldr	r0, [r7, #4]
 80050ea:	f7fc f835 	bl	8001158 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80050ee:	68bb      	ldr	r3, [r7, #8]
 80050f0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d00c      	beq.n	8005112 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d007      	beq.n	8005112 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800510a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800510c:	6878      	ldr	r0, [r7, #4]
 800510e:	f000 fab5 	bl	800567c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005112:	68bb      	ldr	r3, [r7, #8]
 8005114:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005118:	2b00      	cmp	r3, #0
 800511a:	d00c      	beq.n	8005136 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005122:	2b00      	cmp	r3, #0
 8005124:	d007      	beq.n	8005136 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800512e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005130:	6878      	ldr	r0, [r7, #4]
 8005132:	f000 f8fb 	bl	800532c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005136:	68bb      	ldr	r3, [r7, #8]
 8005138:	f003 0320 	and.w	r3, r3, #32
 800513c:	2b00      	cmp	r3, #0
 800513e:	d00c      	beq.n	800515a <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	f003 0320 	and.w	r3, r3, #32
 8005146:	2b00      	cmp	r3, #0
 8005148:	d007      	beq.n	800515a <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	f06f 0220 	mvn.w	r2, #32
 8005152:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005154:	6878      	ldr	r0, [r7, #4]
 8005156:	f000 fa87 	bl	8005668 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800515a:	bf00      	nop
 800515c:	3710      	adds	r7, #16
 800515e:	46bd      	mov	sp, r7
 8005160:	bd80      	pop	{r7, pc}

08005162 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005162:	b580      	push	{r7, lr}
 8005164:	b084      	sub	sp, #16
 8005166:	af00      	add	r7, sp, #0
 8005168:	6078      	str	r0, [r7, #4]
 800516a:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800516c:	2300      	movs	r3, #0
 800516e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005176:	2b01      	cmp	r3, #1
 8005178:	d101      	bne.n	800517e <HAL_TIM_ConfigClockSource+0x1c>
 800517a:	2302      	movs	r3, #2
 800517c:	e0b4      	b.n	80052e8 <HAL_TIM_ConfigClockSource+0x186>
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	2201      	movs	r2, #1
 8005182:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	2202      	movs	r2, #2
 800518a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	689b      	ldr	r3, [r3, #8]
 8005194:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005196:	68bb      	ldr	r3, [r7, #8]
 8005198:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800519c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800519e:	68bb      	ldr	r3, [r7, #8]
 80051a0:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80051a4:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	68ba      	ldr	r2, [r7, #8]
 80051ac:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80051ae:	683b      	ldr	r3, [r7, #0]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80051b6:	d03e      	beq.n	8005236 <HAL_TIM_ConfigClockSource+0xd4>
 80051b8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80051bc:	f200 8087 	bhi.w	80052ce <HAL_TIM_ConfigClockSource+0x16c>
 80051c0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80051c4:	f000 8086 	beq.w	80052d4 <HAL_TIM_ConfigClockSource+0x172>
 80051c8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80051cc:	d87f      	bhi.n	80052ce <HAL_TIM_ConfigClockSource+0x16c>
 80051ce:	2b70      	cmp	r3, #112	@ 0x70
 80051d0:	d01a      	beq.n	8005208 <HAL_TIM_ConfigClockSource+0xa6>
 80051d2:	2b70      	cmp	r3, #112	@ 0x70
 80051d4:	d87b      	bhi.n	80052ce <HAL_TIM_ConfigClockSource+0x16c>
 80051d6:	2b60      	cmp	r3, #96	@ 0x60
 80051d8:	d050      	beq.n	800527c <HAL_TIM_ConfigClockSource+0x11a>
 80051da:	2b60      	cmp	r3, #96	@ 0x60
 80051dc:	d877      	bhi.n	80052ce <HAL_TIM_ConfigClockSource+0x16c>
 80051de:	2b50      	cmp	r3, #80	@ 0x50
 80051e0:	d03c      	beq.n	800525c <HAL_TIM_ConfigClockSource+0xfa>
 80051e2:	2b50      	cmp	r3, #80	@ 0x50
 80051e4:	d873      	bhi.n	80052ce <HAL_TIM_ConfigClockSource+0x16c>
 80051e6:	2b40      	cmp	r3, #64	@ 0x40
 80051e8:	d058      	beq.n	800529c <HAL_TIM_ConfigClockSource+0x13a>
 80051ea:	2b40      	cmp	r3, #64	@ 0x40
 80051ec:	d86f      	bhi.n	80052ce <HAL_TIM_ConfigClockSource+0x16c>
 80051ee:	2b30      	cmp	r3, #48	@ 0x30
 80051f0:	d064      	beq.n	80052bc <HAL_TIM_ConfigClockSource+0x15a>
 80051f2:	2b30      	cmp	r3, #48	@ 0x30
 80051f4:	d86b      	bhi.n	80052ce <HAL_TIM_ConfigClockSource+0x16c>
 80051f6:	2b20      	cmp	r3, #32
 80051f8:	d060      	beq.n	80052bc <HAL_TIM_ConfigClockSource+0x15a>
 80051fa:	2b20      	cmp	r3, #32
 80051fc:	d867      	bhi.n	80052ce <HAL_TIM_ConfigClockSource+0x16c>
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d05c      	beq.n	80052bc <HAL_TIM_ConfigClockSource+0x15a>
 8005202:	2b10      	cmp	r3, #16
 8005204:	d05a      	beq.n	80052bc <HAL_TIM_ConfigClockSource+0x15a>
 8005206:	e062      	b.n	80052ce <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800520c:	683b      	ldr	r3, [r7, #0]
 800520e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005210:	683b      	ldr	r3, [r7, #0]
 8005212:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005214:	683b      	ldr	r3, [r7, #0]
 8005216:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005218:	f000 f998 	bl	800554c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	689b      	ldr	r3, [r3, #8]
 8005222:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005224:	68bb      	ldr	r3, [r7, #8]
 8005226:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800522a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	68ba      	ldr	r2, [r7, #8]
 8005232:	609a      	str	r2, [r3, #8]
      break;
 8005234:	e04f      	b.n	80052d6 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800523a:	683b      	ldr	r3, [r7, #0]
 800523c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800523e:	683b      	ldr	r3, [r7, #0]
 8005240:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005242:	683b      	ldr	r3, [r7, #0]
 8005244:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005246:	f000 f981 	bl	800554c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	689a      	ldr	r2, [r3, #8]
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005258:	609a      	str	r2, [r3, #8]
      break;
 800525a:	e03c      	b.n	80052d6 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005260:	683b      	ldr	r3, [r7, #0]
 8005262:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005264:	683b      	ldr	r3, [r7, #0]
 8005266:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005268:	461a      	mov	r2, r3
 800526a:	f000 f8f5 	bl	8005458 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	2150      	movs	r1, #80	@ 0x50
 8005274:	4618      	mov	r0, r3
 8005276:	f000 f94e 	bl	8005516 <TIM_ITRx_SetConfig>
      break;
 800527a:	e02c      	b.n	80052d6 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005280:	683b      	ldr	r3, [r7, #0]
 8005282:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005284:	683b      	ldr	r3, [r7, #0]
 8005286:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005288:	461a      	mov	r2, r3
 800528a:	f000 f914 	bl	80054b6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	2160      	movs	r1, #96	@ 0x60
 8005294:	4618      	mov	r0, r3
 8005296:	f000 f93e 	bl	8005516 <TIM_ITRx_SetConfig>
      break;
 800529a:	e01c      	b.n	80052d6 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80052a0:	683b      	ldr	r3, [r7, #0]
 80052a2:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80052a4:	683b      	ldr	r3, [r7, #0]
 80052a6:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80052a8:	461a      	mov	r2, r3
 80052aa:	f000 f8d5 	bl	8005458 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	2140      	movs	r1, #64	@ 0x40
 80052b4:	4618      	mov	r0, r3
 80052b6:	f000 f92e 	bl	8005516 <TIM_ITRx_SetConfig>
      break;
 80052ba:	e00c      	b.n	80052d6 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681a      	ldr	r2, [r3, #0]
 80052c0:	683b      	ldr	r3, [r7, #0]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	4619      	mov	r1, r3
 80052c6:	4610      	mov	r0, r2
 80052c8:	f000 f925 	bl	8005516 <TIM_ITRx_SetConfig>
      break;
 80052cc:	e003      	b.n	80052d6 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80052ce:	2301      	movs	r3, #1
 80052d0:	73fb      	strb	r3, [r7, #15]
      break;
 80052d2:	e000      	b.n	80052d6 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80052d4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	2201      	movs	r2, #1
 80052da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	2200      	movs	r2, #0
 80052e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80052e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80052e8:	4618      	mov	r0, r3
 80052ea:	3710      	adds	r7, #16
 80052ec:	46bd      	mov	sp, r7
 80052ee:	bd80      	pop	{r7, pc}

080052f0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80052f0:	b480      	push	{r7}
 80052f2:	b083      	sub	sp, #12
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80052f8:	bf00      	nop
 80052fa:	370c      	adds	r7, #12
 80052fc:	46bd      	mov	sp, r7
 80052fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005302:	4770      	bx	lr

08005304 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005304:	b480      	push	{r7}
 8005306:	b083      	sub	sp, #12
 8005308:	af00      	add	r7, sp, #0
 800530a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800530c:	bf00      	nop
 800530e:	370c      	adds	r7, #12
 8005310:	46bd      	mov	sp, r7
 8005312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005316:	4770      	bx	lr

08005318 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005318:	b480      	push	{r7}
 800531a:	b083      	sub	sp, #12
 800531c:	af00      	add	r7, sp, #0
 800531e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005320:	bf00      	nop
 8005322:	370c      	adds	r7, #12
 8005324:	46bd      	mov	sp, r7
 8005326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532a:	4770      	bx	lr

0800532c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800532c:	b480      	push	{r7}
 800532e:	b083      	sub	sp, #12
 8005330:	af00      	add	r7, sp, #0
 8005332:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005334:	bf00      	nop
 8005336:	370c      	adds	r7, #12
 8005338:	46bd      	mov	sp, r7
 800533a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533e:	4770      	bx	lr

08005340 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005340:	b480      	push	{r7}
 8005342:	b085      	sub	sp, #20
 8005344:	af00      	add	r7, sp, #0
 8005346:	6078      	str	r0, [r7, #4]
 8005348:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	4a3a      	ldr	r2, [pc, #232]	@ (800543c <TIM_Base_SetConfig+0xfc>)
 8005354:	4293      	cmp	r3, r2
 8005356:	d00f      	beq.n	8005378 <TIM_Base_SetConfig+0x38>
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800535e:	d00b      	beq.n	8005378 <TIM_Base_SetConfig+0x38>
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	4a37      	ldr	r2, [pc, #220]	@ (8005440 <TIM_Base_SetConfig+0x100>)
 8005364:	4293      	cmp	r3, r2
 8005366:	d007      	beq.n	8005378 <TIM_Base_SetConfig+0x38>
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	4a36      	ldr	r2, [pc, #216]	@ (8005444 <TIM_Base_SetConfig+0x104>)
 800536c:	4293      	cmp	r3, r2
 800536e:	d003      	beq.n	8005378 <TIM_Base_SetConfig+0x38>
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	4a35      	ldr	r2, [pc, #212]	@ (8005448 <TIM_Base_SetConfig+0x108>)
 8005374:	4293      	cmp	r3, r2
 8005376:	d108      	bne.n	800538a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800537e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005380:	683b      	ldr	r3, [r7, #0]
 8005382:	685b      	ldr	r3, [r3, #4]
 8005384:	68fa      	ldr	r2, [r7, #12]
 8005386:	4313      	orrs	r3, r2
 8005388:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	4a2b      	ldr	r2, [pc, #172]	@ (800543c <TIM_Base_SetConfig+0xfc>)
 800538e:	4293      	cmp	r3, r2
 8005390:	d01b      	beq.n	80053ca <TIM_Base_SetConfig+0x8a>
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005398:	d017      	beq.n	80053ca <TIM_Base_SetConfig+0x8a>
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	4a28      	ldr	r2, [pc, #160]	@ (8005440 <TIM_Base_SetConfig+0x100>)
 800539e:	4293      	cmp	r3, r2
 80053a0:	d013      	beq.n	80053ca <TIM_Base_SetConfig+0x8a>
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	4a27      	ldr	r2, [pc, #156]	@ (8005444 <TIM_Base_SetConfig+0x104>)
 80053a6:	4293      	cmp	r3, r2
 80053a8:	d00f      	beq.n	80053ca <TIM_Base_SetConfig+0x8a>
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	4a26      	ldr	r2, [pc, #152]	@ (8005448 <TIM_Base_SetConfig+0x108>)
 80053ae:	4293      	cmp	r3, r2
 80053b0:	d00b      	beq.n	80053ca <TIM_Base_SetConfig+0x8a>
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	4a25      	ldr	r2, [pc, #148]	@ (800544c <TIM_Base_SetConfig+0x10c>)
 80053b6:	4293      	cmp	r3, r2
 80053b8:	d007      	beq.n	80053ca <TIM_Base_SetConfig+0x8a>
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	4a24      	ldr	r2, [pc, #144]	@ (8005450 <TIM_Base_SetConfig+0x110>)
 80053be:	4293      	cmp	r3, r2
 80053c0:	d003      	beq.n	80053ca <TIM_Base_SetConfig+0x8a>
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	4a23      	ldr	r2, [pc, #140]	@ (8005454 <TIM_Base_SetConfig+0x114>)
 80053c6:	4293      	cmp	r3, r2
 80053c8:	d108      	bne.n	80053dc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80053d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80053d2:	683b      	ldr	r3, [r7, #0]
 80053d4:	68db      	ldr	r3, [r3, #12]
 80053d6:	68fa      	ldr	r2, [r7, #12]
 80053d8:	4313      	orrs	r3, r2
 80053da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80053e2:	683b      	ldr	r3, [r7, #0]
 80053e4:	695b      	ldr	r3, [r3, #20]
 80053e6:	4313      	orrs	r3, r2
 80053e8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	68fa      	ldr	r2, [r7, #12]
 80053ee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80053f0:	683b      	ldr	r3, [r7, #0]
 80053f2:	689a      	ldr	r2, [r3, #8]
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80053f8:	683b      	ldr	r3, [r7, #0]
 80053fa:	681a      	ldr	r2, [r3, #0]
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	4a0e      	ldr	r2, [pc, #56]	@ (800543c <TIM_Base_SetConfig+0xfc>)
 8005404:	4293      	cmp	r3, r2
 8005406:	d103      	bne.n	8005410 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005408:	683b      	ldr	r3, [r7, #0]
 800540a:	691a      	ldr	r2, [r3, #16]
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	2201      	movs	r2, #1
 8005414:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	691b      	ldr	r3, [r3, #16]
 800541a:	f003 0301 	and.w	r3, r3, #1
 800541e:	2b01      	cmp	r3, #1
 8005420:	d105      	bne.n	800542e <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	691b      	ldr	r3, [r3, #16]
 8005426:	f023 0201 	bic.w	r2, r3, #1
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	611a      	str	r2, [r3, #16]
  }
}
 800542e:	bf00      	nop
 8005430:	3714      	adds	r7, #20
 8005432:	46bd      	mov	sp, r7
 8005434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005438:	4770      	bx	lr
 800543a:	bf00      	nop
 800543c:	40010000 	.word	0x40010000
 8005440:	40000400 	.word	0x40000400
 8005444:	40000800 	.word	0x40000800
 8005448:	40000c00 	.word	0x40000c00
 800544c:	40014000 	.word	0x40014000
 8005450:	40014400 	.word	0x40014400
 8005454:	40014800 	.word	0x40014800

08005458 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005458:	b480      	push	{r7}
 800545a:	b087      	sub	sp, #28
 800545c:	af00      	add	r7, sp, #0
 800545e:	60f8      	str	r0, [r7, #12]
 8005460:	60b9      	str	r1, [r7, #8]
 8005462:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	6a1b      	ldr	r3, [r3, #32]
 8005468:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	6a1b      	ldr	r3, [r3, #32]
 800546e:	f023 0201 	bic.w	r2, r3, #1
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	699b      	ldr	r3, [r3, #24]
 800547a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800547c:	693b      	ldr	r3, [r7, #16]
 800547e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005482:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	011b      	lsls	r3, r3, #4
 8005488:	693a      	ldr	r2, [r7, #16]
 800548a:	4313      	orrs	r3, r2
 800548c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800548e:	697b      	ldr	r3, [r7, #20]
 8005490:	f023 030a 	bic.w	r3, r3, #10
 8005494:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005496:	697a      	ldr	r2, [r7, #20]
 8005498:	68bb      	ldr	r3, [r7, #8]
 800549a:	4313      	orrs	r3, r2
 800549c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	693a      	ldr	r2, [r7, #16]
 80054a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	697a      	ldr	r2, [r7, #20]
 80054a8:	621a      	str	r2, [r3, #32]
}
 80054aa:	bf00      	nop
 80054ac:	371c      	adds	r7, #28
 80054ae:	46bd      	mov	sp, r7
 80054b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b4:	4770      	bx	lr

080054b6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80054b6:	b480      	push	{r7}
 80054b8:	b087      	sub	sp, #28
 80054ba:	af00      	add	r7, sp, #0
 80054bc:	60f8      	str	r0, [r7, #12]
 80054be:	60b9      	str	r1, [r7, #8]
 80054c0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	6a1b      	ldr	r3, [r3, #32]
 80054c6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	6a1b      	ldr	r3, [r3, #32]
 80054cc:	f023 0210 	bic.w	r2, r3, #16
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	699b      	ldr	r3, [r3, #24]
 80054d8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80054da:	693b      	ldr	r3, [r7, #16]
 80054dc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80054e0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	031b      	lsls	r3, r3, #12
 80054e6:	693a      	ldr	r2, [r7, #16]
 80054e8:	4313      	orrs	r3, r2
 80054ea:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80054ec:	697b      	ldr	r3, [r7, #20]
 80054ee:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80054f2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80054f4:	68bb      	ldr	r3, [r7, #8]
 80054f6:	011b      	lsls	r3, r3, #4
 80054f8:	697a      	ldr	r2, [r7, #20]
 80054fa:	4313      	orrs	r3, r2
 80054fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	693a      	ldr	r2, [r7, #16]
 8005502:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	697a      	ldr	r2, [r7, #20]
 8005508:	621a      	str	r2, [r3, #32]
}
 800550a:	bf00      	nop
 800550c:	371c      	adds	r7, #28
 800550e:	46bd      	mov	sp, r7
 8005510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005514:	4770      	bx	lr

08005516 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005516:	b480      	push	{r7}
 8005518:	b085      	sub	sp, #20
 800551a:	af00      	add	r7, sp, #0
 800551c:	6078      	str	r0, [r7, #4]
 800551e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	689b      	ldr	r3, [r3, #8]
 8005524:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800552c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800552e:	683a      	ldr	r2, [r7, #0]
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	4313      	orrs	r3, r2
 8005534:	f043 0307 	orr.w	r3, r3, #7
 8005538:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	68fa      	ldr	r2, [r7, #12]
 800553e:	609a      	str	r2, [r3, #8]
}
 8005540:	bf00      	nop
 8005542:	3714      	adds	r7, #20
 8005544:	46bd      	mov	sp, r7
 8005546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554a:	4770      	bx	lr

0800554c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800554c:	b480      	push	{r7}
 800554e:	b087      	sub	sp, #28
 8005550:	af00      	add	r7, sp, #0
 8005552:	60f8      	str	r0, [r7, #12]
 8005554:	60b9      	str	r1, [r7, #8]
 8005556:	607a      	str	r2, [r7, #4]
 8005558:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	689b      	ldr	r3, [r3, #8]
 800555e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005560:	697b      	ldr	r3, [r7, #20]
 8005562:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005566:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005568:	683b      	ldr	r3, [r7, #0]
 800556a:	021a      	lsls	r2, r3, #8
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	431a      	orrs	r2, r3
 8005570:	68bb      	ldr	r3, [r7, #8]
 8005572:	4313      	orrs	r3, r2
 8005574:	697a      	ldr	r2, [r7, #20]
 8005576:	4313      	orrs	r3, r2
 8005578:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	697a      	ldr	r2, [r7, #20]
 800557e:	609a      	str	r2, [r3, #8]
}
 8005580:	bf00      	nop
 8005582:	371c      	adds	r7, #28
 8005584:	46bd      	mov	sp, r7
 8005586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558a:	4770      	bx	lr

0800558c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800558c:	b480      	push	{r7}
 800558e:	b085      	sub	sp, #20
 8005590:	af00      	add	r7, sp, #0
 8005592:	6078      	str	r0, [r7, #4]
 8005594:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800559c:	2b01      	cmp	r3, #1
 800559e:	d101      	bne.n	80055a4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80055a0:	2302      	movs	r3, #2
 80055a2:	e050      	b.n	8005646 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	2201      	movs	r2, #1
 80055a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	2202      	movs	r2, #2
 80055b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	685b      	ldr	r3, [r3, #4]
 80055ba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	689b      	ldr	r3, [r3, #8]
 80055c2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80055ca:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80055cc:	683b      	ldr	r3, [r7, #0]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	68fa      	ldr	r2, [r7, #12]
 80055d2:	4313      	orrs	r3, r2
 80055d4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	68fa      	ldr	r2, [r7, #12]
 80055dc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	4a1c      	ldr	r2, [pc, #112]	@ (8005654 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80055e4:	4293      	cmp	r3, r2
 80055e6:	d018      	beq.n	800561a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80055f0:	d013      	beq.n	800561a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	4a18      	ldr	r2, [pc, #96]	@ (8005658 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80055f8:	4293      	cmp	r3, r2
 80055fa:	d00e      	beq.n	800561a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	4a16      	ldr	r2, [pc, #88]	@ (800565c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005602:	4293      	cmp	r3, r2
 8005604:	d009      	beq.n	800561a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	4a15      	ldr	r2, [pc, #84]	@ (8005660 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800560c:	4293      	cmp	r3, r2
 800560e:	d004      	beq.n	800561a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	4a13      	ldr	r2, [pc, #76]	@ (8005664 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005616:	4293      	cmp	r3, r2
 8005618:	d10c      	bne.n	8005634 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800561a:	68bb      	ldr	r3, [r7, #8]
 800561c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005620:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005622:	683b      	ldr	r3, [r7, #0]
 8005624:	685b      	ldr	r3, [r3, #4]
 8005626:	68ba      	ldr	r2, [r7, #8]
 8005628:	4313      	orrs	r3, r2
 800562a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	68ba      	ldr	r2, [r7, #8]
 8005632:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	2201      	movs	r2, #1
 8005638:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	2200      	movs	r2, #0
 8005640:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005644:	2300      	movs	r3, #0
}
 8005646:	4618      	mov	r0, r3
 8005648:	3714      	adds	r7, #20
 800564a:	46bd      	mov	sp, r7
 800564c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005650:	4770      	bx	lr
 8005652:	bf00      	nop
 8005654:	40010000 	.word	0x40010000
 8005658:	40000400 	.word	0x40000400
 800565c:	40000800 	.word	0x40000800
 8005660:	40000c00 	.word	0x40000c00
 8005664:	40014000 	.word	0x40014000

08005668 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005668:	b480      	push	{r7}
 800566a:	b083      	sub	sp, #12
 800566c:	af00      	add	r7, sp, #0
 800566e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005670:	bf00      	nop
 8005672:	370c      	adds	r7, #12
 8005674:	46bd      	mov	sp, r7
 8005676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567a:	4770      	bx	lr

0800567c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800567c:	b480      	push	{r7}
 800567e:	b083      	sub	sp, #12
 8005680:	af00      	add	r7, sp, #0
 8005682:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005684:	bf00      	nop
 8005686:	370c      	adds	r7, #12
 8005688:	46bd      	mov	sp, r7
 800568a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800568e:	4770      	bx	lr

08005690 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005690:	b580      	push	{r7, lr}
 8005692:	b082      	sub	sp, #8
 8005694:	af00      	add	r7, sp, #0
 8005696:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	2b00      	cmp	r3, #0
 800569c:	d101      	bne.n	80056a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800569e:	2301      	movs	r3, #1
 80056a0:	e042      	b.n	8005728 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80056a8:	b2db      	uxtb	r3, r3
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d106      	bne.n	80056bc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	2200      	movs	r2, #0
 80056b2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80056b6:	6878      	ldr	r0, [r7, #4]
 80056b8:	f7fc fe78 	bl	80023ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	2224      	movs	r2, #36	@ 0x24
 80056c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	68da      	ldr	r2, [r3, #12]
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80056d2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80056d4:	6878      	ldr	r0, [r7, #4]
 80056d6:	f000 fdbd 	bl	8006254 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	691a      	ldr	r2, [r3, #16]
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80056e8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	695a      	ldr	r2, [r3, #20]
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80056f8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	68da      	ldr	r2, [r3, #12]
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005708:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	2200      	movs	r2, #0
 800570e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	2220      	movs	r2, #32
 8005714:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	2220      	movs	r2, #32
 800571c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	2200      	movs	r2, #0
 8005724:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005726:	2300      	movs	r3, #0
}
 8005728:	4618      	mov	r0, r3
 800572a:	3708      	adds	r7, #8
 800572c:	46bd      	mov	sp, r7
 800572e:	bd80      	pop	{r7, pc}

08005730 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005730:	b580      	push	{r7, lr}
 8005732:	b08a      	sub	sp, #40	@ 0x28
 8005734:	af02      	add	r7, sp, #8
 8005736:	60f8      	str	r0, [r7, #12]
 8005738:	60b9      	str	r1, [r7, #8]
 800573a:	603b      	str	r3, [r7, #0]
 800573c:	4613      	mov	r3, r2
 800573e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005740:	2300      	movs	r3, #0
 8005742:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800574a:	b2db      	uxtb	r3, r3
 800574c:	2b20      	cmp	r3, #32
 800574e:	d175      	bne.n	800583c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005750:	68bb      	ldr	r3, [r7, #8]
 8005752:	2b00      	cmp	r3, #0
 8005754:	d002      	beq.n	800575c <HAL_UART_Transmit+0x2c>
 8005756:	88fb      	ldrh	r3, [r7, #6]
 8005758:	2b00      	cmp	r3, #0
 800575a:	d101      	bne.n	8005760 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800575c:	2301      	movs	r3, #1
 800575e:	e06e      	b.n	800583e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	2200      	movs	r2, #0
 8005764:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	2221      	movs	r2, #33	@ 0x21
 800576a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800576e:	f7fd f837 	bl	80027e0 <HAL_GetTick>
 8005772:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	88fa      	ldrh	r2, [r7, #6]
 8005778:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	88fa      	ldrh	r2, [r7, #6]
 800577e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	689b      	ldr	r3, [r3, #8]
 8005784:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005788:	d108      	bne.n	800579c <HAL_UART_Transmit+0x6c>
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	691b      	ldr	r3, [r3, #16]
 800578e:	2b00      	cmp	r3, #0
 8005790:	d104      	bne.n	800579c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005792:	2300      	movs	r3, #0
 8005794:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005796:	68bb      	ldr	r3, [r7, #8]
 8005798:	61bb      	str	r3, [r7, #24]
 800579a:	e003      	b.n	80057a4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800579c:	68bb      	ldr	r3, [r7, #8]
 800579e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80057a0:	2300      	movs	r3, #0
 80057a2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80057a4:	e02e      	b.n	8005804 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80057a6:	683b      	ldr	r3, [r7, #0]
 80057a8:	9300      	str	r3, [sp, #0]
 80057aa:	697b      	ldr	r3, [r7, #20]
 80057ac:	2200      	movs	r2, #0
 80057ae:	2180      	movs	r1, #128	@ 0x80
 80057b0:	68f8      	ldr	r0, [r7, #12]
 80057b2:	f000 fb1f 	bl	8005df4 <UART_WaitOnFlagUntilTimeout>
 80057b6:	4603      	mov	r3, r0
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d005      	beq.n	80057c8 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	2220      	movs	r2, #32
 80057c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80057c4:	2303      	movs	r3, #3
 80057c6:	e03a      	b.n	800583e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80057c8:	69fb      	ldr	r3, [r7, #28]
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d10b      	bne.n	80057e6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80057ce:	69bb      	ldr	r3, [r7, #24]
 80057d0:	881b      	ldrh	r3, [r3, #0]
 80057d2:	461a      	mov	r2, r3
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80057dc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80057de:	69bb      	ldr	r3, [r7, #24]
 80057e0:	3302      	adds	r3, #2
 80057e2:	61bb      	str	r3, [r7, #24]
 80057e4:	e007      	b.n	80057f6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80057e6:	69fb      	ldr	r3, [r7, #28]
 80057e8:	781a      	ldrb	r2, [r3, #0]
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80057f0:	69fb      	ldr	r3, [r7, #28]
 80057f2:	3301      	adds	r3, #1
 80057f4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80057fa:	b29b      	uxth	r3, r3
 80057fc:	3b01      	subs	r3, #1
 80057fe:	b29a      	uxth	r2, r3
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005808:	b29b      	uxth	r3, r3
 800580a:	2b00      	cmp	r3, #0
 800580c:	d1cb      	bne.n	80057a6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800580e:	683b      	ldr	r3, [r7, #0]
 8005810:	9300      	str	r3, [sp, #0]
 8005812:	697b      	ldr	r3, [r7, #20]
 8005814:	2200      	movs	r2, #0
 8005816:	2140      	movs	r1, #64	@ 0x40
 8005818:	68f8      	ldr	r0, [r7, #12]
 800581a:	f000 faeb 	bl	8005df4 <UART_WaitOnFlagUntilTimeout>
 800581e:	4603      	mov	r3, r0
 8005820:	2b00      	cmp	r3, #0
 8005822:	d005      	beq.n	8005830 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	2220      	movs	r2, #32
 8005828:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800582c:	2303      	movs	r3, #3
 800582e:	e006      	b.n	800583e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	2220      	movs	r2, #32
 8005834:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8005838:	2300      	movs	r3, #0
 800583a:	e000      	b.n	800583e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800583c:	2302      	movs	r3, #2
  }
}
 800583e:	4618      	mov	r0, r3
 8005840:	3720      	adds	r7, #32
 8005842:	46bd      	mov	sp, r7
 8005844:	bd80      	pop	{r7, pc}

08005846 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005846:	b580      	push	{r7, lr}
 8005848:	b084      	sub	sp, #16
 800584a:	af00      	add	r7, sp, #0
 800584c:	60f8      	str	r0, [r7, #12]
 800584e:	60b9      	str	r1, [r7, #8]
 8005850:	4613      	mov	r3, r2
 8005852:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800585a:	b2db      	uxtb	r3, r3
 800585c:	2b20      	cmp	r3, #32
 800585e:	d112      	bne.n	8005886 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8005860:	68bb      	ldr	r3, [r7, #8]
 8005862:	2b00      	cmp	r3, #0
 8005864:	d002      	beq.n	800586c <HAL_UART_Receive_IT+0x26>
 8005866:	88fb      	ldrh	r3, [r7, #6]
 8005868:	2b00      	cmp	r3, #0
 800586a:	d101      	bne.n	8005870 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800586c:	2301      	movs	r3, #1
 800586e:	e00b      	b.n	8005888 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	2200      	movs	r2, #0
 8005874:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005876:	88fb      	ldrh	r3, [r7, #6]
 8005878:	461a      	mov	r2, r3
 800587a:	68b9      	ldr	r1, [r7, #8]
 800587c:	68f8      	ldr	r0, [r7, #12]
 800587e:	f000 fb12 	bl	8005ea6 <UART_Start_Receive_IT>
 8005882:	4603      	mov	r3, r0
 8005884:	e000      	b.n	8005888 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8005886:	2302      	movs	r3, #2
  }
}
 8005888:	4618      	mov	r0, r3
 800588a:	3710      	adds	r7, #16
 800588c:	46bd      	mov	sp, r7
 800588e:	bd80      	pop	{r7, pc}

08005890 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005890:	b580      	push	{r7, lr}
 8005892:	b0ba      	sub	sp, #232	@ 0xe8
 8005894:	af00      	add	r7, sp, #0
 8005896:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	68db      	ldr	r3, [r3, #12]
 80058a8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	695b      	ldr	r3, [r3, #20]
 80058b2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80058b6:	2300      	movs	r3, #0
 80058b8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80058bc:	2300      	movs	r3, #0
 80058be:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80058c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80058c6:	f003 030f 	and.w	r3, r3, #15
 80058ca:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80058ce:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d10f      	bne.n	80058f6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80058d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80058da:	f003 0320 	and.w	r3, r3, #32
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d009      	beq.n	80058f6 <HAL_UART_IRQHandler+0x66>
 80058e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80058e6:	f003 0320 	and.w	r3, r3, #32
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d003      	beq.n	80058f6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80058ee:	6878      	ldr	r0, [r7, #4]
 80058f0:	f000 fbf2 	bl	80060d8 <UART_Receive_IT>
      return;
 80058f4:	e25b      	b.n	8005dae <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80058f6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	f000 80de 	beq.w	8005abc <HAL_UART_IRQHandler+0x22c>
 8005900:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005904:	f003 0301 	and.w	r3, r3, #1
 8005908:	2b00      	cmp	r3, #0
 800590a:	d106      	bne.n	800591a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800590c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005910:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8005914:	2b00      	cmp	r3, #0
 8005916:	f000 80d1 	beq.w	8005abc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800591a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800591e:	f003 0301 	and.w	r3, r3, #1
 8005922:	2b00      	cmp	r3, #0
 8005924:	d00b      	beq.n	800593e <HAL_UART_IRQHandler+0xae>
 8005926:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800592a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800592e:	2b00      	cmp	r3, #0
 8005930:	d005      	beq.n	800593e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005936:	f043 0201 	orr.w	r2, r3, #1
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800593e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005942:	f003 0304 	and.w	r3, r3, #4
 8005946:	2b00      	cmp	r3, #0
 8005948:	d00b      	beq.n	8005962 <HAL_UART_IRQHandler+0xd2>
 800594a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800594e:	f003 0301 	and.w	r3, r3, #1
 8005952:	2b00      	cmp	r3, #0
 8005954:	d005      	beq.n	8005962 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800595a:	f043 0202 	orr.w	r2, r3, #2
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005962:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005966:	f003 0302 	and.w	r3, r3, #2
 800596a:	2b00      	cmp	r3, #0
 800596c:	d00b      	beq.n	8005986 <HAL_UART_IRQHandler+0xf6>
 800596e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005972:	f003 0301 	and.w	r3, r3, #1
 8005976:	2b00      	cmp	r3, #0
 8005978:	d005      	beq.n	8005986 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800597e:	f043 0204 	orr.w	r2, r3, #4
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005986:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800598a:	f003 0308 	and.w	r3, r3, #8
 800598e:	2b00      	cmp	r3, #0
 8005990:	d011      	beq.n	80059b6 <HAL_UART_IRQHandler+0x126>
 8005992:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005996:	f003 0320 	and.w	r3, r3, #32
 800599a:	2b00      	cmp	r3, #0
 800599c:	d105      	bne.n	80059aa <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800599e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80059a2:	f003 0301 	and.w	r3, r3, #1
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d005      	beq.n	80059b6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80059ae:	f043 0208 	orr.w	r2, r3, #8
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	f000 81f2 	beq.w	8005da4 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80059c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80059c4:	f003 0320 	and.w	r3, r3, #32
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d008      	beq.n	80059de <HAL_UART_IRQHandler+0x14e>
 80059cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80059d0:	f003 0320 	and.w	r3, r3, #32
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d002      	beq.n	80059de <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80059d8:	6878      	ldr	r0, [r7, #4]
 80059da:	f000 fb7d 	bl	80060d8 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	695b      	ldr	r3, [r3, #20]
 80059e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80059e8:	2b40      	cmp	r3, #64	@ 0x40
 80059ea:	bf0c      	ite	eq
 80059ec:	2301      	moveq	r3, #1
 80059ee:	2300      	movne	r3, #0
 80059f0:	b2db      	uxtb	r3, r3
 80059f2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80059fa:	f003 0308 	and.w	r3, r3, #8
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d103      	bne.n	8005a0a <HAL_UART_IRQHandler+0x17a>
 8005a02:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d04f      	beq.n	8005aaa <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005a0a:	6878      	ldr	r0, [r7, #4]
 8005a0c:	f000 fa85 	bl	8005f1a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	695b      	ldr	r3, [r3, #20]
 8005a16:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a1a:	2b40      	cmp	r3, #64	@ 0x40
 8005a1c:	d141      	bne.n	8005aa2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	3314      	adds	r3, #20
 8005a24:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a28:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005a2c:	e853 3f00 	ldrex	r3, [r3]
 8005a30:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005a34:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005a38:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005a3c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	3314      	adds	r3, #20
 8005a46:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005a4a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8005a4e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a52:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005a56:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005a5a:	e841 2300 	strex	r3, r2, [r1]
 8005a5e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8005a62:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d1d9      	bne.n	8005a1e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d013      	beq.n	8005a9a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a76:	4a7e      	ldr	r2, [pc, #504]	@ (8005c70 <HAL_UART_IRQHandler+0x3e0>)
 8005a78:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a7e:	4618      	mov	r0, r3
 8005a80:	f7fe f8dc 	bl	8003c3c <HAL_DMA_Abort_IT>
 8005a84:	4603      	mov	r3, r0
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d016      	beq.n	8005ab8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a8e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005a90:	687a      	ldr	r2, [r7, #4]
 8005a92:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005a94:	4610      	mov	r0, r2
 8005a96:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a98:	e00e      	b.n	8005ab8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005a9a:	6878      	ldr	r0, [r7, #4]
 8005a9c:	f000 f994 	bl	8005dc8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005aa0:	e00a      	b.n	8005ab8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005aa2:	6878      	ldr	r0, [r7, #4]
 8005aa4:	f000 f990 	bl	8005dc8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005aa8:	e006      	b.n	8005ab8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005aaa:	6878      	ldr	r0, [r7, #4]
 8005aac:	f000 f98c 	bl	8005dc8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	2200      	movs	r2, #0
 8005ab4:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8005ab6:	e175      	b.n	8005da4 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ab8:	bf00      	nop
    return;
 8005aba:	e173      	b.n	8005da4 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ac0:	2b01      	cmp	r3, #1
 8005ac2:	f040 814f 	bne.w	8005d64 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005ac6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005aca:	f003 0310 	and.w	r3, r3, #16
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	f000 8148 	beq.w	8005d64 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005ad4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005ad8:	f003 0310 	and.w	r3, r3, #16
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	f000 8141 	beq.w	8005d64 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005ae2:	2300      	movs	r3, #0
 8005ae4:	60bb      	str	r3, [r7, #8]
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	60bb      	str	r3, [r7, #8]
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	685b      	ldr	r3, [r3, #4]
 8005af4:	60bb      	str	r3, [r7, #8]
 8005af6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	695b      	ldr	r3, [r3, #20]
 8005afe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b02:	2b40      	cmp	r3, #64	@ 0x40
 8005b04:	f040 80b6 	bne.w	8005c74 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	685b      	ldr	r3, [r3, #4]
 8005b10:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005b14:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	f000 8145 	beq.w	8005da8 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005b22:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005b26:	429a      	cmp	r2, r3
 8005b28:	f080 813e 	bcs.w	8005da8 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005b32:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b38:	69db      	ldr	r3, [r3, #28]
 8005b3a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005b3e:	f000 8088 	beq.w	8005c52 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	330c      	adds	r3, #12
 8005b48:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b4c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005b50:	e853 3f00 	ldrex	r3, [r3]
 8005b54:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005b58:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005b5c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005b60:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	330c      	adds	r3, #12
 8005b6a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8005b6e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005b72:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b76:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005b7a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005b7e:	e841 2300 	strex	r3, r2, [r1]
 8005b82:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005b86:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d1d9      	bne.n	8005b42 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	3314      	adds	r3, #20
 8005b94:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b96:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005b98:	e853 3f00 	ldrex	r3, [r3]
 8005b9c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005b9e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005ba0:	f023 0301 	bic.w	r3, r3, #1
 8005ba4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	3314      	adds	r3, #20
 8005bae:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005bb2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005bb6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bb8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005bba:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005bbe:	e841 2300 	strex	r3, r2, [r1]
 8005bc2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005bc4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d1e1      	bne.n	8005b8e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	3314      	adds	r3, #20
 8005bd0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bd2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005bd4:	e853 3f00 	ldrex	r3, [r3]
 8005bd8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005bda:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005bdc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005be0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	3314      	adds	r3, #20
 8005bea:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005bee:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005bf0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bf2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005bf4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005bf6:	e841 2300 	strex	r3, r2, [r1]
 8005bfa:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005bfc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d1e3      	bne.n	8005bca <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	2220      	movs	r2, #32
 8005c06:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	2200      	movs	r2, #0
 8005c0e:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	330c      	adds	r3, #12
 8005c16:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c18:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005c1a:	e853 3f00 	ldrex	r3, [r3]
 8005c1e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005c20:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005c22:	f023 0310 	bic.w	r3, r3, #16
 8005c26:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	330c      	adds	r3, #12
 8005c30:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8005c34:	65ba      	str	r2, [r7, #88]	@ 0x58
 8005c36:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c38:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005c3a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005c3c:	e841 2300 	strex	r3, r2, [r1]
 8005c40:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005c42:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d1e3      	bne.n	8005c10 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c4c:	4618      	mov	r0, r3
 8005c4e:	f7fd ff85 	bl	8003b5c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	2202      	movs	r2, #2
 8005c56:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005c60:	b29b      	uxth	r3, r3
 8005c62:	1ad3      	subs	r3, r2, r3
 8005c64:	b29b      	uxth	r3, r3
 8005c66:	4619      	mov	r1, r3
 8005c68:	6878      	ldr	r0, [r7, #4]
 8005c6a:	f000 f8b7 	bl	8005ddc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005c6e:	e09b      	b.n	8005da8 <HAL_UART_IRQHandler+0x518>
 8005c70:	08005fe1 	.word	0x08005fe1
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005c7c:	b29b      	uxth	r3, r3
 8005c7e:	1ad3      	subs	r3, r2, r3
 8005c80:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005c88:	b29b      	uxth	r3, r3
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	f000 808e 	beq.w	8005dac <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8005c90:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	f000 8089 	beq.w	8005dac <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	330c      	adds	r3, #12
 8005ca0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ca2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ca4:	e853 3f00 	ldrex	r3, [r3]
 8005ca8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005caa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005cac:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005cb0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	330c      	adds	r3, #12
 8005cba:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8005cbe:	647a      	str	r2, [r7, #68]	@ 0x44
 8005cc0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cc2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005cc4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005cc6:	e841 2300 	strex	r3, r2, [r1]
 8005cca:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005ccc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d1e3      	bne.n	8005c9a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	3314      	adds	r3, #20
 8005cd8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cdc:	e853 3f00 	ldrex	r3, [r3]
 8005ce0:	623b      	str	r3, [r7, #32]
   return(result);
 8005ce2:	6a3b      	ldr	r3, [r7, #32]
 8005ce4:	f023 0301 	bic.w	r3, r3, #1
 8005ce8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	3314      	adds	r3, #20
 8005cf2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005cf6:	633a      	str	r2, [r7, #48]	@ 0x30
 8005cf8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cfa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005cfc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005cfe:	e841 2300 	strex	r3, r2, [r1]
 8005d02:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005d04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d1e3      	bne.n	8005cd2 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	2220      	movs	r2, #32
 8005d0e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	2200      	movs	r2, #0
 8005d16:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	330c      	adds	r3, #12
 8005d1e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d20:	693b      	ldr	r3, [r7, #16]
 8005d22:	e853 3f00 	ldrex	r3, [r3]
 8005d26:	60fb      	str	r3, [r7, #12]
   return(result);
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	f023 0310 	bic.w	r3, r3, #16
 8005d2e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	330c      	adds	r3, #12
 8005d38:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8005d3c:	61fa      	str	r2, [r7, #28]
 8005d3e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d40:	69b9      	ldr	r1, [r7, #24]
 8005d42:	69fa      	ldr	r2, [r7, #28]
 8005d44:	e841 2300 	strex	r3, r2, [r1]
 8005d48:	617b      	str	r3, [r7, #20]
   return(result);
 8005d4a:	697b      	ldr	r3, [r7, #20]
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d1e3      	bne.n	8005d18 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	2202      	movs	r2, #2
 8005d54:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005d56:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005d5a:	4619      	mov	r1, r3
 8005d5c:	6878      	ldr	r0, [r7, #4]
 8005d5e:	f000 f83d 	bl	8005ddc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005d62:	e023      	b.n	8005dac <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005d64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005d68:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d009      	beq.n	8005d84 <HAL_UART_IRQHandler+0x4f4>
 8005d70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005d74:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d003      	beq.n	8005d84 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8005d7c:	6878      	ldr	r0, [r7, #4]
 8005d7e:	f000 f943 	bl	8006008 <UART_Transmit_IT>
    return;
 8005d82:	e014      	b.n	8005dae <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005d84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005d88:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d00e      	beq.n	8005dae <HAL_UART_IRQHandler+0x51e>
 8005d90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005d94:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d008      	beq.n	8005dae <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8005d9c:	6878      	ldr	r0, [r7, #4]
 8005d9e:	f000 f983 	bl	80060a8 <UART_EndTransmit_IT>
    return;
 8005da2:	e004      	b.n	8005dae <HAL_UART_IRQHandler+0x51e>
    return;
 8005da4:	bf00      	nop
 8005da6:	e002      	b.n	8005dae <HAL_UART_IRQHandler+0x51e>
      return;
 8005da8:	bf00      	nop
 8005daa:	e000      	b.n	8005dae <HAL_UART_IRQHandler+0x51e>
      return;
 8005dac:	bf00      	nop
  }
}
 8005dae:	37e8      	adds	r7, #232	@ 0xe8
 8005db0:	46bd      	mov	sp, r7
 8005db2:	bd80      	pop	{r7, pc}

08005db4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005db4:	b480      	push	{r7}
 8005db6:	b083      	sub	sp, #12
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005dbc:	bf00      	nop
 8005dbe:	370c      	adds	r7, #12
 8005dc0:	46bd      	mov	sp, r7
 8005dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc6:	4770      	bx	lr

08005dc8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005dc8:	b480      	push	{r7}
 8005dca:	b083      	sub	sp, #12
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005dd0:	bf00      	nop
 8005dd2:	370c      	adds	r7, #12
 8005dd4:	46bd      	mov	sp, r7
 8005dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dda:	4770      	bx	lr

08005ddc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005ddc:	b480      	push	{r7}
 8005dde:	b083      	sub	sp, #12
 8005de0:	af00      	add	r7, sp, #0
 8005de2:	6078      	str	r0, [r7, #4]
 8005de4:	460b      	mov	r3, r1
 8005de6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005de8:	bf00      	nop
 8005dea:	370c      	adds	r7, #12
 8005dec:	46bd      	mov	sp, r7
 8005dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df2:	4770      	bx	lr

08005df4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005df4:	b580      	push	{r7, lr}
 8005df6:	b086      	sub	sp, #24
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	60f8      	str	r0, [r7, #12]
 8005dfc:	60b9      	str	r1, [r7, #8]
 8005dfe:	603b      	str	r3, [r7, #0]
 8005e00:	4613      	mov	r3, r2
 8005e02:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005e04:	e03b      	b.n	8005e7e <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005e06:	6a3b      	ldr	r3, [r7, #32]
 8005e08:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005e0c:	d037      	beq.n	8005e7e <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e0e:	f7fc fce7 	bl	80027e0 <HAL_GetTick>
 8005e12:	4602      	mov	r2, r0
 8005e14:	683b      	ldr	r3, [r7, #0]
 8005e16:	1ad3      	subs	r3, r2, r3
 8005e18:	6a3a      	ldr	r2, [r7, #32]
 8005e1a:	429a      	cmp	r2, r3
 8005e1c:	d302      	bcc.n	8005e24 <UART_WaitOnFlagUntilTimeout+0x30>
 8005e1e:	6a3b      	ldr	r3, [r7, #32]
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d101      	bne.n	8005e28 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005e24:	2303      	movs	r3, #3
 8005e26:	e03a      	b.n	8005e9e <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	68db      	ldr	r3, [r3, #12]
 8005e2e:	f003 0304 	and.w	r3, r3, #4
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d023      	beq.n	8005e7e <UART_WaitOnFlagUntilTimeout+0x8a>
 8005e36:	68bb      	ldr	r3, [r7, #8]
 8005e38:	2b80      	cmp	r3, #128	@ 0x80
 8005e3a:	d020      	beq.n	8005e7e <UART_WaitOnFlagUntilTimeout+0x8a>
 8005e3c:	68bb      	ldr	r3, [r7, #8]
 8005e3e:	2b40      	cmp	r3, #64	@ 0x40
 8005e40:	d01d      	beq.n	8005e7e <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	f003 0308 	and.w	r3, r3, #8
 8005e4c:	2b08      	cmp	r3, #8
 8005e4e:	d116      	bne.n	8005e7e <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005e50:	2300      	movs	r3, #0
 8005e52:	617b      	str	r3, [r7, #20]
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	617b      	str	r3, [r7, #20]
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	685b      	ldr	r3, [r3, #4]
 8005e62:	617b      	str	r3, [r7, #20]
 8005e64:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005e66:	68f8      	ldr	r0, [r7, #12]
 8005e68:	f000 f857 	bl	8005f1a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	2208      	movs	r2, #8
 8005e70:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	2200      	movs	r2, #0
 8005e76:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005e7a:	2301      	movs	r3, #1
 8005e7c:	e00f      	b.n	8005e9e <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	681a      	ldr	r2, [r3, #0]
 8005e84:	68bb      	ldr	r3, [r7, #8]
 8005e86:	4013      	ands	r3, r2
 8005e88:	68ba      	ldr	r2, [r7, #8]
 8005e8a:	429a      	cmp	r2, r3
 8005e8c:	bf0c      	ite	eq
 8005e8e:	2301      	moveq	r3, #1
 8005e90:	2300      	movne	r3, #0
 8005e92:	b2db      	uxtb	r3, r3
 8005e94:	461a      	mov	r2, r3
 8005e96:	79fb      	ldrb	r3, [r7, #7]
 8005e98:	429a      	cmp	r2, r3
 8005e9a:	d0b4      	beq.n	8005e06 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005e9c:	2300      	movs	r3, #0
}
 8005e9e:	4618      	mov	r0, r3
 8005ea0:	3718      	adds	r7, #24
 8005ea2:	46bd      	mov	sp, r7
 8005ea4:	bd80      	pop	{r7, pc}

08005ea6 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005ea6:	b480      	push	{r7}
 8005ea8:	b085      	sub	sp, #20
 8005eaa:	af00      	add	r7, sp, #0
 8005eac:	60f8      	str	r0, [r7, #12]
 8005eae:	60b9      	str	r1, [r7, #8]
 8005eb0:	4613      	mov	r3, r2
 8005eb2:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	68ba      	ldr	r2, [r7, #8]
 8005eb8:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	88fa      	ldrh	r2, [r7, #6]
 8005ebe:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	88fa      	ldrh	r2, [r7, #6]
 8005ec4:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	2200      	movs	r2, #0
 8005eca:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	2222      	movs	r2, #34	@ 0x22
 8005ed0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	691b      	ldr	r3, [r3, #16]
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d007      	beq.n	8005eec <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	68da      	ldr	r2, [r3, #12]
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005eea:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	695a      	ldr	r2, [r3, #20]
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	f042 0201 	orr.w	r2, r2, #1
 8005efa:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	68da      	ldr	r2, [r3, #12]
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	f042 0220 	orr.w	r2, r2, #32
 8005f0a:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005f0c:	2300      	movs	r3, #0
}
 8005f0e:	4618      	mov	r0, r3
 8005f10:	3714      	adds	r7, #20
 8005f12:	46bd      	mov	sp, r7
 8005f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f18:	4770      	bx	lr

08005f1a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005f1a:	b480      	push	{r7}
 8005f1c:	b095      	sub	sp, #84	@ 0x54
 8005f1e:	af00      	add	r7, sp, #0
 8005f20:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	330c      	adds	r3, #12
 8005f28:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f2a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f2c:	e853 3f00 	ldrex	r3, [r3]
 8005f30:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005f32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f34:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005f38:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	330c      	adds	r3, #12
 8005f40:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005f42:	643a      	str	r2, [r7, #64]	@ 0x40
 8005f44:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f46:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005f48:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005f4a:	e841 2300 	strex	r3, r2, [r1]
 8005f4e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005f50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d1e5      	bne.n	8005f22 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	3314      	adds	r3, #20
 8005f5c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f5e:	6a3b      	ldr	r3, [r7, #32]
 8005f60:	e853 3f00 	ldrex	r3, [r3]
 8005f64:	61fb      	str	r3, [r7, #28]
   return(result);
 8005f66:	69fb      	ldr	r3, [r7, #28]
 8005f68:	f023 0301 	bic.w	r3, r3, #1
 8005f6c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	3314      	adds	r3, #20
 8005f74:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005f76:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005f78:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f7a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005f7c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005f7e:	e841 2300 	strex	r3, r2, [r1]
 8005f82:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005f84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d1e5      	bne.n	8005f56 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f8e:	2b01      	cmp	r3, #1
 8005f90:	d119      	bne.n	8005fc6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	330c      	adds	r3, #12
 8005f98:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	e853 3f00 	ldrex	r3, [r3]
 8005fa0:	60bb      	str	r3, [r7, #8]
   return(result);
 8005fa2:	68bb      	ldr	r3, [r7, #8]
 8005fa4:	f023 0310 	bic.w	r3, r3, #16
 8005fa8:	647b      	str	r3, [r7, #68]	@ 0x44
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	330c      	adds	r3, #12
 8005fb0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005fb2:	61ba      	str	r2, [r7, #24]
 8005fb4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fb6:	6979      	ldr	r1, [r7, #20]
 8005fb8:	69ba      	ldr	r2, [r7, #24]
 8005fba:	e841 2300 	strex	r3, r2, [r1]
 8005fbe:	613b      	str	r3, [r7, #16]
   return(result);
 8005fc0:	693b      	ldr	r3, [r7, #16]
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d1e5      	bne.n	8005f92 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	2220      	movs	r2, #32
 8005fca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	2200      	movs	r2, #0
 8005fd2:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005fd4:	bf00      	nop
 8005fd6:	3754      	adds	r7, #84	@ 0x54
 8005fd8:	46bd      	mov	sp, r7
 8005fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fde:	4770      	bx	lr

08005fe0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005fe0:	b580      	push	{r7, lr}
 8005fe2:	b084      	sub	sp, #16
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005fec:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	2200      	movs	r2, #0
 8005ff2:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	2200      	movs	r2, #0
 8005ff8:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005ffa:	68f8      	ldr	r0, [r7, #12]
 8005ffc:	f7ff fee4 	bl	8005dc8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006000:	bf00      	nop
 8006002:	3710      	adds	r7, #16
 8006004:	46bd      	mov	sp, r7
 8006006:	bd80      	pop	{r7, pc}

08006008 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006008:	b480      	push	{r7}
 800600a:	b085      	sub	sp, #20
 800600c:	af00      	add	r7, sp, #0
 800600e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006016:	b2db      	uxtb	r3, r3
 8006018:	2b21      	cmp	r3, #33	@ 0x21
 800601a:	d13e      	bne.n	800609a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	689b      	ldr	r3, [r3, #8]
 8006020:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006024:	d114      	bne.n	8006050 <UART_Transmit_IT+0x48>
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	691b      	ldr	r3, [r3, #16]
 800602a:	2b00      	cmp	r3, #0
 800602c:	d110      	bne.n	8006050 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	6a1b      	ldr	r3, [r3, #32]
 8006032:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	881b      	ldrh	r3, [r3, #0]
 8006038:	461a      	mov	r2, r3
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006042:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	6a1b      	ldr	r3, [r3, #32]
 8006048:	1c9a      	adds	r2, r3, #2
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	621a      	str	r2, [r3, #32]
 800604e:	e008      	b.n	8006062 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	6a1b      	ldr	r3, [r3, #32]
 8006054:	1c59      	adds	r1, r3, #1
 8006056:	687a      	ldr	r2, [r7, #4]
 8006058:	6211      	str	r1, [r2, #32]
 800605a:	781a      	ldrb	r2, [r3, #0]
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006066:	b29b      	uxth	r3, r3
 8006068:	3b01      	subs	r3, #1
 800606a:	b29b      	uxth	r3, r3
 800606c:	687a      	ldr	r2, [r7, #4]
 800606e:	4619      	mov	r1, r3
 8006070:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8006072:	2b00      	cmp	r3, #0
 8006074:	d10f      	bne.n	8006096 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	68da      	ldr	r2, [r3, #12]
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006084:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	68da      	ldr	r2, [r3, #12]
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006094:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006096:	2300      	movs	r3, #0
 8006098:	e000      	b.n	800609c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800609a:	2302      	movs	r3, #2
  }
}
 800609c:	4618      	mov	r0, r3
 800609e:	3714      	adds	r7, #20
 80060a0:	46bd      	mov	sp, r7
 80060a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a6:	4770      	bx	lr

080060a8 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80060a8:	b580      	push	{r7, lr}
 80060aa:	b082      	sub	sp, #8
 80060ac:	af00      	add	r7, sp, #0
 80060ae:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	68da      	ldr	r2, [r3, #12]
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80060be:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	2220      	movs	r2, #32
 80060c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80060c8:	6878      	ldr	r0, [r7, #4]
 80060ca:	f7ff fe73 	bl	8005db4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80060ce:	2300      	movs	r3, #0
}
 80060d0:	4618      	mov	r0, r3
 80060d2:	3708      	adds	r7, #8
 80060d4:	46bd      	mov	sp, r7
 80060d6:	bd80      	pop	{r7, pc}

080060d8 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80060d8:	b580      	push	{r7, lr}
 80060da:	b08c      	sub	sp, #48	@ 0x30
 80060dc:	af00      	add	r7, sp, #0
 80060de:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80060e6:	b2db      	uxtb	r3, r3
 80060e8:	2b22      	cmp	r3, #34	@ 0x22
 80060ea:	f040 80ae 	bne.w	800624a <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	689b      	ldr	r3, [r3, #8]
 80060f2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80060f6:	d117      	bne.n	8006128 <UART_Receive_IT+0x50>
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	691b      	ldr	r3, [r3, #16]
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d113      	bne.n	8006128 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006100:	2300      	movs	r3, #0
 8006102:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006108:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	685b      	ldr	r3, [r3, #4]
 8006110:	b29b      	uxth	r3, r3
 8006112:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006116:	b29a      	uxth	r2, r3
 8006118:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800611a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006120:	1c9a      	adds	r2, r3, #2
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	629a      	str	r2, [r3, #40]	@ 0x28
 8006126:	e026      	b.n	8006176 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800612c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800612e:	2300      	movs	r3, #0
 8006130:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	689b      	ldr	r3, [r3, #8]
 8006136:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800613a:	d007      	beq.n	800614c <UART_Receive_IT+0x74>
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	689b      	ldr	r3, [r3, #8]
 8006140:	2b00      	cmp	r3, #0
 8006142:	d10a      	bne.n	800615a <UART_Receive_IT+0x82>
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	691b      	ldr	r3, [r3, #16]
 8006148:	2b00      	cmp	r3, #0
 800614a:	d106      	bne.n	800615a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	685b      	ldr	r3, [r3, #4]
 8006152:	b2da      	uxtb	r2, r3
 8006154:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006156:	701a      	strb	r2, [r3, #0]
 8006158:	e008      	b.n	800616c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	685b      	ldr	r3, [r3, #4]
 8006160:	b2db      	uxtb	r3, r3
 8006162:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006166:	b2da      	uxtb	r2, r3
 8006168:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800616a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006170:	1c5a      	adds	r2, r3, #1
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800617a:	b29b      	uxth	r3, r3
 800617c:	3b01      	subs	r3, #1
 800617e:	b29b      	uxth	r3, r3
 8006180:	687a      	ldr	r2, [r7, #4]
 8006182:	4619      	mov	r1, r3
 8006184:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8006186:	2b00      	cmp	r3, #0
 8006188:	d15d      	bne.n	8006246 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	68da      	ldr	r2, [r3, #12]
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	f022 0220 	bic.w	r2, r2, #32
 8006198:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	68da      	ldr	r2, [r3, #12]
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80061a8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	695a      	ldr	r2, [r3, #20]
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	f022 0201 	bic.w	r2, r2, #1
 80061b8:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	2220      	movs	r2, #32
 80061be:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	2200      	movs	r2, #0
 80061c6:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80061cc:	2b01      	cmp	r3, #1
 80061ce:	d135      	bne.n	800623c <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	2200      	movs	r2, #0
 80061d4:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	330c      	adds	r3, #12
 80061dc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061de:	697b      	ldr	r3, [r7, #20]
 80061e0:	e853 3f00 	ldrex	r3, [r3]
 80061e4:	613b      	str	r3, [r7, #16]
   return(result);
 80061e6:	693b      	ldr	r3, [r7, #16]
 80061e8:	f023 0310 	bic.w	r3, r3, #16
 80061ec:	627b      	str	r3, [r7, #36]	@ 0x24
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	330c      	adds	r3, #12
 80061f4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80061f6:	623a      	str	r2, [r7, #32]
 80061f8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061fa:	69f9      	ldr	r1, [r7, #28]
 80061fc:	6a3a      	ldr	r2, [r7, #32]
 80061fe:	e841 2300 	strex	r3, r2, [r1]
 8006202:	61bb      	str	r3, [r7, #24]
   return(result);
 8006204:	69bb      	ldr	r3, [r7, #24]
 8006206:	2b00      	cmp	r3, #0
 8006208:	d1e5      	bne.n	80061d6 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	f003 0310 	and.w	r3, r3, #16
 8006214:	2b10      	cmp	r3, #16
 8006216:	d10a      	bne.n	800622e <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006218:	2300      	movs	r3, #0
 800621a:	60fb      	str	r3, [r7, #12]
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	60fb      	str	r3, [r7, #12]
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	685b      	ldr	r3, [r3, #4]
 800622a:	60fb      	str	r3, [r7, #12]
 800622c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006232:	4619      	mov	r1, r3
 8006234:	6878      	ldr	r0, [r7, #4]
 8006236:	f7ff fdd1 	bl	8005ddc <HAL_UARTEx_RxEventCallback>
 800623a:	e002      	b.n	8006242 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800623c:	6878      	ldr	r0, [r7, #4]
 800623e:	f7fa ff37 	bl	80010b0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006242:	2300      	movs	r3, #0
 8006244:	e002      	b.n	800624c <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8006246:	2300      	movs	r3, #0
 8006248:	e000      	b.n	800624c <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800624a:	2302      	movs	r3, #2
  }
}
 800624c:	4618      	mov	r0, r3
 800624e:	3730      	adds	r7, #48	@ 0x30
 8006250:	46bd      	mov	sp, r7
 8006252:	bd80      	pop	{r7, pc}

08006254 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006254:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006258:	b0c0      	sub	sp, #256	@ 0x100
 800625a:	af00      	add	r7, sp, #0
 800625c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006260:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	691b      	ldr	r3, [r3, #16]
 8006268:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800626c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006270:	68d9      	ldr	r1, [r3, #12]
 8006272:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006276:	681a      	ldr	r2, [r3, #0]
 8006278:	ea40 0301 	orr.w	r3, r0, r1
 800627c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800627e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006282:	689a      	ldr	r2, [r3, #8]
 8006284:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006288:	691b      	ldr	r3, [r3, #16]
 800628a:	431a      	orrs	r2, r3
 800628c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006290:	695b      	ldr	r3, [r3, #20]
 8006292:	431a      	orrs	r2, r3
 8006294:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006298:	69db      	ldr	r3, [r3, #28]
 800629a:	4313      	orrs	r3, r2
 800629c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80062a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	68db      	ldr	r3, [r3, #12]
 80062a8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80062ac:	f021 010c 	bic.w	r1, r1, #12
 80062b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80062b4:	681a      	ldr	r2, [r3, #0]
 80062b6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80062ba:	430b      	orrs	r3, r1
 80062bc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80062be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	695b      	ldr	r3, [r3, #20]
 80062c6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80062ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80062ce:	6999      	ldr	r1, [r3, #24]
 80062d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80062d4:	681a      	ldr	r2, [r3, #0]
 80062d6:	ea40 0301 	orr.w	r3, r0, r1
 80062da:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80062dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80062e0:	681a      	ldr	r2, [r3, #0]
 80062e2:	4b8f      	ldr	r3, [pc, #572]	@ (8006520 <UART_SetConfig+0x2cc>)
 80062e4:	429a      	cmp	r2, r3
 80062e6:	d005      	beq.n	80062f4 <UART_SetConfig+0xa0>
 80062e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80062ec:	681a      	ldr	r2, [r3, #0]
 80062ee:	4b8d      	ldr	r3, [pc, #564]	@ (8006524 <UART_SetConfig+0x2d0>)
 80062f0:	429a      	cmp	r2, r3
 80062f2:	d104      	bne.n	80062fe <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80062f4:	f7fe fd50 	bl	8004d98 <HAL_RCC_GetPCLK2Freq>
 80062f8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80062fc:	e003      	b.n	8006306 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80062fe:	f7fe fd37 	bl	8004d70 <HAL_RCC_GetPCLK1Freq>
 8006302:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006306:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800630a:	69db      	ldr	r3, [r3, #28]
 800630c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006310:	f040 810c 	bne.w	800652c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006314:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006318:	2200      	movs	r2, #0
 800631a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800631e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8006322:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8006326:	4622      	mov	r2, r4
 8006328:	462b      	mov	r3, r5
 800632a:	1891      	adds	r1, r2, r2
 800632c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800632e:	415b      	adcs	r3, r3
 8006330:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006332:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8006336:	4621      	mov	r1, r4
 8006338:	eb12 0801 	adds.w	r8, r2, r1
 800633c:	4629      	mov	r1, r5
 800633e:	eb43 0901 	adc.w	r9, r3, r1
 8006342:	f04f 0200 	mov.w	r2, #0
 8006346:	f04f 0300 	mov.w	r3, #0
 800634a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800634e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006352:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006356:	4690      	mov	r8, r2
 8006358:	4699      	mov	r9, r3
 800635a:	4623      	mov	r3, r4
 800635c:	eb18 0303 	adds.w	r3, r8, r3
 8006360:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006364:	462b      	mov	r3, r5
 8006366:	eb49 0303 	adc.w	r3, r9, r3
 800636a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800636e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006372:	685b      	ldr	r3, [r3, #4]
 8006374:	2200      	movs	r2, #0
 8006376:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800637a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800637e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8006382:	460b      	mov	r3, r1
 8006384:	18db      	adds	r3, r3, r3
 8006386:	653b      	str	r3, [r7, #80]	@ 0x50
 8006388:	4613      	mov	r3, r2
 800638a:	eb42 0303 	adc.w	r3, r2, r3
 800638e:	657b      	str	r3, [r7, #84]	@ 0x54
 8006390:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8006394:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8006398:	f7fa fc8e 	bl	8000cb8 <__aeabi_uldivmod>
 800639c:	4602      	mov	r2, r0
 800639e:	460b      	mov	r3, r1
 80063a0:	4b61      	ldr	r3, [pc, #388]	@ (8006528 <UART_SetConfig+0x2d4>)
 80063a2:	fba3 2302 	umull	r2, r3, r3, r2
 80063a6:	095b      	lsrs	r3, r3, #5
 80063a8:	011c      	lsls	r4, r3, #4
 80063aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80063ae:	2200      	movs	r2, #0
 80063b0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80063b4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80063b8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80063bc:	4642      	mov	r2, r8
 80063be:	464b      	mov	r3, r9
 80063c0:	1891      	adds	r1, r2, r2
 80063c2:	64b9      	str	r1, [r7, #72]	@ 0x48
 80063c4:	415b      	adcs	r3, r3
 80063c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80063c8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80063cc:	4641      	mov	r1, r8
 80063ce:	eb12 0a01 	adds.w	sl, r2, r1
 80063d2:	4649      	mov	r1, r9
 80063d4:	eb43 0b01 	adc.w	fp, r3, r1
 80063d8:	f04f 0200 	mov.w	r2, #0
 80063dc:	f04f 0300 	mov.w	r3, #0
 80063e0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80063e4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80063e8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80063ec:	4692      	mov	sl, r2
 80063ee:	469b      	mov	fp, r3
 80063f0:	4643      	mov	r3, r8
 80063f2:	eb1a 0303 	adds.w	r3, sl, r3
 80063f6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80063fa:	464b      	mov	r3, r9
 80063fc:	eb4b 0303 	adc.w	r3, fp, r3
 8006400:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006404:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006408:	685b      	ldr	r3, [r3, #4]
 800640a:	2200      	movs	r2, #0
 800640c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006410:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8006414:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006418:	460b      	mov	r3, r1
 800641a:	18db      	adds	r3, r3, r3
 800641c:	643b      	str	r3, [r7, #64]	@ 0x40
 800641e:	4613      	mov	r3, r2
 8006420:	eb42 0303 	adc.w	r3, r2, r3
 8006424:	647b      	str	r3, [r7, #68]	@ 0x44
 8006426:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800642a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800642e:	f7fa fc43 	bl	8000cb8 <__aeabi_uldivmod>
 8006432:	4602      	mov	r2, r0
 8006434:	460b      	mov	r3, r1
 8006436:	4611      	mov	r1, r2
 8006438:	4b3b      	ldr	r3, [pc, #236]	@ (8006528 <UART_SetConfig+0x2d4>)
 800643a:	fba3 2301 	umull	r2, r3, r3, r1
 800643e:	095b      	lsrs	r3, r3, #5
 8006440:	2264      	movs	r2, #100	@ 0x64
 8006442:	fb02 f303 	mul.w	r3, r2, r3
 8006446:	1acb      	subs	r3, r1, r3
 8006448:	00db      	lsls	r3, r3, #3
 800644a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800644e:	4b36      	ldr	r3, [pc, #216]	@ (8006528 <UART_SetConfig+0x2d4>)
 8006450:	fba3 2302 	umull	r2, r3, r3, r2
 8006454:	095b      	lsrs	r3, r3, #5
 8006456:	005b      	lsls	r3, r3, #1
 8006458:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800645c:	441c      	add	r4, r3
 800645e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006462:	2200      	movs	r2, #0
 8006464:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006468:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800646c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8006470:	4642      	mov	r2, r8
 8006472:	464b      	mov	r3, r9
 8006474:	1891      	adds	r1, r2, r2
 8006476:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006478:	415b      	adcs	r3, r3
 800647a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800647c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8006480:	4641      	mov	r1, r8
 8006482:	1851      	adds	r1, r2, r1
 8006484:	6339      	str	r1, [r7, #48]	@ 0x30
 8006486:	4649      	mov	r1, r9
 8006488:	414b      	adcs	r3, r1
 800648a:	637b      	str	r3, [r7, #52]	@ 0x34
 800648c:	f04f 0200 	mov.w	r2, #0
 8006490:	f04f 0300 	mov.w	r3, #0
 8006494:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8006498:	4659      	mov	r1, fp
 800649a:	00cb      	lsls	r3, r1, #3
 800649c:	4651      	mov	r1, sl
 800649e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80064a2:	4651      	mov	r1, sl
 80064a4:	00ca      	lsls	r2, r1, #3
 80064a6:	4610      	mov	r0, r2
 80064a8:	4619      	mov	r1, r3
 80064aa:	4603      	mov	r3, r0
 80064ac:	4642      	mov	r2, r8
 80064ae:	189b      	adds	r3, r3, r2
 80064b0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80064b4:	464b      	mov	r3, r9
 80064b6:	460a      	mov	r2, r1
 80064b8:	eb42 0303 	adc.w	r3, r2, r3
 80064bc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80064c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80064c4:	685b      	ldr	r3, [r3, #4]
 80064c6:	2200      	movs	r2, #0
 80064c8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80064cc:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80064d0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80064d4:	460b      	mov	r3, r1
 80064d6:	18db      	adds	r3, r3, r3
 80064d8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80064da:	4613      	mov	r3, r2
 80064dc:	eb42 0303 	adc.w	r3, r2, r3
 80064e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80064e2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80064e6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80064ea:	f7fa fbe5 	bl	8000cb8 <__aeabi_uldivmod>
 80064ee:	4602      	mov	r2, r0
 80064f0:	460b      	mov	r3, r1
 80064f2:	4b0d      	ldr	r3, [pc, #52]	@ (8006528 <UART_SetConfig+0x2d4>)
 80064f4:	fba3 1302 	umull	r1, r3, r3, r2
 80064f8:	095b      	lsrs	r3, r3, #5
 80064fa:	2164      	movs	r1, #100	@ 0x64
 80064fc:	fb01 f303 	mul.w	r3, r1, r3
 8006500:	1ad3      	subs	r3, r2, r3
 8006502:	00db      	lsls	r3, r3, #3
 8006504:	3332      	adds	r3, #50	@ 0x32
 8006506:	4a08      	ldr	r2, [pc, #32]	@ (8006528 <UART_SetConfig+0x2d4>)
 8006508:	fba2 2303 	umull	r2, r3, r2, r3
 800650c:	095b      	lsrs	r3, r3, #5
 800650e:	f003 0207 	and.w	r2, r3, #7
 8006512:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	4422      	add	r2, r4
 800651a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800651c:	e106      	b.n	800672c <UART_SetConfig+0x4d8>
 800651e:	bf00      	nop
 8006520:	40011000 	.word	0x40011000
 8006524:	40011400 	.word	0x40011400
 8006528:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800652c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006530:	2200      	movs	r2, #0
 8006532:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006536:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800653a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800653e:	4642      	mov	r2, r8
 8006540:	464b      	mov	r3, r9
 8006542:	1891      	adds	r1, r2, r2
 8006544:	6239      	str	r1, [r7, #32]
 8006546:	415b      	adcs	r3, r3
 8006548:	627b      	str	r3, [r7, #36]	@ 0x24
 800654a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800654e:	4641      	mov	r1, r8
 8006550:	1854      	adds	r4, r2, r1
 8006552:	4649      	mov	r1, r9
 8006554:	eb43 0501 	adc.w	r5, r3, r1
 8006558:	f04f 0200 	mov.w	r2, #0
 800655c:	f04f 0300 	mov.w	r3, #0
 8006560:	00eb      	lsls	r3, r5, #3
 8006562:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006566:	00e2      	lsls	r2, r4, #3
 8006568:	4614      	mov	r4, r2
 800656a:	461d      	mov	r5, r3
 800656c:	4643      	mov	r3, r8
 800656e:	18e3      	adds	r3, r4, r3
 8006570:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006574:	464b      	mov	r3, r9
 8006576:	eb45 0303 	adc.w	r3, r5, r3
 800657a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800657e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006582:	685b      	ldr	r3, [r3, #4]
 8006584:	2200      	movs	r2, #0
 8006586:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800658a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800658e:	f04f 0200 	mov.w	r2, #0
 8006592:	f04f 0300 	mov.w	r3, #0
 8006596:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800659a:	4629      	mov	r1, r5
 800659c:	008b      	lsls	r3, r1, #2
 800659e:	4621      	mov	r1, r4
 80065a0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80065a4:	4621      	mov	r1, r4
 80065a6:	008a      	lsls	r2, r1, #2
 80065a8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80065ac:	f7fa fb84 	bl	8000cb8 <__aeabi_uldivmod>
 80065b0:	4602      	mov	r2, r0
 80065b2:	460b      	mov	r3, r1
 80065b4:	4b60      	ldr	r3, [pc, #384]	@ (8006738 <UART_SetConfig+0x4e4>)
 80065b6:	fba3 2302 	umull	r2, r3, r3, r2
 80065ba:	095b      	lsrs	r3, r3, #5
 80065bc:	011c      	lsls	r4, r3, #4
 80065be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80065c2:	2200      	movs	r2, #0
 80065c4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80065c8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80065cc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80065d0:	4642      	mov	r2, r8
 80065d2:	464b      	mov	r3, r9
 80065d4:	1891      	adds	r1, r2, r2
 80065d6:	61b9      	str	r1, [r7, #24]
 80065d8:	415b      	adcs	r3, r3
 80065da:	61fb      	str	r3, [r7, #28]
 80065dc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80065e0:	4641      	mov	r1, r8
 80065e2:	1851      	adds	r1, r2, r1
 80065e4:	6139      	str	r1, [r7, #16]
 80065e6:	4649      	mov	r1, r9
 80065e8:	414b      	adcs	r3, r1
 80065ea:	617b      	str	r3, [r7, #20]
 80065ec:	f04f 0200 	mov.w	r2, #0
 80065f0:	f04f 0300 	mov.w	r3, #0
 80065f4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80065f8:	4659      	mov	r1, fp
 80065fa:	00cb      	lsls	r3, r1, #3
 80065fc:	4651      	mov	r1, sl
 80065fe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006602:	4651      	mov	r1, sl
 8006604:	00ca      	lsls	r2, r1, #3
 8006606:	4610      	mov	r0, r2
 8006608:	4619      	mov	r1, r3
 800660a:	4603      	mov	r3, r0
 800660c:	4642      	mov	r2, r8
 800660e:	189b      	adds	r3, r3, r2
 8006610:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006614:	464b      	mov	r3, r9
 8006616:	460a      	mov	r2, r1
 8006618:	eb42 0303 	adc.w	r3, r2, r3
 800661c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006620:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006624:	685b      	ldr	r3, [r3, #4]
 8006626:	2200      	movs	r2, #0
 8006628:	67bb      	str	r3, [r7, #120]	@ 0x78
 800662a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800662c:	f04f 0200 	mov.w	r2, #0
 8006630:	f04f 0300 	mov.w	r3, #0
 8006634:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8006638:	4649      	mov	r1, r9
 800663a:	008b      	lsls	r3, r1, #2
 800663c:	4641      	mov	r1, r8
 800663e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006642:	4641      	mov	r1, r8
 8006644:	008a      	lsls	r2, r1, #2
 8006646:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800664a:	f7fa fb35 	bl	8000cb8 <__aeabi_uldivmod>
 800664e:	4602      	mov	r2, r0
 8006650:	460b      	mov	r3, r1
 8006652:	4611      	mov	r1, r2
 8006654:	4b38      	ldr	r3, [pc, #224]	@ (8006738 <UART_SetConfig+0x4e4>)
 8006656:	fba3 2301 	umull	r2, r3, r3, r1
 800665a:	095b      	lsrs	r3, r3, #5
 800665c:	2264      	movs	r2, #100	@ 0x64
 800665e:	fb02 f303 	mul.w	r3, r2, r3
 8006662:	1acb      	subs	r3, r1, r3
 8006664:	011b      	lsls	r3, r3, #4
 8006666:	3332      	adds	r3, #50	@ 0x32
 8006668:	4a33      	ldr	r2, [pc, #204]	@ (8006738 <UART_SetConfig+0x4e4>)
 800666a:	fba2 2303 	umull	r2, r3, r2, r3
 800666e:	095b      	lsrs	r3, r3, #5
 8006670:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006674:	441c      	add	r4, r3
 8006676:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800667a:	2200      	movs	r2, #0
 800667c:	673b      	str	r3, [r7, #112]	@ 0x70
 800667e:	677a      	str	r2, [r7, #116]	@ 0x74
 8006680:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8006684:	4642      	mov	r2, r8
 8006686:	464b      	mov	r3, r9
 8006688:	1891      	adds	r1, r2, r2
 800668a:	60b9      	str	r1, [r7, #8]
 800668c:	415b      	adcs	r3, r3
 800668e:	60fb      	str	r3, [r7, #12]
 8006690:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006694:	4641      	mov	r1, r8
 8006696:	1851      	adds	r1, r2, r1
 8006698:	6039      	str	r1, [r7, #0]
 800669a:	4649      	mov	r1, r9
 800669c:	414b      	adcs	r3, r1
 800669e:	607b      	str	r3, [r7, #4]
 80066a0:	f04f 0200 	mov.w	r2, #0
 80066a4:	f04f 0300 	mov.w	r3, #0
 80066a8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80066ac:	4659      	mov	r1, fp
 80066ae:	00cb      	lsls	r3, r1, #3
 80066b0:	4651      	mov	r1, sl
 80066b2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80066b6:	4651      	mov	r1, sl
 80066b8:	00ca      	lsls	r2, r1, #3
 80066ba:	4610      	mov	r0, r2
 80066bc:	4619      	mov	r1, r3
 80066be:	4603      	mov	r3, r0
 80066c0:	4642      	mov	r2, r8
 80066c2:	189b      	adds	r3, r3, r2
 80066c4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80066c6:	464b      	mov	r3, r9
 80066c8:	460a      	mov	r2, r1
 80066ca:	eb42 0303 	adc.w	r3, r2, r3
 80066ce:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80066d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80066d4:	685b      	ldr	r3, [r3, #4]
 80066d6:	2200      	movs	r2, #0
 80066d8:	663b      	str	r3, [r7, #96]	@ 0x60
 80066da:	667a      	str	r2, [r7, #100]	@ 0x64
 80066dc:	f04f 0200 	mov.w	r2, #0
 80066e0:	f04f 0300 	mov.w	r3, #0
 80066e4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80066e8:	4649      	mov	r1, r9
 80066ea:	008b      	lsls	r3, r1, #2
 80066ec:	4641      	mov	r1, r8
 80066ee:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80066f2:	4641      	mov	r1, r8
 80066f4:	008a      	lsls	r2, r1, #2
 80066f6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80066fa:	f7fa fadd 	bl	8000cb8 <__aeabi_uldivmod>
 80066fe:	4602      	mov	r2, r0
 8006700:	460b      	mov	r3, r1
 8006702:	4b0d      	ldr	r3, [pc, #52]	@ (8006738 <UART_SetConfig+0x4e4>)
 8006704:	fba3 1302 	umull	r1, r3, r3, r2
 8006708:	095b      	lsrs	r3, r3, #5
 800670a:	2164      	movs	r1, #100	@ 0x64
 800670c:	fb01 f303 	mul.w	r3, r1, r3
 8006710:	1ad3      	subs	r3, r2, r3
 8006712:	011b      	lsls	r3, r3, #4
 8006714:	3332      	adds	r3, #50	@ 0x32
 8006716:	4a08      	ldr	r2, [pc, #32]	@ (8006738 <UART_SetConfig+0x4e4>)
 8006718:	fba2 2303 	umull	r2, r3, r2, r3
 800671c:	095b      	lsrs	r3, r3, #5
 800671e:	f003 020f 	and.w	r2, r3, #15
 8006722:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	4422      	add	r2, r4
 800672a:	609a      	str	r2, [r3, #8]
}
 800672c:	bf00      	nop
 800672e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8006732:	46bd      	mov	sp, r7
 8006734:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006738:	51eb851f 	.word	0x51eb851f

0800673c <_strtoul_l.constprop.0>:
 800673c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006740:	4e34      	ldr	r6, [pc, #208]	@ (8006814 <_strtoul_l.constprop.0+0xd8>)
 8006742:	4686      	mov	lr, r0
 8006744:	460d      	mov	r5, r1
 8006746:	4628      	mov	r0, r5
 8006748:	f815 4b01 	ldrb.w	r4, [r5], #1
 800674c:	5d37      	ldrb	r7, [r6, r4]
 800674e:	f017 0708 	ands.w	r7, r7, #8
 8006752:	d1f8      	bne.n	8006746 <_strtoul_l.constprop.0+0xa>
 8006754:	2c2d      	cmp	r4, #45	@ 0x2d
 8006756:	d12f      	bne.n	80067b8 <_strtoul_l.constprop.0+0x7c>
 8006758:	782c      	ldrb	r4, [r5, #0]
 800675a:	2701      	movs	r7, #1
 800675c:	1c85      	adds	r5, r0, #2
 800675e:	f033 0010 	bics.w	r0, r3, #16
 8006762:	d109      	bne.n	8006778 <_strtoul_l.constprop.0+0x3c>
 8006764:	2c30      	cmp	r4, #48	@ 0x30
 8006766:	d12c      	bne.n	80067c2 <_strtoul_l.constprop.0+0x86>
 8006768:	7828      	ldrb	r0, [r5, #0]
 800676a:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 800676e:	2858      	cmp	r0, #88	@ 0x58
 8006770:	d127      	bne.n	80067c2 <_strtoul_l.constprop.0+0x86>
 8006772:	786c      	ldrb	r4, [r5, #1]
 8006774:	2310      	movs	r3, #16
 8006776:	3502      	adds	r5, #2
 8006778:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 800677c:	2600      	movs	r6, #0
 800677e:	fbb8 f8f3 	udiv	r8, r8, r3
 8006782:	fb03 f908 	mul.w	r9, r3, r8
 8006786:	ea6f 0909 	mvn.w	r9, r9
 800678a:	4630      	mov	r0, r6
 800678c:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8006790:	f1bc 0f09 	cmp.w	ip, #9
 8006794:	d81c      	bhi.n	80067d0 <_strtoul_l.constprop.0+0x94>
 8006796:	4664      	mov	r4, ip
 8006798:	42a3      	cmp	r3, r4
 800679a:	dd2a      	ble.n	80067f2 <_strtoul_l.constprop.0+0xb6>
 800679c:	f1b6 3fff 	cmp.w	r6, #4294967295	@ 0xffffffff
 80067a0:	d007      	beq.n	80067b2 <_strtoul_l.constprop.0+0x76>
 80067a2:	4580      	cmp	r8, r0
 80067a4:	d322      	bcc.n	80067ec <_strtoul_l.constprop.0+0xb0>
 80067a6:	d101      	bne.n	80067ac <_strtoul_l.constprop.0+0x70>
 80067a8:	45a1      	cmp	r9, r4
 80067aa:	db1f      	blt.n	80067ec <_strtoul_l.constprop.0+0xb0>
 80067ac:	fb00 4003 	mla	r0, r0, r3, r4
 80067b0:	2601      	movs	r6, #1
 80067b2:	f815 4b01 	ldrb.w	r4, [r5], #1
 80067b6:	e7e9      	b.n	800678c <_strtoul_l.constprop.0+0x50>
 80067b8:	2c2b      	cmp	r4, #43	@ 0x2b
 80067ba:	bf04      	itt	eq
 80067bc:	782c      	ldrbeq	r4, [r5, #0]
 80067be:	1c85      	addeq	r5, r0, #2
 80067c0:	e7cd      	b.n	800675e <_strtoul_l.constprop.0+0x22>
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d1d8      	bne.n	8006778 <_strtoul_l.constprop.0+0x3c>
 80067c6:	2c30      	cmp	r4, #48	@ 0x30
 80067c8:	bf0c      	ite	eq
 80067ca:	2308      	moveq	r3, #8
 80067cc:	230a      	movne	r3, #10
 80067ce:	e7d3      	b.n	8006778 <_strtoul_l.constprop.0+0x3c>
 80067d0:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 80067d4:	f1bc 0f19 	cmp.w	ip, #25
 80067d8:	d801      	bhi.n	80067de <_strtoul_l.constprop.0+0xa2>
 80067da:	3c37      	subs	r4, #55	@ 0x37
 80067dc:	e7dc      	b.n	8006798 <_strtoul_l.constprop.0+0x5c>
 80067de:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 80067e2:	f1bc 0f19 	cmp.w	ip, #25
 80067e6:	d804      	bhi.n	80067f2 <_strtoul_l.constprop.0+0xb6>
 80067e8:	3c57      	subs	r4, #87	@ 0x57
 80067ea:	e7d5      	b.n	8006798 <_strtoul_l.constprop.0+0x5c>
 80067ec:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 80067f0:	e7df      	b.n	80067b2 <_strtoul_l.constprop.0+0x76>
 80067f2:	1c73      	adds	r3, r6, #1
 80067f4:	d106      	bne.n	8006804 <_strtoul_l.constprop.0+0xc8>
 80067f6:	2322      	movs	r3, #34	@ 0x22
 80067f8:	f8ce 3000 	str.w	r3, [lr]
 80067fc:	4630      	mov	r0, r6
 80067fe:	b932      	cbnz	r2, 800680e <_strtoul_l.constprop.0+0xd2>
 8006800:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006804:	b107      	cbz	r7, 8006808 <_strtoul_l.constprop.0+0xcc>
 8006806:	4240      	negs	r0, r0
 8006808:	2a00      	cmp	r2, #0
 800680a:	d0f9      	beq.n	8006800 <_strtoul_l.constprop.0+0xc4>
 800680c:	b106      	cbz	r6, 8006810 <_strtoul_l.constprop.0+0xd4>
 800680e:	1e69      	subs	r1, r5, #1
 8006810:	6011      	str	r1, [r2, #0]
 8006812:	e7f5      	b.n	8006800 <_strtoul_l.constprop.0+0xc4>
 8006814:	0800ba49 	.word	0x0800ba49

08006818 <_strtoul_r>:
 8006818:	f7ff bf90 	b.w	800673c <_strtoul_l.constprop.0>

0800681c <strtoul>:
 800681c:	4613      	mov	r3, r2
 800681e:	460a      	mov	r2, r1
 8006820:	4601      	mov	r1, r0
 8006822:	4802      	ldr	r0, [pc, #8]	@ (800682c <strtoul+0x10>)
 8006824:	6800      	ldr	r0, [r0, #0]
 8006826:	f7ff bf89 	b.w	800673c <_strtoul_l.constprop.0>
 800682a:	bf00      	nop
 800682c:	20000018 	.word	0x20000018

08006830 <__cvt>:
 8006830:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006834:	ec57 6b10 	vmov	r6, r7, d0
 8006838:	2f00      	cmp	r7, #0
 800683a:	460c      	mov	r4, r1
 800683c:	4619      	mov	r1, r3
 800683e:	463b      	mov	r3, r7
 8006840:	bfbb      	ittet	lt
 8006842:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8006846:	461f      	movlt	r7, r3
 8006848:	2300      	movge	r3, #0
 800684a:	232d      	movlt	r3, #45	@ 0x2d
 800684c:	700b      	strb	r3, [r1, #0]
 800684e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006850:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8006854:	4691      	mov	r9, r2
 8006856:	f023 0820 	bic.w	r8, r3, #32
 800685a:	bfbc      	itt	lt
 800685c:	4632      	movlt	r2, r6
 800685e:	4616      	movlt	r6, r2
 8006860:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006864:	d005      	beq.n	8006872 <__cvt+0x42>
 8006866:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800686a:	d100      	bne.n	800686e <__cvt+0x3e>
 800686c:	3401      	adds	r4, #1
 800686e:	2102      	movs	r1, #2
 8006870:	e000      	b.n	8006874 <__cvt+0x44>
 8006872:	2103      	movs	r1, #3
 8006874:	ab03      	add	r3, sp, #12
 8006876:	9301      	str	r3, [sp, #4]
 8006878:	ab02      	add	r3, sp, #8
 800687a:	9300      	str	r3, [sp, #0]
 800687c:	ec47 6b10 	vmov	d0, r6, r7
 8006880:	4653      	mov	r3, sl
 8006882:	4622      	mov	r2, r4
 8006884:	f001 fa10 	bl	8007ca8 <_dtoa_r>
 8006888:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800688c:	4605      	mov	r5, r0
 800688e:	d119      	bne.n	80068c4 <__cvt+0x94>
 8006890:	f019 0f01 	tst.w	r9, #1
 8006894:	d00e      	beq.n	80068b4 <__cvt+0x84>
 8006896:	eb00 0904 	add.w	r9, r0, r4
 800689a:	2200      	movs	r2, #0
 800689c:	2300      	movs	r3, #0
 800689e:	4630      	mov	r0, r6
 80068a0:	4639      	mov	r1, r7
 80068a2:	f7fa f929 	bl	8000af8 <__aeabi_dcmpeq>
 80068a6:	b108      	cbz	r0, 80068ac <__cvt+0x7c>
 80068a8:	f8cd 900c 	str.w	r9, [sp, #12]
 80068ac:	2230      	movs	r2, #48	@ 0x30
 80068ae:	9b03      	ldr	r3, [sp, #12]
 80068b0:	454b      	cmp	r3, r9
 80068b2:	d31e      	bcc.n	80068f2 <__cvt+0xc2>
 80068b4:	9b03      	ldr	r3, [sp, #12]
 80068b6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80068b8:	1b5b      	subs	r3, r3, r5
 80068ba:	4628      	mov	r0, r5
 80068bc:	6013      	str	r3, [r2, #0]
 80068be:	b004      	add	sp, #16
 80068c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80068c4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80068c8:	eb00 0904 	add.w	r9, r0, r4
 80068cc:	d1e5      	bne.n	800689a <__cvt+0x6a>
 80068ce:	7803      	ldrb	r3, [r0, #0]
 80068d0:	2b30      	cmp	r3, #48	@ 0x30
 80068d2:	d10a      	bne.n	80068ea <__cvt+0xba>
 80068d4:	2200      	movs	r2, #0
 80068d6:	2300      	movs	r3, #0
 80068d8:	4630      	mov	r0, r6
 80068da:	4639      	mov	r1, r7
 80068dc:	f7fa f90c 	bl	8000af8 <__aeabi_dcmpeq>
 80068e0:	b918      	cbnz	r0, 80068ea <__cvt+0xba>
 80068e2:	f1c4 0401 	rsb	r4, r4, #1
 80068e6:	f8ca 4000 	str.w	r4, [sl]
 80068ea:	f8da 3000 	ldr.w	r3, [sl]
 80068ee:	4499      	add	r9, r3
 80068f0:	e7d3      	b.n	800689a <__cvt+0x6a>
 80068f2:	1c59      	adds	r1, r3, #1
 80068f4:	9103      	str	r1, [sp, #12]
 80068f6:	701a      	strb	r2, [r3, #0]
 80068f8:	e7d9      	b.n	80068ae <__cvt+0x7e>

080068fa <__exponent>:
 80068fa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80068fc:	2900      	cmp	r1, #0
 80068fe:	bfba      	itte	lt
 8006900:	4249      	neglt	r1, r1
 8006902:	232d      	movlt	r3, #45	@ 0x2d
 8006904:	232b      	movge	r3, #43	@ 0x2b
 8006906:	2909      	cmp	r1, #9
 8006908:	7002      	strb	r2, [r0, #0]
 800690a:	7043      	strb	r3, [r0, #1]
 800690c:	dd29      	ble.n	8006962 <__exponent+0x68>
 800690e:	f10d 0307 	add.w	r3, sp, #7
 8006912:	461d      	mov	r5, r3
 8006914:	270a      	movs	r7, #10
 8006916:	461a      	mov	r2, r3
 8006918:	fbb1 f6f7 	udiv	r6, r1, r7
 800691c:	fb07 1416 	mls	r4, r7, r6, r1
 8006920:	3430      	adds	r4, #48	@ 0x30
 8006922:	f802 4c01 	strb.w	r4, [r2, #-1]
 8006926:	460c      	mov	r4, r1
 8006928:	2c63      	cmp	r4, #99	@ 0x63
 800692a:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 800692e:	4631      	mov	r1, r6
 8006930:	dcf1      	bgt.n	8006916 <__exponent+0x1c>
 8006932:	3130      	adds	r1, #48	@ 0x30
 8006934:	1e94      	subs	r4, r2, #2
 8006936:	f803 1c01 	strb.w	r1, [r3, #-1]
 800693a:	1c41      	adds	r1, r0, #1
 800693c:	4623      	mov	r3, r4
 800693e:	42ab      	cmp	r3, r5
 8006940:	d30a      	bcc.n	8006958 <__exponent+0x5e>
 8006942:	f10d 0309 	add.w	r3, sp, #9
 8006946:	1a9b      	subs	r3, r3, r2
 8006948:	42ac      	cmp	r4, r5
 800694a:	bf88      	it	hi
 800694c:	2300      	movhi	r3, #0
 800694e:	3302      	adds	r3, #2
 8006950:	4403      	add	r3, r0
 8006952:	1a18      	subs	r0, r3, r0
 8006954:	b003      	add	sp, #12
 8006956:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006958:	f813 6b01 	ldrb.w	r6, [r3], #1
 800695c:	f801 6f01 	strb.w	r6, [r1, #1]!
 8006960:	e7ed      	b.n	800693e <__exponent+0x44>
 8006962:	2330      	movs	r3, #48	@ 0x30
 8006964:	3130      	adds	r1, #48	@ 0x30
 8006966:	7083      	strb	r3, [r0, #2]
 8006968:	70c1      	strb	r1, [r0, #3]
 800696a:	1d03      	adds	r3, r0, #4
 800696c:	e7f1      	b.n	8006952 <__exponent+0x58>
	...

08006970 <_printf_float>:
 8006970:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006974:	b08d      	sub	sp, #52	@ 0x34
 8006976:	460c      	mov	r4, r1
 8006978:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800697c:	4616      	mov	r6, r2
 800697e:	461f      	mov	r7, r3
 8006980:	4605      	mov	r5, r0
 8006982:	f001 f889 	bl	8007a98 <_localeconv_r>
 8006986:	6803      	ldr	r3, [r0, #0]
 8006988:	9304      	str	r3, [sp, #16]
 800698a:	4618      	mov	r0, r3
 800698c:	f7f9 fc88 	bl	80002a0 <strlen>
 8006990:	2300      	movs	r3, #0
 8006992:	930a      	str	r3, [sp, #40]	@ 0x28
 8006994:	f8d8 3000 	ldr.w	r3, [r8]
 8006998:	9005      	str	r0, [sp, #20]
 800699a:	3307      	adds	r3, #7
 800699c:	f023 0307 	bic.w	r3, r3, #7
 80069a0:	f103 0208 	add.w	r2, r3, #8
 80069a4:	f894 a018 	ldrb.w	sl, [r4, #24]
 80069a8:	f8d4 b000 	ldr.w	fp, [r4]
 80069ac:	f8c8 2000 	str.w	r2, [r8]
 80069b0:	e9d3 8900 	ldrd	r8, r9, [r3]
 80069b4:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80069b8:	9307      	str	r3, [sp, #28]
 80069ba:	f8cd 8018 	str.w	r8, [sp, #24]
 80069be:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80069c2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80069c6:	4b9c      	ldr	r3, [pc, #624]	@ (8006c38 <_printf_float+0x2c8>)
 80069c8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80069cc:	f7fa f8c6 	bl	8000b5c <__aeabi_dcmpun>
 80069d0:	bb70      	cbnz	r0, 8006a30 <_printf_float+0xc0>
 80069d2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80069d6:	4b98      	ldr	r3, [pc, #608]	@ (8006c38 <_printf_float+0x2c8>)
 80069d8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80069dc:	f7fa f8a0 	bl	8000b20 <__aeabi_dcmple>
 80069e0:	bb30      	cbnz	r0, 8006a30 <_printf_float+0xc0>
 80069e2:	2200      	movs	r2, #0
 80069e4:	2300      	movs	r3, #0
 80069e6:	4640      	mov	r0, r8
 80069e8:	4649      	mov	r1, r9
 80069ea:	f7fa f88f 	bl	8000b0c <__aeabi_dcmplt>
 80069ee:	b110      	cbz	r0, 80069f6 <_printf_float+0x86>
 80069f0:	232d      	movs	r3, #45	@ 0x2d
 80069f2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80069f6:	4a91      	ldr	r2, [pc, #580]	@ (8006c3c <_printf_float+0x2cc>)
 80069f8:	4b91      	ldr	r3, [pc, #580]	@ (8006c40 <_printf_float+0x2d0>)
 80069fa:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80069fe:	bf94      	ite	ls
 8006a00:	4690      	movls	r8, r2
 8006a02:	4698      	movhi	r8, r3
 8006a04:	2303      	movs	r3, #3
 8006a06:	6123      	str	r3, [r4, #16]
 8006a08:	f02b 0304 	bic.w	r3, fp, #4
 8006a0c:	6023      	str	r3, [r4, #0]
 8006a0e:	f04f 0900 	mov.w	r9, #0
 8006a12:	9700      	str	r7, [sp, #0]
 8006a14:	4633      	mov	r3, r6
 8006a16:	aa0b      	add	r2, sp, #44	@ 0x2c
 8006a18:	4621      	mov	r1, r4
 8006a1a:	4628      	mov	r0, r5
 8006a1c:	f000 f9d2 	bl	8006dc4 <_printf_common>
 8006a20:	3001      	adds	r0, #1
 8006a22:	f040 808d 	bne.w	8006b40 <_printf_float+0x1d0>
 8006a26:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006a2a:	b00d      	add	sp, #52	@ 0x34
 8006a2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a30:	4642      	mov	r2, r8
 8006a32:	464b      	mov	r3, r9
 8006a34:	4640      	mov	r0, r8
 8006a36:	4649      	mov	r1, r9
 8006a38:	f7fa f890 	bl	8000b5c <__aeabi_dcmpun>
 8006a3c:	b140      	cbz	r0, 8006a50 <_printf_float+0xe0>
 8006a3e:	464b      	mov	r3, r9
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	bfbc      	itt	lt
 8006a44:	232d      	movlt	r3, #45	@ 0x2d
 8006a46:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8006a4a:	4a7e      	ldr	r2, [pc, #504]	@ (8006c44 <_printf_float+0x2d4>)
 8006a4c:	4b7e      	ldr	r3, [pc, #504]	@ (8006c48 <_printf_float+0x2d8>)
 8006a4e:	e7d4      	b.n	80069fa <_printf_float+0x8a>
 8006a50:	6863      	ldr	r3, [r4, #4]
 8006a52:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8006a56:	9206      	str	r2, [sp, #24]
 8006a58:	1c5a      	adds	r2, r3, #1
 8006a5a:	d13b      	bne.n	8006ad4 <_printf_float+0x164>
 8006a5c:	2306      	movs	r3, #6
 8006a5e:	6063      	str	r3, [r4, #4]
 8006a60:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8006a64:	2300      	movs	r3, #0
 8006a66:	6022      	str	r2, [r4, #0]
 8006a68:	9303      	str	r3, [sp, #12]
 8006a6a:	ab0a      	add	r3, sp, #40	@ 0x28
 8006a6c:	e9cd a301 	strd	sl, r3, [sp, #4]
 8006a70:	ab09      	add	r3, sp, #36	@ 0x24
 8006a72:	9300      	str	r3, [sp, #0]
 8006a74:	6861      	ldr	r1, [r4, #4]
 8006a76:	ec49 8b10 	vmov	d0, r8, r9
 8006a7a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8006a7e:	4628      	mov	r0, r5
 8006a80:	f7ff fed6 	bl	8006830 <__cvt>
 8006a84:	9b06      	ldr	r3, [sp, #24]
 8006a86:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006a88:	2b47      	cmp	r3, #71	@ 0x47
 8006a8a:	4680      	mov	r8, r0
 8006a8c:	d129      	bne.n	8006ae2 <_printf_float+0x172>
 8006a8e:	1cc8      	adds	r0, r1, #3
 8006a90:	db02      	blt.n	8006a98 <_printf_float+0x128>
 8006a92:	6863      	ldr	r3, [r4, #4]
 8006a94:	4299      	cmp	r1, r3
 8006a96:	dd41      	ble.n	8006b1c <_printf_float+0x1ac>
 8006a98:	f1aa 0a02 	sub.w	sl, sl, #2
 8006a9c:	fa5f fa8a 	uxtb.w	sl, sl
 8006aa0:	3901      	subs	r1, #1
 8006aa2:	4652      	mov	r2, sl
 8006aa4:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8006aa8:	9109      	str	r1, [sp, #36]	@ 0x24
 8006aaa:	f7ff ff26 	bl	80068fa <__exponent>
 8006aae:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006ab0:	1813      	adds	r3, r2, r0
 8006ab2:	2a01      	cmp	r2, #1
 8006ab4:	4681      	mov	r9, r0
 8006ab6:	6123      	str	r3, [r4, #16]
 8006ab8:	dc02      	bgt.n	8006ac0 <_printf_float+0x150>
 8006aba:	6822      	ldr	r2, [r4, #0]
 8006abc:	07d2      	lsls	r2, r2, #31
 8006abe:	d501      	bpl.n	8006ac4 <_printf_float+0x154>
 8006ac0:	3301      	adds	r3, #1
 8006ac2:	6123      	str	r3, [r4, #16]
 8006ac4:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d0a2      	beq.n	8006a12 <_printf_float+0xa2>
 8006acc:	232d      	movs	r3, #45	@ 0x2d
 8006ace:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006ad2:	e79e      	b.n	8006a12 <_printf_float+0xa2>
 8006ad4:	9a06      	ldr	r2, [sp, #24]
 8006ad6:	2a47      	cmp	r2, #71	@ 0x47
 8006ad8:	d1c2      	bne.n	8006a60 <_printf_float+0xf0>
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d1c0      	bne.n	8006a60 <_printf_float+0xf0>
 8006ade:	2301      	movs	r3, #1
 8006ae0:	e7bd      	b.n	8006a5e <_printf_float+0xee>
 8006ae2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006ae6:	d9db      	bls.n	8006aa0 <_printf_float+0x130>
 8006ae8:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8006aec:	d118      	bne.n	8006b20 <_printf_float+0x1b0>
 8006aee:	2900      	cmp	r1, #0
 8006af0:	6863      	ldr	r3, [r4, #4]
 8006af2:	dd0b      	ble.n	8006b0c <_printf_float+0x19c>
 8006af4:	6121      	str	r1, [r4, #16]
 8006af6:	b913      	cbnz	r3, 8006afe <_printf_float+0x18e>
 8006af8:	6822      	ldr	r2, [r4, #0]
 8006afa:	07d0      	lsls	r0, r2, #31
 8006afc:	d502      	bpl.n	8006b04 <_printf_float+0x194>
 8006afe:	3301      	adds	r3, #1
 8006b00:	440b      	add	r3, r1
 8006b02:	6123      	str	r3, [r4, #16]
 8006b04:	65a1      	str	r1, [r4, #88]	@ 0x58
 8006b06:	f04f 0900 	mov.w	r9, #0
 8006b0a:	e7db      	b.n	8006ac4 <_printf_float+0x154>
 8006b0c:	b913      	cbnz	r3, 8006b14 <_printf_float+0x1a4>
 8006b0e:	6822      	ldr	r2, [r4, #0]
 8006b10:	07d2      	lsls	r2, r2, #31
 8006b12:	d501      	bpl.n	8006b18 <_printf_float+0x1a8>
 8006b14:	3302      	adds	r3, #2
 8006b16:	e7f4      	b.n	8006b02 <_printf_float+0x192>
 8006b18:	2301      	movs	r3, #1
 8006b1a:	e7f2      	b.n	8006b02 <_printf_float+0x192>
 8006b1c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8006b20:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006b22:	4299      	cmp	r1, r3
 8006b24:	db05      	blt.n	8006b32 <_printf_float+0x1c2>
 8006b26:	6823      	ldr	r3, [r4, #0]
 8006b28:	6121      	str	r1, [r4, #16]
 8006b2a:	07d8      	lsls	r0, r3, #31
 8006b2c:	d5ea      	bpl.n	8006b04 <_printf_float+0x194>
 8006b2e:	1c4b      	adds	r3, r1, #1
 8006b30:	e7e7      	b.n	8006b02 <_printf_float+0x192>
 8006b32:	2900      	cmp	r1, #0
 8006b34:	bfd4      	ite	le
 8006b36:	f1c1 0202 	rsble	r2, r1, #2
 8006b3a:	2201      	movgt	r2, #1
 8006b3c:	4413      	add	r3, r2
 8006b3e:	e7e0      	b.n	8006b02 <_printf_float+0x192>
 8006b40:	6823      	ldr	r3, [r4, #0]
 8006b42:	055a      	lsls	r2, r3, #21
 8006b44:	d407      	bmi.n	8006b56 <_printf_float+0x1e6>
 8006b46:	6923      	ldr	r3, [r4, #16]
 8006b48:	4642      	mov	r2, r8
 8006b4a:	4631      	mov	r1, r6
 8006b4c:	4628      	mov	r0, r5
 8006b4e:	47b8      	blx	r7
 8006b50:	3001      	adds	r0, #1
 8006b52:	d12b      	bne.n	8006bac <_printf_float+0x23c>
 8006b54:	e767      	b.n	8006a26 <_printf_float+0xb6>
 8006b56:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006b5a:	f240 80dd 	bls.w	8006d18 <_printf_float+0x3a8>
 8006b5e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006b62:	2200      	movs	r2, #0
 8006b64:	2300      	movs	r3, #0
 8006b66:	f7f9 ffc7 	bl	8000af8 <__aeabi_dcmpeq>
 8006b6a:	2800      	cmp	r0, #0
 8006b6c:	d033      	beq.n	8006bd6 <_printf_float+0x266>
 8006b6e:	4a37      	ldr	r2, [pc, #220]	@ (8006c4c <_printf_float+0x2dc>)
 8006b70:	2301      	movs	r3, #1
 8006b72:	4631      	mov	r1, r6
 8006b74:	4628      	mov	r0, r5
 8006b76:	47b8      	blx	r7
 8006b78:	3001      	adds	r0, #1
 8006b7a:	f43f af54 	beq.w	8006a26 <_printf_float+0xb6>
 8006b7e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8006b82:	4543      	cmp	r3, r8
 8006b84:	db02      	blt.n	8006b8c <_printf_float+0x21c>
 8006b86:	6823      	ldr	r3, [r4, #0]
 8006b88:	07d8      	lsls	r0, r3, #31
 8006b8a:	d50f      	bpl.n	8006bac <_printf_float+0x23c>
 8006b8c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006b90:	4631      	mov	r1, r6
 8006b92:	4628      	mov	r0, r5
 8006b94:	47b8      	blx	r7
 8006b96:	3001      	adds	r0, #1
 8006b98:	f43f af45 	beq.w	8006a26 <_printf_float+0xb6>
 8006b9c:	f04f 0900 	mov.w	r9, #0
 8006ba0:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8006ba4:	f104 0a1a 	add.w	sl, r4, #26
 8006ba8:	45c8      	cmp	r8, r9
 8006baa:	dc09      	bgt.n	8006bc0 <_printf_float+0x250>
 8006bac:	6823      	ldr	r3, [r4, #0]
 8006bae:	079b      	lsls	r3, r3, #30
 8006bb0:	f100 8103 	bmi.w	8006dba <_printf_float+0x44a>
 8006bb4:	68e0      	ldr	r0, [r4, #12]
 8006bb6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006bb8:	4298      	cmp	r0, r3
 8006bba:	bfb8      	it	lt
 8006bbc:	4618      	movlt	r0, r3
 8006bbe:	e734      	b.n	8006a2a <_printf_float+0xba>
 8006bc0:	2301      	movs	r3, #1
 8006bc2:	4652      	mov	r2, sl
 8006bc4:	4631      	mov	r1, r6
 8006bc6:	4628      	mov	r0, r5
 8006bc8:	47b8      	blx	r7
 8006bca:	3001      	adds	r0, #1
 8006bcc:	f43f af2b 	beq.w	8006a26 <_printf_float+0xb6>
 8006bd0:	f109 0901 	add.w	r9, r9, #1
 8006bd4:	e7e8      	b.n	8006ba8 <_printf_float+0x238>
 8006bd6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	dc39      	bgt.n	8006c50 <_printf_float+0x2e0>
 8006bdc:	4a1b      	ldr	r2, [pc, #108]	@ (8006c4c <_printf_float+0x2dc>)
 8006bde:	2301      	movs	r3, #1
 8006be0:	4631      	mov	r1, r6
 8006be2:	4628      	mov	r0, r5
 8006be4:	47b8      	blx	r7
 8006be6:	3001      	adds	r0, #1
 8006be8:	f43f af1d 	beq.w	8006a26 <_printf_float+0xb6>
 8006bec:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8006bf0:	ea59 0303 	orrs.w	r3, r9, r3
 8006bf4:	d102      	bne.n	8006bfc <_printf_float+0x28c>
 8006bf6:	6823      	ldr	r3, [r4, #0]
 8006bf8:	07d9      	lsls	r1, r3, #31
 8006bfa:	d5d7      	bpl.n	8006bac <_printf_float+0x23c>
 8006bfc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006c00:	4631      	mov	r1, r6
 8006c02:	4628      	mov	r0, r5
 8006c04:	47b8      	blx	r7
 8006c06:	3001      	adds	r0, #1
 8006c08:	f43f af0d 	beq.w	8006a26 <_printf_float+0xb6>
 8006c0c:	f04f 0a00 	mov.w	sl, #0
 8006c10:	f104 0b1a 	add.w	fp, r4, #26
 8006c14:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006c16:	425b      	negs	r3, r3
 8006c18:	4553      	cmp	r3, sl
 8006c1a:	dc01      	bgt.n	8006c20 <_printf_float+0x2b0>
 8006c1c:	464b      	mov	r3, r9
 8006c1e:	e793      	b.n	8006b48 <_printf_float+0x1d8>
 8006c20:	2301      	movs	r3, #1
 8006c22:	465a      	mov	r2, fp
 8006c24:	4631      	mov	r1, r6
 8006c26:	4628      	mov	r0, r5
 8006c28:	47b8      	blx	r7
 8006c2a:	3001      	adds	r0, #1
 8006c2c:	f43f aefb 	beq.w	8006a26 <_printf_float+0xb6>
 8006c30:	f10a 0a01 	add.w	sl, sl, #1
 8006c34:	e7ee      	b.n	8006c14 <_printf_float+0x2a4>
 8006c36:	bf00      	nop
 8006c38:	7fefffff 	.word	0x7fefffff
 8006c3c:	0800bb49 	.word	0x0800bb49
 8006c40:	0800bb4d 	.word	0x0800bb4d
 8006c44:	0800bb51 	.word	0x0800bb51
 8006c48:	0800bb55 	.word	0x0800bb55
 8006c4c:	0800bde7 	.word	0x0800bde7
 8006c50:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006c52:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006c56:	4553      	cmp	r3, sl
 8006c58:	bfa8      	it	ge
 8006c5a:	4653      	movge	r3, sl
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	4699      	mov	r9, r3
 8006c60:	dc36      	bgt.n	8006cd0 <_printf_float+0x360>
 8006c62:	f04f 0b00 	mov.w	fp, #0
 8006c66:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006c6a:	f104 021a 	add.w	r2, r4, #26
 8006c6e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006c70:	9306      	str	r3, [sp, #24]
 8006c72:	eba3 0309 	sub.w	r3, r3, r9
 8006c76:	455b      	cmp	r3, fp
 8006c78:	dc31      	bgt.n	8006cde <_printf_float+0x36e>
 8006c7a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006c7c:	459a      	cmp	sl, r3
 8006c7e:	dc3a      	bgt.n	8006cf6 <_printf_float+0x386>
 8006c80:	6823      	ldr	r3, [r4, #0]
 8006c82:	07da      	lsls	r2, r3, #31
 8006c84:	d437      	bmi.n	8006cf6 <_printf_float+0x386>
 8006c86:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006c88:	ebaa 0903 	sub.w	r9, sl, r3
 8006c8c:	9b06      	ldr	r3, [sp, #24]
 8006c8e:	ebaa 0303 	sub.w	r3, sl, r3
 8006c92:	4599      	cmp	r9, r3
 8006c94:	bfa8      	it	ge
 8006c96:	4699      	movge	r9, r3
 8006c98:	f1b9 0f00 	cmp.w	r9, #0
 8006c9c:	dc33      	bgt.n	8006d06 <_printf_float+0x396>
 8006c9e:	f04f 0800 	mov.w	r8, #0
 8006ca2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006ca6:	f104 0b1a 	add.w	fp, r4, #26
 8006caa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006cac:	ebaa 0303 	sub.w	r3, sl, r3
 8006cb0:	eba3 0309 	sub.w	r3, r3, r9
 8006cb4:	4543      	cmp	r3, r8
 8006cb6:	f77f af79 	ble.w	8006bac <_printf_float+0x23c>
 8006cba:	2301      	movs	r3, #1
 8006cbc:	465a      	mov	r2, fp
 8006cbe:	4631      	mov	r1, r6
 8006cc0:	4628      	mov	r0, r5
 8006cc2:	47b8      	blx	r7
 8006cc4:	3001      	adds	r0, #1
 8006cc6:	f43f aeae 	beq.w	8006a26 <_printf_float+0xb6>
 8006cca:	f108 0801 	add.w	r8, r8, #1
 8006cce:	e7ec      	b.n	8006caa <_printf_float+0x33a>
 8006cd0:	4642      	mov	r2, r8
 8006cd2:	4631      	mov	r1, r6
 8006cd4:	4628      	mov	r0, r5
 8006cd6:	47b8      	blx	r7
 8006cd8:	3001      	adds	r0, #1
 8006cda:	d1c2      	bne.n	8006c62 <_printf_float+0x2f2>
 8006cdc:	e6a3      	b.n	8006a26 <_printf_float+0xb6>
 8006cde:	2301      	movs	r3, #1
 8006ce0:	4631      	mov	r1, r6
 8006ce2:	4628      	mov	r0, r5
 8006ce4:	9206      	str	r2, [sp, #24]
 8006ce6:	47b8      	blx	r7
 8006ce8:	3001      	adds	r0, #1
 8006cea:	f43f ae9c 	beq.w	8006a26 <_printf_float+0xb6>
 8006cee:	9a06      	ldr	r2, [sp, #24]
 8006cf0:	f10b 0b01 	add.w	fp, fp, #1
 8006cf4:	e7bb      	b.n	8006c6e <_printf_float+0x2fe>
 8006cf6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006cfa:	4631      	mov	r1, r6
 8006cfc:	4628      	mov	r0, r5
 8006cfe:	47b8      	blx	r7
 8006d00:	3001      	adds	r0, #1
 8006d02:	d1c0      	bne.n	8006c86 <_printf_float+0x316>
 8006d04:	e68f      	b.n	8006a26 <_printf_float+0xb6>
 8006d06:	9a06      	ldr	r2, [sp, #24]
 8006d08:	464b      	mov	r3, r9
 8006d0a:	4442      	add	r2, r8
 8006d0c:	4631      	mov	r1, r6
 8006d0e:	4628      	mov	r0, r5
 8006d10:	47b8      	blx	r7
 8006d12:	3001      	adds	r0, #1
 8006d14:	d1c3      	bne.n	8006c9e <_printf_float+0x32e>
 8006d16:	e686      	b.n	8006a26 <_printf_float+0xb6>
 8006d18:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006d1c:	f1ba 0f01 	cmp.w	sl, #1
 8006d20:	dc01      	bgt.n	8006d26 <_printf_float+0x3b6>
 8006d22:	07db      	lsls	r3, r3, #31
 8006d24:	d536      	bpl.n	8006d94 <_printf_float+0x424>
 8006d26:	2301      	movs	r3, #1
 8006d28:	4642      	mov	r2, r8
 8006d2a:	4631      	mov	r1, r6
 8006d2c:	4628      	mov	r0, r5
 8006d2e:	47b8      	blx	r7
 8006d30:	3001      	adds	r0, #1
 8006d32:	f43f ae78 	beq.w	8006a26 <_printf_float+0xb6>
 8006d36:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006d3a:	4631      	mov	r1, r6
 8006d3c:	4628      	mov	r0, r5
 8006d3e:	47b8      	blx	r7
 8006d40:	3001      	adds	r0, #1
 8006d42:	f43f ae70 	beq.w	8006a26 <_printf_float+0xb6>
 8006d46:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006d4a:	2200      	movs	r2, #0
 8006d4c:	2300      	movs	r3, #0
 8006d4e:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8006d52:	f7f9 fed1 	bl	8000af8 <__aeabi_dcmpeq>
 8006d56:	b9c0      	cbnz	r0, 8006d8a <_printf_float+0x41a>
 8006d58:	4653      	mov	r3, sl
 8006d5a:	f108 0201 	add.w	r2, r8, #1
 8006d5e:	4631      	mov	r1, r6
 8006d60:	4628      	mov	r0, r5
 8006d62:	47b8      	blx	r7
 8006d64:	3001      	adds	r0, #1
 8006d66:	d10c      	bne.n	8006d82 <_printf_float+0x412>
 8006d68:	e65d      	b.n	8006a26 <_printf_float+0xb6>
 8006d6a:	2301      	movs	r3, #1
 8006d6c:	465a      	mov	r2, fp
 8006d6e:	4631      	mov	r1, r6
 8006d70:	4628      	mov	r0, r5
 8006d72:	47b8      	blx	r7
 8006d74:	3001      	adds	r0, #1
 8006d76:	f43f ae56 	beq.w	8006a26 <_printf_float+0xb6>
 8006d7a:	f108 0801 	add.w	r8, r8, #1
 8006d7e:	45d0      	cmp	r8, sl
 8006d80:	dbf3      	blt.n	8006d6a <_printf_float+0x3fa>
 8006d82:	464b      	mov	r3, r9
 8006d84:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8006d88:	e6df      	b.n	8006b4a <_printf_float+0x1da>
 8006d8a:	f04f 0800 	mov.w	r8, #0
 8006d8e:	f104 0b1a 	add.w	fp, r4, #26
 8006d92:	e7f4      	b.n	8006d7e <_printf_float+0x40e>
 8006d94:	2301      	movs	r3, #1
 8006d96:	4642      	mov	r2, r8
 8006d98:	e7e1      	b.n	8006d5e <_printf_float+0x3ee>
 8006d9a:	2301      	movs	r3, #1
 8006d9c:	464a      	mov	r2, r9
 8006d9e:	4631      	mov	r1, r6
 8006da0:	4628      	mov	r0, r5
 8006da2:	47b8      	blx	r7
 8006da4:	3001      	adds	r0, #1
 8006da6:	f43f ae3e 	beq.w	8006a26 <_printf_float+0xb6>
 8006daa:	f108 0801 	add.w	r8, r8, #1
 8006dae:	68e3      	ldr	r3, [r4, #12]
 8006db0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006db2:	1a5b      	subs	r3, r3, r1
 8006db4:	4543      	cmp	r3, r8
 8006db6:	dcf0      	bgt.n	8006d9a <_printf_float+0x42a>
 8006db8:	e6fc      	b.n	8006bb4 <_printf_float+0x244>
 8006dba:	f04f 0800 	mov.w	r8, #0
 8006dbe:	f104 0919 	add.w	r9, r4, #25
 8006dc2:	e7f4      	b.n	8006dae <_printf_float+0x43e>

08006dc4 <_printf_common>:
 8006dc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006dc8:	4616      	mov	r6, r2
 8006dca:	4698      	mov	r8, r3
 8006dcc:	688a      	ldr	r2, [r1, #8]
 8006dce:	690b      	ldr	r3, [r1, #16]
 8006dd0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006dd4:	4293      	cmp	r3, r2
 8006dd6:	bfb8      	it	lt
 8006dd8:	4613      	movlt	r3, r2
 8006dda:	6033      	str	r3, [r6, #0]
 8006ddc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006de0:	4607      	mov	r7, r0
 8006de2:	460c      	mov	r4, r1
 8006de4:	b10a      	cbz	r2, 8006dea <_printf_common+0x26>
 8006de6:	3301      	adds	r3, #1
 8006de8:	6033      	str	r3, [r6, #0]
 8006dea:	6823      	ldr	r3, [r4, #0]
 8006dec:	0699      	lsls	r1, r3, #26
 8006dee:	bf42      	ittt	mi
 8006df0:	6833      	ldrmi	r3, [r6, #0]
 8006df2:	3302      	addmi	r3, #2
 8006df4:	6033      	strmi	r3, [r6, #0]
 8006df6:	6825      	ldr	r5, [r4, #0]
 8006df8:	f015 0506 	ands.w	r5, r5, #6
 8006dfc:	d106      	bne.n	8006e0c <_printf_common+0x48>
 8006dfe:	f104 0a19 	add.w	sl, r4, #25
 8006e02:	68e3      	ldr	r3, [r4, #12]
 8006e04:	6832      	ldr	r2, [r6, #0]
 8006e06:	1a9b      	subs	r3, r3, r2
 8006e08:	42ab      	cmp	r3, r5
 8006e0a:	dc26      	bgt.n	8006e5a <_printf_common+0x96>
 8006e0c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006e10:	6822      	ldr	r2, [r4, #0]
 8006e12:	3b00      	subs	r3, #0
 8006e14:	bf18      	it	ne
 8006e16:	2301      	movne	r3, #1
 8006e18:	0692      	lsls	r2, r2, #26
 8006e1a:	d42b      	bmi.n	8006e74 <_printf_common+0xb0>
 8006e1c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006e20:	4641      	mov	r1, r8
 8006e22:	4638      	mov	r0, r7
 8006e24:	47c8      	blx	r9
 8006e26:	3001      	adds	r0, #1
 8006e28:	d01e      	beq.n	8006e68 <_printf_common+0xa4>
 8006e2a:	6823      	ldr	r3, [r4, #0]
 8006e2c:	6922      	ldr	r2, [r4, #16]
 8006e2e:	f003 0306 	and.w	r3, r3, #6
 8006e32:	2b04      	cmp	r3, #4
 8006e34:	bf02      	ittt	eq
 8006e36:	68e5      	ldreq	r5, [r4, #12]
 8006e38:	6833      	ldreq	r3, [r6, #0]
 8006e3a:	1aed      	subeq	r5, r5, r3
 8006e3c:	68a3      	ldr	r3, [r4, #8]
 8006e3e:	bf0c      	ite	eq
 8006e40:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006e44:	2500      	movne	r5, #0
 8006e46:	4293      	cmp	r3, r2
 8006e48:	bfc4      	itt	gt
 8006e4a:	1a9b      	subgt	r3, r3, r2
 8006e4c:	18ed      	addgt	r5, r5, r3
 8006e4e:	2600      	movs	r6, #0
 8006e50:	341a      	adds	r4, #26
 8006e52:	42b5      	cmp	r5, r6
 8006e54:	d11a      	bne.n	8006e8c <_printf_common+0xc8>
 8006e56:	2000      	movs	r0, #0
 8006e58:	e008      	b.n	8006e6c <_printf_common+0xa8>
 8006e5a:	2301      	movs	r3, #1
 8006e5c:	4652      	mov	r2, sl
 8006e5e:	4641      	mov	r1, r8
 8006e60:	4638      	mov	r0, r7
 8006e62:	47c8      	blx	r9
 8006e64:	3001      	adds	r0, #1
 8006e66:	d103      	bne.n	8006e70 <_printf_common+0xac>
 8006e68:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006e6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e70:	3501      	adds	r5, #1
 8006e72:	e7c6      	b.n	8006e02 <_printf_common+0x3e>
 8006e74:	18e1      	adds	r1, r4, r3
 8006e76:	1c5a      	adds	r2, r3, #1
 8006e78:	2030      	movs	r0, #48	@ 0x30
 8006e7a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006e7e:	4422      	add	r2, r4
 8006e80:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006e84:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006e88:	3302      	adds	r3, #2
 8006e8a:	e7c7      	b.n	8006e1c <_printf_common+0x58>
 8006e8c:	2301      	movs	r3, #1
 8006e8e:	4622      	mov	r2, r4
 8006e90:	4641      	mov	r1, r8
 8006e92:	4638      	mov	r0, r7
 8006e94:	47c8      	blx	r9
 8006e96:	3001      	adds	r0, #1
 8006e98:	d0e6      	beq.n	8006e68 <_printf_common+0xa4>
 8006e9a:	3601      	adds	r6, #1
 8006e9c:	e7d9      	b.n	8006e52 <_printf_common+0x8e>
	...

08006ea0 <_printf_i>:
 8006ea0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006ea4:	7e0f      	ldrb	r7, [r1, #24]
 8006ea6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006ea8:	2f78      	cmp	r7, #120	@ 0x78
 8006eaa:	4691      	mov	r9, r2
 8006eac:	4680      	mov	r8, r0
 8006eae:	460c      	mov	r4, r1
 8006eb0:	469a      	mov	sl, r3
 8006eb2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006eb6:	d807      	bhi.n	8006ec8 <_printf_i+0x28>
 8006eb8:	2f62      	cmp	r7, #98	@ 0x62
 8006eba:	d80a      	bhi.n	8006ed2 <_printf_i+0x32>
 8006ebc:	2f00      	cmp	r7, #0
 8006ebe:	f000 80d2 	beq.w	8007066 <_printf_i+0x1c6>
 8006ec2:	2f58      	cmp	r7, #88	@ 0x58
 8006ec4:	f000 80b9 	beq.w	800703a <_printf_i+0x19a>
 8006ec8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006ecc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006ed0:	e03a      	b.n	8006f48 <_printf_i+0xa8>
 8006ed2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006ed6:	2b15      	cmp	r3, #21
 8006ed8:	d8f6      	bhi.n	8006ec8 <_printf_i+0x28>
 8006eda:	a101      	add	r1, pc, #4	@ (adr r1, 8006ee0 <_printf_i+0x40>)
 8006edc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006ee0:	08006f39 	.word	0x08006f39
 8006ee4:	08006f4d 	.word	0x08006f4d
 8006ee8:	08006ec9 	.word	0x08006ec9
 8006eec:	08006ec9 	.word	0x08006ec9
 8006ef0:	08006ec9 	.word	0x08006ec9
 8006ef4:	08006ec9 	.word	0x08006ec9
 8006ef8:	08006f4d 	.word	0x08006f4d
 8006efc:	08006ec9 	.word	0x08006ec9
 8006f00:	08006ec9 	.word	0x08006ec9
 8006f04:	08006ec9 	.word	0x08006ec9
 8006f08:	08006ec9 	.word	0x08006ec9
 8006f0c:	0800704d 	.word	0x0800704d
 8006f10:	08006f77 	.word	0x08006f77
 8006f14:	08007007 	.word	0x08007007
 8006f18:	08006ec9 	.word	0x08006ec9
 8006f1c:	08006ec9 	.word	0x08006ec9
 8006f20:	0800706f 	.word	0x0800706f
 8006f24:	08006ec9 	.word	0x08006ec9
 8006f28:	08006f77 	.word	0x08006f77
 8006f2c:	08006ec9 	.word	0x08006ec9
 8006f30:	08006ec9 	.word	0x08006ec9
 8006f34:	0800700f 	.word	0x0800700f
 8006f38:	6833      	ldr	r3, [r6, #0]
 8006f3a:	1d1a      	adds	r2, r3, #4
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	6032      	str	r2, [r6, #0]
 8006f40:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006f44:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006f48:	2301      	movs	r3, #1
 8006f4a:	e09d      	b.n	8007088 <_printf_i+0x1e8>
 8006f4c:	6833      	ldr	r3, [r6, #0]
 8006f4e:	6820      	ldr	r0, [r4, #0]
 8006f50:	1d19      	adds	r1, r3, #4
 8006f52:	6031      	str	r1, [r6, #0]
 8006f54:	0606      	lsls	r6, r0, #24
 8006f56:	d501      	bpl.n	8006f5c <_printf_i+0xbc>
 8006f58:	681d      	ldr	r5, [r3, #0]
 8006f5a:	e003      	b.n	8006f64 <_printf_i+0xc4>
 8006f5c:	0645      	lsls	r5, r0, #25
 8006f5e:	d5fb      	bpl.n	8006f58 <_printf_i+0xb8>
 8006f60:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006f64:	2d00      	cmp	r5, #0
 8006f66:	da03      	bge.n	8006f70 <_printf_i+0xd0>
 8006f68:	232d      	movs	r3, #45	@ 0x2d
 8006f6a:	426d      	negs	r5, r5
 8006f6c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006f70:	4859      	ldr	r0, [pc, #356]	@ (80070d8 <_printf_i+0x238>)
 8006f72:	230a      	movs	r3, #10
 8006f74:	e011      	b.n	8006f9a <_printf_i+0xfa>
 8006f76:	6821      	ldr	r1, [r4, #0]
 8006f78:	6833      	ldr	r3, [r6, #0]
 8006f7a:	0608      	lsls	r0, r1, #24
 8006f7c:	f853 5b04 	ldr.w	r5, [r3], #4
 8006f80:	d402      	bmi.n	8006f88 <_printf_i+0xe8>
 8006f82:	0649      	lsls	r1, r1, #25
 8006f84:	bf48      	it	mi
 8006f86:	b2ad      	uxthmi	r5, r5
 8006f88:	2f6f      	cmp	r7, #111	@ 0x6f
 8006f8a:	4853      	ldr	r0, [pc, #332]	@ (80070d8 <_printf_i+0x238>)
 8006f8c:	6033      	str	r3, [r6, #0]
 8006f8e:	bf14      	ite	ne
 8006f90:	230a      	movne	r3, #10
 8006f92:	2308      	moveq	r3, #8
 8006f94:	2100      	movs	r1, #0
 8006f96:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006f9a:	6866      	ldr	r6, [r4, #4]
 8006f9c:	60a6      	str	r6, [r4, #8]
 8006f9e:	2e00      	cmp	r6, #0
 8006fa0:	bfa2      	ittt	ge
 8006fa2:	6821      	ldrge	r1, [r4, #0]
 8006fa4:	f021 0104 	bicge.w	r1, r1, #4
 8006fa8:	6021      	strge	r1, [r4, #0]
 8006faa:	b90d      	cbnz	r5, 8006fb0 <_printf_i+0x110>
 8006fac:	2e00      	cmp	r6, #0
 8006fae:	d04b      	beq.n	8007048 <_printf_i+0x1a8>
 8006fb0:	4616      	mov	r6, r2
 8006fb2:	fbb5 f1f3 	udiv	r1, r5, r3
 8006fb6:	fb03 5711 	mls	r7, r3, r1, r5
 8006fba:	5dc7      	ldrb	r7, [r0, r7]
 8006fbc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006fc0:	462f      	mov	r7, r5
 8006fc2:	42bb      	cmp	r3, r7
 8006fc4:	460d      	mov	r5, r1
 8006fc6:	d9f4      	bls.n	8006fb2 <_printf_i+0x112>
 8006fc8:	2b08      	cmp	r3, #8
 8006fca:	d10b      	bne.n	8006fe4 <_printf_i+0x144>
 8006fcc:	6823      	ldr	r3, [r4, #0]
 8006fce:	07df      	lsls	r7, r3, #31
 8006fd0:	d508      	bpl.n	8006fe4 <_printf_i+0x144>
 8006fd2:	6923      	ldr	r3, [r4, #16]
 8006fd4:	6861      	ldr	r1, [r4, #4]
 8006fd6:	4299      	cmp	r1, r3
 8006fd8:	bfde      	ittt	le
 8006fda:	2330      	movle	r3, #48	@ 0x30
 8006fdc:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006fe0:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8006fe4:	1b92      	subs	r2, r2, r6
 8006fe6:	6122      	str	r2, [r4, #16]
 8006fe8:	f8cd a000 	str.w	sl, [sp]
 8006fec:	464b      	mov	r3, r9
 8006fee:	aa03      	add	r2, sp, #12
 8006ff0:	4621      	mov	r1, r4
 8006ff2:	4640      	mov	r0, r8
 8006ff4:	f7ff fee6 	bl	8006dc4 <_printf_common>
 8006ff8:	3001      	adds	r0, #1
 8006ffa:	d14a      	bne.n	8007092 <_printf_i+0x1f2>
 8006ffc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007000:	b004      	add	sp, #16
 8007002:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007006:	6823      	ldr	r3, [r4, #0]
 8007008:	f043 0320 	orr.w	r3, r3, #32
 800700c:	6023      	str	r3, [r4, #0]
 800700e:	4833      	ldr	r0, [pc, #204]	@ (80070dc <_printf_i+0x23c>)
 8007010:	2778      	movs	r7, #120	@ 0x78
 8007012:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007016:	6823      	ldr	r3, [r4, #0]
 8007018:	6831      	ldr	r1, [r6, #0]
 800701a:	061f      	lsls	r7, r3, #24
 800701c:	f851 5b04 	ldr.w	r5, [r1], #4
 8007020:	d402      	bmi.n	8007028 <_printf_i+0x188>
 8007022:	065f      	lsls	r7, r3, #25
 8007024:	bf48      	it	mi
 8007026:	b2ad      	uxthmi	r5, r5
 8007028:	6031      	str	r1, [r6, #0]
 800702a:	07d9      	lsls	r1, r3, #31
 800702c:	bf44      	itt	mi
 800702e:	f043 0320 	orrmi.w	r3, r3, #32
 8007032:	6023      	strmi	r3, [r4, #0]
 8007034:	b11d      	cbz	r5, 800703e <_printf_i+0x19e>
 8007036:	2310      	movs	r3, #16
 8007038:	e7ac      	b.n	8006f94 <_printf_i+0xf4>
 800703a:	4827      	ldr	r0, [pc, #156]	@ (80070d8 <_printf_i+0x238>)
 800703c:	e7e9      	b.n	8007012 <_printf_i+0x172>
 800703e:	6823      	ldr	r3, [r4, #0]
 8007040:	f023 0320 	bic.w	r3, r3, #32
 8007044:	6023      	str	r3, [r4, #0]
 8007046:	e7f6      	b.n	8007036 <_printf_i+0x196>
 8007048:	4616      	mov	r6, r2
 800704a:	e7bd      	b.n	8006fc8 <_printf_i+0x128>
 800704c:	6833      	ldr	r3, [r6, #0]
 800704e:	6825      	ldr	r5, [r4, #0]
 8007050:	6961      	ldr	r1, [r4, #20]
 8007052:	1d18      	adds	r0, r3, #4
 8007054:	6030      	str	r0, [r6, #0]
 8007056:	062e      	lsls	r6, r5, #24
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	d501      	bpl.n	8007060 <_printf_i+0x1c0>
 800705c:	6019      	str	r1, [r3, #0]
 800705e:	e002      	b.n	8007066 <_printf_i+0x1c6>
 8007060:	0668      	lsls	r0, r5, #25
 8007062:	d5fb      	bpl.n	800705c <_printf_i+0x1bc>
 8007064:	8019      	strh	r1, [r3, #0]
 8007066:	2300      	movs	r3, #0
 8007068:	6123      	str	r3, [r4, #16]
 800706a:	4616      	mov	r6, r2
 800706c:	e7bc      	b.n	8006fe8 <_printf_i+0x148>
 800706e:	6833      	ldr	r3, [r6, #0]
 8007070:	1d1a      	adds	r2, r3, #4
 8007072:	6032      	str	r2, [r6, #0]
 8007074:	681e      	ldr	r6, [r3, #0]
 8007076:	6862      	ldr	r2, [r4, #4]
 8007078:	2100      	movs	r1, #0
 800707a:	4630      	mov	r0, r6
 800707c:	f7f9 f8c0 	bl	8000200 <memchr>
 8007080:	b108      	cbz	r0, 8007086 <_printf_i+0x1e6>
 8007082:	1b80      	subs	r0, r0, r6
 8007084:	6060      	str	r0, [r4, #4]
 8007086:	6863      	ldr	r3, [r4, #4]
 8007088:	6123      	str	r3, [r4, #16]
 800708a:	2300      	movs	r3, #0
 800708c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007090:	e7aa      	b.n	8006fe8 <_printf_i+0x148>
 8007092:	6923      	ldr	r3, [r4, #16]
 8007094:	4632      	mov	r2, r6
 8007096:	4649      	mov	r1, r9
 8007098:	4640      	mov	r0, r8
 800709a:	47d0      	blx	sl
 800709c:	3001      	adds	r0, #1
 800709e:	d0ad      	beq.n	8006ffc <_printf_i+0x15c>
 80070a0:	6823      	ldr	r3, [r4, #0]
 80070a2:	079b      	lsls	r3, r3, #30
 80070a4:	d413      	bmi.n	80070ce <_printf_i+0x22e>
 80070a6:	68e0      	ldr	r0, [r4, #12]
 80070a8:	9b03      	ldr	r3, [sp, #12]
 80070aa:	4298      	cmp	r0, r3
 80070ac:	bfb8      	it	lt
 80070ae:	4618      	movlt	r0, r3
 80070b0:	e7a6      	b.n	8007000 <_printf_i+0x160>
 80070b2:	2301      	movs	r3, #1
 80070b4:	4632      	mov	r2, r6
 80070b6:	4649      	mov	r1, r9
 80070b8:	4640      	mov	r0, r8
 80070ba:	47d0      	blx	sl
 80070bc:	3001      	adds	r0, #1
 80070be:	d09d      	beq.n	8006ffc <_printf_i+0x15c>
 80070c0:	3501      	adds	r5, #1
 80070c2:	68e3      	ldr	r3, [r4, #12]
 80070c4:	9903      	ldr	r1, [sp, #12]
 80070c6:	1a5b      	subs	r3, r3, r1
 80070c8:	42ab      	cmp	r3, r5
 80070ca:	dcf2      	bgt.n	80070b2 <_printf_i+0x212>
 80070cc:	e7eb      	b.n	80070a6 <_printf_i+0x206>
 80070ce:	2500      	movs	r5, #0
 80070d0:	f104 0619 	add.w	r6, r4, #25
 80070d4:	e7f5      	b.n	80070c2 <_printf_i+0x222>
 80070d6:	bf00      	nop
 80070d8:	0800bb59 	.word	0x0800bb59
 80070dc:	0800bb6a 	.word	0x0800bb6a

080070e0 <_scanf_float>:
 80070e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070e4:	b087      	sub	sp, #28
 80070e6:	4617      	mov	r7, r2
 80070e8:	9303      	str	r3, [sp, #12]
 80070ea:	688b      	ldr	r3, [r1, #8]
 80070ec:	1e5a      	subs	r2, r3, #1
 80070ee:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 80070f2:	bf81      	itttt	hi
 80070f4:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 80070f8:	eb03 0b05 	addhi.w	fp, r3, r5
 80070fc:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8007100:	608b      	strhi	r3, [r1, #8]
 8007102:	680b      	ldr	r3, [r1, #0]
 8007104:	460a      	mov	r2, r1
 8007106:	f04f 0500 	mov.w	r5, #0
 800710a:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800710e:	f842 3b1c 	str.w	r3, [r2], #28
 8007112:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8007116:	4680      	mov	r8, r0
 8007118:	460c      	mov	r4, r1
 800711a:	bf98      	it	ls
 800711c:	f04f 0b00 	movls.w	fp, #0
 8007120:	9201      	str	r2, [sp, #4]
 8007122:	4616      	mov	r6, r2
 8007124:	46aa      	mov	sl, r5
 8007126:	46a9      	mov	r9, r5
 8007128:	9502      	str	r5, [sp, #8]
 800712a:	68a2      	ldr	r2, [r4, #8]
 800712c:	b152      	cbz	r2, 8007144 <_scanf_float+0x64>
 800712e:	683b      	ldr	r3, [r7, #0]
 8007130:	781b      	ldrb	r3, [r3, #0]
 8007132:	2b4e      	cmp	r3, #78	@ 0x4e
 8007134:	d864      	bhi.n	8007200 <_scanf_float+0x120>
 8007136:	2b40      	cmp	r3, #64	@ 0x40
 8007138:	d83c      	bhi.n	80071b4 <_scanf_float+0xd4>
 800713a:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800713e:	b2c8      	uxtb	r0, r1
 8007140:	280e      	cmp	r0, #14
 8007142:	d93a      	bls.n	80071ba <_scanf_float+0xda>
 8007144:	f1b9 0f00 	cmp.w	r9, #0
 8007148:	d003      	beq.n	8007152 <_scanf_float+0x72>
 800714a:	6823      	ldr	r3, [r4, #0]
 800714c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007150:	6023      	str	r3, [r4, #0]
 8007152:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8007156:	f1ba 0f01 	cmp.w	sl, #1
 800715a:	f200 8117 	bhi.w	800738c <_scanf_float+0x2ac>
 800715e:	9b01      	ldr	r3, [sp, #4]
 8007160:	429e      	cmp	r6, r3
 8007162:	f200 8108 	bhi.w	8007376 <_scanf_float+0x296>
 8007166:	2001      	movs	r0, #1
 8007168:	b007      	add	sp, #28
 800716a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800716e:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8007172:	2a0d      	cmp	r2, #13
 8007174:	d8e6      	bhi.n	8007144 <_scanf_float+0x64>
 8007176:	a101      	add	r1, pc, #4	@ (adr r1, 800717c <_scanf_float+0x9c>)
 8007178:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800717c:	080072c3 	.word	0x080072c3
 8007180:	08007145 	.word	0x08007145
 8007184:	08007145 	.word	0x08007145
 8007188:	08007145 	.word	0x08007145
 800718c:	08007323 	.word	0x08007323
 8007190:	080072fb 	.word	0x080072fb
 8007194:	08007145 	.word	0x08007145
 8007198:	08007145 	.word	0x08007145
 800719c:	080072d1 	.word	0x080072d1
 80071a0:	08007145 	.word	0x08007145
 80071a4:	08007145 	.word	0x08007145
 80071a8:	08007145 	.word	0x08007145
 80071ac:	08007145 	.word	0x08007145
 80071b0:	08007289 	.word	0x08007289
 80071b4:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 80071b8:	e7db      	b.n	8007172 <_scanf_float+0x92>
 80071ba:	290e      	cmp	r1, #14
 80071bc:	d8c2      	bhi.n	8007144 <_scanf_float+0x64>
 80071be:	a001      	add	r0, pc, #4	@ (adr r0, 80071c4 <_scanf_float+0xe4>)
 80071c0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80071c4:	08007279 	.word	0x08007279
 80071c8:	08007145 	.word	0x08007145
 80071cc:	08007279 	.word	0x08007279
 80071d0:	0800730f 	.word	0x0800730f
 80071d4:	08007145 	.word	0x08007145
 80071d8:	08007221 	.word	0x08007221
 80071dc:	0800725f 	.word	0x0800725f
 80071e0:	0800725f 	.word	0x0800725f
 80071e4:	0800725f 	.word	0x0800725f
 80071e8:	0800725f 	.word	0x0800725f
 80071ec:	0800725f 	.word	0x0800725f
 80071f0:	0800725f 	.word	0x0800725f
 80071f4:	0800725f 	.word	0x0800725f
 80071f8:	0800725f 	.word	0x0800725f
 80071fc:	0800725f 	.word	0x0800725f
 8007200:	2b6e      	cmp	r3, #110	@ 0x6e
 8007202:	d809      	bhi.n	8007218 <_scanf_float+0x138>
 8007204:	2b60      	cmp	r3, #96	@ 0x60
 8007206:	d8b2      	bhi.n	800716e <_scanf_float+0x8e>
 8007208:	2b54      	cmp	r3, #84	@ 0x54
 800720a:	d07b      	beq.n	8007304 <_scanf_float+0x224>
 800720c:	2b59      	cmp	r3, #89	@ 0x59
 800720e:	d199      	bne.n	8007144 <_scanf_float+0x64>
 8007210:	2d07      	cmp	r5, #7
 8007212:	d197      	bne.n	8007144 <_scanf_float+0x64>
 8007214:	2508      	movs	r5, #8
 8007216:	e02c      	b.n	8007272 <_scanf_float+0x192>
 8007218:	2b74      	cmp	r3, #116	@ 0x74
 800721a:	d073      	beq.n	8007304 <_scanf_float+0x224>
 800721c:	2b79      	cmp	r3, #121	@ 0x79
 800721e:	e7f6      	b.n	800720e <_scanf_float+0x12e>
 8007220:	6821      	ldr	r1, [r4, #0]
 8007222:	05c8      	lsls	r0, r1, #23
 8007224:	d51b      	bpl.n	800725e <_scanf_float+0x17e>
 8007226:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800722a:	6021      	str	r1, [r4, #0]
 800722c:	f109 0901 	add.w	r9, r9, #1
 8007230:	f1bb 0f00 	cmp.w	fp, #0
 8007234:	d003      	beq.n	800723e <_scanf_float+0x15e>
 8007236:	3201      	adds	r2, #1
 8007238:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 800723c:	60a2      	str	r2, [r4, #8]
 800723e:	68a3      	ldr	r3, [r4, #8]
 8007240:	3b01      	subs	r3, #1
 8007242:	60a3      	str	r3, [r4, #8]
 8007244:	6923      	ldr	r3, [r4, #16]
 8007246:	3301      	adds	r3, #1
 8007248:	6123      	str	r3, [r4, #16]
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	3b01      	subs	r3, #1
 800724e:	2b00      	cmp	r3, #0
 8007250:	607b      	str	r3, [r7, #4]
 8007252:	f340 8087 	ble.w	8007364 <_scanf_float+0x284>
 8007256:	683b      	ldr	r3, [r7, #0]
 8007258:	3301      	adds	r3, #1
 800725a:	603b      	str	r3, [r7, #0]
 800725c:	e765      	b.n	800712a <_scanf_float+0x4a>
 800725e:	eb1a 0105 	adds.w	r1, sl, r5
 8007262:	f47f af6f 	bne.w	8007144 <_scanf_float+0x64>
 8007266:	6822      	ldr	r2, [r4, #0]
 8007268:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800726c:	6022      	str	r2, [r4, #0]
 800726e:	460d      	mov	r5, r1
 8007270:	468a      	mov	sl, r1
 8007272:	f806 3b01 	strb.w	r3, [r6], #1
 8007276:	e7e2      	b.n	800723e <_scanf_float+0x15e>
 8007278:	6822      	ldr	r2, [r4, #0]
 800727a:	0610      	lsls	r0, r2, #24
 800727c:	f57f af62 	bpl.w	8007144 <_scanf_float+0x64>
 8007280:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007284:	6022      	str	r2, [r4, #0]
 8007286:	e7f4      	b.n	8007272 <_scanf_float+0x192>
 8007288:	f1ba 0f00 	cmp.w	sl, #0
 800728c:	d10e      	bne.n	80072ac <_scanf_float+0x1cc>
 800728e:	f1b9 0f00 	cmp.w	r9, #0
 8007292:	d10e      	bne.n	80072b2 <_scanf_float+0x1d2>
 8007294:	6822      	ldr	r2, [r4, #0]
 8007296:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800729a:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800729e:	d108      	bne.n	80072b2 <_scanf_float+0x1d2>
 80072a0:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80072a4:	6022      	str	r2, [r4, #0]
 80072a6:	f04f 0a01 	mov.w	sl, #1
 80072aa:	e7e2      	b.n	8007272 <_scanf_float+0x192>
 80072ac:	f1ba 0f02 	cmp.w	sl, #2
 80072b0:	d055      	beq.n	800735e <_scanf_float+0x27e>
 80072b2:	2d01      	cmp	r5, #1
 80072b4:	d002      	beq.n	80072bc <_scanf_float+0x1dc>
 80072b6:	2d04      	cmp	r5, #4
 80072b8:	f47f af44 	bne.w	8007144 <_scanf_float+0x64>
 80072bc:	3501      	adds	r5, #1
 80072be:	b2ed      	uxtb	r5, r5
 80072c0:	e7d7      	b.n	8007272 <_scanf_float+0x192>
 80072c2:	f1ba 0f01 	cmp.w	sl, #1
 80072c6:	f47f af3d 	bne.w	8007144 <_scanf_float+0x64>
 80072ca:	f04f 0a02 	mov.w	sl, #2
 80072ce:	e7d0      	b.n	8007272 <_scanf_float+0x192>
 80072d0:	b97d      	cbnz	r5, 80072f2 <_scanf_float+0x212>
 80072d2:	f1b9 0f00 	cmp.w	r9, #0
 80072d6:	f47f af38 	bne.w	800714a <_scanf_float+0x6a>
 80072da:	6822      	ldr	r2, [r4, #0]
 80072dc:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80072e0:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80072e4:	f040 8108 	bne.w	80074f8 <_scanf_float+0x418>
 80072e8:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80072ec:	6022      	str	r2, [r4, #0]
 80072ee:	2501      	movs	r5, #1
 80072f0:	e7bf      	b.n	8007272 <_scanf_float+0x192>
 80072f2:	2d03      	cmp	r5, #3
 80072f4:	d0e2      	beq.n	80072bc <_scanf_float+0x1dc>
 80072f6:	2d05      	cmp	r5, #5
 80072f8:	e7de      	b.n	80072b8 <_scanf_float+0x1d8>
 80072fa:	2d02      	cmp	r5, #2
 80072fc:	f47f af22 	bne.w	8007144 <_scanf_float+0x64>
 8007300:	2503      	movs	r5, #3
 8007302:	e7b6      	b.n	8007272 <_scanf_float+0x192>
 8007304:	2d06      	cmp	r5, #6
 8007306:	f47f af1d 	bne.w	8007144 <_scanf_float+0x64>
 800730a:	2507      	movs	r5, #7
 800730c:	e7b1      	b.n	8007272 <_scanf_float+0x192>
 800730e:	6822      	ldr	r2, [r4, #0]
 8007310:	0591      	lsls	r1, r2, #22
 8007312:	f57f af17 	bpl.w	8007144 <_scanf_float+0x64>
 8007316:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800731a:	6022      	str	r2, [r4, #0]
 800731c:	f8cd 9008 	str.w	r9, [sp, #8]
 8007320:	e7a7      	b.n	8007272 <_scanf_float+0x192>
 8007322:	6822      	ldr	r2, [r4, #0]
 8007324:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8007328:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800732c:	d006      	beq.n	800733c <_scanf_float+0x25c>
 800732e:	0550      	lsls	r0, r2, #21
 8007330:	f57f af08 	bpl.w	8007144 <_scanf_float+0x64>
 8007334:	f1b9 0f00 	cmp.w	r9, #0
 8007338:	f000 80de 	beq.w	80074f8 <_scanf_float+0x418>
 800733c:	0591      	lsls	r1, r2, #22
 800733e:	bf58      	it	pl
 8007340:	9902      	ldrpl	r1, [sp, #8]
 8007342:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8007346:	bf58      	it	pl
 8007348:	eba9 0101 	subpl.w	r1, r9, r1
 800734c:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8007350:	bf58      	it	pl
 8007352:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8007356:	6022      	str	r2, [r4, #0]
 8007358:	f04f 0900 	mov.w	r9, #0
 800735c:	e789      	b.n	8007272 <_scanf_float+0x192>
 800735e:	f04f 0a03 	mov.w	sl, #3
 8007362:	e786      	b.n	8007272 <_scanf_float+0x192>
 8007364:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8007368:	4639      	mov	r1, r7
 800736a:	4640      	mov	r0, r8
 800736c:	4798      	blx	r3
 800736e:	2800      	cmp	r0, #0
 8007370:	f43f aedb 	beq.w	800712a <_scanf_float+0x4a>
 8007374:	e6e6      	b.n	8007144 <_scanf_float+0x64>
 8007376:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800737a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800737e:	463a      	mov	r2, r7
 8007380:	4640      	mov	r0, r8
 8007382:	4798      	blx	r3
 8007384:	6923      	ldr	r3, [r4, #16]
 8007386:	3b01      	subs	r3, #1
 8007388:	6123      	str	r3, [r4, #16]
 800738a:	e6e8      	b.n	800715e <_scanf_float+0x7e>
 800738c:	1e6b      	subs	r3, r5, #1
 800738e:	2b06      	cmp	r3, #6
 8007390:	d824      	bhi.n	80073dc <_scanf_float+0x2fc>
 8007392:	2d02      	cmp	r5, #2
 8007394:	d836      	bhi.n	8007404 <_scanf_float+0x324>
 8007396:	9b01      	ldr	r3, [sp, #4]
 8007398:	429e      	cmp	r6, r3
 800739a:	f67f aee4 	bls.w	8007166 <_scanf_float+0x86>
 800739e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80073a2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80073a6:	463a      	mov	r2, r7
 80073a8:	4640      	mov	r0, r8
 80073aa:	4798      	blx	r3
 80073ac:	6923      	ldr	r3, [r4, #16]
 80073ae:	3b01      	subs	r3, #1
 80073b0:	6123      	str	r3, [r4, #16]
 80073b2:	e7f0      	b.n	8007396 <_scanf_float+0x2b6>
 80073b4:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80073b8:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 80073bc:	463a      	mov	r2, r7
 80073be:	4640      	mov	r0, r8
 80073c0:	4798      	blx	r3
 80073c2:	6923      	ldr	r3, [r4, #16]
 80073c4:	3b01      	subs	r3, #1
 80073c6:	6123      	str	r3, [r4, #16]
 80073c8:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 80073cc:	fa5f fa8a 	uxtb.w	sl, sl
 80073d0:	f1ba 0f02 	cmp.w	sl, #2
 80073d4:	d1ee      	bne.n	80073b4 <_scanf_float+0x2d4>
 80073d6:	3d03      	subs	r5, #3
 80073d8:	b2ed      	uxtb	r5, r5
 80073da:	1b76      	subs	r6, r6, r5
 80073dc:	6823      	ldr	r3, [r4, #0]
 80073de:	05da      	lsls	r2, r3, #23
 80073e0:	d530      	bpl.n	8007444 <_scanf_float+0x364>
 80073e2:	055b      	lsls	r3, r3, #21
 80073e4:	d511      	bpl.n	800740a <_scanf_float+0x32a>
 80073e6:	9b01      	ldr	r3, [sp, #4]
 80073e8:	429e      	cmp	r6, r3
 80073ea:	f67f aebc 	bls.w	8007166 <_scanf_float+0x86>
 80073ee:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80073f2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80073f6:	463a      	mov	r2, r7
 80073f8:	4640      	mov	r0, r8
 80073fa:	4798      	blx	r3
 80073fc:	6923      	ldr	r3, [r4, #16]
 80073fe:	3b01      	subs	r3, #1
 8007400:	6123      	str	r3, [r4, #16]
 8007402:	e7f0      	b.n	80073e6 <_scanf_float+0x306>
 8007404:	46aa      	mov	sl, r5
 8007406:	46b3      	mov	fp, r6
 8007408:	e7de      	b.n	80073c8 <_scanf_float+0x2e8>
 800740a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800740e:	6923      	ldr	r3, [r4, #16]
 8007410:	2965      	cmp	r1, #101	@ 0x65
 8007412:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8007416:	f106 35ff 	add.w	r5, r6, #4294967295	@ 0xffffffff
 800741a:	6123      	str	r3, [r4, #16]
 800741c:	d00c      	beq.n	8007438 <_scanf_float+0x358>
 800741e:	2945      	cmp	r1, #69	@ 0x45
 8007420:	d00a      	beq.n	8007438 <_scanf_float+0x358>
 8007422:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007426:	463a      	mov	r2, r7
 8007428:	4640      	mov	r0, r8
 800742a:	4798      	blx	r3
 800742c:	6923      	ldr	r3, [r4, #16]
 800742e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8007432:	3b01      	subs	r3, #1
 8007434:	1eb5      	subs	r5, r6, #2
 8007436:	6123      	str	r3, [r4, #16]
 8007438:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800743c:	463a      	mov	r2, r7
 800743e:	4640      	mov	r0, r8
 8007440:	4798      	blx	r3
 8007442:	462e      	mov	r6, r5
 8007444:	6822      	ldr	r2, [r4, #0]
 8007446:	f012 0210 	ands.w	r2, r2, #16
 800744a:	d001      	beq.n	8007450 <_scanf_float+0x370>
 800744c:	2000      	movs	r0, #0
 800744e:	e68b      	b.n	8007168 <_scanf_float+0x88>
 8007450:	7032      	strb	r2, [r6, #0]
 8007452:	6823      	ldr	r3, [r4, #0]
 8007454:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8007458:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800745c:	d11c      	bne.n	8007498 <_scanf_float+0x3b8>
 800745e:	9b02      	ldr	r3, [sp, #8]
 8007460:	454b      	cmp	r3, r9
 8007462:	eba3 0209 	sub.w	r2, r3, r9
 8007466:	d123      	bne.n	80074b0 <_scanf_float+0x3d0>
 8007468:	9901      	ldr	r1, [sp, #4]
 800746a:	2200      	movs	r2, #0
 800746c:	4640      	mov	r0, r8
 800746e:	f002 fd93 	bl	8009f98 <_strtod_r>
 8007472:	9b03      	ldr	r3, [sp, #12]
 8007474:	6821      	ldr	r1, [r4, #0]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	f011 0f02 	tst.w	r1, #2
 800747c:	ec57 6b10 	vmov	r6, r7, d0
 8007480:	f103 0204 	add.w	r2, r3, #4
 8007484:	d01f      	beq.n	80074c6 <_scanf_float+0x3e6>
 8007486:	9903      	ldr	r1, [sp, #12]
 8007488:	600a      	str	r2, [r1, #0]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	e9c3 6700 	strd	r6, r7, [r3]
 8007490:	68e3      	ldr	r3, [r4, #12]
 8007492:	3301      	adds	r3, #1
 8007494:	60e3      	str	r3, [r4, #12]
 8007496:	e7d9      	b.n	800744c <_scanf_float+0x36c>
 8007498:	9b04      	ldr	r3, [sp, #16]
 800749a:	2b00      	cmp	r3, #0
 800749c:	d0e4      	beq.n	8007468 <_scanf_float+0x388>
 800749e:	9905      	ldr	r1, [sp, #20]
 80074a0:	230a      	movs	r3, #10
 80074a2:	3101      	adds	r1, #1
 80074a4:	4640      	mov	r0, r8
 80074a6:	f002 fdf7 	bl	800a098 <_strtol_r>
 80074aa:	9b04      	ldr	r3, [sp, #16]
 80074ac:	9e05      	ldr	r6, [sp, #20]
 80074ae:	1ac2      	subs	r2, r0, r3
 80074b0:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 80074b4:	429e      	cmp	r6, r3
 80074b6:	bf28      	it	cs
 80074b8:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 80074bc:	4910      	ldr	r1, [pc, #64]	@ (8007500 <_scanf_float+0x420>)
 80074be:	4630      	mov	r0, r6
 80074c0:	f000 f988 	bl	80077d4 <siprintf>
 80074c4:	e7d0      	b.n	8007468 <_scanf_float+0x388>
 80074c6:	f011 0f04 	tst.w	r1, #4
 80074ca:	9903      	ldr	r1, [sp, #12]
 80074cc:	600a      	str	r2, [r1, #0]
 80074ce:	d1dc      	bne.n	800748a <_scanf_float+0x3aa>
 80074d0:	681d      	ldr	r5, [r3, #0]
 80074d2:	4632      	mov	r2, r6
 80074d4:	463b      	mov	r3, r7
 80074d6:	4630      	mov	r0, r6
 80074d8:	4639      	mov	r1, r7
 80074da:	f7f9 fb3f 	bl	8000b5c <__aeabi_dcmpun>
 80074de:	b128      	cbz	r0, 80074ec <_scanf_float+0x40c>
 80074e0:	4808      	ldr	r0, [pc, #32]	@ (8007504 <_scanf_float+0x424>)
 80074e2:	f000 fb51 	bl	8007b88 <nanf>
 80074e6:	ed85 0a00 	vstr	s0, [r5]
 80074ea:	e7d1      	b.n	8007490 <_scanf_float+0x3b0>
 80074ec:	4630      	mov	r0, r6
 80074ee:	4639      	mov	r1, r7
 80074f0:	f7f9 fb92 	bl	8000c18 <__aeabi_d2f>
 80074f4:	6028      	str	r0, [r5, #0]
 80074f6:	e7cb      	b.n	8007490 <_scanf_float+0x3b0>
 80074f8:	f04f 0900 	mov.w	r9, #0
 80074fc:	e629      	b.n	8007152 <_scanf_float+0x72>
 80074fe:	bf00      	nop
 8007500:	0800bb7b 	.word	0x0800bb7b
 8007504:	0800be2f 	.word	0x0800be2f

08007508 <std>:
 8007508:	2300      	movs	r3, #0
 800750a:	b510      	push	{r4, lr}
 800750c:	4604      	mov	r4, r0
 800750e:	e9c0 3300 	strd	r3, r3, [r0]
 8007512:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007516:	6083      	str	r3, [r0, #8]
 8007518:	8181      	strh	r1, [r0, #12]
 800751a:	6643      	str	r3, [r0, #100]	@ 0x64
 800751c:	81c2      	strh	r2, [r0, #14]
 800751e:	6183      	str	r3, [r0, #24]
 8007520:	4619      	mov	r1, r3
 8007522:	2208      	movs	r2, #8
 8007524:	305c      	adds	r0, #92	@ 0x5c
 8007526:	f000 fa79 	bl	8007a1c <memset>
 800752a:	4b0d      	ldr	r3, [pc, #52]	@ (8007560 <std+0x58>)
 800752c:	6263      	str	r3, [r4, #36]	@ 0x24
 800752e:	4b0d      	ldr	r3, [pc, #52]	@ (8007564 <std+0x5c>)
 8007530:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007532:	4b0d      	ldr	r3, [pc, #52]	@ (8007568 <std+0x60>)
 8007534:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007536:	4b0d      	ldr	r3, [pc, #52]	@ (800756c <std+0x64>)
 8007538:	6323      	str	r3, [r4, #48]	@ 0x30
 800753a:	4b0d      	ldr	r3, [pc, #52]	@ (8007570 <std+0x68>)
 800753c:	6224      	str	r4, [r4, #32]
 800753e:	429c      	cmp	r4, r3
 8007540:	d006      	beq.n	8007550 <std+0x48>
 8007542:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007546:	4294      	cmp	r4, r2
 8007548:	d002      	beq.n	8007550 <std+0x48>
 800754a:	33d0      	adds	r3, #208	@ 0xd0
 800754c:	429c      	cmp	r4, r3
 800754e:	d105      	bne.n	800755c <std+0x54>
 8007550:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007554:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007558:	f000 bb12 	b.w	8007b80 <__retarget_lock_init_recursive>
 800755c:	bd10      	pop	{r4, pc}
 800755e:	bf00      	nop
 8007560:	08007869 	.word	0x08007869
 8007564:	0800788f 	.word	0x0800788f
 8007568:	080078c7 	.word	0x080078c7
 800756c:	080078eb 	.word	0x080078eb
 8007570:	20005448 	.word	0x20005448

08007574 <stdio_exit_handler>:
 8007574:	4a02      	ldr	r2, [pc, #8]	@ (8007580 <stdio_exit_handler+0xc>)
 8007576:	4903      	ldr	r1, [pc, #12]	@ (8007584 <stdio_exit_handler+0x10>)
 8007578:	4803      	ldr	r0, [pc, #12]	@ (8007588 <stdio_exit_handler+0x14>)
 800757a:	f000 b869 	b.w	8007650 <_fwalk_sglue>
 800757e:	bf00      	nop
 8007580:	2000000c 	.word	0x2000000c
 8007584:	0800ad0d 	.word	0x0800ad0d
 8007588:	2000001c 	.word	0x2000001c

0800758c <cleanup_stdio>:
 800758c:	6841      	ldr	r1, [r0, #4]
 800758e:	4b0c      	ldr	r3, [pc, #48]	@ (80075c0 <cleanup_stdio+0x34>)
 8007590:	4299      	cmp	r1, r3
 8007592:	b510      	push	{r4, lr}
 8007594:	4604      	mov	r4, r0
 8007596:	d001      	beq.n	800759c <cleanup_stdio+0x10>
 8007598:	f003 fbb8 	bl	800ad0c <_fflush_r>
 800759c:	68a1      	ldr	r1, [r4, #8]
 800759e:	4b09      	ldr	r3, [pc, #36]	@ (80075c4 <cleanup_stdio+0x38>)
 80075a0:	4299      	cmp	r1, r3
 80075a2:	d002      	beq.n	80075aa <cleanup_stdio+0x1e>
 80075a4:	4620      	mov	r0, r4
 80075a6:	f003 fbb1 	bl	800ad0c <_fflush_r>
 80075aa:	68e1      	ldr	r1, [r4, #12]
 80075ac:	4b06      	ldr	r3, [pc, #24]	@ (80075c8 <cleanup_stdio+0x3c>)
 80075ae:	4299      	cmp	r1, r3
 80075b0:	d004      	beq.n	80075bc <cleanup_stdio+0x30>
 80075b2:	4620      	mov	r0, r4
 80075b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80075b8:	f003 bba8 	b.w	800ad0c <_fflush_r>
 80075bc:	bd10      	pop	{r4, pc}
 80075be:	bf00      	nop
 80075c0:	20005448 	.word	0x20005448
 80075c4:	200054b0 	.word	0x200054b0
 80075c8:	20005518 	.word	0x20005518

080075cc <global_stdio_init.part.0>:
 80075cc:	b510      	push	{r4, lr}
 80075ce:	4b0b      	ldr	r3, [pc, #44]	@ (80075fc <global_stdio_init.part.0+0x30>)
 80075d0:	4c0b      	ldr	r4, [pc, #44]	@ (8007600 <global_stdio_init.part.0+0x34>)
 80075d2:	4a0c      	ldr	r2, [pc, #48]	@ (8007604 <global_stdio_init.part.0+0x38>)
 80075d4:	601a      	str	r2, [r3, #0]
 80075d6:	4620      	mov	r0, r4
 80075d8:	2200      	movs	r2, #0
 80075da:	2104      	movs	r1, #4
 80075dc:	f7ff ff94 	bl	8007508 <std>
 80075e0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80075e4:	2201      	movs	r2, #1
 80075e6:	2109      	movs	r1, #9
 80075e8:	f7ff ff8e 	bl	8007508 <std>
 80075ec:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80075f0:	2202      	movs	r2, #2
 80075f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80075f6:	2112      	movs	r1, #18
 80075f8:	f7ff bf86 	b.w	8007508 <std>
 80075fc:	20005580 	.word	0x20005580
 8007600:	20005448 	.word	0x20005448
 8007604:	08007575 	.word	0x08007575

08007608 <__sfp_lock_acquire>:
 8007608:	4801      	ldr	r0, [pc, #4]	@ (8007610 <__sfp_lock_acquire+0x8>)
 800760a:	f000 baba 	b.w	8007b82 <__retarget_lock_acquire_recursive>
 800760e:	bf00      	nop
 8007610:	20005589 	.word	0x20005589

08007614 <__sfp_lock_release>:
 8007614:	4801      	ldr	r0, [pc, #4]	@ (800761c <__sfp_lock_release+0x8>)
 8007616:	f000 bab5 	b.w	8007b84 <__retarget_lock_release_recursive>
 800761a:	bf00      	nop
 800761c:	20005589 	.word	0x20005589

08007620 <__sinit>:
 8007620:	b510      	push	{r4, lr}
 8007622:	4604      	mov	r4, r0
 8007624:	f7ff fff0 	bl	8007608 <__sfp_lock_acquire>
 8007628:	6a23      	ldr	r3, [r4, #32]
 800762a:	b11b      	cbz	r3, 8007634 <__sinit+0x14>
 800762c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007630:	f7ff bff0 	b.w	8007614 <__sfp_lock_release>
 8007634:	4b04      	ldr	r3, [pc, #16]	@ (8007648 <__sinit+0x28>)
 8007636:	6223      	str	r3, [r4, #32]
 8007638:	4b04      	ldr	r3, [pc, #16]	@ (800764c <__sinit+0x2c>)
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	2b00      	cmp	r3, #0
 800763e:	d1f5      	bne.n	800762c <__sinit+0xc>
 8007640:	f7ff ffc4 	bl	80075cc <global_stdio_init.part.0>
 8007644:	e7f2      	b.n	800762c <__sinit+0xc>
 8007646:	bf00      	nop
 8007648:	0800758d 	.word	0x0800758d
 800764c:	20005580 	.word	0x20005580

08007650 <_fwalk_sglue>:
 8007650:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007654:	4607      	mov	r7, r0
 8007656:	4688      	mov	r8, r1
 8007658:	4614      	mov	r4, r2
 800765a:	2600      	movs	r6, #0
 800765c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007660:	f1b9 0901 	subs.w	r9, r9, #1
 8007664:	d505      	bpl.n	8007672 <_fwalk_sglue+0x22>
 8007666:	6824      	ldr	r4, [r4, #0]
 8007668:	2c00      	cmp	r4, #0
 800766a:	d1f7      	bne.n	800765c <_fwalk_sglue+0xc>
 800766c:	4630      	mov	r0, r6
 800766e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007672:	89ab      	ldrh	r3, [r5, #12]
 8007674:	2b01      	cmp	r3, #1
 8007676:	d907      	bls.n	8007688 <_fwalk_sglue+0x38>
 8007678:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800767c:	3301      	adds	r3, #1
 800767e:	d003      	beq.n	8007688 <_fwalk_sglue+0x38>
 8007680:	4629      	mov	r1, r5
 8007682:	4638      	mov	r0, r7
 8007684:	47c0      	blx	r8
 8007686:	4306      	orrs	r6, r0
 8007688:	3568      	adds	r5, #104	@ 0x68
 800768a:	e7e9      	b.n	8007660 <_fwalk_sglue+0x10>

0800768c <iprintf>:
 800768c:	b40f      	push	{r0, r1, r2, r3}
 800768e:	b507      	push	{r0, r1, r2, lr}
 8007690:	4906      	ldr	r1, [pc, #24]	@ (80076ac <iprintf+0x20>)
 8007692:	ab04      	add	r3, sp, #16
 8007694:	6808      	ldr	r0, [r1, #0]
 8007696:	f853 2b04 	ldr.w	r2, [r3], #4
 800769a:	6881      	ldr	r1, [r0, #8]
 800769c:	9301      	str	r3, [sp, #4]
 800769e:	f003 f84b 	bl	800a738 <_vfiprintf_r>
 80076a2:	b003      	add	sp, #12
 80076a4:	f85d eb04 	ldr.w	lr, [sp], #4
 80076a8:	b004      	add	sp, #16
 80076aa:	4770      	bx	lr
 80076ac:	20000018 	.word	0x20000018

080076b0 <_puts_r>:
 80076b0:	6a03      	ldr	r3, [r0, #32]
 80076b2:	b570      	push	{r4, r5, r6, lr}
 80076b4:	6884      	ldr	r4, [r0, #8]
 80076b6:	4605      	mov	r5, r0
 80076b8:	460e      	mov	r6, r1
 80076ba:	b90b      	cbnz	r3, 80076c0 <_puts_r+0x10>
 80076bc:	f7ff ffb0 	bl	8007620 <__sinit>
 80076c0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80076c2:	07db      	lsls	r3, r3, #31
 80076c4:	d405      	bmi.n	80076d2 <_puts_r+0x22>
 80076c6:	89a3      	ldrh	r3, [r4, #12]
 80076c8:	0598      	lsls	r0, r3, #22
 80076ca:	d402      	bmi.n	80076d2 <_puts_r+0x22>
 80076cc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80076ce:	f000 fa58 	bl	8007b82 <__retarget_lock_acquire_recursive>
 80076d2:	89a3      	ldrh	r3, [r4, #12]
 80076d4:	0719      	lsls	r1, r3, #28
 80076d6:	d502      	bpl.n	80076de <_puts_r+0x2e>
 80076d8:	6923      	ldr	r3, [r4, #16]
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d135      	bne.n	800774a <_puts_r+0x9a>
 80076de:	4621      	mov	r1, r4
 80076e0:	4628      	mov	r0, r5
 80076e2:	f000 f945 	bl	8007970 <__swsetup_r>
 80076e6:	b380      	cbz	r0, 800774a <_puts_r+0x9a>
 80076e8:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 80076ec:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80076ee:	07da      	lsls	r2, r3, #31
 80076f0:	d405      	bmi.n	80076fe <_puts_r+0x4e>
 80076f2:	89a3      	ldrh	r3, [r4, #12]
 80076f4:	059b      	lsls	r3, r3, #22
 80076f6:	d402      	bmi.n	80076fe <_puts_r+0x4e>
 80076f8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80076fa:	f000 fa43 	bl	8007b84 <__retarget_lock_release_recursive>
 80076fe:	4628      	mov	r0, r5
 8007700:	bd70      	pop	{r4, r5, r6, pc}
 8007702:	2b00      	cmp	r3, #0
 8007704:	da04      	bge.n	8007710 <_puts_r+0x60>
 8007706:	69a2      	ldr	r2, [r4, #24]
 8007708:	429a      	cmp	r2, r3
 800770a:	dc17      	bgt.n	800773c <_puts_r+0x8c>
 800770c:	290a      	cmp	r1, #10
 800770e:	d015      	beq.n	800773c <_puts_r+0x8c>
 8007710:	6823      	ldr	r3, [r4, #0]
 8007712:	1c5a      	adds	r2, r3, #1
 8007714:	6022      	str	r2, [r4, #0]
 8007716:	7019      	strb	r1, [r3, #0]
 8007718:	68a3      	ldr	r3, [r4, #8]
 800771a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800771e:	3b01      	subs	r3, #1
 8007720:	60a3      	str	r3, [r4, #8]
 8007722:	2900      	cmp	r1, #0
 8007724:	d1ed      	bne.n	8007702 <_puts_r+0x52>
 8007726:	2b00      	cmp	r3, #0
 8007728:	da11      	bge.n	800774e <_puts_r+0x9e>
 800772a:	4622      	mov	r2, r4
 800772c:	210a      	movs	r1, #10
 800772e:	4628      	mov	r0, r5
 8007730:	f000 f8df 	bl	80078f2 <__swbuf_r>
 8007734:	3001      	adds	r0, #1
 8007736:	d0d7      	beq.n	80076e8 <_puts_r+0x38>
 8007738:	250a      	movs	r5, #10
 800773a:	e7d7      	b.n	80076ec <_puts_r+0x3c>
 800773c:	4622      	mov	r2, r4
 800773e:	4628      	mov	r0, r5
 8007740:	f000 f8d7 	bl	80078f2 <__swbuf_r>
 8007744:	3001      	adds	r0, #1
 8007746:	d1e7      	bne.n	8007718 <_puts_r+0x68>
 8007748:	e7ce      	b.n	80076e8 <_puts_r+0x38>
 800774a:	3e01      	subs	r6, #1
 800774c:	e7e4      	b.n	8007718 <_puts_r+0x68>
 800774e:	6823      	ldr	r3, [r4, #0]
 8007750:	1c5a      	adds	r2, r3, #1
 8007752:	6022      	str	r2, [r4, #0]
 8007754:	220a      	movs	r2, #10
 8007756:	701a      	strb	r2, [r3, #0]
 8007758:	e7ee      	b.n	8007738 <_puts_r+0x88>
	...

0800775c <puts>:
 800775c:	4b02      	ldr	r3, [pc, #8]	@ (8007768 <puts+0xc>)
 800775e:	4601      	mov	r1, r0
 8007760:	6818      	ldr	r0, [r3, #0]
 8007762:	f7ff bfa5 	b.w	80076b0 <_puts_r>
 8007766:	bf00      	nop
 8007768:	20000018 	.word	0x20000018

0800776c <sniprintf>:
 800776c:	b40c      	push	{r2, r3}
 800776e:	b530      	push	{r4, r5, lr}
 8007770:	4b17      	ldr	r3, [pc, #92]	@ (80077d0 <sniprintf+0x64>)
 8007772:	1e0c      	subs	r4, r1, #0
 8007774:	681d      	ldr	r5, [r3, #0]
 8007776:	b09d      	sub	sp, #116	@ 0x74
 8007778:	da08      	bge.n	800778c <sniprintf+0x20>
 800777a:	238b      	movs	r3, #139	@ 0x8b
 800777c:	602b      	str	r3, [r5, #0]
 800777e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007782:	b01d      	add	sp, #116	@ 0x74
 8007784:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007788:	b002      	add	sp, #8
 800778a:	4770      	bx	lr
 800778c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8007790:	f8ad 3014 	strh.w	r3, [sp, #20]
 8007794:	bf14      	ite	ne
 8007796:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 800779a:	4623      	moveq	r3, r4
 800779c:	9304      	str	r3, [sp, #16]
 800779e:	9307      	str	r3, [sp, #28]
 80077a0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80077a4:	9002      	str	r0, [sp, #8]
 80077a6:	9006      	str	r0, [sp, #24]
 80077a8:	f8ad 3016 	strh.w	r3, [sp, #22]
 80077ac:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80077ae:	ab21      	add	r3, sp, #132	@ 0x84
 80077b0:	a902      	add	r1, sp, #8
 80077b2:	4628      	mov	r0, r5
 80077b4:	9301      	str	r3, [sp, #4]
 80077b6:	f002 fccd 	bl	800a154 <_svfiprintf_r>
 80077ba:	1c43      	adds	r3, r0, #1
 80077bc:	bfbc      	itt	lt
 80077be:	238b      	movlt	r3, #139	@ 0x8b
 80077c0:	602b      	strlt	r3, [r5, #0]
 80077c2:	2c00      	cmp	r4, #0
 80077c4:	d0dd      	beq.n	8007782 <sniprintf+0x16>
 80077c6:	9b02      	ldr	r3, [sp, #8]
 80077c8:	2200      	movs	r2, #0
 80077ca:	701a      	strb	r2, [r3, #0]
 80077cc:	e7d9      	b.n	8007782 <sniprintf+0x16>
 80077ce:	bf00      	nop
 80077d0:	20000018 	.word	0x20000018

080077d4 <siprintf>:
 80077d4:	b40e      	push	{r1, r2, r3}
 80077d6:	b500      	push	{lr}
 80077d8:	b09c      	sub	sp, #112	@ 0x70
 80077da:	ab1d      	add	r3, sp, #116	@ 0x74
 80077dc:	9002      	str	r0, [sp, #8]
 80077de:	9006      	str	r0, [sp, #24]
 80077e0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80077e4:	4809      	ldr	r0, [pc, #36]	@ (800780c <siprintf+0x38>)
 80077e6:	9107      	str	r1, [sp, #28]
 80077e8:	9104      	str	r1, [sp, #16]
 80077ea:	4909      	ldr	r1, [pc, #36]	@ (8007810 <siprintf+0x3c>)
 80077ec:	f853 2b04 	ldr.w	r2, [r3], #4
 80077f0:	9105      	str	r1, [sp, #20]
 80077f2:	6800      	ldr	r0, [r0, #0]
 80077f4:	9301      	str	r3, [sp, #4]
 80077f6:	a902      	add	r1, sp, #8
 80077f8:	f002 fcac 	bl	800a154 <_svfiprintf_r>
 80077fc:	9b02      	ldr	r3, [sp, #8]
 80077fe:	2200      	movs	r2, #0
 8007800:	701a      	strb	r2, [r3, #0]
 8007802:	b01c      	add	sp, #112	@ 0x70
 8007804:	f85d eb04 	ldr.w	lr, [sp], #4
 8007808:	b003      	add	sp, #12
 800780a:	4770      	bx	lr
 800780c:	20000018 	.word	0x20000018
 8007810:	ffff0208 	.word	0xffff0208

08007814 <siscanf>:
 8007814:	b40e      	push	{r1, r2, r3}
 8007816:	b530      	push	{r4, r5, lr}
 8007818:	b09c      	sub	sp, #112	@ 0x70
 800781a:	ac1f      	add	r4, sp, #124	@ 0x7c
 800781c:	f44f 7201 	mov.w	r2, #516	@ 0x204
 8007820:	f854 5b04 	ldr.w	r5, [r4], #4
 8007824:	f8ad 2014 	strh.w	r2, [sp, #20]
 8007828:	9002      	str	r0, [sp, #8]
 800782a:	9006      	str	r0, [sp, #24]
 800782c:	f7f8 fd38 	bl	80002a0 <strlen>
 8007830:	4b0b      	ldr	r3, [pc, #44]	@ (8007860 <siscanf+0x4c>)
 8007832:	9003      	str	r0, [sp, #12]
 8007834:	9007      	str	r0, [sp, #28]
 8007836:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007838:	480a      	ldr	r0, [pc, #40]	@ (8007864 <siscanf+0x50>)
 800783a:	9401      	str	r4, [sp, #4]
 800783c:	2300      	movs	r3, #0
 800783e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007840:	9314      	str	r3, [sp, #80]	@ 0x50
 8007842:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8007846:	f8ad 3016 	strh.w	r3, [sp, #22]
 800784a:	462a      	mov	r2, r5
 800784c:	4623      	mov	r3, r4
 800784e:	a902      	add	r1, sp, #8
 8007850:	6800      	ldr	r0, [r0, #0]
 8007852:	f002 fdd3 	bl	800a3fc <__ssvfiscanf_r>
 8007856:	b01c      	add	sp, #112	@ 0x70
 8007858:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800785c:	b003      	add	sp, #12
 800785e:	4770      	bx	lr
 8007860:	0800788b 	.word	0x0800788b
 8007864:	20000018 	.word	0x20000018

08007868 <__sread>:
 8007868:	b510      	push	{r4, lr}
 800786a:	460c      	mov	r4, r1
 800786c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007870:	f000 f938 	bl	8007ae4 <_read_r>
 8007874:	2800      	cmp	r0, #0
 8007876:	bfab      	itete	ge
 8007878:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800787a:	89a3      	ldrhlt	r3, [r4, #12]
 800787c:	181b      	addge	r3, r3, r0
 800787e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007882:	bfac      	ite	ge
 8007884:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007886:	81a3      	strhlt	r3, [r4, #12]
 8007888:	bd10      	pop	{r4, pc}

0800788a <__seofread>:
 800788a:	2000      	movs	r0, #0
 800788c:	4770      	bx	lr

0800788e <__swrite>:
 800788e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007892:	461f      	mov	r7, r3
 8007894:	898b      	ldrh	r3, [r1, #12]
 8007896:	05db      	lsls	r3, r3, #23
 8007898:	4605      	mov	r5, r0
 800789a:	460c      	mov	r4, r1
 800789c:	4616      	mov	r6, r2
 800789e:	d505      	bpl.n	80078ac <__swrite+0x1e>
 80078a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80078a4:	2302      	movs	r3, #2
 80078a6:	2200      	movs	r2, #0
 80078a8:	f000 f90a 	bl	8007ac0 <_lseek_r>
 80078ac:	89a3      	ldrh	r3, [r4, #12]
 80078ae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80078b2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80078b6:	81a3      	strh	r3, [r4, #12]
 80078b8:	4632      	mov	r2, r6
 80078ba:	463b      	mov	r3, r7
 80078bc:	4628      	mov	r0, r5
 80078be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80078c2:	f000 b921 	b.w	8007b08 <_write_r>

080078c6 <__sseek>:
 80078c6:	b510      	push	{r4, lr}
 80078c8:	460c      	mov	r4, r1
 80078ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80078ce:	f000 f8f7 	bl	8007ac0 <_lseek_r>
 80078d2:	1c43      	adds	r3, r0, #1
 80078d4:	89a3      	ldrh	r3, [r4, #12]
 80078d6:	bf15      	itete	ne
 80078d8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80078da:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80078de:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80078e2:	81a3      	strheq	r3, [r4, #12]
 80078e4:	bf18      	it	ne
 80078e6:	81a3      	strhne	r3, [r4, #12]
 80078e8:	bd10      	pop	{r4, pc}

080078ea <__sclose>:
 80078ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80078ee:	f000 b8d7 	b.w	8007aa0 <_close_r>

080078f2 <__swbuf_r>:
 80078f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078f4:	460e      	mov	r6, r1
 80078f6:	4614      	mov	r4, r2
 80078f8:	4605      	mov	r5, r0
 80078fa:	b118      	cbz	r0, 8007904 <__swbuf_r+0x12>
 80078fc:	6a03      	ldr	r3, [r0, #32]
 80078fe:	b90b      	cbnz	r3, 8007904 <__swbuf_r+0x12>
 8007900:	f7ff fe8e 	bl	8007620 <__sinit>
 8007904:	69a3      	ldr	r3, [r4, #24]
 8007906:	60a3      	str	r3, [r4, #8]
 8007908:	89a3      	ldrh	r3, [r4, #12]
 800790a:	071a      	lsls	r2, r3, #28
 800790c:	d501      	bpl.n	8007912 <__swbuf_r+0x20>
 800790e:	6923      	ldr	r3, [r4, #16]
 8007910:	b943      	cbnz	r3, 8007924 <__swbuf_r+0x32>
 8007912:	4621      	mov	r1, r4
 8007914:	4628      	mov	r0, r5
 8007916:	f000 f82b 	bl	8007970 <__swsetup_r>
 800791a:	b118      	cbz	r0, 8007924 <__swbuf_r+0x32>
 800791c:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8007920:	4638      	mov	r0, r7
 8007922:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007924:	6823      	ldr	r3, [r4, #0]
 8007926:	6922      	ldr	r2, [r4, #16]
 8007928:	1a98      	subs	r0, r3, r2
 800792a:	6963      	ldr	r3, [r4, #20]
 800792c:	b2f6      	uxtb	r6, r6
 800792e:	4283      	cmp	r3, r0
 8007930:	4637      	mov	r7, r6
 8007932:	dc05      	bgt.n	8007940 <__swbuf_r+0x4e>
 8007934:	4621      	mov	r1, r4
 8007936:	4628      	mov	r0, r5
 8007938:	f003 f9e8 	bl	800ad0c <_fflush_r>
 800793c:	2800      	cmp	r0, #0
 800793e:	d1ed      	bne.n	800791c <__swbuf_r+0x2a>
 8007940:	68a3      	ldr	r3, [r4, #8]
 8007942:	3b01      	subs	r3, #1
 8007944:	60a3      	str	r3, [r4, #8]
 8007946:	6823      	ldr	r3, [r4, #0]
 8007948:	1c5a      	adds	r2, r3, #1
 800794a:	6022      	str	r2, [r4, #0]
 800794c:	701e      	strb	r6, [r3, #0]
 800794e:	6962      	ldr	r2, [r4, #20]
 8007950:	1c43      	adds	r3, r0, #1
 8007952:	429a      	cmp	r2, r3
 8007954:	d004      	beq.n	8007960 <__swbuf_r+0x6e>
 8007956:	89a3      	ldrh	r3, [r4, #12]
 8007958:	07db      	lsls	r3, r3, #31
 800795a:	d5e1      	bpl.n	8007920 <__swbuf_r+0x2e>
 800795c:	2e0a      	cmp	r6, #10
 800795e:	d1df      	bne.n	8007920 <__swbuf_r+0x2e>
 8007960:	4621      	mov	r1, r4
 8007962:	4628      	mov	r0, r5
 8007964:	f003 f9d2 	bl	800ad0c <_fflush_r>
 8007968:	2800      	cmp	r0, #0
 800796a:	d0d9      	beq.n	8007920 <__swbuf_r+0x2e>
 800796c:	e7d6      	b.n	800791c <__swbuf_r+0x2a>
	...

08007970 <__swsetup_r>:
 8007970:	b538      	push	{r3, r4, r5, lr}
 8007972:	4b29      	ldr	r3, [pc, #164]	@ (8007a18 <__swsetup_r+0xa8>)
 8007974:	4605      	mov	r5, r0
 8007976:	6818      	ldr	r0, [r3, #0]
 8007978:	460c      	mov	r4, r1
 800797a:	b118      	cbz	r0, 8007984 <__swsetup_r+0x14>
 800797c:	6a03      	ldr	r3, [r0, #32]
 800797e:	b90b      	cbnz	r3, 8007984 <__swsetup_r+0x14>
 8007980:	f7ff fe4e 	bl	8007620 <__sinit>
 8007984:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007988:	0719      	lsls	r1, r3, #28
 800798a:	d422      	bmi.n	80079d2 <__swsetup_r+0x62>
 800798c:	06da      	lsls	r2, r3, #27
 800798e:	d407      	bmi.n	80079a0 <__swsetup_r+0x30>
 8007990:	2209      	movs	r2, #9
 8007992:	602a      	str	r2, [r5, #0]
 8007994:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007998:	81a3      	strh	r3, [r4, #12]
 800799a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800799e:	e033      	b.n	8007a08 <__swsetup_r+0x98>
 80079a0:	0758      	lsls	r0, r3, #29
 80079a2:	d512      	bpl.n	80079ca <__swsetup_r+0x5a>
 80079a4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80079a6:	b141      	cbz	r1, 80079ba <__swsetup_r+0x4a>
 80079a8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80079ac:	4299      	cmp	r1, r3
 80079ae:	d002      	beq.n	80079b6 <__swsetup_r+0x46>
 80079b0:	4628      	mov	r0, r5
 80079b2:	f000 ff3d 	bl	8008830 <_free_r>
 80079b6:	2300      	movs	r3, #0
 80079b8:	6363      	str	r3, [r4, #52]	@ 0x34
 80079ba:	89a3      	ldrh	r3, [r4, #12]
 80079bc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80079c0:	81a3      	strh	r3, [r4, #12]
 80079c2:	2300      	movs	r3, #0
 80079c4:	6063      	str	r3, [r4, #4]
 80079c6:	6923      	ldr	r3, [r4, #16]
 80079c8:	6023      	str	r3, [r4, #0]
 80079ca:	89a3      	ldrh	r3, [r4, #12]
 80079cc:	f043 0308 	orr.w	r3, r3, #8
 80079d0:	81a3      	strh	r3, [r4, #12]
 80079d2:	6923      	ldr	r3, [r4, #16]
 80079d4:	b94b      	cbnz	r3, 80079ea <__swsetup_r+0x7a>
 80079d6:	89a3      	ldrh	r3, [r4, #12]
 80079d8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80079dc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80079e0:	d003      	beq.n	80079ea <__swsetup_r+0x7a>
 80079e2:	4621      	mov	r1, r4
 80079e4:	4628      	mov	r0, r5
 80079e6:	f003 f9df 	bl	800ada8 <__smakebuf_r>
 80079ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80079ee:	f013 0201 	ands.w	r2, r3, #1
 80079f2:	d00a      	beq.n	8007a0a <__swsetup_r+0x9a>
 80079f4:	2200      	movs	r2, #0
 80079f6:	60a2      	str	r2, [r4, #8]
 80079f8:	6962      	ldr	r2, [r4, #20]
 80079fa:	4252      	negs	r2, r2
 80079fc:	61a2      	str	r2, [r4, #24]
 80079fe:	6922      	ldr	r2, [r4, #16]
 8007a00:	b942      	cbnz	r2, 8007a14 <__swsetup_r+0xa4>
 8007a02:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8007a06:	d1c5      	bne.n	8007994 <__swsetup_r+0x24>
 8007a08:	bd38      	pop	{r3, r4, r5, pc}
 8007a0a:	0799      	lsls	r1, r3, #30
 8007a0c:	bf58      	it	pl
 8007a0e:	6962      	ldrpl	r2, [r4, #20]
 8007a10:	60a2      	str	r2, [r4, #8]
 8007a12:	e7f4      	b.n	80079fe <__swsetup_r+0x8e>
 8007a14:	2000      	movs	r0, #0
 8007a16:	e7f7      	b.n	8007a08 <__swsetup_r+0x98>
 8007a18:	20000018 	.word	0x20000018

08007a1c <memset>:
 8007a1c:	4402      	add	r2, r0
 8007a1e:	4603      	mov	r3, r0
 8007a20:	4293      	cmp	r3, r2
 8007a22:	d100      	bne.n	8007a26 <memset+0xa>
 8007a24:	4770      	bx	lr
 8007a26:	f803 1b01 	strb.w	r1, [r3], #1
 8007a2a:	e7f9      	b.n	8007a20 <memset+0x4>

08007a2c <strchr>:
 8007a2c:	b2c9      	uxtb	r1, r1
 8007a2e:	4603      	mov	r3, r0
 8007a30:	4618      	mov	r0, r3
 8007a32:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007a36:	b112      	cbz	r2, 8007a3e <strchr+0x12>
 8007a38:	428a      	cmp	r2, r1
 8007a3a:	d1f9      	bne.n	8007a30 <strchr+0x4>
 8007a3c:	4770      	bx	lr
 8007a3e:	2900      	cmp	r1, #0
 8007a40:	bf18      	it	ne
 8007a42:	2000      	movne	r0, #0
 8007a44:	4770      	bx	lr

08007a46 <strncpy>:
 8007a46:	b510      	push	{r4, lr}
 8007a48:	3901      	subs	r1, #1
 8007a4a:	4603      	mov	r3, r0
 8007a4c:	b132      	cbz	r2, 8007a5c <strncpy+0x16>
 8007a4e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8007a52:	f803 4b01 	strb.w	r4, [r3], #1
 8007a56:	3a01      	subs	r2, #1
 8007a58:	2c00      	cmp	r4, #0
 8007a5a:	d1f7      	bne.n	8007a4c <strncpy+0x6>
 8007a5c:	441a      	add	r2, r3
 8007a5e:	2100      	movs	r1, #0
 8007a60:	4293      	cmp	r3, r2
 8007a62:	d100      	bne.n	8007a66 <strncpy+0x20>
 8007a64:	bd10      	pop	{r4, pc}
 8007a66:	f803 1b01 	strb.w	r1, [r3], #1
 8007a6a:	e7f9      	b.n	8007a60 <strncpy+0x1a>

08007a6c <strstr>:
 8007a6c:	780a      	ldrb	r2, [r1, #0]
 8007a6e:	b570      	push	{r4, r5, r6, lr}
 8007a70:	b96a      	cbnz	r2, 8007a8e <strstr+0x22>
 8007a72:	bd70      	pop	{r4, r5, r6, pc}
 8007a74:	429a      	cmp	r2, r3
 8007a76:	d109      	bne.n	8007a8c <strstr+0x20>
 8007a78:	460c      	mov	r4, r1
 8007a7a:	4605      	mov	r5, r0
 8007a7c:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d0f6      	beq.n	8007a72 <strstr+0x6>
 8007a84:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8007a88:	429e      	cmp	r6, r3
 8007a8a:	d0f7      	beq.n	8007a7c <strstr+0x10>
 8007a8c:	3001      	adds	r0, #1
 8007a8e:	7803      	ldrb	r3, [r0, #0]
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d1ef      	bne.n	8007a74 <strstr+0x8>
 8007a94:	4618      	mov	r0, r3
 8007a96:	e7ec      	b.n	8007a72 <strstr+0x6>

08007a98 <_localeconv_r>:
 8007a98:	4800      	ldr	r0, [pc, #0]	@ (8007a9c <_localeconv_r+0x4>)
 8007a9a:	4770      	bx	lr
 8007a9c:	20000158 	.word	0x20000158

08007aa0 <_close_r>:
 8007aa0:	b538      	push	{r3, r4, r5, lr}
 8007aa2:	4d06      	ldr	r5, [pc, #24]	@ (8007abc <_close_r+0x1c>)
 8007aa4:	2300      	movs	r3, #0
 8007aa6:	4604      	mov	r4, r0
 8007aa8:	4608      	mov	r0, r1
 8007aaa:	602b      	str	r3, [r5, #0]
 8007aac:	f7fa fd8c 	bl	80025c8 <_close>
 8007ab0:	1c43      	adds	r3, r0, #1
 8007ab2:	d102      	bne.n	8007aba <_close_r+0x1a>
 8007ab4:	682b      	ldr	r3, [r5, #0]
 8007ab6:	b103      	cbz	r3, 8007aba <_close_r+0x1a>
 8007ab8:	6023      	str	r3, [r4, #0]
 8007aba:	bd38      	pop	{r3, r4, r5, pc}
 8007abc:	20005584 	.word	0x20005584

08007ac0 <_lseek_r>:
 8007ac0:	b538      	push	{r3, r4, r5, lr}
 8007ac2:	4d07      	ldr	r5, [pc, #28]	@ (8007ae0 <_lseek_r+0x20>)
 8007ac4:	4604      	mov	r4, r0
 8007ac6:	4608      	mov	r0, r1
 8007ac8:	4611      	mov	r1, r2
 8007aca:	2200      	movs	r2, #0
 8007acc:	602a      	str	r2, [r5, #0]
 8007ace:	461a      	mov	r2, r3
 8007ad0:	f7fa fda1 	bl	8002616 <_lseek>
 8007ad4:	1c43      	adds	r3, r0, #1
 8007ad6:	d102      	bne.n	8007ade <_lseek_r+0x1e>
 8007ad8:	682b      	ldr	r3, [r5, #0]
 8007ada:	b103      	cbz	r3, 8007ade <_lseek_r+0x1e>
 8007adc:	6023      	str	r3, [r4, #0]
 8007ade:	bd38      	pop	{r3, r4, r5, pc}
 8007ae0:	20005584 	.word	0x20005584

08007ae4 <_read_r>:
 8007ae4:	b538      	push	{r3, r4, r5, lr}
 8007ae6:	4d07      	ldr	r5, [pc, #28]	@ (8007b04 <_read_r+0x20>)
 8007ae8:	4604      	mov	r4, r0
 8007aea:	4608      	mov	r0, r1
 8007aec:	4611      	mov	r1, r2
 8007aee:	2200      	movs	r2, #0
 8007af0:	602a      	str	r2, [r5, #0]
 8007af2:	461a      	mov	r2, r3
 8007af4:	f7fa fd2f 	bl	8002556 <_read>
 8007af8:	1c43      	adds	r3, r0, #1
 8007afa:	d102      	bne.n	8007b02 <_read_r+0x1e>
 8007afc:	682b      	ldr	r3, [r5, #0]
 8007afe:	b103      	cbz	r3, 8007b02 <_read_r+0x1e>
 8007b00:	6023      	str	r3, [r4, #0]
 8007b02:	bd38      	pop	{r3, r4, r5, pc}
 8007b04:	20005584 	.word	0x20005584

08007b08 <_write_r>:
 8007b08:	b538      	push	{r3, r4, r5, lr}
 8007b0a:	4d07      	ldr	r5, [pc, #28]	@ (8007b28 <_write_r+0x20>)
 8007b0c:	4604      	mov	r4, r0
 8007b0e:	4608      	mov	r0, r1
 8007b10:	4611      	mov	r1, r2
 8007b12:	2200      	movs	r2, #0
 8007b14:	602a      	str	r2, [r5, #0]
 8007b16:	461a      	mov	r2, r3
 8007b18:	f7fa fd3a 	bl	8002590 <_write>
 8007b1c:	1c43      	adds	r3, r0, #1
 8007b1e:	d102      	bne.n	8007b26 <_write_r+0x1e>
 8007b20:	682b      	ldr	r3, [r5, #0]
 8007b22:	b103      	cbz	r3, 8007b26 <_write_r+0x1e>
 8007b24:	6023      	str	r3, [r4, #0]
 8007b26:	bd38      	pop	{r3, r4, r5, pc}
 8007b28:	20005584 	.word	0x20005584

08007b2c <__errno>:
 8007b2c:	4b01      	ldr	r3, [pc, #4]	@ (8007b34 <__errno+0x8>)
 8007b2e:	6818      	ldr	r0, [r3, #0]
 8007b30:	4770      	bx	lr
 8007b32:	bf00      	nop
 8007b34:	20000018 	.word	0x20000018

08007b38 <__libc_init_array>:
 8007b38:	b570      	push	{r4, r5, r6, lr}
 8007b3a:	4d0d      	ldr	r5, [pc, #52]	@ (8007b70 <__libc_init_array+0x38>)
 8007b3c:	4c0d      	ldr	r4, [pc, #52]	@ (8007b74 <__libc_init_array+0x3c>)
 8007b3e:	1b64      	subs	r4, r4, r5
 8007b40:	10a4      	asrs	r4, r4, #2
 8007b42:	2600      	movs	r6, #0
 8007b44:	42a6      	cmp	r6, r4
 8007b46:	d109      	bne.n	8007b5c <__libc_init_array+0x24>
 8007b48:	4d0b      	ldr	r5, [pc, #44]	@ (8007b78 <__libc_init_array+0x40>)
 8007b4a:	4c0c      	ldr	r4, [pc, #48]	@ (8007b7c <__libc_init_array+0x44>)
 8007b4c:	f003 fe6e 	bl	800b82c <_init>
 8007b50:	1b64      	subs	r4, r4, r5
 8007b52:	10a4      	asrs	r4, r4, #2
 8007b54:	2600      	movs	r6, #0
 8007b56:	42a6      	cmp	r6, r4
 8007b58:	d105      	bne.n	8007b66 <__libc_init_array+0x2e>
 8007b5a:	bd70      	pop	{r4, r5, r6, pc}
 8007b5c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b60:	4798      	blx	r3
 8007b62:	3601      	adds	r6, #1
 8007b64:	e7ee      	b.n	8007b44 <__libc_init_array+0xc>
 8007b66:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b6a:	4798      	blx	r3
 8007b6c:	3601      	adds	r6, #1
 8007b6e:	e7f2      	b.n	8007b56 <__libc_init_array+0x1e>
 8007b70:	0800be98 	.word	0x0800be98
 8007b74:	0800be98 	.word	0x0800be98
 8007b78:	0800be98 	.word	0x0800be98
 8007b7c:	0800be9c 	.word	0x0800be9c

08007b80 <__retarget_lock_init_recursive>:
 8007b80:	4770      	bx	lr

08007b82 <__retarget_lock_acquire_recursive>:
 8007b82:	4770      	bx	lr

08007b84 <__retarget_lock_release_recursive>:
 8007b84:	4770      	bx	lr
	...

08007b88 <nanf>:
 8007b88:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8007b90 <nanf+0x8>
 8007b8c:	4770      	bx	lr
 8007b8e:	bf00      	nop
 8007b90:	7fc00000 	.word	0x7fc00000

08007b94 <quorem>:
 8007b94:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b98:	6903      	ldr	r3, [r0, #16]
 8007b9a:	690c      	ldr	r4, [r1, #16]
 8007b9c:	42a3      	cmp	r3, r4
 8007b9e:	4607      	mov	r7, r0
 8007ba0:	db7e      	blt.n	8007ca0 <quorem+0x10c>
 8007ba2:	3c01      	subs	r4, #1
 8007ba4:	f101 0814 	add.w	r8, r1, #20
 8007ba8:	00a3      	lsls	r3, r4, #2
 8007baa:	f100 0514 	add.w	r5, r0, #20
 8007bae:	9300      	str	r3, [sp, #0]
 8007bb0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007bb4:	9301      	str	r3, [sp, #4]
 8007bb6:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007bba:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007bbe:	3301      	adds	r3, #1
 8007bc0:	429a      	cmp	r2, r3
 8007bc2:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007bc6:	fbb2 f6f3 	udiv	r6, r2, r3
 8007bca:	d32e      	bcc.n	8007c2a <quorem+0x96>
 8007bcc:	f04f 0a00 	mov.w	sl, #0
 8007bd0:	46c4      	mov	ip, r8
 8007bd2:	46ae      	mov	lr, r5
 8007bd4:	46d3      	mov	fp, sl
 8007bd6:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007bda:	b298      	uxth	r0, r3
 8007bdc:	fb06 a000 	mla	r0, r6, r0, sl
 8007be0:	0c02      	lsrs	r2, r0, #16
 8007be2:	0c1b      	lsrs	r3, r3, #16
 8007be4:	fb06 2303 	mla	r3, r6, r3, r2
 8007be8:	f8de 2000 	ldr.w	r2, [lr]
 8007bec:	b280      	uxth	r0, r0
 8007bee:	b292      	uxth	r2, r2
 8007bf0:	1a12      	subs	r2, r2, r0
 8007bf2:	445a      	add	r2, fp
 8007bf4:	f8de 0000 	ldr.w	r0, [lr]
 8007bf8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007bfc:	b29b      	uxth	r3, r3
 8007bfe:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8007c02:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8007c06:	b292      	uxth	r2, r2
 8007c08:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8007c0c:	45e1      	cmp	r9, ip
 8007c0e:	f84e 2b04 	str.w	r2, [lr], #4
 8007c12:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8007c16:	d2de      	bcs.n	8007bd6 <quorem+0x42>
 8007c18:	9b00      	ldr	r3, [sp, #0]
 8007c1a:	58eb      	ldr	r3, [r5, r3]
 8007c1c:	b92b      	cbnz	r3, 8007c2a <quorem+0x96>
 8007c1e:	9b01      	ldr	r3, [sp, #4]
 8007c20:	3b04      	subs	r3, #4
 8007c22:	429d      	cmp	r5, r3
 8007c24:	461a      	mov	r2, r3
 8007c26:	d32f      	bcc.n	8007c88 <quorem+0xf4>
 8007c28:	613c      	str	r4, [r7, #16]
 8007c2a:	4638      	mov	r0, r7
 8007c2c:	f001 f9c4 	bl	8008fb8 <__mcmp>
 8007c30:	2800      	cmp	r0, #0
 8007c32:	db25      	blt.n	8007c80 <quorem+0xec>
 8007c34:	4629      	mov	r1, r5
 8007c36:	2000      	movs	r0, #0
 8007c38:	f858 2b04 	ldr.w	r2, [r8], #4
 8007c3c:	f8d1 c000 	ldr.w	ip, [r1]
 8007c40:	fa1f fe82 	uxth.w	lr, r2
 8007c44:	fa1f f38c 	uxth.w	r3, ip
 8007c48:	eba3 030e 	sub.w	r3, r3, lr
 8007c4c:	4403      	add	r3, r0
 8007c4e:	0c12      	lsrs	r2, r2, #16
 8007c50:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8007c54:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8007c58:	b29b      	uxth	r3, r3
 8007c5a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007c5e:	45c1      	cmp	r9, r8
 8007c60:	f841 3b04 	str.w	r3, [r1], #4
 8007c64:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007c68:	d2e6      	bcs.n	8007c38 <quorem+0xa4>
 8007c6a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007c6e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007c72:	b922      	cbnz	r2, 8007c7e <quorem+0xea>
 8007c74:	3b04      	subs	r3, #4
 8007c76:	429d      	cmp	r5, r3
 8007c78:	461a      	mov	r2, r3
 8007c7a:	d30b      	bcc.n	8007c94 <quorem+0x100>
 8007c7c:	613c      	str	r4, [r7, #16]
 8007c7e:	3601      	adds	r6, #1
 8007c80:	4630      	mov	r0, r6
 8007c82:	b003      	add	sp, #12
 8007c84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c88:	6812      	ldr	r2, [r2, #0]
 8007c8a:	3b04      	subs	r3, #4
 8007c8c:	2a00      	cmp	r2, #0
 8007c8e:	d1cb      	bne.n	8007c28 <quorem+0x94>
 8007c90:	3c01      	subs	r4, #1
 8007c92:	e7c6      	b.n	8007c22 <quorem+0x8e>
 8007c94:	6812      	ldr	r2, [r2, #0]
 8007c96:	3b04      	subs	r3, #4
 8007c98:	2a00      	cmp	r2, #0
 8007c9a:	d1ef      	bne.n	8007c7c <quorem+0xe8>
 8007c9c:	3c01      	subs	r4, #1
 8007c9e:	e7ea      	b.n	8007c76 <quorem+0xe2>
 8007ca0:	2000      	movs	r0, #0
 8007ca2:	e7ee      	b.n	8007c82 <quorem+0xee>
 8007ca4:	0000      	movs	r0, r0
	...

08007ca8 <_dtoa_r>:
 8007ca8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007cac:	69c7      	ldr	r7, [r0, #28]
 8007cae:	b099      	sub	sp, #100	@ 0x64
 8007cb0:	ed8d 0b02 	vstr	d0, [sp, #8]
 8007cb4:	ec55 4b10 	vmov	r4, r5, d0
 8007cb8:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8007cba:	9109      	str	r1, [sp, #36]	@ 0x24
 8007cbc:	4683      	mov	fp, r0
 8007cbe:	920e      	str	r2, [sp, #56]	@ 0x38
 8007cc0:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007cc2:	b97f      	cbnz	r7, 8007ce4 <_dtoa_r+0x3c>
 8007cc4:	2010      	movs	r0, #16
 8007cc6:	f000 fdfd 	bl	80088c4 <malloc>
 8007cca:	4602      	mov	r2, r0
 8007ccc:	f8cb 001c 	str.w	r0, [fp, #28]
 8007cd0:	b920      	cbnz	r0, 8007cdc <_dtoa_r+0x34>
 8007cd2:	4ba7      	ldr	r3, [pc, #668]	@ (8007f70 <_dtoa_r+0x2c8>)
 8007cd4:	21ef      	movs	r1, #239	@ 0xef
 8007cd6:	48a7      	ldr	r0, [pc, #668]	@ (8007f74 <_dtoa_r+0x2cc>)
 8007cd8:	f003 f98a 	bl	800aff0 <__assert_func>
 8007cdc:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8007ce0:	6007      	str	r7, [r0, #0]
 8007ce2:	60c7      	str	r7, [r0, #12]
 8007ce4:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007ce8:	6819      	ldr	r1, [r3, #0]
 8007cea:	b159      	cbz	r1, 8007d04 <_dtoa_r+0x5c>
 8007cec:	685a      	ldr	r2, [r3, #4]
 8007cee:	604a      	str	r2, [r1, #4]
 8007cf0:	2301      	movs	r3, #1
 8007cf2:	4093      	lsls	r3, r2
 8007cf4:	608b      	str	r3, [r1, #8]
 8007cf6:	4658      	mov	r0, fp
 8007cf8:	f000 feda 	bl	8008ab0 <_Bfree>
 8007cfc:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007d00:	2200      	movs	r2, #0
 8007d02:	601a      	str	r2, [r3, #0]
 8007d04:	1e2b      	subs	r3, r5, #0
 8007d06:	bfb9      	ittee	lt
 8007d08:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8007d0c:	9303      	strlt	r3, [sp, #12]
 8007d0e:	2300      	movge	r3, #0
 8007d10:	6033      	strge	r3, [r6, #0]
 8007d12:	9f03      	ldr	r7, [sp, #12]
 8007d14:	4b98      	ldr	r3, [pc, #608]	@ (8007f78 <_dtoa_r+0x2d0>)
 8007d16:	bfbc      	itt	lt
 8007d18:	2201      	movlt	r2, #1
 8007d1a:	6032      	strlt	r2, [r6, #0]
 8007d1c:	43bb      	bics	r3, r7
 8007d1e:	d112      	bne.n	8007d46 <_dtoa_r+0x9e>
 8007d20:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8007d22:	f242 730f 	movw	r3, #9999	@ 0x270f
 8007d26:	6013      	str	r3, [r2, #0]
 8007d28:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007d2c:	4323      	orrs	r3, r4
 8007d2e:	f000 854d 	beq.w	80087cc <_dtoa_r+0xb24>
 8007d32:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007d34:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8007f8c <_dtoa_r+0x2e4>
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	f000 854f 	beq.w	80087dc <_dtoa_r+0xb34>
 8007d3e:	f10a 0303 	add.w	r3, sl, #3
 8007d42:	f000 bd49 	b.w	80087d8 <_dtoa_r+0xb30>
 8007d46:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007d4a:	2200      	movs	r2, #0
 8007d4c:	ec51 0b17 	vmov	r0, r1, d7
 8007d50:	2300      	movs	r3, #0
 8007d52:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8007d56:	f7f8 fecf 	bl	8000af8 <__aeabi_dcmpeq>
 8007d5a:	4680      	mov	r8, r0
 8007d5c:	b158      	cbz	r0, 8007d76 <_dtoa_r+0xce>
 8007d5e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8007d60:	2301      	movs	r3, #1
 8007d62:	6013      	str	r3, [r2, #0]
 8007d64:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007d66:	b113      	cbz	r3, 8007d6e <_dtoa_r+0xc6>
 8007d68:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8007d6a:	4b84      	ldr	r3, [pc, #528]	@ (8007f7c <_dtoa_r+0x2d4>)
 8007d6c:	6013      	str	r3, [r2, #0]
 8007d6e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8007f90 <_dtoa_r+0x2e8>
 8007d72:	f000 bd33 	b.w	80087dc <_dtoa_r+0xb34>
 8007d76:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8007d7a:	aa16      	add	r2, sp, #88	@ 0x58
 8007d7c:	a917      	add	r1, sp, #92	@ 0x5c
 8007d7e:	4658      	mov	r0, fp
 8007d80:	f001 fa3a 	bl	80091f8 <__d2b>
 8007d84:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8007d88:	4681      	mov	r9, r0
 8007d8a:	2e00      	cmp	r6, #0
 8007d8c:	d077      	beq.n	8007e7e <_dtoa_r+0x1d6>
 8007d8e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007d90:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8007d94:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007d98:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007d9c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8007da0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8007da4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8007da8:	4619      	mov	r1, r3
 8007daa:	2200      	movs	r2, #0
 8007dac:	4b74      	ldr	r3, [pc, #464]	@ (8007f80 <_dtoa_r+0x2d8>)
 8007dae:	f7f8 fa83 	bl	80002b8 <__aeabi_dsub>
 8007db2:	a369      	add	r3, pc, #420	@ (adr r3, 8007f58 <_dtoa_r+0x2b0>)
 8007db4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007db8:	f7f8 fc36 	bl	8000628 <__aeabi_dmul>
 8007dbc:	a368      	add	r3, pc, #416	@ (adr r3, 8007f60 <_dtoa_r+0x2b8>)
 8007dbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dc2:	f7f8 fa7b 	bl	80002bc <__adddf3>
 8007dc6:	4604      	mov	r4, r0
 8007dc8:	4630      	mov	r0, r6
 8007dca:	460d      	mov	r5, r1
 8007dcc:	f7f8 fbc2 	bl	8000554 <__aeabi_i2d>
 8007dd0:	a365      	add	r3, pc, #404	@ (adr r3, 8007f68 <_dtoa_r+0x2c0>)
 8007dd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dd6:	f7f8 fc27 	bl	8000628 <__aeabi_dmul>
 8007dda:	4602      	mov	r2, r0
 8007ddc:	460b      	mov	r3, r1
 8007dde:	4620      	mov	r0, r4
 8007de0:	4629      	mov	r1, r5
 8007de2:	f7f8 fa6b 	bl	80002bc <__adddf3>
 8007de6:	4604      	mov	r4, r0
 8007de8:	460d      	mov	r5, r1
 8007dea:	f7f8 fecd 	bl	8000b88 <__aeabi_d2iz>
 8007dee:	2200      	movs	r2, #0
 8007df0:	4607      	mov	r7, r0
 8007df2:	2300      	movs	r3, #0
 8007df4:	4620      	mov	r0, r4
 8007df6:	4629      	mov	r1, r5
 8007df8:	f7f8 fe88 	bl	8000b0c <__aeabi_dcmplt>
 8007dfc:	b140      	cbz	r0, 8007e10 <_dtoa_r+0x168>
 8007dfe:	4638      	mov	r0, r7
 8007e00:	f7f8 fba8 	bl	8000554 <__aeabi_i2d>
 8007e04:	4622      	mov	r2, r4
 8007e06:	462b      	mov	r3, r5
 8007e08:	f7f8 fe76 	bl	8000af8 <__aeabi_dcmpeq>
 8007e0c:	b900      	cbnz	r0, 8007e10 <_dtoa_r+0x168>
 8007e0e:	3f01      	subs	r7, #1
 8007e10:	2f16      	cmp	r7, #22
 8007e12:	d851      	bhi.n	8007eb8 <_dtoa_r+0x210>
 8007e14:	4b5b      	ldr	r3, [pc, #364]	@ (8007f84 <_dtoa_r+0x2dc>)
 8007e16:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007e1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e1e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007e22:	f7f8 fe73 	bl	8000b0c <__aeabi_dcmplt>
 8007e26:	2800      	cmp	r0, #0
 8007e28:	d048      	beq.n	8007ebc <_dtoa_r+0x214>
 8007e2a:	3f01      	subs	r7, #1
 8007e2c:	2300      	movs	r3, #0
 8007e2e:	9312      	str	r3, [sp, #72]	@ 0x48
 8007e30:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8007e32:	1b9b      	subs	r3, r3, r6
 8007e34:	1e5a      	subs	r2, r3, #1
 8007e36:	bf44      	itt	mi
 8007e38:	f1c3 0801 	rsbmi	r8, r3, #1
 8007e3c:	2300      	movmi	r3, #0
 8007e3e:	9208      	str	r2, [sp, #32]
 8007e40:	bf54      	ite	pl
 8007e42:	f04f 0800 	movpl.w	r8, #0
 8007e46:	9308      	strmi	r3, [sp, #32]
 8007e48:	2f00      	cmp	r7, #0
 8007e4a:	db39      	blt.n	8007ec0 <_dtoa_r+0x218>
 8007e4c:	9b08      	ldr	r3, [sp, #32]
 8007e4e:	970f      	str	r7, [sp, #60]	@ 0x3c
 8007e50:	443b      	add	r3, r7
 8007e52:	9308      	str	r3, [sp, #32]
 8007e54:	2300      	movs	r3, #0
 8007e56:	930a      	str	r3, [sp, #40]	@ 0x28
 8007e58:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007e5a:	2b09      	cmp	r3, #9
 8007e5c:	d864      	bhi.n	8007f28 <_dtoa_r+0x280>
 8007e5e:	2b05      	cmp	r3, #5
 8007e60:	bfc4      	itt	gt
 8007e62:	3b04      	subgt	r3, #4
 8007e64:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8007e66:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007e68:	f1a3 0302 	sub.w	r3, r3, #2
 8007e6c:	bfcc      	ite	gt
 8007e6e:	2400      	movgt	r4, #0
 8007e70:	2401      	movle	r4, #1
 8007e72:	2b03      	cmp	r3, #3
 8007e74:	d863      	bhi.n	8007f3e <_dtoa_r+0x296>
 8007e76:	e8df f003 	tbb	[pc, r3]
 8007e7a:	372a      	.short	0x372a
 8007e7c:	5535      	.short	0x5535
 8007e7e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8007e82:	441e      	add	r6, r3
 8007e84:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8007e88:	2b20      	cmp	r3, #32
 8007e8a:	bfc1      	itttt	gt
 8007e8c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8007e90:	409f      	lslgt	r7, r3
 8007e92:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8007e96:	fa24 f303 	lsrgt.w	r3, r4, r3
 8007e9a:	bfd6      	itet	le
 8007e9c:	f1c3 0320 	rsble	r3, r3, #32
 8007ea0:	ea47 0003 	orrgt.w	r0, r7, r3
 8007ea4:	fa04 f003 	lslle.w	r0, r4, r3
 8007ea8:	f7f8 fb44 	bl	8000534 <__aeabi_ui2d>
 8007eac:	2201      	movs	r2, #1
 8007eae:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8007eb2:	3e01      	subs	r6, #1
 8007eb4:	9214      	str	r2, [sp, #80]	@ 0x50
 8007eb6:	e777      	b.n	8007da8 <_dtoa_r+0x100>
 8007eb8:	2301      	movs	r3, #1
 8007eba:	e7b8      	b.n	8007e2e <_dtoa_r+0x186>
 8007ebc:	9012      	str	r0, [sp, #72]	@ 0x48
 8007ebe:	e7b7      	b.n	8007e30 <_dtoa_r+0x188>
 8007ec0:	427b      	negs	r3, r7
 8007ec2:	930a      	str	r3, [sp, #40]	@ 0x28
 8007ec4:	2300      	movs	r3, #0
 8007ec6:	eba8 0807 	sub.w	r8, r8, r7
 8007eca:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007ecc:	e7c4      	b.n	8007e58 <_dtoa_r+0x1b0>
 8007ece:	2300      	movs	r3, #0
 8007ed0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007ed2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	dc35      	bgt.n	8007f44 <_dtoa_r+0x29c>
 8007ed8:	2301      	movs	r3, #1
 8007eda:	9300      	str	r3, [sp, #0]
 8007edc:	9307      	str	r3, [sp, #28]
 8007ede:	461a      	mov	r2, r3
 8007ee0:	920e      	str	r2, [sp, #56]	@ 0x38
 8007ee2:	e00b      	b.n	8007efc <_dtoa_r+0x254>
 8007ee4:	2301      	movs	r3, #1
 8007ee6:	e7f3      	b.n	8007ed0 <_dtoa_r+0x228>
 8007ee8:	2300      	movs	r3, #0
 8007eea:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007eec:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007eee:	18fb      	adds	r3, r7, r3
 8007ef0:	9300      	str	r3, [sp, #0]
 8007ef2:	3301      	adds	r3, #1
 8007ef4:	2b01      	cmp	r3, #1
 8007ef6:	9307      	str	r3, [sp, #28]
 8007ef8:	bfb8      	it	lt
 8007efa:	2301      	movlt	r3, #1
 8007efc:	f8db 001c 	ldr.w	r0, [fp, #28]
 8007f00:	2100      	movs	r1, #0
 8007f02:	2204      	movs	r2, #4
 8007f04:	f102 0514 	add.w	r5, r2, #20
 8007f08:	429d      	cmp	r5, r3
 8007f0a:	d91f      	bls.n	8007f4c <_dtoa_r+0x2a4>
 8007f0c:	6041      	str	r1, [r0, #4]
 8007f0e:	4658      	mov	r0, fp
 8007f10:	f000 fd8e 	bl	8008a30 <_Balloc>
 8007f14:	4682      	mov	sl, r0
 8007f16:	2800      	cmp	r0, #0
 8007f18:	d13c      	bne.n	8007f94 <_dtoa_r+0x2ec>
 8007f1a:	4b1b      	ldr	r3, [pc, #108]	@ (8007f88 <_dtoa_r+0x2e0>)
 8007f1c:	4602      	mov	r2, r0
 8007f1e:	f240 11af 	movw	r1, #431	@ 0x1af
 8007f22:	e6d8      	b.n	8007cd6 <_dtoa_r+0x2e>
 8007f24:	2301      	movs	r3, #1
 8007f26:	e7e0      	b.n	8007eea <_dtoa_r+0x242>
 8007f28:	2401      	movs	r4, #1
 8007f2a:	2300      	movs	r3, #0
 8007f2c:	9309      	str	r3, [sp, #36]	@ 0x24
 8007f2e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8007f30:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007f34:	9300      	str	r3, [sp, #0]
 8007f36:	9307      	str	r3, [sp, #28]
 8007f38:	2200      	movs	r2, #0
 8007f3a:	2312      	movs	r3, #18
 8007f3c:	e7d0      	b.n	8007ee0 <_dtoa_r+0x238>
 8007f3e:	2301      	movs	r3, #1
 8007f40:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007f42:	e7f5      	b.n	8007f30 <_dtoa_r+0x288>
 8007f44:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007f46:	9300      	str	r3, [sp, #0]
 8007f48:	9307      	str	r3, [sp, #28]
 8007f4a:	e7d7      	b.n	8007efc <_dtoa_r+0x254>
 8007f4c:	3101      	adds	r1, #1
 8007f4e:	0052      	lsls	r2, r2, #1
 8007f50:	e7d8      	b.n	8007f04 <_dtoa_r+0x25c>
 8007f52:	bf00      	nop
 8007f54:	f3af 8000 	nop.w
 8007f58:	636f4361 	.word	0x636f4361
 8007f5c:	3fd287a7 	.word	0x3fd287a7
 8007f60:	8b60c8b3 	.word	0x8b60c8b3
 8007f64:	3fc68a28 	.word	0x3fc68a28
 8007f68:	509f79fb 	.word	0x509f79fb
 8007f6c:	3fd34413 	.word	0x3fd34413
 8007f70:	0800bb8d 	.word	0x0800bb8d
 8007f74:	0800bba4 	.word	0x0800bba4
 8007f78:	7ff00000 	.word	0x7ff00000
 8007f7c:	0800bde8 	.word	0x0800bde8
 8007f80:	3ff80000 	.word	0x3ff80000
 8007f84:	0800bca0 	.word	0x0800bca0
 8007f88:	0800bbfc 	.word	0x0800bbfc
 8007f8c:	0800bb89 	.word	0x0800bb89
 8007f90:	0800bde7 	.word	0x0800bde7
 8007f94:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007f98:	6018      	str	r0, [r3, #0]
 8007f9a:	9b07      	ldr	r3, [sp, #28]
 8007f9c:	2b0e      	cmp	r3, #14
 8007f9e:	f200 80a4 	bhi.w	80080ea <_dtoa_r+0x442>
 8007fa2:	2c00      	cmp	r4, #0
 8007fa4:	f000 80a1 	beq.w	80080ea <_dtoa_r+0x442>
 8007fa8:	2f00      	cmp	r7, #0
 8007faa:	dd33      	ble.n	8008014 <_dtoa_r+0x36c>
 8007fac:	4bad      	ldr	r3, [pc, #692]	@ (8008264 <_dtoa_r+0x5bc>)
 8007fae:	f007 020f 	and.w	r2, r7, #15
 8007fb2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007fb6:	ed93 7b00 	vldr	d7, [r3]
 8007fba:	05f8      	lsls	r0, r7, #23
 8007fbc:	ed8d 7b04 	vstr	d7, [sp, #16]
 8007fc0:	ea4f 1427 	mov.w	r4, r7, asr #4
 8007fc4:	d516      	bpl.n	8007ff4 <_dtoa_r+0x34c>
 8007fc6:	4ba8      	ldr	r3, [pc, #672]	@ (8008268 <_dtoa_r+0x5c0>)
 8007fc8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007fcc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007fd0:	f7f8 fc54 	bl	800087c <__aeabi_ddiv>
 8007fd4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007fd8:	f004 040f 	and.w	r4, r4, #15
 8007fdc:	2603      	movs	r6, #3
 8007fde:	4da2      	ldr	r5, [pc, #648]	@ (8008268 <_dtoa_r+0x5c0>)
 8007fe0:	b954      	cbnz	r4, 8007ff8 <_dtoa_r+0x350>
 8007fe2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007fe6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007fea:	f7f8 fc47 	bl	800087c <__aeabi_ddiv>
 8007fee:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007ff2:	e028      	b.n	8008046 <_dtoa_r+0x39e>
 8007ff4:	2602      	movs	r6, #2
 8007ff6:	e7f2      	b.n	8007fde <_dtoa_r+0x336>
 8007ff8:	07e1      	lsls	r1, r4, #31
 8007ffa:	d508      	bpl.n	800800e <_dtoa_r+0x366>
 8007ffc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008000:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008004:	f7f8 fb10 	bl	8000628 <__aeabi_dmul>
 8008008:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800800c:	3601      	adds	r6, #1
 800800e:	1064      	asrs	r4, r4, #1
 8008010:	3508      	adds	r5, #8
 8008012:	e7e5      	b.n	8007fe0 <_dtoa_r+0x338>
 8008014:	f000 80d2 	beq.w	80081bc <_dtoa_r+0x514>
 8008018:	427c      	negs	r4, r7
 800801a:	4b92      	ldr	r3, [pc, #584]	@ (8008264 <_dtoa_r+0x5bc>)
 800801c:	4d92      	ldr	r5, [pc, #584]	@ (8008268 <_dtoa_r+0x5c0>)
 800801e:	f004 020f 	and.w	r2, r4, #15
 8008022:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008026:	e9d3 2300 	ldrd	r2, r3, [r3]
 800802a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800802e:	f7f8 fafb 	bl	8000628 <__aeabi_dmul>
 8008032:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008036:	1124      	asrs	r4, r4, #4
 8008038:	2300      	movs	r3, #0
 800803a:	2602      	movs	r6, #2
 800803c:	2c00      	cmp	r4, #0
 800803e:	f040 80b2 	bne.w	80081a6 <_dtoa_r+0x4fe>
 8008042:	2b00      	cmp	r3, #0
 8008044:	d1d3      	bne.n	8007fee <_dtoa_r+0x346>
 8008046:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8008048:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800804c:	2b00      	cmp	r3, #0
 800804e:	f000 80b7 	beq.w	80081c0 <_dtoa_r+0x518>
 8008052:	4b86      	ldr	r3, [pc, #536]	@ (800826c <_dtoa_r+0x5c4>)
 8008054:	2200      	movs	r2, #0
 8008056:	4620      	mov	r0, r4
 8008058:	4629      	mov	r1, r5
 800805a:	f7f8 fd57 	bl	8000b0c <__aeabi_dcmplt>
 800805e:	2800      	cmp	r0, #0
 8008060:	f000 80ae 	beq.w	80081c0 <_dtoa_r+0x518>
 8008064:	9b07      	ldr	r3, [sp, #28]
 8008066:	2b00      	cmp	r3, #0
 8008068:	f000 80aa 	beq.w	80081c0 <_dtoa_r+0x518>
 800806c:	9b00      	ldr	r3, [sp, #0]
 800806e:	2b00      	cmp	r3, #0
 8008070:	dd37      	ble.n	80080e2 <_dtoa_r+0x43a>
 8008072:	1e7b      	subs	r3, r7, #1
 8008074:	9304      	str	r3, [sp, #16]
 8008076:	4620      	mov	r0, r4
 8008078:	4b7d      	ldr	r3, [pc, #500]	@ (8008270 <_dtoa_r+0x5c8>)
 800807a:	2200      	movs	r2, #0
 800807c:	4629      	mov	r1, r5
 800807e:	f7f8 fad3 	bl	8000628 <__aeabi_dmul>
 8008082:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008086:	9c00      	ldr	r4, [sp, #0]
 8008088:	3601      	adds	r6, #1
 800808a:	4630      	mov	r0, r6
 800808c:	f7f8 fa62 	bl	8000554 <__aeabi_i2d>
 8008090:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008094:	f7f8 fac8 	bl	8000628 <__aeabi_dmul>
 8008098:	4b76      	ldr	r3, [pc, #472]	@ (8008274 <_dtoa_r+0x5cc>)
 800809a:	2200      	movs	r2, #0
 800809c:	f7f8 f90e 	bl	80002bc <__adddf3>
 80080a0:	4605      	mov	r5, r0
 80080a2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80080a6:	2c00      	cmp	r4, #0
 80080a8:	f040 808d 	bne.w	80081c6 <_dtoa_r+0x51e>
 80080ac:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80080b0:	4b71      	ldr	r3, [pc, #452]	@ (8008278 <_dtoa_r+0x5d0>)
 80080b2:	2200      	movs	r2, #0
 80080b4:	f7f8 f900 	bl	80002b8 <__aeabi_dsub>
 80080b8:	4602      	mov	r2, r0
 80080ba:	460b      	mov	r3, r1
 80080bc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80080c0:	462a      	mov	r2, r5
 80080c2:	4633      	mov	r3, r6
 80080c4:	f7f8 fd40 	bl	8000b48 <__aeabi_dcmpgt>
 80080c8:	2800      	cmp	r0, #0
 80080ca:	f040 828b 	bne.w	80085e4 <_dtoa_r+0x93c>
 80080ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80080d2:	462a      	mov	r2, r5
 80080d4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80080d8:	f7f8 fd18 	bl	8000b0c <__aeabi_dcmplt>
 80080dc:	2800      	cmp	r0, #0
 80080de:	f040 8128 	bne.w	8008332 <_dtoa_r+0x68a>
 80080e2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80080e6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80080ea:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	f2c0 815a 	blt.w	80083a6 <_dtoa_r+0x6fe>
 80080f2:	2f0e      	cmp	r7, #14
 80080f4:	f300 8157 	bgt.w	80083a6 <_dtoa_r+0x6fe>
 80080f8:	4b5a      	ldr	r3, [pc, #360]	@ (8008264 <_dtoa_r+0x5bc>)
 80080fa:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80080fe:	ed93 7b00 	vldr	d7, [r3]
 8008102:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008104:	2b00      	cmp	r3, #0
 8008106:	ed8d 7b00 	vstr	d7, [sp]
 800810a:	da03      	bge.n	8008114 <_dtoa_r+0x46c>
 800810c:	9b07      	ldr	r3, [sp, #28]
 800810e:	2b00      	cmp	r3, #0
 8008110:	f340 8101 	ble.w	8008316 <_dtoa_r+0x66e>
 8008114:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8008118:	4656      	mov	r6, sl
 800811a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800811e:	4620      	mov	r0, r4
 8008120:	4629      	mov	r1, r5
 8008122:	f7f8 fbab 	bl	800087c <__aeabi_ddiv>
 8008126:	f7f8 fd2f 	bl	8000b88 <__aeabi_d2iz>
 800812a:	4680      	mov	r8, r0
 800812c:	f7f8 fa12 	bl	8000554 <__aeabi_i2d>
 8008130:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008134:	f7f8 fa78 	bl	8000628 <__aeabi_dmul>
 8008138:	4602      	mov	r2, r0
 800813a:	460b      	mov	r3, r1
 800813c:	4620      	mov	r0, r4
 800813e:	4629      	mov	r1, r5
 8008140:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8008144:	f7f8 f8b8 	bl	80002b8 <__aeabi_dsub>
 8008148:	f806 4b01 	strb.w	r4, [r6], #1
 800814c:	9d07      	ldr	r5, [sp, #28]
 800814e:	eba6 040a 	sub.w	r4, r6, sl
 8008152:	42a5      	cmp	r5, r4
 8008154:	4602      	mov	r2, r0
 8008156:	460b      	mov	r3, r1
 8008158:	f040 8117 	bne.w	800838a <_dtoa_r+0x6e2>
 800815c:	f7f8 f8ae 	bl	80002bc <__adddf3>
 8008160:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008164:	4604      	mov	r4, r0
 8008166:	460d      	mov	r5, r1
 8008168:	f7f8 fcee 	bl	8000b48 <__aeabi_dcmpgt>
 800816c:	2800      	cmp	r0, #0
 800816e:	f040 80f9 	bne.w	8008364 <_dtoa_r+0x6bc>
 8008172:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008176:	4620      	mov	r0, r4
 8008178:	4629      	mov	r1, r5
 800817a:	f7f8 fcbd 	bl	8000af8 <__aeabi_dcmpeq>
 800817e:	b118      	cbz	r0, 8008188 <_dtoa_r+0x4e0>
 8008180:	f018 0f01 	tst.w	r8, #1
 8008184:	f040 80ee 	bne.w	8008364 <_dtoa_r+0x6bc>
 8008188:	4649      	mov	r1, r9
 800818a:	4658      	mov	r0, fp
 800818c:	f000 fc90 	bl	8008ab0 <_Bfree>
 8008190:	2300      	movs	r3, #0
 8008192:	7033      	strb	r3, [r6, #0]
 8008194:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8008196:	3701      	adds	r7, #1
 8008198:	601f      	str	r7, [r3, #0]
 800819a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800819c:	2b00      	cmp	r3, #0
 800819e:	f000 831d 	beq.w	80087dc <_dtoa_r+0xb34>
 80081a2:	601e      	str	r6, [r3, #0]
 80081a4:	e31a      	b.n	80087dc <_dtoa_r+0xb34>
 80081a6:	07e2      	lsls	r2, r4, #31
 80081a8:	d505      	bpl.n	80081b6 <_dtoa_r+0x50e>
 80081aa:	e9d5 2300 	ldrd	r2, r3, [r5]
 80081ae:	f7f8 fa3b 	bl	8000628 <__aeabi_dmul>
 80081b2:	3601      	adds	r6, #1
 80081b4:	2301      	movs	r3, #1
 80081b6:	1064      	asrs	r4, r4, #1
 80081b8:	3508      	adds	r5, #8
 80081ba:	e73f      	b.n	800803c <_dtoa_r+0x394>
 80081bc:	2602      	movs	r6, #2
 80081be:	e742      	b.n	8008046 <_dtoa_r+0x39e>
 80081c0:	9c07      	ldr	r4, [sp, #28]
 80081c2:	9704      	str	r7, [sp, #16]
 80081c4:	e761      	b.n	800808a <_dtoa_r+0x3e2>
 80081c6:	4b27      	ldr	r3, [pc, #156]	@ (8008264 <_dtoa_r+0x5bc>)
 80081c8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80081ca:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80081ce:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80081d2:	4454      	add	r4, sl
 80081d4:	2900      	cmp	r1, #0
 80081d6:	d053      	beq.n	8008280 <_dtoa_r+0x5d8>
 80081d8:	4928      	ldr	r1, [pc, #160]	@ (800827c <_dtoa_r+0x5d4>)
 80081da:	2000      	movs	r0, #0
 80081dc:	f7f8 fb4e 	bl	800087c <__aeabi_ddiv>
 80081e0:	4633      	mov	r3, r6
 80081e2:	462a      	mov	r2, r5
 80081e4:	f7f8 f868 	bl	80002b8 <__aeabi_dsub>
 80081e8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80081ec:	4656      	mov	r6, sl
 80081ee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80081f2:	f7f8 fcc9 	bl	8000b88 <__aeabi_d2iz>
 80081f6:	4605      	mov	r5, r0
 80081f8:	f7f8 f9ac 	bl	8000554 <__aeabi_i2d>
 80081fc:	4602      	mov	r2, r0
 80081fe:	460b      	mov	r3, r1
 8008200:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008204:	f7f8 f858 	bl	80002b8 <__aeabi_dsub>
 8008208:	3530      	adds	r5, #48	@ 0x30
 800820a:	4602      	mov	r2, r0
 800820c:	460b      	mov	r3, r1
 800820e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008212:	f806 5b01 	strb.w	r5, [r6], #1
 8008216:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800821a:	f7f8 fc77 	bl	8000b0c <__aeabi_dcmplt>
 800821e:	2800      	cmp	r0, #0
 8008220:	d171      	bne.n	8008306 <_dtoa_r+0x65e>
 8008222:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008226:	4911      	ldr	r1, [pc, #68]	@ (800826c <_dtoa_r+0x5c4>)
 8008228:	2000      	movs	r0, #0
 800822a:	f7f8 f845 	bl	80002b8 <__aeabi_dsub>
 800822e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008232:	f7f8 fc6b 	bl	8000b0c <__aeabi_dcmplt>
 8008236:	2800      	cmp	r0, #0
 8008238:	f040 8095 	bne.w	8008366 <_dtoa_r+0x6be>
 800823c:	42a6      	cmp	r6, r4
 800823e:	f43f af50 	beq.w	80080e2 <_dtoa_r+0x43a>
 8008242:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8008246:	4b0a      	ldr	r3, [pc, #40]	@ (8008270 <_dtoa_r+0x5c8>)
 8008248:	2200      	movs	r2, #0
 800824a:	f7f8 f9ed 	bl	8000628 <__aeabi_dmul>
 800824e:	4b08      	ldr	r3, [pc, #32]	@ (8008270 <_dtoa_r+0x5c8>)
 8008250:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008254:	2200      	movs	r2, #0
 8008256:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800825a:	f7f8 f9e5 	bl	8000628 <__aeabi_dmul>
 800825e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008262:	e7c4      	b.n	80081ee <_dtoa_r+0x546>
 8008264:	0800bca0 	.word	0x0800bca0
 8008268:	0800bc78 	.word	0x0800bc78
 800826c:	3ff00000 	.word	0x3ff00000
 8008270:	40240000 	.word	0x40240000
 8008274:	401c0000 	.word	0x401c0000
 8008278:	40140000 	.word	0x40140000
 800827c:	3fe00000 	.word	0x3fe00000
 8008280:	4631      	mov	r1, r6
 8008282:	4628      	mov	r0, r5
 8008284:	f7f8 f9d0 	bl	8000628 <__aeabi_dmul>
 8008288:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800828c:	9415      	str	r4, [sp, #84]	@ 0x54
 800828e:	4656      	mov	r6, sl
 8008290:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008294:	f7f8 fc78 	bl	8000b88 <__aeabi_d2iz>
 8008298:	4605      	mov	r5, r0
 800829a:	f7f8 f95b 	bl	8000554 <__aeabi_i2d>
 800829e:	4602      	mov	r2, r0
 80082a0:	460b      	mov	r3, r1
 80082a2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80082a6:	f7f8 f807 	bl	80002b8 <__aeabi_dsub>
 80082aa:	3530      	adds	r5, #48	@ 0x30
 80082ac:	f806 5b01 	strb.w	r5, [r6], #1
 80082b0:	4602      	mov	r2, r0
 80082b2:	460b      	mov	r3, r1
 80082b4:	42a6      	cmp	r6, r4
 80082b6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80082ba:	f04f 0200 	mov.w	r2, #0
 80082be:	d124      	bne.n	800830a <_dtoa_r+0x662>
 80082c0:	4bac      	ldr	r3, [pc, #688]	@ (8008574 <_dtoa_r+0x8cc>)
 80082c2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80082c6:	f7f7 fff9 	bl	80002bc <__adddf3>
 80082ca:	4602      	mov	r2, r0
 80082cc:	460b      	mov	r3, r1
 80082ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80082d2:	f7f8 fc39 	bl	8000b48 <__aeabi_dcmpgt>
 80082d6:	2800      	cmp	r0, #0
 80082d8:	d145      	bne.n	8008366 <_dtoa_r+0x6be>
 80082da:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80082de:	49a5      	ldr	r1, [pc, #660]	@ (8008574 <_dtoa_r+0x8cc>)
 80082e0:	2000      	movs	r0, #0
 80082e2:	f7f7 ffe9 	bl	80002b8 <__aeabi_dsub>
 80082e6:	4602      	mov	r2, r0
 80082e8:	460b      	mov	r3, r1
 80082ea:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80082ee:	f7f8 fc0d 	bl	8000b0c <__aeabi_dcmplt>
 80082f2:	2800      	cmp	r0, #0
 80082f4:	f43f aef5 	beq.w	80080e2 <_dtoa_r+0x43a>
 80082f8:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 80082fa:	1e73      	subs	r3, r6, #1
 80082fc:	9315      	str	r3, [sp, #84]	@ 0x54
 80082fe:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008302:	2b30      	cmp	r3, #48	@ 0x30
 8008304:	d0f8      	beq.n	80082f8 <_dtoa_r+0x650>
 8008306:	9f04      	ldr	r7, [sp, #16]
 8008308:	e73e      	b.n	8008188 <_dtoa_r+0x4e0>
 800830a:	4b9b      	ldr	r3, [pc, #620]	@ (8008578 <_dtoa_r+0x8d0>)
 800830c:	f7f8 f98c 	bl	8000628 <__aeabi_dmul>
 8008310:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008314:	e7bc      	b.n	8008290 <_dtoa_r+0x5e8>
 8008316:	d10c      	bne.n	8008332 <_dtoa_r+0x68a>
 8008318:	4b98      	ldr	r3, [pc, #608]	@ (800857c <_dtoa_r+0x8d4>)
 800831a:	2200      	movs	r2, #0
 800831c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008320:	f7f8 f982 	bl	8000628 <__aeabi_dmul>
 8008324:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008328:	f7f8 fc04 	bl	8000b34 <__aeabi_dcmpge>
 800832c:	2800      	cmp	r0, #0
 800832e:	f000 8157 	beq.w	80085e0 <_dtoa_r+0x938>
 8008332:	2400      	movs	r4, #0
 8008334:	4625      	mov	r5, r4
 8008336:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008338:	43db      	mvns	r3, r3
 800833a:	9304      	str	r3, [sp, #16]
 800833c:	4656      	mov	r6, sl
 800833e:	2700      	movs	r7, #0
 8008340:	4621      	mov	r1, r4
 8008342:	4658      	mov	r0, fp
 8008344:	f000 fbb4 	bl	8008ab0 <_Bfree>
 8008348:	2d00      	cmp	r5, #0
 800834a:	d0dc      	beq.n	8008306 <_dtoa_r+0x65e>
 800834c:	b12f      	cbz	r7, 800835a <_dtoa_r+0x6b2>
 800834e:	42af      	cmp	r7, r5
 8008350:	d003      	beq.n	800835a <_dtoa_r+0x6b2>
 8008352:	4639      	mov	r1, r7
 8008354:	4658      	mov	r0, fp
 8008356:	f000 fbab 	bl	8008ab0 <_Bfree>
 800835a:	4629      	mov	r1, r5
 800835c:	4658      	mov	r0, fp
 800835e:	f000 fba7 	bl	8008ab0 <_Bfree>
 8008362:	e7d0      	b.n	8008306 <_dtoa_r+0x65e>
 8008364:	9704      	str	r7, [sp, #16]
 8008366:	4633      	mov	r3, r6
 8008368:	461e      	mov	r6, r3
 800836a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800836e:	2a39      	cmp	r2, #57	@ 0x39
 8008370:	d107      	bne.n	8008382 <_dtoa_r+0x6da>
 8008372:	459a      	cmp	sl, r3
 8008374:	d1f8      	bne.n	8008368 <_dtoa_r+0x6c0>
 8008376:	9a04      	ldr	r2, [sp, #16]
 8008378:	3201      	adds	r2, #1
 800837a:	9204      	str	r2, [sp, #16]
 800837c:	2230      	movs	r2, #48	@ 0x30
 800837e:	f88a 2000 	strb.w	r2, [sl]
 8008382:	781a      	ldrb	r2, [r3, #0]
 8008384:	3201      	adds	r2, #1
 8008386:	701a      	strb	r2, [r3, #0]
 8008388:	e7bd      	b.n	8008306 <_dtoa_r+0x65e>
 800838a:	4b7b      	ldr	r3, [pc, #492]	@ (8008578 <_dtoa_r+0x8d0>)
 800838c:	2200      	movs	r2, #0
 800838e:	f7f8 f94b 	bl	8000628 <__aeabi_dmul>
 8008392:	2200      	movs	r2, #0
 8008394:	2300      	movs	r3, #0
 8008396:	4604      	mov	r4, r0
 8008398:	460d      	mov	r5, r1
 800839a:	f7f8 fbad 	bl	8000af8 <__aeabi_dcmpeq>
 800839e:	2800      	cmp	r0, #0
 80083a0:	f43f aebb 	beq.w	800811a <_dtoa_r+0x472>
 80083a4:	e6f0      	b.n	8008188 <_dtoa_r+0x4e0>
 80083a6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80083a8:	2a00      	cmp	r2, #0
 80083aa:	f000 80db 	beq.w	8008564 <_dtoa_r+0x8bc>
 80083ae:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80083b0:	2a01      	cmp	r2, #1
 80083b2:	f300 80bf 	bgt.w	8008534 <_dtoa_r+0x88c>
 80083b6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80083b8:	2a00      	cmp	r2, #0
 80083ba:	f000 80b7 	beq.w	800852c <_dtoa_r+0x884>
 80083be:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80083c2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80083c4:	4646      	mov	r6, r8
 80083c6:	9a08      	ldr	r2, [sp, #32]
 80083c8:	2101      	movs	r1, #1
 80083ca:	441a      	add	r2, r3
 80083cc:	4658      	mov	r0, fp
 80083ce:	4498      	add	r8, r3
 80083d0:	9208      	str	r2, [sp, #32]
 80083d2:	f000 fc6b 	bl	8008cac <__i2b>
 80083d6:	4605      	mov	r5, r0
 80083d8:	b15e      	cbz	r6, 80083f2 <_dtoa_r+0x74a>
 80083da:	9b08      	ldr	r3, [sp, #32]
 80083dc:	2b00      	cmp	r3, #0
 80083de:	dd08      	ble.n	80083f2 <_dtoa_r+0x74a>
 80083e0:	42b3      	cmp	r3, r6
 80083e2:	9a08      	ldr	r2, [sp, #32]
 80083e4:	bfa8      	it	ge
 80083e6:	4633      	movge	r3, r6
 80083e8:	eba8 0803 	sub.w	r8, r8, r3
 80083ec:	1af6      	subs	r6, r6, r3
 80083ee:	1ad3      	subs	r3, r2, r3
 80083f0:	9308      	str	r3, [sp, #32]
 80083f2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80083f4:	b1f3      	cbz	r3, 8008434 <_dtoa_r+0x78c>
 80083f6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	f000 80b7 	beq.w	800856c <_dtoa_r+0x8c4>
 80083fe:	b18c      	cbz	r4, 8008424 <_dtoa_r+0x77c>
 8008400:	4629      	mov	r1, r5
 8008402:	4622      	mov	r2, r4
 8008404:	4658      	mov	r0, fp
 8008406:	f000 fd11 	bl	8008e2c <__pow5mult>
 800840a:	464a      	mov	r2, r9
 800840c:	4601      	mov	r1, r0
 800840e:	4605      	mov	r5, r0
 8008410:	4658      	mov	r0, fp
 8008412:	f000 fc61 	bl	8008cd8 <__multiply>
 8008416:	4649      	mov	r1, r9
 8008418:	9004      	str	r0, [sp, #16]
 800841a:	4658      	mov	r0, fp
 800841c:	f000 fb48 	bl	8008ab0 <_Bfree>
 8008420:	9b04      	ldr	r3, [sp, #16]
 8008422:	4699      	mov	r9, r3
 8008424:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008426:	1b1a      	subs	r2, r3, r4
 8008428:	d004      	beq.n	8008434 <_dtoa_r+0x78c>
 800842a:	4649      	mov	r1, r9
 800842c:	4658      	mov	r0, fp
 800842e:	f000 fcfd 	bl	8008e2c <__pow5mult>
 8008432:	4681      	mov	r9, r0
 8008434:	2101      	movs	r1, #1
 8008436:	4658      	mov	r0, fp
 8008438:	f000 fc38 	bl	8008cac <__i2b>
 800843c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800843e:	4604      	mov	r4, r0
 8008440:	2b00      	cmp	r3, #0
 8008442:	f000 81cf 	beq.w	80087e4 <_dtoa_r+0xb3c>
 8008446:	461a      	mov	r2, r3
 8008448:	4601      	mov	r1, r0
 800844a:	4658      	mov	r0, fp
 800844c:	f000 fcee 	bl	8008e2c <__pow5mult>
 8008450:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008452:	2b01      	cmp	r3, #1
 8008454:	4604      	mov	r4, r0
 8008456:	f300 8095 	bgt.w	8008584 <_dtoa_r+0x8dc>
 800845a:	9b02      	ldr	r3, [sp, #8]
 800845c:	2b00      	cmp	r3, #0
 800845e:	f040 8087 	bne.w	8008570 <_dtoa_r+0x8c8>
 8008462:	9b03      	ldr	r3, [sp, #12]
 8008464:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008468:	2b00      	cmp	r3, #0
 800846a:	f040 8089 	bne.w	8008580 <_dtoa_r+0x8d8>
 800846e:	9b03      	ldr	r3, [sp, #12]
 8008470:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008474:	0d1b      	lsrs	r3, r3, #20
 8008476:	051b      	lsls	r3, r3, #20
 8008478:	b12b      	cbz	r3, 8008486 <_dtoa_r+0x7de>
 800847a:	9b08      	ldr	r3, [sp, #32]
 800847c:	3301      	adds	r3, #1
 800847e:	9308      	str	r3, [sp, #32]
 8008480:	f108 0801 	add.w	r8, r8, #1
 8008484:	2301      	movs	r3, #1
 8008486:	930a      	str	r3, [sp, #40]	@ 0x28
 8008488:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800848a:	2b00      	cmp	r3, #0
 800848c:	f000 81b0 	beq.w	80087f0 <_dtoa_r+0xb48>
 8008490:	6923      	ldr	r3, [r4, #16]
 8008492:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008496:	6918      	ldr	r0, [r3, #16]
 8008498:	f000 fbbc 	bl	8008c14 <__hi0bits>
 800849c:	f1c0 0020 	rsb	r0, r0, #32
 80084a0:	9b08      	ldr	r3, [sp, #32]
 80084a2:	4418      	add	r0, r3
 80084a4:	f010 001f 	ands.w	r0, r0, #31
 80084a8:	d077      	beq.n	800859a <_dtoa_r+0x8f2>
 80084aa:	f1c0 0320 	rsb	r3, r0, #32
 80084ae:	2b04      	cmp	r3, #4
 80084b0:	dd6b      	ble.n	800858a <_dtoa_r+0x8e2>
 80084b2:	9b08      	ldr	r3, [sp, #32]
 80084b4:	f1c0 001c 	rsb	r0, r0, #28
 80084b8:	4403      	add	r3, r0
 80084ba:	4480      	add	r8, r0
 80084bc:	4406      	add	r6, r0
 80084be:	9308      	str	r3, [sp, #32]
 80084c0:	f1b8 0f00 	cmp.w	r8, #0
 80084c4:	dd05      	ble.n	80084d2 <_dtoa_r+0x82a>
 80084c6:	4649      	mov	r1, r9
 80084c8:	4642      	mov	r2, r8
 80084ca:	4658      	mov	r0, fp
 80084cc:	f000 fd08 	bl	8008ee0 <__lshift>
 80084d0:	4681      	mov	r9, r0
 80084d2:	9b08      	ldr	r3, [sp, #32]
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	dd05      	ble.n	80084e4 <_dtoa_r+0x83c>
 80084d8:	4621      	mov	r1, r4
 80084da:	461a      	mov	r2, r3
 80084dc:	4658      	mov	r0, fp
 80084de:	f000 fcff 	bl	8008ee0 <__lshift>
 80084e2:	4604      	mov	r4, r0
 80084e4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d059      	beq.n	800859e <_dtoa_r+0x8f6>
 80084ea:	4621      	mov	r1, r4
 80084ec:	4648      	mov	r0, r9
 80084ee:	f000 fd63 	bl	8008fb8 <__mcmp>
 80084f2:	2800      	cmp	r0, #0
 80084f4:	da53      	bge.n	800859e <_dtoa_r+0x8f6>
 80084f6:	1e7b      	subs	r3, r7, #1
 80084f8:	9304      	str	r3, [sp, #16]
 80084fa:	4649      	mov	r1, r9
 80084fc:	2300      	movs	r3, #0
 80084fe:	220a      	movs	r2, #10
 8008500:	4658      	mov	r0, fp
 8008502:	f000 faf7 	bl	8008af4 <__multadd>
 8008506:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008508:	4681      	mov	r9, r0
 800850a:	2b00      	cmp	r3, #0
 800850c:	f000 8172 	beq.w	80087f4 <_dtoa_r+0xb4c>
 8008510:	2300      	movs	r3, #0
 8008512:	4629      	mov	r1, r5
 8008514:	220a      	movs	r2, #10
 8008516:	4658      	mov	r0, fp
 8008518:	f000 faec 	bl	8008af4 <__multadd>
 800851c:	9b00      	ldr	r3, [sp, #0]
 800851e:	2b00      	cmp	r3, #0
 8008520:	4605      	mov	r5, r0
 8008522:	dc67      	bgt.n	80085f4 <_dtoa_r+0x94c>
 8008524:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008526:	2b02      	cmp	r3, #2
 8008528:	dc41      	bgt.n	80085ae <_dtoa_r+0x906>
 800852a:	e063      	b.n	80085f4 <_dtoa_r+0x94c>
 800852c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800852e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8008532:	e746      	b.n	80083c2 <_dtoa_r+0x71a>
 8008534:	9b07      	ldr	r3, [sp, #28]
 8008536:	1e5c      	subs	r4, r3, #1
 8008538:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800853a:	42a3      	cmp	r3, r4
 800853c:	bfbf      	itttt	lt
 800853e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8008540:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8008542:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8008544:	1ae3      	sublt	r3, r4, r3
 8008546:	bfb4      	ite	lt
 8008548:	18d2      	addlt	r2, r2, r3
 800854a:	1b1c      	subge	r4, r3, r4
 800854c:	9b07      	ldr	r3, [sp, #28]
 800854e:	bfbc      	itt	lt
 8008550:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8008552:	2400      	movlt	r4, #0
 8008554:	2b00      	cmp	r3, #0
 8008556:	bfb5      	itete	lt
 8008558:	eba8 0603 	sublt.w	r6, r8, r3
 800855c:	9b07      	ldrge	r3, [sp, #28]
 800855e:	2300      	movlt	r3, #0
 8008560:	4646      	movge	r6, r8
 8008562:	e730      	b.n	80083c6 <_dtoa_r+0x71e>
 8008564:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8008566:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8008568:	4646      	mov	r6, r8
 800856a:	e735      	b.n	80083d8 <_dtoa_r+0x730>
 800856c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800856e:	e75c      	b.n	800842a <_dtoa_r+0x782>
 8008570:	2300      	movs	r3, #0
 8008572:	e788      	b.n	8008486 <_dtoa_r+0x7de>
 8008574:	3fe00000 	.word	0x3fe00000
 8008578:	40240000 	.word	0x40240000
 800857c:	40140000 	.word	0x40140000
 8008580:	9b02      	ldr	r3, [sp, #8]
 8008582:	e780      	b.n	8008486 <_dtoa_r+0x7de>
 8008584:	2300      	movs	r3, #0
 8008586:	930a      	str	r3, [sp, #40]	@ 0x28
 8008588:	e782      	b.n	8008490 <_dtoa_r+0x7e8>
 800858a:	d099      	beq.n	80084c0 <_dtoa_r+0x818>
 800858c:	9a08      	ldr	r2, [sp, #32]
 800858e:	331c      	adds	r3, #28
 8008590:	441a      	add	r2, r3
 8008592:	4498      	add	r8, r3
 8008594:	441e      	add	r6, r3
 8008596:	9208      	str	r2, [sp, #32]
 8008598:	e792      	b.n	80084c0 <_dtoa_r+0x818>
 800859a:	4603      	mov	r3, r0
 800859c:	e7f6      	b.n	800858c <_dtoa_r+0x8e4>
 800859e:	9b07      	ldr	r3, [sp, #28]
 80085a0:	9704      	str	r7, [sp, #16]
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	dc20      	bgt.n	80085e8 <_dtoa_r+0x940>
 80085a6:	9300      	str	r3, [sp, #0]
 80085a8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80085aa:	2b02      	cmp	r3, #2
 80085ac:	dd1e      	ble.n	80085ec <_dtoa_r+0x944>
 80085ae:	9b00      	ldr	r3, [sp, #0]
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	f47f aec0 	bne.w	8008336 <_dtoa_r+0x68e>
 80085b6:	4621      	mov	r1, r4
 80085b8:	2205      	movs	r2, #5
 80085ba:	4658      	mov	r0, fp
 80085bc:	f000 fa9a 	bl	8008af4 <__multadd>
 80085c0:	4601      	mov	r1, r0
 80085c2:	4604      	mov	r4, r0
 80085c4:	4648      	mov	r0, r9
 80085c6:	f000 fcf7 	bl	8008fb8 <__mcmp>
 80085ca:	2800      	cmp	r0, #0
 80085cc:	f77f aeb3 	ble.w	8008336 <_dtoa_r+0x68e>
 80085d0:	4656      	mov	r6, sl
 80085d2:	2331      	movs	r3, #49	@ 0x31
 80085d4:	f806 3b01 	strb.w	r3, [r6], #1
 80085d8:	9b04      	ldr	r3, [sp, #16]
 80085da:	3301      	adds	r3, #1
 80085dc:	9304      	str	r3, [sp, #16]
 80085de:	e6ae      	b.n	800833e <_dtoa_r+0x696>
 80085e0:	9c07      	ldr	r4, [sp, #28]
 80085e2:	9704      	str	r7, [sp, #16]
 80085e4:	4625      	mov	r5, r4
 80085e6:	e7f3      	b.n	80085d0 <_dtoa_r+0x928>
 80085e8:	9b07      	ldr	r3, [sp, #28]
 80085ea:	9300      	str	r3, [sp, #0]
 80085ec:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	f000 8104 	beq.w	80087fc <_dtoa_r+0xb54>
 80085f4:	2e00      	cmp	r6, #0
 80085f6:	dd05      	ble.n	8008604 <_dtoa_r+0x95c>
 80085f8:	4629      	mov	r1, r5
 80085fa:	4632      	mov	r2, r6
 80085fc:	4658      	mov	r0, fp
 80085fe:	f000 fc6f 	bl	8008ee0 <__lshift>
 8008602:	4605      	mov	r5, r0
 8008604:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008606:	2b00      	cmp	r3, #0
 8008608:	d05a      	beq.n	80086c0 <_dtoa_r+0xa18>
 800860a:	6869      	ldr	r1, [r5, #4]
 800860c:	4658      	mov	r0, fp
 800860e:	f000 fa0f 	bl	8008a30 <_Balloc>
 8008612:	4606      	mov	r6, r0
 8008614:	b928      	cbnz	r0, 8008622 <_dtoa_r+0x97a>
 8008616:	4b84      	ldr	r3, [pc, #528]	@ (8008828 <_dtoa_r+0xb80>)
 8008618:	4602      	mov	r2, r0
 800861a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800861e:	f7ff bb5a 	b.w	8007cd6 <_dtoa_r+0x2e>
 8008622:	692a      	ldr	r2, [r5, #16]
 8008624:	3202      	adds	r2, #2
 8008626:	0092      	lsls	r2, r2, #2
 8008628:	f105 010c 	add.w	r1, r5, #12
 800862c:	300c      	adds	r0, #12
 800862e:	f002 fcc9 	bl	800afc4 <memcpy>
 8008632:	2201      	movs	r2, #1
 8008634:	4631      	mov	r1, r6
 8008636:	4658      	mov	r0, fp
 8008638:	f000 fc52 	bl	8008ee0 <__lshift>
 800863c:	f10a 0301 	add.w	r3, sl, #1
 8008640:	9307      	str	r3, [sp, #28]
 8008642:	9b00      	ldr	r3, [sp, #0]
 8008644:	4453      	add	r3, sl
 8008646:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008648:	9b02      	ldr	r3, [sp, #8]
 800864a:	f003 0301 	and.w	r3, r3, #1
 800864e:	462f      	mov	r7, r5
 8008650:	930a      	str	r3, [sp, #40]	@ 0x28
 8008652:	4605      	mov	r5, r0
 8008654:	9b07      	ldr	r3, [sp, #28]
 8008656:	4621      	mov	r1, r4
 8008658:	3b01      	subs	r3, #1
 800865a:	4648      	mov	r0, r9
 800865c:	9300      	str	r3, [sp, #0]
 800865e:	f7ff fa99 	bl	8007b94 <quorem>
 8008662:	4639      	mov	r1, r7
 8008664:	9002      	str	r0, [sp, #8]
 8008666:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800866a:	4648      	mov	r0, r9
 800866c:	f000 fca4 	bl	8008fb8 <__mcmp>
 8008670:	462a      	mov	r2, r5
 8008672:	9008      	str	r0, [sp, #32]
 8008674:	4621      	mov	r1, r4
 8008676:	4658      	mov	r0, fp
 8008678:	f000 fcba 	bl	8008ff0 <__mdiff>
 800867c:	68c2      	ldr	r2, [r0, #12]
 800867e:	4606      	mov	r6, r0
 8008680:	bb02      	cbnz	r2, 80086c4 <_dtoa_r+0xa1c>
 8008682:	4601      	mov	r1, r0
 8008684:	4648      	mov	r0, r9
 8008686:	f000 fc97 	bl	8008fb8 <__mcmp>
 800868a:	4602      	mov	r2, r0
 800868c:	4631      	mov	r1, r6
 800868e:	4658      	mov	r0, fp
 8008690:	920e      	str	r2, [sp, #56]	@ 0x38
 8008692:	f000 fa0d 	bl	8008ab0 <_Bfree>
 8008696:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008698:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800869a:	9e07      	ldr	r6, [sp, #28]
 800869c:	ea43 0102 	orr.w	r1, r3, r2
 80086a0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80086a2:	4319      	orrs	r1, r3
 80086a4:	d110      	bne.n	80086c8 <_dtoa_r+0xa20>
 80086a6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80086aa:	d029      	beq.n	8008700 <_dtoa_r+0xa58>
 80086ac:	9b08      	ldr	r3, [sp, #32]
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	dd02      	ble.n	80086b8 <_dtoa_r+0xa10>
 80086b2:	9b02      	ldr	r3, [sp, #8]
 80086b4:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 80086b8:	9b00      	ldr	r3, [sp, #0]
 80086ba:	f883 8000 	strb.w	r8, [r3]
 80086be:	e63f      	b.n	8008340 <_dtoa_r+0x698>
 80086c0:	4628      	mov	r0, r5
 80086c2:	e7bb      	b.n	800863c <_dtoa_r+0x994>
 80086c4:	2201      	movs	r2, #1
 80086c6:	e7e1      	b.n	800868c <_dtoa_r+0x9e4>
 80086c8:	9b08      	ldr	r3, [sp, #32]
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	db04      	blt.n	80086d8 <_dtoa_r+0xa30>
 80086ce:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80086d0:	430b      	orrs	r3, r1
 80086d2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80086d4:	430b      	orrs	r3, r1
 80086d6:	d120      	bne.n	800871a <_dtoa_r+0xa72>
 80086d8:	2a00      	cmp	r2, #0
 80086da:	dded      	ble.n	80086b8 <_dtoa_r+0xa10>
 80086dc:	4649      	mov	r1, r9
 80086de:	2201      	movs	r2, #1
 80086e0:	4658      	mov	r0, fp
 80086e2:	f000 fbfd 	bl	8008ee0 <__lshift>
 80086e6:	4621      	mov	r1, r4
 80086e8:	4681      	mov	r9, r0
 80086ea:	f000 fc65 	bl	8008fb8 <__mcmp>
 80086ee:	2800      	cmp	r0, #0
 80086f0:	dc03      	bgt.n	80086fa <_dtoa_r+0xa52>
 80086f2:	d1e1      	bne.n	80086b8 <_dtoa_r+0xa10>
 80086f4:	f018 0f01 	tst.w	r8, #1
 80086f8:	d0de      	beq.n	80086b8 <_dtoa_r+0xa10>
 80086fa:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80086fe:	d1d8      	bne.n	80086b2 <_dtoa_r+0xa0a>
 8008700:	9a00      	ldr	r2, [sp, #0]
 8008702:	2339      	movs	r3, #57	@ 0x39
 8008704:	7013      	strb	r3, [r2, #0]
 8008706:	4633      	mov	r3, r6
 8008708:	461e      	mov	r6, r3
 800870a:	3b01      	subs	r3, #1
 800870c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8008710:	2a39      	cmp	r2, #57	@ 0x39
 8008712:	d052      	beq.n	80087ba <_dtoa_r+0xb12>
 8008714:	3201      	adds	r2, #1
 8008716:	701a      	strb	r2, [r3, #0]
 8008718:	e612      	b.n	8008340 <_dtoa_r+0x698>
 800871a:	2a00      	cmp	r2, #0
 800871c:	dd07      	ble.n	800872e <_dtoa_r+0xa86>
 800871e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008722:	d0ed      	beq.n	8008700 <_dtoa_r+0xa58>
 8008724:	9a00      	ldr	r2, [sp, #0]
 8008726:	f108 0301 	add.w	r3, r8, #1
 800872a:	7013      	strb	r3, [r2, #0]
 800872c:	e608      	b.n	8008340 <_dtoa_r+0x698>
 800872e:	9b07      	ldr	r3, [sp, #28]
 8008730:	9a07      	ldr	r2, [sp, #28]
 8008732:	f803 8c01 	strb.w	r8, [r3, #-1]
 8008736:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008738:	4293      	cmp	r3, r2
 800873a:	d028      	beq.n	800878e <_dtoa_r+0xae6>
 800873c:	4649      	mov	r1, r9
 800873e:	2300      	movs	r3, #0
 8008740:	220a      	movs	r2, #10
 8008742:	4658      	mov	r0, fp
 8008744:	f000 f9d6 	bl	8008af4 <__multadd>
 8008748:	42af      	cmp	r7, r5
 800874a:	4681      	mov	r9, r0
 800874c:	f04f 0300 	mov.w	r3, #0
 8008750:	f04f 020a 	mov.w	r2, #10
 8008754:	4639      	mov	r1, r7
 8008756:	4658      	mov	r0, fp
 8008758:	d107      	bne.n	800876a <_dtoa_r+0xac2>
 800875a:	f000 f9cb 	bl	8008af4 <__multadd>
 800875e:	4607      	mov	r7, r0
 8008760:	4605      	mov	r5, r0
 8008762:	9b07      	ldr	r3, [sp, #28]
 8008764:	3301      	adds	r3, #1
 8008766:	9307      	str	r3, [sp, #28]
 8008768:	e774      	b.n	8008654 <_dtoa_r+0x9ac>
 800876a:	f000 f9c3 	bl	8008af4 <__multadd>
 800876e:	4629      	mov	r1, r5
 8008770:	4607      	mov	r7, r0
 8008772:	2300      	movs	r3, #0
 8008774:	220a      	movs	r2, #10
 8008776:	4658      	mov	r0, fp
 8008778:	f000 f9bc 	bl	8008af4 <__multadd>
 800877c:	4605      	mov	r5, r0
 800877e:	e7f0      	b.n	8008762 <_dtoa_r+0xaba>
 8008780:	9b00      	ldr	r3, [sp, #0]
 8008782:	2b00      	cmp	r3, #0
 8008784:	bfcc      	ite	gt
 8008786:	461e      	movgt	r6, r3
 8008788:	2601      	movle	r6, #1
 800878a:	4456      	add	r6, sl
 800878c:	2700      	movs	r7, #0
 800878e:	4649      	mov	r1, r9
 8008790:	2201      	movs	r2, #1
 8008792:	4658      	mov	r0, fp
 8008794:	f000 fba4 	bl	8008ee0 <__lshift>
 8008798:	4621      	mov	r1, r4
 800879a:	4681      	mov	r9, r0
 800879c:	f000 fc0c 	bl	8008fb8 <__mcmp>
 80087a0:	2800      	cmp	r0, #0
 80087a2:	dcb0      	bgt.n	8008706 <_dtoa_r+0xa5e>
 80087a4:	d102      	bne.n	80087ac <_dtoa_r+0xb04>
 80087a6:	f018 0f01 	tst.w	r8, #1
 80087aa:	d1ac      	bne.n	8008706 <_dtoa_r+0xa5e>
 80087ac:	4633      	mov	r3, r6
 80087ae:	461e      	mov	r6, r3
 80087b0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80087b4:	2a30      	cmp	r2, #48	@ 0x30
 80087b6:	d0fa      	beq.n	80087ae <_dtoa_r+0xb06>
 80087b8:	e5c2      	b.n	8008340 <_dtoa_r+0x698>
 80087ba:	459a      	cmp	sl, r3
 80087bc:	d1a4      	bne.n	8008708 <_dtoa_r+0xa60>
 80087be:	9b04      	ldr	r3, [sp, #16]
 80087c0:	3301      	adds	r3, #1
 80087c2:	9304      	str	r3, [sp, #16]
 80087c4:	2331      	movs	r3, #49	@ 0x31
 80087c6:	f88a 3000 	strb.w	r3, [sl]
 80087ca:	e5b9      	b.n	8008340 <_dtoa_r+0x698>
 80087cc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80087ce:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800882c <_dtoa_r+0xb84>
 80087d2:	b11b      	cbz	r3, 80087dc <_dtoa_r+0xb34>
 80087d4:	f10a 0308 	add.w	r3, sl, #8
 80087d8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80087da:	6013      	str	r3, [r2, #0]
 80087dc:	4650      	mov	r0, sl
 80087de:	b019      	add	sp, #100	@ 0x64
 80087e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80087e4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80087e6:	2b01      	cmp	r3, #1
 80087e8:	f77f ae37 	ble.w	800845a <_dtoa_r+0x7b2>
 80087ec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80087ee:	930a      	str	r3, [sp, #40]	@ 0x28
 80087f0:	2001      	movs	r0, #1
 80087f2:	e655      	b.n	80084a0 <_dtoa_r+0x7f8>
 80087f4:	9b00      	ldr	r3, [sp, #0]
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	f77f aed6 	ble.w	80085a8 <_dtoa_r+0x900>
 80087fc:	4656      	mov	r6, sl
 80087fe:	4621      	mov	r1, r4
 8008800:	4648      	mov	r0, r9
 8008802:	f7ff f9c7 	bl	8007b94 <quorem>
 8008806:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800880a:	f806 8b01 	strb.w	r8, [r6], #1
 800880e:	9b00      	ldr	r3, [sp, #0]
 8008810:	eba6 020a 	sub.w	r2, r6, sl
 8008814:	4293      	cmp	r3, r2
 8008816:	ddb3      	ble.n	8008780 <_dtoa_r+0xad8>
 8008818:	4649      	mov	r1, r9
 800881a:	2300      	movs	r3, #0
 800881c:	220a      	movs	r2, #10
 800881e:	4658      	mov	r0, fp
 8008820:	f000 f968 	bl	8008af4 <__multadd>
 8008824:	4681      	mov	r9, r0
 8008826:	e7ea      	b.n	80087fe <_dtoa_r+0xb56>
 8008828:	0800bbfc 	.word	0x0800bbfc
 800882c:	0800bb80 	.word	0x0800bb80

08008830 <_free_r>:
 8008830:	b538      	push	{r3, r4, r5, lr}
 8008832:	4605      	mov	r5, r0
 8008834:	2900      	cmp	r1, #0
 8008836:	d041      	beq.n	80088bc <_free_r+0x8c>
 8008838:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800883c:	1f0c      	subs	r4, r1, #4
 800883e:	2b00      	cmp	r3, #0
 8008840:	bfb8      	it	lt
 8008842:	18e4      	addlt	r4, r4, r3
 8008844:	f000 f8e8 	bl	8008a18 <__malloc_lock>
 8008848:	4a1d      	ldr	r2, [pc, #116]	@ (80088c0 <_free_r+0x90>)
 800884a:	6813      	ldr	r3, [r2, #0]
 800884c:	b933      	cbnz	r3, 800885c <_free_r+0x2c>
 800884e:	6063      	str	r3, [r4, #4]
 8008850:	6014      	str	r4, [r2, #0]
 8008852:	4628      	mov	r0, r5
 8008854:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008858:	f000 b8e4 	b.w	8008a24 <__malloc_unlock>
 800885c:	42a3      	cmp	r3, r4
 800885e:	d908      	bls.n	8008872 <_free_r+0x42>
 8008860:	6820      	ldr	r0, [r4, #0]
 8008862:	1821      	adds	r1, r4, r0
 8008864:	428b      	cmp	r3, r1
 8008866:	bf01      	itttt	eq
 8008868:	6819      	ldreq	r1, [r3, #0]
 800886a:	685b      	ldreq	r3, [r3, #4]
 800886c:	1809      	addeq	r1, r1, r0
 800886e:	6021      	streq	r1, [r4, #0]
 8008870:	e7ed      	b.n	800884e <_free_r+0x1e>
 8008872:	461a      	mov	r2, r3
 8008874:	685b      	ldr	r3, [r3, #4]
 8008876:	b10b      	cbz	r3, 800887c <_free_r+0x4c>
 8008878:	42a3      	cmp	r3, r4
 800887a:	d9fa      	bls.n	8008872 <_free_r+0x42>
 800887c:	6811      	ldr	r1, [r2, #0]
 800887e:	1850      	adds	r0, r2, r1
 8008880:	42a0      	cmp	r0, r4
 8008882:	d10b      	bne.n	800889c <_free_r+0x6c>
 8008884:	6820      	ldr	r0, [r4, #0]
 8008886:	4401      	add	r1, r0
 8008888:	1850      	adds	r0, r2, r1
 800888a:	4283      	cmp	r3, r0
 800888c:	6011      	str	r1, [r2, #0]
 800888e:	d1e0      	bne.n	8008852 <_free_r+0x22>
 8008890:	6818      	ldr	r0, [r3, #0]
 8008892:	685b      	ldr	r3, [r3, #4]
 8008894:	6053      	str	r3, [r2, #4]
 8008896:	4408      	add	r0, r1
 8008898:	6010      	str	r0, [r2, #0]
 800889a:	e7da      	b.n	8008852 <_free_r+0x22>
 800889c:	d902      	bls.n	80088a4 <_free_r+0x74>
 800889e:	230c      	movs	r3, #12
 80088a0:	602b      	str	r3, [r5, #0]
 80088a2:	e7d6      	b.n	8008852 <_free_r+0x22>
 80088a4:	6820      	ldr	r0, [r4, #0]
 80088a6:	1821      	adds	r1, r4, r0
 80088a8:	428b      	cmp	r3, r1
 80088aa:	bf04      	itt	eq
 80088ac:	6819      	ldreq	r1, [r3, #0]
 80088ae:	685b      	ldreq	r3, [r3, #4]
 80088b0:	6063      	str	r3, [r4, #4]
 80088b2:	bf04      	itt	eq
 80088b4:	1809      	addeq	r1, r1, r0
 80088b6:	6021      	streq	r1, [r4, #0]
 80088b8:	6054      	str	r4, [r2, #4]
 80088ba:	e7ca      	b.n	8008852 <_free_r+0x22>
 80088bc:	bd38      	pop	{r3, r4, r5, pc}
 80088be:	bf00      	nop
 80088c0:	20005590 	.word	0x20005590

080088c4 <malloc>:
 80088c4:	4b02      	ldr	r3, [pc, #8]	@ (80088d0 <malloc+0xc>)
 80088c6:	4601      	mov	r1, r0
 80088c8:	6818      	ldr	r0, [r3, #0]
 80088ca:	f000 b825 	b.w	8008918 <_malloc_r>
 80088ce:	bf00      	nop
 80088d0:	20000018 	.word	0x20000018

080088d4 <sbrk_aligned>:
 80088d4:	b570      	push	{r4, r5, r6, lr}
 80088d6:	4e0f      	ldr	r6, [pc, #60]	@ (8008914 <sbrk_aligned+0x40>)
 80088d8:	460c      	mov	r4, r1
 80088da:	6831      	ldr	r1, [r6, #0]
 80088dc:	4605      	mov	r5, r0
 80088de:	b911      	cbnz	r1, 80088e6 <sbrk_aligned+0x12>
 80088e0:	f002 fb60 	bl	800afa4 <_sbrk_r>
 80088e4:	6030      	str	r0, [r6, #0]
 80088e6:	4621      	mov	r1, r4
 80088e8:	4628      	mov	r0, r5
 80088ea:	f002 fb5b 	bl	800afa4 <_sbrk_r>
 80088ee:	1c43      	adds	r3, r0, #1
 80088f0:	d103      	bne.n	80088fa <sbrk_aligned+0x26>
 80088f2:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80088f6:	4620      	mov	r0, r4
 80088f8:	bd70      	pop	{r4, r5, r6, pc}
 80088fa:	1cc4      	adds	r4, r0, #3
 80088fc:	f024 0403 	bic.w	r4, r4, #3
 8008900:	42a0      	cmp	r0, r4
 8008902:	d0f8      	beq.n	80088f6 <sbrk_aligned+0x22>
 8008904:	1a21      	subs	r1, r4, r0
 8008906:	4628      	mov	r0, r5
 8008908:	f002 fb4c 	bl	800afa4 <_sbrk_r>
 800890c:	3001      	adds	r0, #1
 800890e:	d1f2      	bne.n	80088f6 <sbrk_aligned+0x22>
 8008910:	e7ef      	b.n	80088f2 <sbrk_aligned+0x1e>
 8008912:	bf00      	nop
 8008914:	2000558c 	.word	0x2000558c

08008918 <_malloc_r>:
 8008918:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800891c:	1ccd      	adds	r5, r1, #3
 800891e:	f025 0503 	bic.w	r5, r5, #3
 8008922:	3508      	adds	r5, #8
 8008924:	2d0c      	cmp	r5, #12
 8008926:	bf38      	it	cc
 8008928:	250c      	movcc	r5, #12
 800892a:	2d00      	cmp	r5, #0
 800892c:	4606      	mov	r6, r0
 800892e:	db01      	blt.n	8008934 <_malloc_r+0x1c>
 8008930:	42a9      	cmp	r1, r5
 8008932:	d904      	bls.n	800893e <_malloc_r+0x26>
 8008934:	230c      	movs	r3, #12
 8008936:	6033      	str	r3, [r6, #0]
 8008938:	2000      	movs	r0, #0
 800893a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800893e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008a14 <_malloc_r+0xfc>
 8008942:	f000 f869 	bl	8008a18 <__malloc_lock>
 8008946:	f8d8 3000 	ldr.w	r3, [r8]
 800894a:	461c      	mov	r4, r3
 800894c:	bb44      	cbnz	r4, 80089a0 <_malloc_r+0x88>
 800894e:	4629      	mov	r1, r5
 8008950:	4630      	mov	r0, r6
 8008952:	f7ff ffbf 	bl	80088d4 <sbrk_aligned>
 8008956:	1c43      	adds	r3, r0, #1
 8008958:	4604      	mov	r4, r0
 800895a:	d158      	bne.n	8008a0e <_malloc_r+0xf6>
 800895c:	f8d8 4000 	ldr.w	r4, [r8]
 8008960:	4627      	mov	r7, r4
 8008962:	2f00      	cmp	r7, #0
 8008964:	d143      	bne.n	80089ee <_malloc_r+0xd6>
 8008966:	2c00      	cmp	r4, #0
 8008968:	d04b      	beq.n	8008a02 <_malloc_r+0xea>
 800896a:	6823      	ldr	r3, [r4, #0]
 800896c:	4639      	mov	r1, r7
 800896e:	4630      	mov	r0, r6
 8008970:	eb04 0903 	add.w	r9, r4, r3
 8008974:	f002 fb16 	bl	800afa4 <_sbrk_r>
 8008978:	4581      	cmp	r9, r0
 800897a:	d142      	bne.n	8008a02 <_malloc_r+0xea>
 800897c:	6821      	ldr	r1, [r4, #0]
 800897e:	1a6d      	subs	r5, r5, r1
 8008980:	4629      	mov	r1, r5
 8008982:	4630      	mov	r0, r6
 8008984:	f7ff ffa6 	bl	80088d4 <sbrk_aligned>
 8008988:	3001      	adds	r0, #1
 800898a:	d03a      	beq.n	8008a02 <_malloc_r+0xea>
 800898c:	6823      	ldr	r3, [r4, #0]
 800898e:	442b      	add	r3, r5
 8008990:	6023      	str	r3, [r4, #0]
 8008992:	f8d8 3000 	ldr.w	r3, [r8]
 8008996:	685a      	ldr	r2, [r3, #4]
 8008998:	bb62      	cbnz	r2, 80089f4 <_malloc_r+0xdc>
 800899a:	f8c8 7000 	str.w	r7, [r8]
 800899e:	e00f      	b.n	80089c0 <_malloc_r+0xa8>
 80089a0:	6822      	ldr	r2, [r4, #0]
 80089a2:	1b52      	subs	r2, r2, r5
 80089a4:	d420      	bmi.n	80089e8 <_malloc_r+0xd0>
 80089a6:	2a0b      	cmp	r2, #11
 80089a8:	d917      	bls.n	80089da <_malloc_r+0xc2>
 80089aa:	1961      	adds	r1, r4, r5
 80089ac:	42a3      	cmp	r3, r4
 80089ae:	6025      	str	r5, [r4, #0]
 80089b0:	bf18      	it	ne
 80089b2:	6059      	strne	r1, [r3, #4]
 80089b4:	6863      	ldr	r3, [r4, #4]
 80089b6:	bf08      	it	eq
 80089b8:	f8c8 1000 	streq.w	r1, [r8]
 80089bc:	5162      	str	r2, [r4, r5]
 80089be:	604b      	str	r3, [r1, #4]
 80089c0:	4630      	mov	r0, r6
 80089c2:	f000 f82f 	bl	8008a24 <__malloc_unlock>
 80089c6:	f104 000b 	add.w	r0, r4, #11
 80089ca:	1d23      	adds	r3, r4, #4
 80089cc:	f020 0007 	bic.w	r0, r0, #7
 80089d0:	1ac2      	subs	r2, r0, r3
 80089d2:	bf1c      	itt	ne
 80089d4:	1a1b      	subne	r3, r3, r0
 80089d6:	50a3      	strne	r3, [r4, r2]
 80089d8:	e7af      	b.n	800893a <_malloc_r+0x22>
 80089da:	6862      	ldr	r2, [r4, #4]
 80089dc:	42a3      	cmp	r3, r4
 80089de:	bf0c      	ite	eq
 80089e0:	f8c8 2000 	streq.w	r2, [r8]
 80089e4:	605a      	strne	r2, [r3, #4]
 80089e6:	e7eb      	b.n	80089c0 <_malloc_r+0xa8>
 80089e8:	4623      	mov	r3, r4
 80089ea:	6864      	ldr	r4, [r4, #4]
 80089ec:	e7ae      	b.n	800894c <_malloc_r+0x34>
 80089ee:	463c      	mov	r4, r7
 80089f0:	687f      	ldr	r7, [r7, #4]
 80089f2:	e7b6      	b.n	8008962 <_malloc_r+0x4a>
 80089f4:	461a      	mov	r2, r3
 80089f6:	685b      	ldr	r3, [r3, #4]
 80089f8:	42a3      	cmp	r3, r4
 80089fa:	d1fb      	bne.n	80089f4 <_malloc_r+0xdc>
 80089fc:	2300      	movs	r3, #0
 80089fe:	6053      	str	r3, [r2, #4]
 8008a00:	e7de      	b.n	80089c0 <_malloc_r+0xa8>
 8008a02:	230c      	movs	r3, #12
 8008a04:	6033      	str	r3, [r6, #0]
 8008a06:	4630      	mov	r0, r6
 8008a08:	f000 f80c 	bl	8008a24 <__malloc_unlock>
 8008a0c:	e794      	b.n	8008938 <_malloc_r+0x20>
 8008a0e:	6005      	str	r5, [r0, #0]
 8008a10:	e7d6      	b.n	80089c0 <_malloc_r+0xa8>
 8008a12:	bf00      	nop
 8008a14:	20005590 	.word	0x20005590

08008a18 <__malloc_lock>:
 8008a18:	4801      	ldr	r0, [pc, #4]	@ (8008a20 <__malloc_lock+0x8>)
 8008a1a:	f7ff b8b2 	b.w	8007b82 <__retarget_lock_acquire_recursive>
 8008a1e:	bf00      	nop
 8008a20:	20005588 	.word	0x20005588

08008a24 <__malloc_unlock>:
 8008a24:	4801      	ldr	r0, [pc, #4]	@ (8008a2c <__malloc_unlock+0x8>)
 8008a26:	f7ff b8ad 	b.w	8007b84 <__retarget_lock_release_recursive>
 8008a2a:	bf00      	nop
 8008a2c:	20005588 	.word	0x20005588

08008a30 <_Balloc>:
 8008a30:	b570      	push	{r4, r5, r6, lr}
 8008a32:	69c6      	ldr	r6, [r0, #28]
 8008a34:	4604      	mov	r4, r0
 8008a36:	460d      	mov	r5, r1
 8008a38:	b976      	cbnz	r6, 8008a58 <_Balloc+0x28>
 8008a3a:	2010      	movs	r0, #16
 8008a3c:	f7ff ff42 	bl	80088c4 <malloc>
 8008a40:	4602      	mov	r2, r0
 8008a42:	61e0      	str	r0, [r4, #28]
 8008a44:	b920      	cbnz	r0, 8008a50 <_Balloc+0x20>
 8008a46:	4b18      	ldr	r3, [pc, #96]	@ (8008aa8 <_Balloc+0x78>)
 8008a48:	4818      	ldr	r0, [pc, #96]	@ (8008aac <_Balloc+0x7c>)
 8008a4a:	216b      	movs	r1, #107	@ 0x6b
 8008a4c:	f002 fad0 	bl	800aff0 <__assert_func>
 8008a50:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008a54:	6006      	str	r6, [r0, #0]
 8008a56:	60c6      	str	r6, [r0, #12]
 8008a58:	69e6      	ldr	r6, [r4, #28]
 8008a5a:	68f3      	ldr	r3, [r6, #12]
 8008a5c:	b183      	cbz	r3, 8008a80 <_Balloc+0x50>
 8008a5e:	69e3      	ldr	r3, [r4, #28]
 8008a60:	68db      	ldr	r3, [r3, #12]
 8008a62:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008a66:	b9b8      	cbnz	r0, 8008a98 <_Balloc+0x68>
 8008a68:	2101      	movs	r1, #1
 8008a6a:	fa01 f605 	lsl.w	r6, r1, r5
 8008a6e:	1d72      	adds	r2, r6, #5
 8008a70:	0092      	lsls	r2, r2, #2
 8008a72:	4620      	mov	r0, r4
 8008a74:	f002 fada 	bl	800b02c <_calloc_r>
 8008a78:	b160      	cbz	r0, 8008a94 <_Balloc+0x64>
 8008a7a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008a7e:	e00e      	b.n	8008a9e <_Balloc+0x6e>
 8008a80:	2221      	movs	r2, #33	@ 0x21
 8008a82:	2104      	movs	r1, #4
 8008a84:	4620      	mov	r0, r4
 8008a86:	f002 fad1 	bl	800b02c <_calloc_r>
 8008a8a:	69e3      	ldr	r3, [r4, #28]
 8008a8c:	60f0      	str	r0, [r6, #12]
 8008a8e:	68db      	ldr	r3, [r3, #12]
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d1e4      	bne.n	8008a5e <_Balloc+0x2e>
 8008a94:	2000      	movs	r0, #0
 8008a96:	bd70      	pop	{r4, r5, r6, pc}
 8008a98:	6802      	ldr	r2, [r0, #0]
 8008a9a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008a9e:	2300      	movs	r3, #0
 8008aa0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008aa4:	e7f7      	b.n	8008a96 <_Balloc+0x66>
 8008aa6:	bf00      	nop
 8008aa8:	0800bb8d 	.word	0x0800bb8d
 8008aac:	0800bc0d 	.word	0x0800bc0d

08008ab0 <_Bfree>:
 8008ab0:	b570      	push	{r4, r5, r6, lr}
 8008ab2:	69c6      	ldr	r6, [r0, #28]
 8008ab4:	4605      	mov	r5, r0
 8008ab6:	460c      	mov	r4, r1
 8008ab8:	b976      	cbnz	r6, 8008ad8 <_Bfree+0x28>
 8008aba:	2010      	movs	r0, #16
 8008abc:	f7ff ff02 	bl	80088c4 <malloc>
 8008ac0:	4602      	mov	r2, r0
 8008ac2:	61e8      	str	r0, [r5, #28]
 8008ac4:	b920      	cbnz	r0, 8008ad0 <_Bfree+0x20>
 8008ac6:	4b09      	ldr	r3, [pc, #36]	@ (8008aec <_Bfree+0x3c>)
 8008ac8:	4809      	ldr	r0, [pc, #36]	@ (8008af0 <_Bfree+0x40>)
 8008aca:	218f      	movs	r1, #143	@ 0x8f
 8008acc:	f002 fa90 	bl	800aff0 <__assert_func>
 8008ad0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008ad4:	6006      	str	r6, [r0, #0]
 8008ad6:	60c6      	str	r6, [r0, #12]
 8008ad8:	b13c      	cbz	r4, 8008aea <_Bfree+0x3a>
 8008ada:	69eb      	ldr	r3, [r5, #28]
 8008adc:	6862      	ldr	r2, [r4, #4]
 8008ade:	68db      	ldr	r3, [r3, #12]
 8008ae0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008ae4:	6021      	str	r1, [r4, #0]
 8008ae6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008aea:	bd70      	pop	{r4, r5, r6, pc}
 8008aec:	0800bb8d 	.word	0x0800bb8d
 8008af0:	0800bc0d 	.word	0x0800bc0d

08008af4 <__multadd>:
 8008af4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008af8:	690d      	ldr	r5, [r1, #16]
 8008afa:	4607      	mov	r7, r0
 8008afc:	460c      	mov	r4, r1
 8008afe:	461e      	mov	r6, r3
 8008b00:	f101 0c14 	add.w	ip, r1, #20
 8008b04:	2000      	movs	r0, #0
 8008b06:	f8dc 3000 	ldr.w	r3, [ip]
 8008b0a:	b299      	uxth	r1, r3
 8008b0c:	fb02 6101 	mla	r1, r2, r1, r6
 8008b10:	0c1e      	lsrs	r6, r3, #16
 8008b12:	0c0b      	lsrs	r3, r1, #16
 8008b14:	fb02 3306 	mla	r3, r2, r6, r3
 8008b18:	b289      	uxth	r1, r1
 8008b1a:	3001      	adds	r0, #1
 8008b1c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008b20:	4285      	cmp	r5, r0
 8008b22:	f84c 1b04 	str.w	r1, [ip], #4
 8008b26:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008b2a:	dcec      	bgt.n	8008b06 <__multadd+0x12>
 8008b2c:	b30e      	cbz	r6, 8008b72 <__multadd+0x7e>
 8008b2e:	68a3      	ldr	r3, [r4, #8]
 8008b30:	42ab      	cmp	r3, r5
 8008b32:	dc19      	bgt.n	8008b68 <__multadd+0x74>
 8008b34:	6861      	ldr	r1, [r4, #4]
 8008b36:	4638      	mov	r0, r7
 8008b38:	3101      	adds	r1, #1
 8008b3a:	f7ff ff79 	bl	8008a30 <_Balloc>
 8008b3e:	4680      	mov	r8, r0
 8008b40:	b928      	cbnz	r0, 8008b4e <__multadd+0x5a>
 8008b42:	4602      	mov	r2, r0
 8008b44:	4b0c      	ldr	r3, [pc, #48]	@ (8008b78 <__multadd+0x84>)
 8008b46:	480d      	ldr	r0, [pc, #52]	@ (8008b7c <__multadd+0x88>)
 8008b48:	21ba      	movs	r1, #186	@ 0xba
 8008b4a:	f002 fa51 	bl	800aff0 <__assert_func>
 8008b4e:	6922      	ldr	r2, [r4, #16]
 8008b50:	3202      	adds	r2, #2
 8008b52:	f104 010c 	add.w	r1, r4, #12
 8008b56:	0092      	lsls	r2, r2, #2
 8008b58:	300c      	adds	r0, #12
 8008b5a:	f002 fa33 	bl	800afc4 <memcpy>
 8008b5e:	4621      	mov	r1, r4
 8008b60:	4638      	mov	r0, r7
 8008b62:	f7ff ffa5 	bl	8008ab0 <_Bfree>
 8008b66:	4644      	mov	r4, r8
 8008b68:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008b6c:	3501      	adds	r5, #1
 8008b6e:	615e      	str	r6, [r3, #20]
 8008b70:	6125      	str	r5, [r4, #16]
 8008b72:	4620      	mov	r0, r4
 8008b74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008b78:	0800bbfc 	.word	0x0800bbfc
 8008b7c:	0800bc0d 	.word	0x0800bc0d

08008b80 <__s2b>:
 8008b80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008b84:	460c      	mov	r4, r1
 8008b86:	4615      	mov	r5, r2
 8008b88:	461f      	mov	r7, r3
 8008b8a:	2209      	movs	r2, #9
 8008b8c:	3308      	adds	r3, #8
 8008b8e:	4606      	mov	r6, r0
 8008b90:	fb93 f3f2 	sdiv	r3, r3, r2
 8008b94:	2100      	movs	r1, #0
 8008b96:	2201      	movs	r2, #1
 8008b98:	429a      	cmp	r2, r3
 8008b9a:	db09      	blt.n	8008bb0 <__s2b+0x30>
 8008b9c:	4630      	mov	r0, r6
 8008b9e:	f7ff ff47 	bl	8008a30 <_Balloc>
 8008ba2:	b940      	cbnz	r0, 8008bb6 <__s2b+0x36>
 8008ba4:	4602      	mov	r2, r0
 8008ba6:	4b19      	ldr	r3, [pc, #100]	@ (8008c0c <__s2b+0x8c>)
 8008ba8:	4819      	ldr	r0, [pc, #100]	@ (8008c10 <__s2b+0x90>)
 8008baa:	21d3      	movs	r1, #211	@ 0xd3
 8008bac:	f002 fa20 	bl	800aff0 <__assert_func>
 8008bb0:	0052      	lsls	r2, r2, #1
 8008bb2:	3101      	adds	r1, #1
 8008bb4:	e7f0      	b.n	8008b98 <__s2b+0x18>
 8008bb6:	9b08      	ldr	r3, [sp, #32]
 8008bb8:	6143      	str	r3, [r0, #20]
 8008bba:	2d09      	cmp	r5, #9
 8008bbc:	f04f 0301 	mov.w	r3, #1
 8008bc0:	6103      	str	r3, [r0, #16]
 8008bc2:	dd16      	ble.n	8008bf2 <__s2b+0x72>
 8008bc4:	f104 0909 	add.w	r9, r4, #9
 8008bc8:	46c8      	mov	r8, r9
 8008bca:	442c      	add	r4, r5
 8008bcc:	f818 3b01 	ldrb.w	r3, [r8], #1
 8008bd0:	4601      	mov	r1, r0
 8008bd2:	3b30      	subs	r3, #48	@ 0x30
 8008bd4:	220a      	movs	r2, #10
 8008bd6:	4630      	mov	r0, r6
 8008bd8:	f7ff ff8c 	bl	8008af4 <__multadd>
 8008bdc:	45a0      	cmp	r8, r4
 8008bde:	d1f5      	bne.n	8008bcc <__s2b+0x4c>
 8008be0:	f1a5 0408 	sub.w	r4, r5, #8
 8008be4:	444c      	add	r4, r9
 8008be6:	1b2d      	subs	r5, r5, r4
 8008be8:	1963      	adds	r3, r4, r5
 8008bea:	42bb      	cmp	r3, r7
 8008bec:	db04      	blt.n	8008bf8 <__s2b+0x78>
 8008bee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008bf2:	340a      	adds	r4, #10
 8008bf4:	2509      	movs	r5, #9
 8008bf6:	e7f6      	b.n	8008be6 <__s2b+0x66>
 8008bf8:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008bfc:	4601      	mov	r1, r0
 8008bfe:	3b30      	subs	r3, #48	@ 0x30
 8008c00:	220a      	movs	r2, #10
 8008c02:	4630      	mov	r0, r6
 8008c04:	f7ff ff76 	bl	8008af4 <__multadd>
 8008c08:	e7ee      	b.n	8008be8 <__s2b+0x68>
 8008c0a:	bf00      	nop
 8008c0c:	0800bbfc 	.word	0x0800bbfc
 8008c10:	0800bc0d 	.word	0x0800bc0d

08008c14 <__hi0bits>:
 8008c14:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8008c18:	4603      	mov	r3, r0
 8008c1a:	bf36      	itet	cc
 8008c1c:	0403      	lslcc	r3, r0, #16
 8008c1e:	2000      	movcs	r0, #0
 8008c20:	2010      	movcc	r0, #16
 8008c22:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008c26:	bf3c      	itt	cc
 8008c28:	021b      	lslcc	r3, r3, #8
 8008c2a:	3008      	addcc	r0, #8
 8008c2c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008c30:	bf3c      	itt	cc
 8008c32:	011b      	lslcc	r3, r3, #4
 8008c34:	3004      	addcc	r0, #4
 8008c36:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008c3a:	bf3c      	itt	cc
 8008c3c:	009b      	lslcc	r3, r3, #2
 8008c3e:	3002      	addcc	r0, #2
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	db05      	blt.n	8008c50 <__hi0bits+0x3c>
 8008c44:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8008c48:	f100 0001 	add.w	r0, r0, #1
 8008c4c:	bf08      	it	eq
 8008c4e:	2020      	moveq	r0, #32
 8008c50:	4770      	bx	lr

08008c52 <__lo0bits>:
 8008c52:	6803      	ldr	r3, [r0, #0]
 8008c54:	4602      	mov	r2, r0
 8008c56:	f013 0007 	ands.w	r0, r3, #7
 8008c5a:	d00b      	beq.n	8008c74 <__lo0bits+0x22>
 8008c5c:	07d9      	lsls	r1, r3, #31
 8008c5e:	d421      	bmi.n	8008ca4 <__lo0bits+0x52>
 8008c60:	0798      	lsls	r0, r3, #30
 8008c62:	bf49      	itett	mi
 8008c64:	085b      	lsrmi	r3, r3, #1
 8008c66:	089b      	lsrpl	r3, r3, #2
 8008c68:	2001      	movmi	r0, #1
 8008c6a:	6013      	strmi	r3, [r2, #0]
 8008c6c:	bf5c      	itt	pl
 8008c6e:	6013      	strpl	r3, [r2, #0]
 8008c70:	2002      	movpl	r0, #2
 8008c72:	4770      	bx	lr
 8008c74:	b299      	uxth	r1, r3
 8008c76:	b909      	cbnz	r1, 8008c7c <__lo0bits+0x2a>
 8008c78:	0c1b      	lsrs	r3, r3, #16
 8008c7a:	2010      	movs	r0, #16
 8008c7c:	b2d9      	uxtb	r1, r3
 8008c7e:	b909      	cbnz	r1, 8008c84 <__lo0bits+0x32>
 8008c80:	3008      	adds	r0, #8
 8008c82:	0a1b      	lsrs	r3, r3, #8
 8008c84:	0719      	lsls	r1, r3, #28
 8008c86:	bf04      	itt	eq
 8008c88:	091b      	lsreq	r3, r3, #4
 8008c8a:	3004      	addeq	r0, #4
 8008c8c:	0799      	lsls	r1, r3, #30
 8008c8e:	bf04      	itt	eq
 8008c90:	089b      	lsreq	r3, r3, #2
 8008c92:	3002      	addeq	r0, #2
 8008c94:	07d9      	lsls	r1, r3, #31
 8008c96:	d403      	bmi.n	8008ca0 <__lo0bits+0x4e>
 8008c98:	085b      	lsrs	r3, r3, #1
 8008c9a:	f100 0001 	add.w	r0, r0, #1
 8008c9e:	d003      	beq.n	8008ca8 <__lo0bits+0x56>
 8008ca0:	6013      	str	r3, [r2, #0]
 8008ca2:	4770      	bx	lr
 8008ca4:	2000      	movs	r0, #0
 8008ca6:	4770      	bx	lr
 8008ca8:	2020      	movs	r0, #32
 8008caa:	4770      	bx	lr

08008cac <__i2b>:
 8008cac:	b510      	push	{r4, lr}
 8008cae:	460c      	mov	r4, r1
 8008cb0:	2101      	movs	r1, #1
 8008cb2:	f7ff febd 	bl	8008a30 <_Balloc>
 8008cb6:	4602      	mov	r2, r0
 8008cb8:	b928      	cbnz	r0, 8008cc6 <__i2b+0x1a>
 8008cba:	4b05      	ldr	r3, [pc, #20]	@ (8008cd0 <__i2b+0x24>)
 8008cbc:	4805      	ldr	r0, [pc, #20]	@ (8008cd4 <__i2b+0x28>)
 8008cbe:	f240 1145 	movw	r1, #325	@ 0x145
 8008cc2:	f002 f995 	bl	800aff0 <__assert_func>
 8008cc6:	2301      	movs	r3, #1
 8008cc8:	6144      	str	r4, [r0, #20]
 8008cca:	6103      	str	r3, [r0, #16]
 8008ccc:	bd10      	pop	{r4, pc}
 8008cce:	bf00      	nop
 8008cd0:	0800bbfc 	.word	0x0800bbfc
 8008cd4:	0800bc0d 	.word	0x0800bc0d

08008cd8 <__multiply>:
 8008cd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008cdc:	4614      	mov	r4, r2
 8008cde:	690a      	ldr	r2, [r1, #16]
 8008ce0:	6923      	ldr	r3, [r4, #16]
 8008ce2:	429a      	cmp	r2, r3
 8008ce4:	bfa8      	it	ge
 8008ce6:	4623      	movge	r3, r4
 8008ce8:	460f      	mov	r7, r1
 8008cea:	bfa4      	itt	ge
 8008cec:	460c      	movge	r4, r1
 8008cee:	461f      	movge	r7, r3
 8008cf0:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8008cf4:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8008cf8:	68a3      	ldr	r3, [r4, #8]
 8008cfa:	6861      	ldr	r1, [r4, #4]
 8008cfc:	eb0a 0609 	add.w	r6, sl, r9
 8008d00:	42b3      	cmp	r3, r6
 8008d02:	b085      	sub	sp, #20
 8008d04:	bfb8      	it	lt
 8008d06:	3101      	addlt	r1, #1
 8008d08:	f7ff fe92 	bl	8008a30 <_Balloc>
 8008d0c:	b930      	cbnz	r0, 8008d1c <__multiply+0x44>
 8008d0e:	4602      	mov	r2, r0
 8008d10:	4b44      	ldr	r3, [pc, #272]	@ (8008e24 <__multiply+0x14c>)
 8008d12:	4845      	ldr	r0, [pc, #276]	@ (8008e28 <__multiply+0x150>)
 8008d14:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8008d18:	f002 f96a 	bl	800aff0 <__assert_func>
 8008d1c:	f100 0514 	add.w	r5, r0, #20
 8008d20:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008d24:	462b      	mov	r3, r5
 8008d26:	2200      	movs	r2, #0
 8008d28:	4543      	cmp	r3, r8
 8008d2a:	d321      	bcc.n	8008d70 <__multiply+0x98>
 8008d2c:	f107 0114 	add.w	r1, r7, #20
 8008d30:	f104 0214 	add.w	r2, r4, #20
 8008d34:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8008d38:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8008d3c:	9302      	str	r3, [sp, #8]
 8008d3e:	1b13      	subs	r3, r2, r4
 8008d40:	3b15      	subs	r3, #21
 8008d42:	f023 0303 	bic.w	r3, r3, #3
 8008d46:	3304      	adds	r3, #4
 8008d48:	f104 0715 	add.w	r7, r4, #21
 8008d4c:	42ba      	cmp	r2, r7
 8008d4e:	bf38      	it	cc
 8008d50:	2304      	movcc	r3, #4
 8008d52:	9301      	str	r3, [sp, #4]
 8008d54:	9b02      	ldr	r3, [sp, #8]
 8008d56:	9103      	str	r1, [sp, #12]
 8008d58:	428b      	cmp	r3, r1
 8008d5a:	d80c      	bhi.n	8008d76 <__multiply+0x9e>
 8008d5c:	2e00      	cmp	r6, #0
 8008d5e:	dd03      	ble.n	8008d68 <__multiply+0x90>
 8008d60:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d05b      	beq.n	8008e20 <__multiply+0x148>
 8008d68:	6106      	str	r6, [r0, #16]
 8008d6a:	b005      	add	sp, #20
 8008d6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d70:	f843 2b04 	str.w	r2, [r3], #4
 8008d74:	e7d8      	b.n	8008d28 <__multiply+0x50>
 8008d76:	f8b1 a000 	ldrh.w	sl, [r1]
 8008d7a:	f1ba 0f00 	cmp.w	sl, #0
 8008d7e:	d024      	beq.n	8008dca <__multiply+0xf2>
 8008d80:	f104 0e14 	add.w	lr, r4, #20
 8008d84:	46a9      	mov	r9, r5
 8008d86:	f04f 0c00 	mov.w	ip, #0
 8008d8a:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008d8e:	f8d9 3000 	ldr.w	r3, [r9]
 8008d92:	fa1f fb87 	uxth.w	fp, r7
 8008d96:	b29b      	uxth	r3, r3
 8008d98:	fb0a 330b 	mla	r3, sl, fp, r3
 8008d9c:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8008da0:	f8d9 7000 	ldr.w	r7, [r9]
 8008da4:	4463      	add	r3, ip
 8008da6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8008daa:	fb0a c70b 	mla	r7, sl, fp, ip
 8008dae:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8008db2:	b29b      	uxth	r3, r3
 8008db4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008db8:	4572      	cmp	r2, lr
 8008dba:	f849 3b04 	str.w	r3, [r9], #4
 8008dbe:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8008dc2:	d8e2      	bhi.n	8008d8a <__multiply+0xb2>
 8008dc4:	9b01      	ldr	r3, [sp, #4]
 8008dc6:	f845 c003 	str.w	ip, [r5, r3]
 8008dca:	9b03      	ldr	r3, [sp, #12]
 8008dcc:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8008dd0:	3104      	adds	r1, #4
 8008dd2:	f1b9 0f00 	cmp.w	r9, #0
 8008dd6:	d021      	beq.n	8008e1c <__multiply+0x144>
 8008dd8:	682b      	ldr	r3, [r5, #0]
 8008dda:	f104 0c14 	add.w	ip, r4, #20
 8008dde:	46ae      	mov	lr, r5
 8008de0:	f04f 0a00 	mov.w	sl, #0
 8008de4:	f8bc b000 	ldrh.w	fp, [ip]
 8008de8:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8008dec:	fb09 770b 	mla	r7, r9, fp, r7
 8008df0:	4457      	add	r7, sl
 8008df2:	b29b      	uxth	r3, r3
 8008df4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008df8:	f84e 3b04 	str.w	r3, [lr], #4
 8008dfc:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008e00:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008e04:	f8be 3000 	ldrh.w	r3, [lr]
 8008e08:	fb09 330a 	mla	r3, r9, sl, r3
 8008e0c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8008e10:	4562      	cmp	r2, ip
 8008e12:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008e16:	d8e5      	bhi.n	8008de4 <__multiply+0x10c>
 8008e18:	9f01      	ldr	r7, [sp, #4]
 8008e1a:	51eb      	str	r3, [r5, r7]
 8008e1c:	3504      	adds	r5, #4
 8008e1e:	e799      	b.n	8008d54 <__multiply+0x7c>
 8008e20:	3e01      	subs	r6, #1
 8008e22:	e79b      	b.n	8008d5c <__multiply+0x84>
 8008e24:	0800bbfc 	.word	0x0800bbfc
 8008e28:	0800bc0d 	.word	0x0800bc0d

08008e2c <__pow5mult>:
 8008e2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008e30:	4615      	mov	r5, r2
 8008e32:	f012 0203 	ands.w	r2, r2, #3
 8008e36:	4607      	mov	r7, r0
 8008e38:	460e      	mov	r6, r1
 8008e3a:	d007      	beq.n	8008e4c <__pow5mult+0x20>
 8008e3c:	4c25      	ldr	r4, [pc, #148]	@ (8008ed4 <__pow5mult+0xa8>)
 8008e3e:	3a01      	subs	r2, #1
 8008e40:	2300      	movs	r3, #0
 8008e42:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008e46:	f7ff fe55 	bl	8008af4 <__multadd>
 8008e4a:	4606      	mov	r6, r0
 8008e4c:	10ad      	asrs	r5, r5, #2
 8008e4e:	d03d      	beq.n	8008ecc <__pow5mult+0xa0>
 8008e50:	69fc      	ldr	r4, [r7, #28]
 8008e52:	b97c      	cbnz	r4, 8008e74 <__pow5mult+0x48>
 8008e54:	2010      	movs	r0, #16
 8008e56:	f7ff fd35 	bl	80088c4 <malloc>
 8008e5a:	4602      	mov	r2, r0
 8008e5c:	61f8      	str	r0, [r7, #28]
 8008e5e:	b928      	cbnz	r0, 8008e6c <__pow5mult+0x40>
 8008e60:	4b1d      	ldr	r3, [pc, #116]	@ (8008ed8 <__pow5mult+0xac>)
 8008e62:	481e      	ldr	r0, [pc, #120]	@ (8008edc <__pow5mult+0xb0>)
 8008e64:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8008e68:	f002 f8c2 	bl	800aff0 <__assert_func>
 8008e6c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008e70:	6004      	str	r4, [r0, #0]
 8008e72:	60c4      	str	r4, [r0, #12]
 8008e74:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8008e78:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008e7c:	b94c      	cbnz	r4, 8008e92 <__pow5mult+0x66>
 8008e7e:	f240 2171 	movw	r1, #625	@ 0x271
 8008e82:	4638      	mov	r0, r7
 8008e84:	f7ff ff12 	bl	8008cac <__i2b>
 8008e88:	2300      	movs	r3, #0
 8008e8a:	f8c8 0008 	str.w	r0, [r8, #8]
 8008e8e:	4604      	mov	r4, r0
 8008e90:	6003      	str	r3, [r0, #0]
 8008e92:	f04f 0900 	mov.w	r9, #0
 8008e96:	07eb      	lsls	r3, r5, #31
 8008e98:	d50a      	bpl.n	8008eb0 <__pow5mult+0x84>
 8008e9a:	4631      	mov	r1, r6
 8008e9c:	4622      	mov	r2, r4
 8008e9e:	4638      	mov	r0, r7
 8008ea0:	f7ff ff1a 	bl	8008cd8 <__multiply>
 8008ea4:	4631      	mov	r1, r6
 8008ea6:	4680      	mov	r8, r0
 8008ea8:	4638      	mov	r0, r7
 8008eaa:	f7ff fe01 	bl	8008ab0 <_Bfree>
 8008eae:	4646      	mov	r6, r8
 8008eb0:	106d      	asrs	r5, r5, #1
 8008eb2:	d00b      	beq.n	8008ecc <__pow5mult+0xa0>
 8008eb4:	6820      	ldr	r0, [r4, #0]
 8008eb6:	b938      	cbnz	r0, 8008ec8 <__pow5mult+0x9c>
 8008eb8:	4622      	mov	r2, r4
 8008eba:	4621      	mov	r1, r4
 8008ebc:	4638      	mov	r0, r7
 8008ebe:	f7ff ff0b 	bl	8008cd8 <__multiply>
 8008ec2:	6020      	str	r0, [r4, #0]
 8008ec4:	f8c0 9000 	str.w	r9, [r0]
 8008ec8:	4604      	mov	r4, r0
 8008eca:	e7e4      	b.n	8008e96 <__pow5mult+0x6a>
 8008ecc:	4630      	mov	r0, r6
 8008ece:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008ed2:	bf00      	nop
 8008ed4:	0800bc68 	.word	0x0800bc68
 8008ed8:	0800bb8d 	.word	0x0800bb8d
 8008edc:	0800bc0d 	.word	0x0800bc0d

08008ee0 <__lshift>:
 8008ee0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008ee4:	460c      	mov	r4, r1
 8008ee6:	6849      	ldr	r1, [r1, #4]
 8008ee8:	6923      	ldr	r3, [r4, #16]
 8008eea:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008eee:	68a3      	ldr	r3, [r4, #8]
 8008ef0:	4607      	mov	r7, r0
 8008ef2:	4691      	mov	r9, r2
 8008ef4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008ef8:	f108 0601 	add.w	r6, r8, #1
 8008efc:	42b3      	cmp	r3, r6
 8008efe:	db0b      	blt.n	8008f18 <__lshift+0x38>
 8008f00:	4638      	mov	r0, r7
 8008f02:	f7ff fd95 	bl	8008a30 <_Balloc>
 8008f06:	4605      	mov	r5, r0
 8008f08:	b948      	cbnz	r0, 8008f1e <__lshift+0x3e>
 8008f0a:	4602      	mov	r2, r0
 8008f0c:	4b28      	ldr	r3, [pc, #160]	@ (8008fb0 <__lshift+0xd0>)
 8008f0e:	4829      	ldr	r0, [pc, #164]	@ (8008fb4 <__lshift+0xd4>)
 8008f10:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8008f14:	f002 f86c 	bl	800aff0 <__assert_func>
 8008f18:	3101      	adds	r1, #1
 8008f1a:	005b      	lsls	r3, r3, #1
 8008f1c:	e7ee      	b.n	8008efc <__lshift+0x1c>
 8008f1e:	2300      	movs	r3, #0
 8008f20:	f100 0114 	add.w	r1, r0, #20
 8008f24:	f100 0210 	add.w	r2, r0, #16
 8008f28:	4618      	mov	r0, r3
 8008f2a:	4553      	cmp	r3, sl
 8008f2c:	db33      	blt.n	8008f96 <__lshift+0xb6>
 8008f2e:	6920      	ldr	r0, [r4, #16]
 8008f30:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008f34:	f104 0314 	add.w	r3, r4, #20
 8008f38:	f019 091f 	ands.w	r9, r9, #31
 8008f3c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008f40:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008f44:	d02b      	beq.n	8008f9e <__lshift+0xbe>
 8008f46:	f1c9 0e20 	rsb	lr, r9, #32
 8008f4a:	468a      	mov	sl, r1
 8008f4c:	2200      	movs	r2, #0
 8008f4e:	6818      	ldr	r0, [r3, #0]
 8008f50:	fa00 f009 	lsl.w	r0, r0, r9
 8008f54:	4310      	orrs	r0, r2
 8008f56:	f84a 0b04 	str.w	r0, [sl], #4
 8008f5a:	f853 2b04 	ldr.w	r2, [r3], #4
 8008f5e:	459c      	cmp	ip, r3
 8008f60:	fa22 f20e 	lsr.w	r2, r2, lr
 8008f64:	d8f3      	bhi.n	8008f4e <__lshift+0x6e>
 8008f66:	ebac 0304 	sub.w	r3, ip, r4
 8008f6a:	3b15      	subs	r3, #21
 8008f6c:	f023 0303 	bic.w	r3, r3, #3
 8008f70:	3304      	adds	r3, #4
 8008f72:	f104 0015 	add.w	r0, r4, #21
 8008f76:	4584      	cmp	ip, r0
 8008f78:	bf38      	it	cc
 8008f7a:	2304      	movcc	r3, #4
 8008f7c:	50ca      	str	r2, [r1, r3]
 8008f7e:	b10a      	cbz	r2, 8008f84 <__lshift+0xa4>
 8008f80:	f108 0602 	add.w	r6, r8, #2
 8008f84:	3e01      	subs	r6, #1
 8008f86:	4638      	mov	r0, r7
 8008f88:	612e      	str	r6, [r5, #16]
 8008f8a:	4621      	mov	r1, r4
 8008f8c:	f7ff fd90 	bl	8008ab0 <_Bfree>
 8008f90:	4628      	mov	r0, r5
 8008f92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f96:	f842 0f04 	str.w	r0, [r2, #4]!
 8008f9a:	3301      	adds	r3, #1
 8008f9c:	e7c5      	b.n	8008f2a <__lshift+0x4a>
 8008f9e:	3904      	subs	r1, #4
 8008fa0:	f853 2b04 	ldr.w	r2, [r3], #4
 8008fa4:	f841 2f04 	str.w	r2, [r1, #4]!
 8008fa8:	459c      	cmp	ip, r3
 8008faa:	d8f9      	bhi.n	8008fa0 <__lshift+0xc0>
 8008fac:	e7ea      	b.n	8008f84 <__lshift+0xa4>
 8008fae:	bf00      	nop
 8008fb0:	0800bbfc 	.word	0x0800bbfc
 8008fb4:	0800bc0d 	.word	0x0800bc0d

08008fb8 <__mcmp>:
 8008fb8:	690a      	ldr	r2, [r1, #16]
 8008fba:	4603      	mov	r3, r0
 8008fbc:	6900      	ldr	r0, [r0, #16]
 8008fbe:	1a80      	subs	r0, r0, r2
 8008fc0:	b530      	push	{r4, r5, lr}
 8008fc2:	d10e      	bne.n	8008fe2 <__mcmp+0x2a>
 8008fc4:	3314      	adds	r3, #20
 8008fc6:	3114      	adds	r1, #20
 8008fc8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008fcc:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008fd0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008fd4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008fd8:	4295      	cmp	r5, r2
 8008fda:	d003      	beq.n	8008fe4 <__mcmp+0x2c>
 8008fdc:	d205      	bcs.n	8008fea <__mcmp+0x32>
 8008fde:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008fe2:	bd30      	pop	{r4, r5, pc}
 8008fe4:	42a3      	cmp	r3, r4
 8008fe6:	d3f3      	bcc.n	8008fd0 <__mcmp+0x18>
 8008fe8:	e7fb      	b.n	8008fe2 <__mcmp+0x2a>
 8008fea:	2001      	movs	r0, #1
 8008fec:	e7f9      	b.n	8008fe2 <__mcmp+0x2a>
	...

08008ff0 <__mdiff>:
 8008ff0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ff4:	4689      	mov	r9, r1
 8008ff6:	4606      	mov	r6, r0
 8008ff8:	4611      	mov	r1, r2
 8008ffa:	4648      	mov	r0, r9
 8008ffc:	4614      	mov	r4, r2
 8008ffe:	f7ff ffdb 	bl	8008fb8 <__mcmp>
 8009002:	1e05      	subs	r5, r0, #0
 8009004:	d112      	bne.n	800902c <__mdiff+0x3c>
 8009006:	4629      	mov	r1, r5
 8009008:	4630      	mov	r0, r6
 800900a:	f7ff fd11 	bl	8008a30 <_Balloc>
 800900e:	4602      	mov	r2, r0
 8009010:	b928      	cbnz	r0, 800901e <__mdiff+0x2e>
 8009012:	4b3f      	ldr	r3, [pc, #252]	@ (8009110 <__mdiff+0x120>)
 8009014:	f240 2137 	movw	r1, #567	@ 0x237
 8009018:	483e      	ldr	r0, [pc, #248]	@ (8009114 <__mdiff+0x124>)
 800901a:	f001 ffe9 	bl	800aff0 <__assert_func>
 800901e:	2301      	movs	r3, #1
 8009020:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009024:	4610      	mov	r0, r2
 8009026:	b003      	add	sp, #12
 8009028:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800902c:	bfbc      	itt	lt
 800902e:	464b      	movlt	r3, r9
 8009030:	46a1      	movlt	r9, r4
 8009032:	4630      	mov	r0, r6
 8009034:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8009038:	bfba      	itte	lt
 800903a:	461c      	movlt	r4, r3
 800903c:	2501      	movlt	r5, #1
 800903e:	2500      	movge	r5, #0
 8009040:	f7ff fcf6 	bl	8008a30 <_Balloc>
 8009044:	4602      	mov	r2, r0
 8009046:	b918      	cbnz	r0, 8009050 <__mdiff+0x60>
 8009048:	4b31      	ldr	r3, [pc, #196]	@ (8009110 <__mdiff+0x120>)
 800904a:	f240 2145 	movw	r1, #581	@ 0x245
 800904e:	e7e3      	b.n	8009018 <__mdiff+0x28>
 8009050:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8009054:	6926      	ldr	r6, [r4, #16]
 8009056:	60c5      	str	r5, [r0, #12]
 8009058:	f109 0310 	add.w	r3, r9, #16
 800905c:	f109 0514 	add.w	r5, r9, #20
 8009060:	f104 0e14 	add.w	lr, r4, #20
 8009064:	f100 0b14 	add.w	fp, r0, #20
 8009068:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800906c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8009070:	9301      	str	r3, [sp, #4]
 8009072:	46d9      	mov	r9, fp
 8009074:	f04f 0c00 	mov.w	ip, #0
 8009078:	9b01      	ldr	r3, [sp, #4]
 800907a:	f85e 0b04 	ldr.w	r0, [lr], #4
 800907e:	f853 af04 	ldr.w	sl, [r3, #4]!
 8009082:	9301      	str	r3, [sp, #4]
 8009084:	fa1f f38a 	uxth.w	r3, sl
 8009088:	4619      	mov	r1, r3
 800908a:	b283      	uxth	r3, r0
 800908c:	1acb      	subs	r3, r1, r3
 800908e:	0c00      	lsrs	r0, r0, #16
 8009090:	4463      	add	r3, ip
 8009092:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8009096:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800909a:	b29b      	uxth	r3, r3
 800909c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80090a0:	4576      	cmp	r6, lr
 80090a2:	f849 3b04 	str.w	r3, [r9], #4
 80090a6:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80090aa:	d8e5      	bhi.n	8009078 <__mdiff+0x88>
 80090ac:	1b33      	subs	r3, r6, r4
 80090ae:	3b15      	subs	r3, #21
 80090b0:	f023 0303 	bic.w	r3, r3, #3
 80090b4:	3415      	adds	r4, #21
 80090b6:	3304      	adds	r3, #4
 80090b8:	42a6      	cmp	r6, r4
 80090ba:	bf38      	it	cc
 80090bc:	2304      	movcc	r3, #4
 80090be:	441d      	add	r5, r3
 80090c0:	445b      	add	r3, fp
 80090c2:	461e      	mov	r6, r3
 80090c4:	462c      	mov	r4, r5
 80090c6:	4544      	cmp	r4, r8
 80090c8:	d30e      	bcc.n	80090e8 <__mdiff+0xf8>
 80090ca:	f108 0103 	add.w	r1, r8, #3
 80090ce:	1b49      	subs	r1, r1, r5
 80090d0:	f021 0103 	bic.w	r1, r1, #3
 80090d4:	3d03      	subs	r5, #3
 80090d6:	45a8      	cmp	r8, r5
 80090d8:	bf38      	it	cc
 80090da:	2100      	movcc	r1, #0
 80090dc:	440b      	add	r3, r1
 80090de:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80090e2:	b191      	cbz	r1, 800910a <__mdiff+0x11a>
 80090e4:	6117      	str	r7, [r2, #16]
 80090e6:	e79d      	b.n	8009024 <__mdiff+0x34>
 80090e8:	f854 1b04 	ldr.w	r1, [r4], #4
 80090ec:	46e6      	mov	lr, ip
 80090ee:	0c08      	lsrs	r0, r1, #16
 80090f0:	fa1c fc81 	uxtah	ip, ip, r1
 80090f4:	4471      	add	r1, lr
 80090f6:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80090fa:	b289      	uxth	r1, r1
 80090fc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8009100:	f846 1b04 	str.w	r1, [r6], #4
 8009104:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009108:	e7dd      	b.n	80090c6 <__mdiff+0xd6>
 800910a:	3f01      	subs	r7, #1
 800910c:	e7e7      	b.n	80090de <__mdiff+0xee>
 800910e:	bf00      	nop
 8009110:	0800bbfc 	.word	0x0800bbfc
 8009114:	0800bc0d 	.word	0x0800bc0d

08009118 <__ulp>:
 8009118:	b082      	sub	sp, #8
 800911a:	ed8d 0b00 	vstr	d0, [sp]
 800911e:	9a01      	ldr	r2, [sp, #4]
 8009120:	4b0f      	ldr	r3, [pc, #60]	@ (8009160 <__ulp+0x48>)
 8009122:	4013      	ands	r3, r2
 8009124:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8009128:	2b00      	cmp	r3, #0
 800912a:	dc08      	bgt.n	800913e <__ulp+0x26>
 800912c:	425b      	negs	r3, r3
 800912e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8009132:	ea4f 5223 	mov.w	r2, r3, asr #20
 8009136:	da04      	bge.n	8009142 <__ulp+0x2a>
 8009138:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800913c:	4113      	asrs	r3, r2
 800913e:	2200      	movs	r2, #0
 8009140:	e008      	b.n	8009154 <__ulp+0x3c>
 8009142:	f1a2 0314 	sub.w	r3, r2, #20
 8009146:	2b1e      	cmp	r3, #30
 8009148:	bfda      	itte	le
 800914a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800914e:	40da      	lsrle	r2, r3
 8009150:	2201      	movgt	r2, #1
 8009152:	2300      	movs	r3, #0
 8009154:	4619      	mov	r1, r3
 8009156:	4610      	mov	r0, r2
 8009158:	ec41 0b10 	vmov	d0, r0, r1
 800915c:	b002      	add	sp, #8
 800915e:	4770      	bx	lr
 8009160:	7ff00000 	.word	0x7ff00000

08009164 <__b2d>:
 8009164:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009168:	6906      	ldr	r6, [r0, #16]
 800916a:	f100 0814 	add.w	r8, r0, #20
 800916e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8009172:	1f37      	subs	r7, r6, #4
 8009174:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8009178:	4610      	mov	r0, r2
 800917a:	f7ff fd4b 	bl	8008c14 <__hi0bits>
 800917e:	f1c0 0320 	rsb	r3, r0, #32
 8009182:	280a      	cmp	r0, #10
 8009184:	600b      	str	r3, [r1, #0]
 8009186:	491b      	ldr	r1, [pc, #108]	@ (80091f4 <__b2d+0x90>)
 8009188:	dc15      	bgt.n	80091b6 <__b2d+0x52>
 800918a:	f1c0 0c0b 	rsb	ip, r0, #11
 800918e:	fa22 f30c 	lsr.w	r3, r2, ip
 8009192:	45b8      	cmp	r8, r7
 8009194:	ea43 0501 	orr.w	r5, r3, r1
 8009198:	bf34      	ite	cc
 800919a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800919e:	2300      	movcs	r3, #0
 80091a0:	3015      	adds	r0, #21
 80091a2:	fa02 f000 	lsl.w	r0, r2, r0
 80091a6:	fa23 f30c 	lsr.w	r3, r3, ip
 80091aa:	4303      	orrs	r3, r0
 80091ac:	461c      	mov	r4, r3
 80091ae:	ec45 4b10 	vmov	d0, r4, r5
 80091b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80091b6:	45b8      	cmp	r8, r7
 80091b8:	bf3a      	itte	cc
 80091ba:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80091be:	f1a6 0708 	subcc.w	r7, r6, #8
 80091c2:	2300      	movcs	r3, #0
 80091c4:	380b      	subs	r0, #11
 80091c6:	d012      	beq.n	80091ee <__b2d+0x8a>
 80091c8:	f1c0 0120 	rsb	r1, r0, #32
 80091cc:	fa23 f401 	lsr.w	r4, r3, r1
 80091d0:	4082      	lsls	r2, r0
 80091d2:	4322      	orrs	r2, r4
 80091d4:	4547      	cmp	r7, r8
 80091d6:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 80091da:	bf8c      	ite	hi
 80091dc:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 80091e0:	2200      	movls	r2, #0
 80091e2:	4083      	lsls	r3, r0
 80091e4:	40ca      	lsrs	r2, r1
 80091e6:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 80091ea:	4313      	orrs	r3, r2
 80091ec:	e7de      	b.n	80091ac <__b2d+0x48>
 80091ee:	ea42 0501 	orr.w	r5, r2, r1
 80091f2:	e7db      	b.n	80091ac <__b2d+0x48>
 80091f4:	3ff00000 	.word	0x3ff00000

080091f8 <__d2b>:
 80091f8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80091fc:	460f      	mov	r7, r1
 80091fe:	2101      	movs	r1, #1
 8009200:	ec59 8b10 	vmov	r8, r9, d0
 8009204:	4616      	mov	r6, r2
 8009206:	f7ff fc13 	bl	8008a30 <_Balloc>
 800920a:	4604      	mov	r4, r0
 800920c:	b930      	cbnz	r0, 800921c <__d2b+0x24>
 800920e:	4602      	mov	r2, r0
 8009210:	4b23      	ldr	r3, [pc, #140]	@ (80092a0 <__d2b+0xa8>)
 8009212:	4824      	ldr	r0, [pc, #144]	@ (80092a4 <__d2b+0xac>)
 8009214:	f240 310f 	movw	r1, #783	@ 0x30f
 8009218:	f001 feea 	bl	800aff0 <__assert_func>
 800921c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009220:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009224:	b10d      	cbz	r5, 800922a <__d2b+0x32>
 8009226:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800922a:	9301      	str	r3, [sp, #4]
 800922c:	f1b8 0300 	subs.w	r3, r8, #0
 8009230:	d023      	beq.n	800927a <__d2b+0x82>
 8009232:	4668      	mov	r0, sp
 8009234:	9300      	str	r3, [sp, #0]
 8009236:	f7ff fd0c 	bl	8008c52 <__lo0bits>
 800923a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800923e:	b1d0      	cbz	r0, 8009276 <__d2b+0x7e>
 8009240:	f1c0 0320 	rsb	r3, r0, #32
 8009244:	fa02 f303 	lsl.w	r3, r2, r3
 8009248:	430b      	orrs	r3, r1
 800924a:	40c2      	lsrs	r2, r0
 800924c:	6163      	str	r3, [r4, #20]
 800924e:	9201      	str	r2, [sp, #4]
 8009250:	9b01      	ldr	r3, [sp, #4]
 8009252:	61a3      	str	r3, [r4, #24]
 8009254:	2b00      	cmp	r3, #0
 8009256:	bf0c      	ite	eq
 8009258:	2201      	moveq	r2, #1
 800925a:	2202      	movne	r2, #2
 800925c:	6122      	str	r2, [r4, #16]
 800925e:	b1a5      	cbz	r5, 800928a <__d2b+0x92>
 8009260:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8009264:	4405      	add	r5, r0
 8009266:	603d      	str	r5, [r7, #0]
 8009268:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800926c:	6030      	str	r0, [r6, #0]
 800926e:	4620      	mov	r0, r4
 8009270:	b003      	add	sp, #12
 8009272:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009276:	6161      	str	r1, [r4, #20]
 8009278:	e7ea      	b.n	8009250 <__d2b+0x58>
 800927a:	a801      	add	r0, sp, #4
 800927c:	f7ff fce9 	bl	8008c52 <__lo0bits>
 8009280:	9b01      	ldr	r3, [sp, #4]
 8009282:	6163      	str	r3, [r4, #20]
 8009284:	3020      	adds	r0, #32
 8009286:	2201      	movs	r2, #1
 8009288:	e7e8      	b.n	800925c <__d2b+0x64>
 800928a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800928e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8009292:	6038      	str	r0, [r7, #0]
 8009294:	6918      	ldr	r0, [r3, #16]
 8009296:	f7ff fcbd 	bl	8008c14 <__hi0bits>
 800929a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800929e:	e7e5      	b.n	800926c <__d2b+0x74>
 80092a0:	0800bbfc 	.word	0x0800bbfc
 80092a4:	0800bc0d 	.word	0x0800bc0d

080092a8 <__ratio>:
 80092a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092ac:	b085      	sub	sp, #20
 80092ae:	e9cd 1000 	strd	r1, r0, [sp]
 80092b2:	a902      	add	r1, sp, #8
 80092b4:	f7ff ff56 	bl	8009164 <__b2d>
 80092b8:	9800      	ldr	r0, [sp, #0]
 80092ba:	a903      	add	r1, sp, #12
 80092bc:	ec55 4b10 	vmov	r4, r5, d0
 80092c0:	f7ff ff50 	bl	8009164 <__b2d>
 80092c4:	9b01      	ldr	r3, [sp, #4]
 80092c6:	6919      	ldr	r1, [r3, #16]
 80092c8:	9b00      	ldr	r3, [sp, #0]
 80092ca:	691b      	ldr	r3, [r3, #16]
 80092cc:	1ac9      	subs	r1, r1, r3
 80092ce:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 80092d2:	1a9b      	subs	r3, r3, r2
 80092d4:	ec5b ab10 	vmov	sl, fp, d0
 80092d8:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 80092dc:	2b00      	cmp	r3, #0
 80092de:	bfce      	itee	gt
 80092e0:	462a      	movgt	r2, r5
 80092e2:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80092e6:	465a      	movle	r2, fp
 80092e8:	462f      	mov	r7, r5
 80092ea:	46d9      	mov	r9, fp
 80092ec:	bfcc      	ite	gt
 80092ee:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80092f2:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 80092f6:	464b      	mov	r3, r9
 80092f8:	4652      	mov	r2, sl
 80092fa:	4620      	mov	r0, r4
 80092fc:	4639      	mov	r1, r7
 80092fe:	f7f7 fabd 	bl	800087c <__aeabi_ddiv>
 8009302:	ec41 0b10 	vmov	d0, r0, r1
 8009306:	b005      	add	sp, #20
 8009308:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800930c <__copybits>:
 800930c:	3901      	subs	r1, #1
 800930e:	b570      	push	{r4, r5, r6, lr}
 8009310:	1149      	asrs	r1, r1, #5
 8009312:	6914      	ldr	r4, [r2, #16]
 8009314:	3101      	adds	r1, #1
 8009316:	f102 0314 	add.w	r3, r2, #20
 800931a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800931e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8009322:	1f05      	subs	r5, r0, #4
 8009324:	42a3      	cmp	r3, r4
 8009326:	d30c      	bcc.n	8009342 <__copybits+0x36>
 8009328:	1aa3      	subs	r3, r4, r2
 800932a:	3b11      	subs	r3, #17
 800932c:	f023 0303 	bic.w	r3, r3, #3
 8009330:	3211      	adds	r2, #17
 8009332:	42a2      	cmp	r2, r4
 8009334:	bf88      	it	hi
 8009336:	2300      	movhi	r3, #0
 8009338:	4418      	add	r0, r3
 800933a:	2300      	movs	r3, #0
 800933c:	4288      	cmp	r0, r1
 800933e:	d305      	bcc.n	800934c <__copybits+0x40>
 8009340:	bd70      	pop	{r4, r5, r6, pc}
 8009342:	f853 6b04 	ldr.w	r6, [r3], #4
 8009346:	f845 6f04 	str.w	r6, [r5, #4]!
 800934a:	e7eb      	b.n	8009324 <__copybits+0x18>
 800934c:	f840 3b04 	str.w	r3, [r0], #4
 8009350:	e7f4      	b.n	800933c <__copybits+0x30>

08009352 <__any_on>:
 8009352:	f100 0214 	add.w	r2, r0, #20
 8009356:	6900      	ldr	r0, [r0, #16]
 8009358:	114b      	asrs	r3, r1, #5
 800935a:	4298      	cmp	r0, r3
 800935c:	b510      	push	{r4, lr}
 800935e:	db11      	blt.n	8009384 <__any_on+0x32>
 8009360:	dd0a      	ble.n	8009378 <__any_on+0x26>
 8009362:	f011 011f 	ands.w	r1, r1, #31
 8009366:	d007      	beq.n	8009378 <__any_on+0x26>
 8009368:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800936c:	fa24 f001 	lsr.w	r0, r4, r1
 8009370:	fa00 f101 	lsl.w	r1, r0, r1
 8009374:	428c      	cmp	r4, r1
 8009376:	d10b      	bne.n	8009390 <__any_on+0x3e>
 8009378:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800937c:	4293      	cmp	r3, r2
 800937e:	d803      	bhi.n	8009388 <__any_on+0x36>
 8009380:	2000      	movs	r0, #0
 8009382:	bd10      	pop	{r4, pc}
 8009384:	4603      	mov	r3, r0
 8009386:	e7f7      	b.n	8009378 <__any_on+0x26>
 8009388:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800938c:	2900      	cmp	r1, #0
 800938e:	d0f5      	beq.n	800937c <__any_on+0x2a>
 8009390:	2001      	movs	r0, #1
 8009392:	e7f6      	b.n	8009382 <__any_on+0x30>

08009394 <sulp>:
 8009394:	b570      	push	{r4, r5, r6, lr}
 8009396:	4604      	mov	r4, r0
 8009398:	460d      	mov	r5, r1
 800939a:	ec45 4b10 	vmov	d0, r4, r5
 800939e:	4616      	mov	r6, r2
 80093a0:	f7ff feba 	bl	8009118 <__ulp>
 80093a4:	ec51 0b10 	vmov	r0, r1, d0
 80093a8:	b17e      	cbz	r6, 80093ca <sulp+0x36>
 80093aa:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80093ae:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	dd09      	ble.n	80093ca <sulp+0x36>
 80093b6:	051b      	lsls	r3, r3, #20
 80093b8:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 80093bc:	2400      	movs	r4, #0
 80093be:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 80093c2:	4622      	mov	r2, r4
 80093c4:	462b      	mov	r3, r5
 80093c6:	f7f7 f92f 	bl	8000628 <__aeabi_dmul>
 80093ca:	ec41 0b10 	vmov	d0, r0, r1
 80093ce:	bd70      	pop	{r4, r5, r6, pc}

080093d0 <_strtod_l>:
 80093d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093d4:	b09f      	sub	sp, #124	@ 0x7c
 80093d6:	460c      	mov	r4, r1
 80093d8:	9217      	str	r2, [sp, #92]	@ 0x5c
 80093da:	2200      	movs	r2, #0
 80093dc:	921a      	str	r2, [sp, #104]	@ 0x68
 80093de:	9005      	str	r0, [sp, #20]
 80093e0:	f04f 0a00 	mov.w	sl, #0
 80093e4:	f04f 0b00 	mov.w	fp, #0
 80093e8:	460a      	mov	r2, r1
 80093ea:	9219      	str	r2, [sp, #100]	@ 0x64
 80093ec:	7811      	ldrb	r1, [r2, #0]
 80093ee:	292b      	cmp	r1, #43	@ 0x2b
 80093f0:	d04a      	beq.n	8009488 <_strtod_l+0xb8>
 80093f2:	d838      	bhi.n	8009466 <_strtod_l+0x96>
 80093f4:	290d      	cmp	r1, #13
 80093f6:	d832      	bhi.n	800945e <_strtod_l+0x8e>
 80093f8:	2908      	cmp	r1, #8
 80093fa:	d832      	bhi.n	8009462 <_strtod_l+0x92>
 80093fc:	2900      	cmp	r1, #0
 80093fe:	d03b      	beq.n	8009478 <_strtod_l+0xa8>
 8009400:	2200      	movs	r2, #0
 8009402:	920b      	str	r2, [sp, #44]	@ 0x2c
 8009404:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8009406:	782a      	ldrb	r2, [r5, #0]
 8009408:	2a30      	cmp	r2, #48	@ 0x30
 800940a:	f040 80b3 	bne.w	8009574 <_strtod_l+0x1a4>
 800940e:	786a      	ldrb	r2, [r5, #1]
 8009410:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8009414:	2a58      	cmp	r2, #88	@ 0x58
 8009416:	d16e      	bne.n	80094f6 <_strtod_l+0x126>
 8009418:	9302      	str	r3, [sp, #8]
 800941a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800941c:	9301      	str	r3, [sp, #4]
 800941e:	ab1a      	add	r3, sp, #104	@ 0x68
 8009420:	9300      	str	r3, [sp, #0]
 8009422:	4a8e      	ldr	r2, [pc, #568]	@ (800965c <_strtod_l+0x28c>)
 8009424:	9805      	ldr	r0, [sp, #20]
 8009426:	ab1b      	add	r3, sp, #108	@ 0x6c
 8009428:	a919      	add	r1, sp, #100	@ 0x64
 800942a:	f001 fe7b 	bl	800b124 <__gethex>
 800942e:	f010 060f 	ands.w	r6, r0, #15
 8009432:	4604      	mov	r4, r0
 8009434:	d005      	beq.n	8009442 <_strtod_l+0x72>
 8009436:	2e06      	cmp	r6, #6
 8009438:	d128      	bne.n	800948c <_strtod_l+0xbc>
 800943a:	3501      	adds	r5, #1
 800943c:	2300      	movs	r3, #0
 800943e:	9519      	str	r5, [sp, #100]	@ 0x64
 8009440:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009442:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8009444:	2b00      	cmp	r3, #0
 8009446:	f040 858e 	bne.w	8009f66 <_strtod_l+0xb96>
 800944a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800944c:	b1cb      	cbz	r3, 8009482 <_strtod_l+0xb2>
 800944e:	4652      	mov	r2, sl
 8009450:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8009454:	ec43 2b10 	vmov	d0, r2, r3
 8009458:	b01f      	add	sp, #124	@ 0x7c
 800945a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800945e:	2920      	cmp	r1, #32
 8009460:	d1ce      	bne.n	8009400 <_strtod_l+0x30>
 8009462:	3201      	adds	r2, #1
 8009464:	e7c1      	b.n	80093ea <_strtod_l+0x1a>
 8009466:	292d      	cmp	r1, #45	@ 0x2d
 8009468:	d1ca      	bne.n	8009400 <_strtod_l+0x30>
 800946a:	2101      	movs	r1, #1
 800946c:	910b      	str	r1, [sp, #44]	@ 0x2c
 800946e:	1c51      	adds	r1, r2, #1
 8009470:	9119      	str	r1, [sp, #100]	@ 0x64
 8009472:	7852      	ldrb	r2, [r2, #1]
 8009474:	2a00      	cmp	r2, #0
 8009476:	d1c5      	bne.n	8009404 <_strtod_l+0x34>
 8009478:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800947a:	9419      	str	r4, [sp, #100]	@ 0x64
 800947c:	2b00      	cmp	r3, #0
 800947e:	f040 8570 	bne.w	8009f62 <_strtod_l+0xb92>
 8009482:	4652      	mov	r2, sl
 8009484:	465b      	mov	r3, fp
 8009486:	e7e5      	b.n	8009454 <_strtod_l+0x84>
 8009488:	2100      	movs	r1, #0
 800948a:	e7ef      	b.n	800946c <_strtod_l+0x9c>
 800948c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800948e:	b13a      	cbz	r2, 80094a0 <_strtod_l+0xd0>
 8009490:	2135      	movs	r1, #53	@ 0x35
 8009492:	a81c      	add	r0, sp, #112	@ 0x70
 8009494:	f7ff ff3a 	bl	800930c <__copybits>
 8009498:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800949a:	9805      	ldr	r0, [sp, #20]
 800949c:	f7ff fb08 	bl	8008ab0 <_Bfree>
 80094a0:	3e01      	subs	r6, #1
 80094a2:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 80094a4:	2e04      	cmp	r6, #4
 80094a6:	d806      	bhi.n	80094b6 <_strtod_l+0xe6>
 80094a8:	e8df f006 	tbb	[pc, r6]
 80094ac:	201d0314 	.word	0x201d0314
 80094b0:	14          	.byte	0x14
 80094b1:	00          	.byte	0x00
 80094b2:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 80094b6:	05e1      	lsls	r1, r4, #23
 80094b8:	bf48      	it	mi
 80094ba:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 80094be:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80094c2:	0d1b      	lsrs	r3, r3, #20
 80094c4:	051b      	lsls	r3, r3, #20
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	d1bb      	bne.n	8009442 <_strtod_l+0x72>
 80094ca:	f7fe fb2f 	bl	8007b2c <__errno>
 80094ce:	2322      	movs	r3, #34	@ 0x22
 80094d0:	6003      	str	r3, [r0, #0]
 80094d2:	e7b6      	b.n	8009442 <_strtod_l+0x72>
 80094d4:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 80094d8:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 80094dc:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80094e0:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80094e4:	e7e7      	b.n	80094b6 <_strtod_l+0xe6>
 80094e6:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 8009664 <_strtod_l+0x294>
 80094ea:	e7e4      	b.n	80094b6 <_strtod_l+0xe6>
 80094ec:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 80094f0:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 80094f4:	e7df      	b.n	80094b6 <_strtod_l+0xe6>
 80094f6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80094f8:	1c5a      	adds	r2, r3, #1
 80094fa:	9219      	str	r2, [sp, #100]	@ 0x64
 80094fc:	785b      	ldrb	r3, [r3, #1]
 80094fe:	2b30      	cmp	r3, #48	@ 0x30
 8009500:	d0f9      	beq.n	80094f6 <_strtod_l+0x126>
 8009502:	2b00      	cmp	r3, #0
 8009504:	d09d      	beq.n	8009442 <_strtod_l+0x72>
 8009506:	2301      	movs	r3, #1
 8009508:	9309      	str	r3, [sp, #36]	@ 0x24
 800950a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800950c:	930c      	str	r3, [sp, #48]	@ 0x30
 800950e:	2300      	movs	r3, #0
 8009510:	9308      	str	r3, [sp, #32]
 8009512:	930a      	str	r3, [sp, #40]	@ 0x28
 8009514:	461f      	mov	r7, r3
 8009516:	220a      	movs	r2, #10
 8009518:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800951a:	7805      	ldrb	r5, [r0, #0]
 800951c:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8009520:	b2d9      	uxtb	r1, r3
 8009522:	2909      	cmp	r1, #9
 8009524:	d928      	bls.n	8009578 <_strtod_l+0x1a8>
 8009526:	494e      	ldr	r1, [pc, #312]	@ (8009660 <_strtod_l+0x290>)
 8009528:	2201      	movs	r2, #1
 800952a:	f001 fd06 	bl	800af3a <strncmp>
 800952e:	2800      	cmp	r0, #0
 8009530:	d032      	beq.n	8009598 <_strtod_l+0x1c8>
 8009532:	2000      	movs	r0, #0
 8009534:	462a      	mov	r2, r5
 8009536:	4681      	mov	r9, r0
 8009538:	463d      	mov	r5, r7
 800953a:	4603      	mov	r3, r0
 800953c:	2a65      	cmp	r2, #101	@ 0x65
 800953e:	d001      	beq.n	8009544 <_strtod_l+0x174>
 8009540:	2a45      	cmp	r2, #69	@ 0x45
 8009542:	d114      	bne.n	800956e <_strtod_l+0x19e>
 8009544:	b91d      	cbnz	r5, 800954e <_strtod_l+0x17e>
 8009546:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009548:	4302      	orrs	r2, r0
 800954a:	d095      	beq.n	8009478 <_strtod_l+0xa8>
 800954c:	2500      	movs	r5, #0
 800954e:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8009550:	1c62      	adds	r2, r4, #1
 8009552:	9219      	str	r2, [sp, #100]	@ 0x64
 8009554:	7862      	ldrb	r2, [r4, #1]
 8009556:	2a2b      	cmp	r2, #43	@ 0x2b
 8009558:	d077      	beq.n	800964a <_strtod_l+0x27a>
 800955a:	2a2d      	cmp	r2, #45	@ 0x2d
 800955c:	d07b      	beq.n	8009656 <_strtod_l+0x286>
 800955e:	f04f 0c00 	mov.w	ip, #0
 8009562:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8009566:	2909      	cmp	r1, #9
 8009568:	f240 8082 	bls.w	8009670 <_strtod_l+0x2a0>
 800956c:	9419      	str	r4, [sp, #100]	@ 0x64
 800956e:	f04f 0800 	mov.w	r8, #0
 8009572:	e0a2      	b.n	80096ba <_strtod_l+0x2ea>
 8009574:	2300      	movs	r3, #0
 8009576:	e7c7      	b.n	8009508 <_strtod_l+0x138>
 8009578:	2f08      	cmp	r7, #8
 800957a:	bfd5      	itete	le
 800957c:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800957e:	9908      	ldrgt	r1, [sp, #32]
 8009580:	fb02 3301 	mlale	r3, r2, r1, r3
 8009584:	fb02 3301 	mlagt	r3, r2, r1, r3
 8009588:	f100 0001 	add.w	r0, r0, #1
 800958c:	bfd4      	ite	le
 800958e:	930a      	strle	r3, [sp, #40]	@ 0x28
 8009590:	9308      	strgt	r3, [sp, #32]
 8009592:	3701      	adds	r7, #1
 8009594:	9019      	str	r0, [sp, #100]	@ 0x64
 8009596:	e7bf      	b.n	8009518 <_strtod_l+0x148>
 8009598:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800959a:	1c5a      	adds	r2, r3, #1
 800959c:	9219      	str	r2, [sp, #100]	@ 0x64
 800959e:	785a      	ldrb	r2, [r3, #1]
 80095a0:	b37f      	cbz	r7, 8009602 <_strtod_l+0x232>
 80095a2:	4681      	mov	r9, r0
 80095a4:	463d      	mov	r5, r7
 80095a6:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 80095aa:	2b09      	cmp	r3, #9
 80095ac:	d912      	bls.n	80095d4 <_strtod_l+0x204>
 80095ae:	2301      	movs	r3, #1
 80095b0:	e7c4      	b.n	800953c <_strtod_l+0x16c>
 80095b2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80095b4:	1c5a      	adds	r2, r3, #1
 80095b6:	9219      	str	r2, [sp, #100]	@ 0x64
 80095b8:	785a      	ldrb	r2, [r3, #1]
 80095ba:	3001      	adds	r0, #1
 80095bc:	2a30      	cmp	r2, #48	@ 0x30
 80095be:	d0f8      	beq.n	80095b2 <_strtod_l+0x1e2>
 80095c0:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 80095c4:	2b08      	cmp	r3, #8
 80095c6:	f200 84d3 	bhi.w	8009f70 <_strtod_l+0xba0>
 80095ca:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80095cc:	930c      	str	r3, [sp, #48]	@ 0x30
 80095ce:	4681      	mov	r9, r0
 80095d0:	2000      	movs	r0, #0
 80095d2:	4605      	mov	r5, r0
 80095d4:	3a30      	subs	r2, #48	@ 0x30
 80095d6:	f100 0301 	add.w	r3, r0, #1
 80095da:	d02a      	beq.n	8009632 <_strtod_l+0x262>
 80095dc:	4499      	add	r9, r3
 80095de:	eb00 0c05 	add.w	ip, r0, r5
 80095e2:	462b      	mov	r3, r5
 80095e4:	210a      	movs	r1, #10
 80095e6:	4563      	cmp	r3, ip
 80095e8:	d10d      	bne.n	8009606 <_strtod_l+0x236>
 80095ea:	1c69      	adds	r1, r5, #1
 80095ec:	4401      	add	r1, r0
 80095ee:	4428      	add	r0, r5
 80095f0:	2808      	cmp	r0, #8
 80095f2:	dc16      	bgt.n	8009622 <_strtod_l+0x252>
 80095f4:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80095f6:	230a      	movs	r3, #10
 80095f8:	fb03 2300 	mla	r3, r3, r0, r2
 80095fc:	930a      	str	r3, [sp, #40]	@ 0x28
 80095fe:	2300      	movs	r3, #0
 8009600:	e018      	b.n	8009634 <_strtod_l+0x264>
 8009602:	4638      	mov	r0, r7
 8009604:	e7da      	b.n	80095bc <_strtod_l+0x1ec>
 8009606:	2b08      	cmp	r3, #8
 8009608:	f103 0301 	add.w	r3, r3, #1
 800960c:	dc03      	bgt.n	8009616 <_strtod_l+0x246>
 800960e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8009610:	434e      	muls	r6, r1
 8009612:	960a      	str	r6, [sp, #40]	@ 0x28
 8009614:	e7e7      	b.n	80095e6 <_strtod_l+0x216>
 8009616:	2b10      	cmp	r3, #16
 8009618:	bfde      	ittt	le
 800961a:	9e08      	ldrle	r6, [sp, #32]
 800961c:	434e      	mulle	r6, r1
 800961e:	9608      	strle	r6, [sp, #32]
 8009620:	e7e1      	b.n	80095e6 <_strtod_l+0x216>
 8009622:	280f      	cmp	r0, #15
 8009624:	dceb      	bgt.n	80095fe <_strtod_l+0x22e>
 8009626:	9808      	ldr	r0, [sp, #32]
 8009628:	230a      	movs	r3, #10
 800962a:	fb03 2300 	mla	r3, r3, r0, r2
 800962e:	9308      	str	r3, [sp, #32]
 8009630:	e7e5      	b.n	80095fe <_strtod_l+0x22e>
 8009632:	4629      	mov	r1, r5
 8009634:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009636:	1c50      	adds	r0, r2, #1
 8009638:	9019      	str	r0, [sp, #100]	@ 0x64
 800963a:	7852      	ldrb	r2, [r2, #1]
 800963c:	4618      	mov	r0, r3
 800963e:	460d      	mov	r5, r1
 8009640:	e7b1      	b.n	80095a6 <_strtod_l+0x1d6>
 8009642:	f04f 0900 	mov.w	r9, #0
 8009646:	2301      	movs	r3, #1
 8009648:	e77d      	b.n	8009546 <_strtod_l+0x176>
 800964a:	f04f 0c00 	mov.w	ip, #0
 800964e:	1ca2      	adds	r2, r4, #2
 8009650:	9219      	str	r2, [sp, #100]	@ 0x64
 8009652:	78a2      	ldrb	r2, [r4, #2]
 8009654:	e785      	b.n	8009562 <_strtod_l+0x192>
 8009656:	f04f 0c01 	mov.w	ip, #1
 800965a:	e7f8      	b.n	800964e <_strtod_l+0x27e>
 800965c:	0800bd80 	.word	0x0800bd80
 8009660:	0800bd68 	.word	0x0800bd68
 8009664:	7ff00000 	.word	0x7ff00000
 8009668:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800966a:	1c51      	adds	r1, r2, #1
 800966c:	9119      	str	r1, [sp, #100]	@ 0x64
 800966e:	7852      	ldrb	r2, [r2, #1]
 8009670:	2a30      	cmp	r2, #48	@ 0x30
 8009672:	d0f9      	beq.n	8009668 <_strtod_l+0x298>
 8009674:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8009678:	2908      	cmp	r1, #8
 800967a:	f63f af78 	bhi.w	800956e <_strtod_l+0x19e>
 800967e:	3a30      	subs	r2, #48	@ 0x30
 8009680:	920e      	str	r2, [sp, #56]	@ 0x38
 8009682:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009684:	920f      	str	r2, [sp, #60]	@ 0x3c
 8009686:	f04f 080a 	mov.w	r8, #10
 800968a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800968c:	1c56      	adds	r6, r2, #1
 800968e:	9619      	str	r6, [sp, #100]	@ 0x64
 8009690:	7852      	ldrb	r2, [r2, #1]
 8009692:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8009696:	f1be 0f09 	cmp.w	lr, #9
 800969a:	d939      	bls.n	8009710 <_strtod_l+0x340>
 800969c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800969e:	1a76      	subs	r6, r6, r1
 80096a0:	2e08      	cmp	r6, #8
 80096a2:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 80096a6:	dc03      	bgt.n	80096b0 <_strtod_l+0x2e0>
 80096a8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80096aa:	4588      	cmp	r8, r1
 80096ac:	bfa8      	it	ge
 80096ae:	4688      	movge	r8, r1
 80096b0:	f1bc 0f00 	cmp.w	ip, #0
 80096b4:	d001      	beq.n	80096ba <_strtod_l+0x2ea>
 80096b6:	f1c8 0800 	rsb	r8, r8, #0
 80096ba:	2d00      	cmp	r5, #0
 80096bc:	d14e      	bne.n	800975c <_strtod_l+0x38c>
 80096be:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80096c0:	4308      	orrs	r0, r1
 80096c2:	f47f aebe 	bne.w	8009442 <_strtod_l+0x72>
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	f47f aed6 	bne.w	8009478 <_strtod_l+0xa8>
 80096cc:	2a69      	cmp	r2, #105	@ 0x69
 80096ce:	d028      	beq.n	8009722 <_strtod_l+0x352>
 80096d0:	dc25      	bgt.n	800971e <_strtod_l+0x34e>
 80096d2:	2a49      	cmp	r2, #73	@ 0x49
 80096d4:	d025      	beq.n	8009722 <_strtod_l+0x352>
 80096d6:	2a4e      	cmp	r2, #78	@ 0x4e
 80096d8:	f47f aece 	bne.w	8009478 <_strtod_l+0xa8>
 80096dc:	499b      	ldr	r1, [pc, #620]	@ (800994c <_strtod_l+0x57c>)
 80096de:	a819      	add	r0, sp, #100	@ 0x64
 80096e0:	f001 ff42 	bl	800b568 <__match>
 80096e4:	2800      	cmp	r0, #0
 80096e6:	f43f aec7 	beq.w	8009478 <_strtod_l+0xa8>
 80096ea:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80096ec:	781b      	ldrb	r3, [r3, #0]
 80096ee:	2b28      	cmp	r3, #40	@ 0x28
 80096f0:	d12e      	bne.n	8009750 <_strtod_l+0x380>
 80096f2:	4997      	ldr	r1, [pc, #604]	@ (8009950 <_strtod_l+0x580>)
 80096f4:	aa1c      	add	r2, sp, #112	@ 0x70
 80096f6:	a819      	add	r0, sp, #100	@ 0x64
 80096f8:	f001 ff4a 	bl	800b590 <__hexnan>
 80096fc:	2805      	cmp	r0, #5
 80096fe:	d127      	bne.n	8009750 <_strtod_l+0x380>
 8009700:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8009702:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8009706:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800970a:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800970e:	e698      	b.n	8009442 <_strtod_l+0x72>
 8009710:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8009712:	fb08 2101 	mla	r1, r8, r1, r2
 8009716:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800971a:	920e      	str	r2, [sp, #56]	@ 0x38
 800971c:	e7b5      	b.n	800968a <_strtod_l+0x2ba>
 800971e:	2a6e      	cmp	r2, #110	@ 0x6e
 8009720:	e7da      	b.n	80096d8 <_strtod_l+0x308>
 8009722:	498c      	ldr	r1, [pc, #560]	@ (8009954 <_strtod_l+0x584>)
 8009724:	a819      	add	r0, sp, #100	@ 0x64
 8009726:	f001 ff1f 	bl	800b568 <__match>
 800972a:	2800      	cmp	r0, #0
 800972c:	f43f aea4 	beq.w	8009478 <_strtod_l+0xa8>
 8009730:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009732:	4989      	ldr	r1, [pc, #548]	@ (8009958 <_strtod_l+0x588>)
 8009734:	3b01      	subs	r3, #1
 8009736:	a819      	add	r0, sp, #100	@ 0x64
 8009738:	9319      	str	r3, [sp, #100]	@ 0x64
 800973a:	f001 ff15 	bl	800b568 <__match>
 800973e:	b910      	cbnz	r0, 8009746 <_strtod_l+0x376>
 8009740:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009742:	3301      	adds	r3, #1
 8009744:	9319      	str	r3, [sp, #100]	@ 0x64
 8009746:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8009968 <_strtod_l+0x598>
 800974a:	f04f 0a00 	mov.w	sl, #0
 800974e:	e678      	b.n	8009442 <_strtod_l+0x72>
 8009750:	4882      	ldr	r0, [pc, #520]	@ (800995c <_strtod_l+0x58c>)
 8009752:	f001 fc45 	bl	800afe0 <nan>
 8009756:	ec5b ab10 	vmov	sl, fp, d0
 800975a:	e672      	b.n	8009442 <_strtod_l+0x72>
 800975c:	eba8 0309 	sub.w	r3, r8, r9
 8009760:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8009762:	9309      	str	r3, [sp, #36]	@ 0x24
 8009764:	2f00      	cmp	r7, #0
 8009766:	bf08      	it	eq
 8009768:	462f      	moveq	r7, r5
 800976a:	2d10      	cmp	r5, #16
 800976c:	462c      	mov	r4, r5
 800976e:	bfa8      	it	ge
 8009770:	2410      	movge	r4, #16
 8009772:	f7f6 fedf 	bl	8000534 <__aeabi_ui2d>
 8009776:	2d09      	cmp	r5, #9
 8009778:	4682      	mov	sl, r0
 800977a:	468b      	mov	fp, r1
 800977c:	dc13      	bgt.n	80097a6 <_strtod_l+0x3d6>
 800977e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009780:	2b00      	cmp	r3, #0
 8009782:	f43f ae5e 	beq.w	8009442 <_strtod_l+0x72>
 8009786:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009788:	dd78      	ble.n	800987c <_strtod_l+0x4ac>
 800978a:	2b16      	cmp	r3, #22
 800978c:	dc5f      	bgt.n	800984e <_strtod_l+0x47e>
 800978e:	4974      	ldr	r1, [pc, #464]	@ (8009960 <_strtod_l+0x590>)
 8009790:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009794:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009798:	4652      	mov	r2, sl
 800979a:	465b      	mov	r3, fp
 800979c:	f7f6 ff44 	bl	8000628 <__aeabi_dmul>
 80097a0:	4682      	mov	sl, r0
 80097a2:	468b      	mov	fp, r1
 80097a4:	e64d      	b.n	8009442 <_strtod_l+0x72>
 80097a6:	4b6e      	ldr	r3, [pc, #440]	@ (8009960 <_strtod_l+0x590>)
 80097a8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80097ac:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 80097b0:	f7f6 ff3a 	bl	8000628 <__aeabi_dmul>
 80097b4:	4682      	mov	sl, r0
 80097b6:	9808      	ldr	r0, [sp, #32]
 80097b8:	468b      	mov	fp, r1
 80097ba:	f7f6 febb 	bl	8000534 <__aeabi_ui2d>
 80097be:	4602      	mov	r2, r0
 80097c0:	460b      	mov	r3, r1
 80097c2:	4650      	mov	r0, sl
 80097c4:	4659      	mov	r1, fp
 80097c6:	f7f6 fd79 	bl	80002bc <__adddf3>
 80097ca:	2d0f      	cmp	r5, #15
 80097cc:	4682      	mov	sl, r0
 80097ce:	468b      	mov	fp, r1
 80097d0:	ddd5      	ble.n	800977e <_strtod_l+0x3ae>
 80097d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80097d4:	1b2c      	subs	r4, r5, r4
 80097d6:	441c      	add	r4, r3
 80097d8:	2c00      	cmp	r4, #0
 80097da:	f340 8096 	ble.w	800990a <_strtod_l+0x53a>
 80097de:	f014 030f 	ands.w	r3, r4, #15
 80097e2:	d00a      	beq.n	80097fa <_strtod_l+0x42a>
 80097e4:	495e      	ldr	r1, [pc, #376]	@ (8009960 <_strtod_l+0x590>)
 80097e6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80097ea:	4652      	mov	r2, sl
 80097ec:	465b      	mov	r3, fp
 80097ee:	e9d1 0100 	ldrd	r0, r1, [r1]
 80097f2:	f7f6 ff19 	bl	8000628 <__aeabi_dmul>
 80097f6:	4682      	mov	sl, r0
 80097f8:	468b      	mov	fp, r1
 80097fa:	f034 040f 	bics.w	r4, r4, #15
 80097fe:	d073      	beq.n	80098e8 <_strtod_l+0x518>
 8009800:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8009804:	dd48      	ble.n	8009898 <_strtod_l+0x4c8>
 8009806:	2400      	movs	r4, #0
 8009808:	46a0      	mov	r8, r4
 800980a:	940a      	str	r4, [sp, #40]	@ 0x28
 800980c:	46a1      	mov	r9, r4
 800980e:	9a05      	ldr	r2, [sp, #20]
 8009810:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8009968 <_strtod_l+0x598>
 8009814:	2322      	movs	r3, #34	@ 0x22
 8009816:	6013      	str	r3, [r2, #0]
 8009818:	f04f 0a00 	mov.w	sl, #0
 800981c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800981e:	2b00      	cmp	r3, #0
 8009820:	f43f ae0f 	beq.w	8009442 <_strtod_l+0x72>
 8009824:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009826:	9805      	ldr	r0, [sp, #20]
 8009828:	f7ff f942 	bl	8008ab0 <_Bfree>
 800982c:	9805      	ldr	r0, [sp, #20]
 800982e:	4649      	mov	r1, r9
 8009830:	f7ff f93e 	bl	8008ab0 <_Bfree>
 8009834:	9805      	ldr	r0, [sp, #20]
 8009836:	4641      	mov	r1, r8
 8009838:	f7ff f93a 	bl	8008ab0 <_Bfree>
 800983c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800983e:	9805      	ldr	r0, [sp, #20]
 8009840:	f7ff f936 	bl	8008ab0 <_Bfree>
 8009844:	9805      	ldr	r0, [sp, #20]
 8009846:	4621      	mov	r1, r4
 8009848:	f7ff f932 	bl	8008ab0 <_Bfree>
 800984c:	e5f9      	b.n	8009442 <_strtod_l+0x72>
 800984e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009850:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8009854:	4293      	cmp	r3, r2
 8009856:	dbbc      	blt.n	80097d2 <_strtod_l+0x402>
 8009858:	4c41      	ldr	r4, [pc, #260]	@ (8009960 <_strtod_l+0x590>)
 800985a:	f1c5 050f 	rsb	r5, r5, #15
 800985e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8009862:	4652      	mov	r2, sl
 8009864:	465b      	mov	r3, fp
 8009866:	e9d1 0100 	ldrd	r0, r1, [r1]
 800986a:	f7f6 fedd 	bl	8000628 <__aeabi_dmul>
 800986e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009870:	1b5d      	subs	r5, r3, r5
 8009872:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8009876:	e9d4 2300 	ldrd	r2, r3, [r4]
 800987a:	e78f      	b.n	800979c <_strtod_l+0x3cc>
 800987c:	3316      	adds	r3, #22
 800987e:	dba8      	blt.n	80097d2 <_strtod_l+0x402>
 8009880:	4b37      	ldr	r3, [pc, #220]	@ (8009960 <_strtod_l+0x590>)
 8009882:	eba9 0808 	sub.w	r8, r9, r8
 8009886:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800988a:	e9d8 2300 	ldrd	r2, r3, [r8]
 800988e:	4650      	mov	r0, sl
 8009890:	4659      	mov	r1, fp
 8009892:	f7f6 fff3 	bl	800087c <__aeabi_ddiv>
 8009896:	e783      	b.n	80097a0 <_strtod_l+0x3d0>
 8009898:	4b32      	ldr	r3, [pc, #200]	@ (8009964 <_strtod_l+0x594>)
 800989a:	9308      	str	r3, [sp, #32]
 800989c:	2300      	movs	r3, #0
 800989e:	1124      	asrs	r4, r4, #4
 80098a0:	4650      	mov	r0, sl
 80098a2:	4659      	mov	r1, fp
 80098a4:	461e      	mov	r6, r3
 80098a6:	2c01      	cmp	r4, #1
 80098a8:	dc21      	bgt.n	80098ee <_strtod_l+0x51e>
 80098aa:	b10b      	cbz	r3, 80098b0 <_strtod_l+0x4e0>
 80098ac:	4682      	mov	sl, r0
 80098ae:	468b      	mov	fp, r1
 80098b0:	492c      	ldr	r1, [pc, #176]	@ (8009964 <_strtod_l+0x594>)
 80098b2:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 80098b6:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 80098ba:	4652      	mov	r2, sl
 80098bc:	465b      	mov	r3, fp
 80098be:	e9d1 0100 	ldrd	r0, r1, [r1]
 80098c2:	f7f6 feb1 	bl	8000628 <__aeabi_dmul>
 80098c6:	4b28      	ldr	r3, [pc, #160]	@ (8009968 <_strtod_l+0x598>)
 80098c8:	460a      	mov	r2, r1
 80098ca:	400b      	ands	r3, r1
 80098cc:	4927      	ldr	r1, [pc, #156]	@ (800996c <_strtod_l+0x59c>)
 80098ce:	428b      	cmp	r3, r1
 80098d0:	4682      	mov	sl, r0
 80098d2:	d898      	bhi.n	8009806 <_strtod_l+0x436>
 80098d4:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 80098d8:	428b      	cmp	r3, r1
 80098da:	bf86      	itte	hi
 80098dc:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8009970 <_strtod_l+0x5a0>
 80098e0:	f04f 3aff 	movhi.w	sl, #4294967295	@ 0xffffffff
 80098e4:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 80098e8:	2300      	movs	r3, #0
 80098ea:	9308      	str	r3, [sp, #32]
 80098ec:	e07a      	b.n	80099e4 <_strtod_l+0x614>
 80098ee:	07e2      	lsls	r2, r4, #31
 80098f0:	d505      	bpl.n	80098fe <_strtod_l+0x52e>
 80098f2:	9b08      	ldr	r3, [sp, #32]
 80098f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098f8:	f7f6 fe96 	bl	8000628 <__aeabi_dmul>
 80098fc:	2301      	movs	r3, #1
 80098fe:	9a08      	ldr	r2, [sp, #32]
 8009900:	3208      	adds	r2, #8
 8009902:	3601      	adds	r6, #1
 8009904:	1064      	asrs	r4, r4, #1
 8009906:	9208      	str	r2, [sp, #32]
 8009908:	e7cd      	b.n	80098a6 <_strtod_l+0x4d6>
 800990a:	d0ed      	beq.n	80098e8 <_strtod_l+0x518>
 800990c:	4264      	negs	r4, r4
 800990e:	f014 020f 	ands.w	r2, r4, #15
 8009912:	d00a      	beq.n	800992a <_strtod_l+0x55a>
 8009914:	4b12      	ldr	r3, [pc, #72]	@ (8009960 <_strtod_l+0x590>)
 8009916:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800991a:	4650      	mov	r0, sl
 800991c:	4659      	mov	r1, fp
 800991e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009922:	f7f6 ffab 	bl	800087c <__aeabi_ddiv>
 8009926:	4682      	mov	sl, r0
 8009928:	468b      	mov	fp, r1
 800992a:	1124      	asrs	r4, r4, #4
 800992c:	d0dc      	beq.n	80098e8 <_strtod_l+0x518>
 800992e:	2c1f      	cmp	r4, #31
 8009930:	dd20      	ble.n	8009974 <_strtod_l+0x5a4>
 8009932:	2400      	movs	r4, #0
 8009934:	46a0      	mov	r8, r4
 8009936:	940a      	str	r4, [sp, #40]	@ 0x28
 8009938:	46a1      	mov	r9, r4
 800993a:	9a05      	ldr	r2, [sp, #20]
 800993c:	2322      	movs	r3, #34	@ 0x22
 800993e:	f04f 0a00 	mov.w	sl, #0
 8009942:	f04f 0b00 	mov.w	fp, #0
 8009946:	6013      	str	r3, [r2, #0]
 8009948:	e768      	b.n	800981c <_strtod_l+0x44c>
 800994a:	bf00      	nop
 800994c:	0800bb56 	.word	0x0800bb56
 8009950:	0800bd6c 	.word	0x0800bd6c
 8009954:	0800bb4e 	.word	0x0800bb4e
 8009958:	0800bb83 	.word	0x0800bb83
 800995c:	0800be2f 	.word	0x0800be2f
 8009960:	0800bca0 	.word	0x0800bca0
 8009964:	0800bc78 	.word	0x0800bc78
 8009968:	7ff00000 	.word	0x7ff00000
 800996c:	7ca00000 	.word	0x7ca00000
 8009970:	7fefffff 	.word	0x7fefffff
 8009974:	f014 0310 	ands.w	r3, r4, #16
 8009978:	bf18      	it	ne
 800997a:	236a      	movne	r3, #106	@ 0x6a
 800997c:	4ea9      	ldr	r6, [pc, #676]	@ (8009c24 <_strtod_l+0x854>)
 800997e:	9308      	str	r3, [sp, #32]
 8009980:	4650      	mov	r0, sl
 8009982:	4659      	mov	r1, fp
 8009984:	2300      	movs	r3, #0
 8009986:	07e2      	lsls	r2, r4, #31
 8009988:	d504      	bpl.n	8009994 <_strtod_l+0x5c4>
 800998a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800998e:	f7f6 fe4b 	bl	8000628 <__aeabi_dmul>
 8009992:	2301      	movs	r3, #1
 8009994:	1064      	asrs	r4, r4, #1
 8009996:	f106 0608 	add.w	r6, r6, #8
 800999a:	d1f4      	bne.n	8009986 <_strtod_l+0x5b6>
 800999c:	b10b      	cbz	r3, 80099a2 <_strtod_l+0x5d2>
 800999e:	4682      	mov	sl, r0
 80099a0:	468b      	mov	fp, r1
 80099a2:	9b08      	ldr	r3, [sp, #32]
 80099a4:	b1b3      	cbz	r3, 80099d4 <_strtod_l+0x604>
 80099a6:	f3cb 520a 	ubfx	r2, fp, #20, #11
 80099aa:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	4659      	mov	r1, fp
 80099b2:	dd0f      	ble.n	80099d4 <_strtod_l+0x604>
 80099b4:	2b1f      	cmp	r3, #31
 80099b6:	dd55      	ble.n	8009a64 <_strtod_l+0x694>
 80099b8:	2b34      	cmp	r3, #52	@ 0x34
 80099ba:	bfde      	ittt	le
 80099bc:	f04f 33ff 	movle.w	r3, #4294967295	@ 0xffffffff
 80099c0:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 80099c4:	4093      	lslle	r3, r2
 80099c6:	f04f 0a00 	mov.w	sl, #0
 80099ca:	bfcc      	ite	gt
 80099cc:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 80099d0:	ea03 0b01 	andle.w	fp, r3, r1
 80099d4:	2200      	movs	r2, #0
 80099d6:	2300      	movs	r3, #0
 80099d8:	4650      	mov	r0, sl
 80099da:	4659      	mov	r1, fp
 80099dc:	f7f7 f88c 	bl	8000af8 <__aeabi_dcmpeq>
 80099e0:	2800      	cmp	r0, #0
 80099e2:	d1a6      	bne.n	8009932 <_strtod_l+0x562>
 80099e4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80099e6:	9300      	str	r3, [sp, #0]
 80099e8:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80099ea:	9805      	ldr	r0, [sp, #20]
 80099ec:	462b      	mov	r3, r5
 80099ee:	463a      	mov	r2, r7
 80099f0:	f7ff f8c6 	bl	8008b80 <__s2b>
 80099f4:	900a      	str	r0, [sp, #40]	@ 0x28
 80099f6:	2800      	cmp	r0, #0
 80099f8:	f43f af05 	beq.w	8009806 <_strtod_l+0x436>
 80099fc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80099fe:	2a00      	cmp	r2, #0
 8009a00:	eba9 0308 	sub.w	r3, r9, r8
 8009a04:	bfa8      	it	ge
 8009a06:	2300      	movge	r3, #0
 8009a08:	9312      	str	r3, [sp, #72]	@ 0x48
 8009a0a:	2400      	movs	r4, #0
 8009a0c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8009a10:	9316      	str	r3, [sp, #88]	@ 0x58
 8009a12:	46a0      	mov	r8, r4
 8009a14:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009a16:	9805      	ldr	r0, [sp, #20]
 8009a18:	6859      	ldr	r1, [r3, #4]
 8009a1a:	f7ff f809 	bl	8008a30 <_Balloc>
 8009a1e:	4681      	mov	r9, r0
 8009a20:	2800      	cmp	r0, #0
 8009a22:	f43f aef4 	beq.w	800980e <_strtod_l+0x43e>
 8009a26:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009a28:	691a      	ldr	r2, [r3, #16]
 8009a2a:	3202      	adds	r2, #2
 8009a2c:	f103 010c 	add.w	r1, r3, #12
 8009a30:	0092      	lsls	r2, r2, #2
 8009a32:	300c      	adds	r0, #12
 8009a34:	f001 fac6 	bl	800afc4 <memcpy>
 8009a38:	ec4b ab10 	vmov	d0, sl, fp
 8009a3c:	9805      	ldr	r0, [sp, #20]
 8009a3e:	aa1c      	add	r2, sp, #112	@ 0x70
 8009a40:	a91b      	add	r1, sp, #108	@ 0x6c
 8009a42:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8009a46:	f7ff fbd7 	bl	80091f8 <__d2b>
 8009a4a:	901a      	str	r0, [sp, #104]	@ 0x68
 8009a4c:	2800      	cmp	r0, #0
 8009a4e:	f43f aede 	beq.w	800980e <_strtod_l+0x43e>
 8009a52:	9805      	ldr	r0, [sp, #20]
 8009a54:	2101      	movs	r1, #1
 8009a56:	f7ff f929 	bl	8008cac <__i2b>
 8009a5a:	4680      	mov	r8, r0
 8009a5c:	b948      	cbnz	r0, 8009a72 <_strtod_l+0x6a2>
 8009a5e:	f04f 0800 	mov.w	r8, #0
 8009a62:	e6d4      	b.n	800980e <_strtod_l+0x43e>
 8009a64:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009a68:	fa02 f303 	lsl.w	r3, r2, r3
 8009a6c:	ea03 0a0a 	and.w	sl, r3, sl
 8009a70:	e7b0      	b.n	80099d4 <_strtod_l+0x604>
 8009a72:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8009a74:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8009a76:	2d00      	cmp	r5, #0
 8009a78:	bfab      	itete	ge
 8009a7a:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8009a7c:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8009a7e:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8009a80:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8009a82:	bfac      	ite	ge
 8009a84:	18ef      	addge	r7, r5, r3
 8009a86:	1b5e      	sublt	r6, r3, r5
 8009a88:	9b08      	ldr	r3, [sp, #32]
 8009a8a:	1aed      	subs	r5, r5, r3
 8009a8c:	4415      	add	r5, r2
 8009a8e:	4b66      	ldr	r3, [pc, #408]	@ (8009c28 <_strtod_l+0x858>)
 8009a90:	3d01      	subs	r5, #1
 8009a92:	429d      	cmp	r5, r3
 8009a94:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8009a98:	da50      	bge.n	8009b3c <_strtod_l+0x76c>
 8009a9a:	1b5b      	subs	r3, r3, r5
 8009a9c:	2b1f      	cmp	r3, #31
 8009a9e:	eba2 0203 	sub.w	r2, r2, r3
 8009aa2:	f04f 0101 	mov.w	r1, #1
 8009aa6:	dc3d      	bgt.n	8009b24 <_strtod_l+0x754>
 8009aa8:	fa01 f303 	lsl.w	r3, r1, r3
 8009aac:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009aae:	2300      	movs	r3, #0
 8009ab0:	9310      	str	r3, [sp, #64]	@ 0x40
 8009ab2:	18bd      	adds	r5, r7, r2
 8009ab4:	9b08      	ldr	r3, [sp, #32]
 8009ab6:	42af      	cmp	r7, r5
 8009ab8:	4416      	add	r6, r2
 8009aba:	441e      	add	r6, r3
 8009abc:	463b      	mov	r3, r7
 8009abe:	bfa8      	it	ge
 8009ac0:	462b      	movge	r3, r5
 8009ac2:	42b3      	cmp	r3, r6
 8009ac4:	bfa8      	it	ge
 8009ac6:	4633      	movge	r3, r6
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	bfc2      	ittt	gt
 8009acc:	1aed      	subgt	r5, r5, r3
 8009ace:	1af6      	subgt	r6, r6, r3
 8009ad0:	1aff      	subgt	r7, r7, r3
 8009ad2:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	dd16      	ble.n	8009b06 <_strtod_l+0x736>
 8009ad8:	4641      	mov	r1, r8
 8009ada:	9805      	ldr	r0, [sp, #20]
 8009adc:	461a      	mov	r2, r3
 8009ade:	f7ff f9a5 	bl	8008e2c <__pow5mult>
 8009ae2:	4680      	mov	r8, r0
 8009ae4:	2800      	cmp	r0, #0
 8009ae6:	d0ba      	beq.n	8009a5e <_strtod_l+0x68e>
 8009ae8:	4601      	mov	r1, r0
 8009aea:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8009aec:	9805      	ldr	r0, [sp, #20]
 8009aee:	f7ff f8f3 	bl	8008cd8 <__multiply>
 8009af2:	900e      	str	r0, [sp, #56]	@ 0x38
 8009af4:	2800      	cmp	r0, #0
 8009af6:	f43f ae8a 	beq.w	800980e <_strtod_l+0x43e>
 8009afa:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009afc:	9805      	ldr	r0, [sp, #20]
 8009afe:	f7fe ffd7 	bl	8008ab0 <_Bfree>
 8009b02:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009b04:	931a      	str	r3, [sp, #104]	@ 0x68
 8009b06:	2d00      	cmp	r5, #0
 8009b08:	dc1d      	bgt.n	8009b46 <_strtod_l+0x776>
 8009b0a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	dd23      	ble.n	8009b58 <_strtod_l+0x788>
 8009b10:	4649      	mov	r1, r9
 8009b12:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8009b14:	9805      	ldr	r0, [sp, #20]
 8009b16:	f7ff f989 	bl	8008e2c <__pow5mult>
 8009b1a:	4681      	mov	r9, r0
 8009b1c:	b9e0      	cbnz	r0, 8009b58 <_strtod_l+0x788>
 8009b1e:	f04f 0900 	mov.w	r9, #0
 8009b22:	e674      	b.n	800980e <_strtod_l+0x43e>
 8009b24:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8009b28:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8009b2c:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8009b30:	35e2      	adds	r5, #226	@ 0xe2
 8009b32:	fa01 f305 	lsl.w	r3, r1, r5
 8009b36:	9310      	str	r3, [sp, #64]	@ 0x40
 8009b38:	9113      	str	r1, [sp, #76]	@ 0x4c
 8009b3a:	e7ba      	b.n	8009ab2 <_strtod_l+0x6e2>
 8009b3c:	2300      	movs	r3, #0
 8009b3e:	9310      	str	r3, [sp, #64]	@ 0x40
 8009b40:	2301      	movs	r3, #1
 8009b42:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009b44:	e7b5      	b.n	8009ab2 <_strtod_l+0x6e2>
 8009b46:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009b48:	9805      	ldr	r0, [sp, #20]
 8009b4a:	462a      	mov	r2, r5
 8009b4c:	f7ff f9c8 	bl	8008ee0 <__lshift>
 8009b50:	901a      	str	r0, [sp, #104]	@ 0x68
 8009b52:	2800      	cmp	r0, #0
 8009b54:	d1d9      	bne.n	8009b0a <_strtod_l+0x73a>
 8009b56:	e65a      	b.n	800980e <_strtod_l+0x43e>
 8009b58:	2e00      	cmp	r6, #0
 8009b5a:	dd07      	ble.n	8009b6c <_strtod_l+0x79c>
 8009b5c:	4649      	mov	r1, r9
 8009b5e:	9805      	ldr	r0, [sp, #20]
 8009b60:	4632      	mov	r2, r6
 8009b62:	f7ff f9bd 	bl	8008ee0 <__lshift>
 8009b66:	4681      	mov	r9, r0
 8009b68:	2800      	cmp	r0, #0
 8009b6a:	d0d8      	beq.n	8009b1e <_strtod_l+0x74e>
 8009b6c:	2f00      	cmp	r7, #0
 8009b6e:	dd08      	ble.n	8009b82 <_strtod_l+0x7b2>
 8009b70:	4641      	mov	r1, r8
 8009b72:	9805      	ldr	r0, [sp, #20]
 8009b74:	463a      	mov	r2, r7
 8009b76:	f7ff f9b3 	bl	8008ee0 <__lshift>
 8009b7a:	4680      	mov	r8, r0
 8009b7c:	2800      	cmp	r0, #0
 8009b7e:	f43f ae46 	beq.w	800980e <_strtod_l+0x43e>
 8009b82:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009b84:	9805      	ldr	r0, [sp, #20]
 8009b86:	464a      	mov	r2, r9
 8009b88:	f7ff fa32 	bl	8008ff0 <__mdiff>
 8009b8c:	4604      	mov	r4, r0
 8009b8e:	2800      	cmp	r0, #0
 8009b90:	f43f ae3d 	beq.w	800980e <_strtod_l+0x43e>
 8009b94:	68c3      	ldr	r3, [r0, #12]
 8009b96:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009b98:	2300      	movs	r3, #0
 8009b9a:	60c3      	str	r3, [r0, #12]
 8009b9c:	4641      	mov	r1, r8
 8009b9e:	f7ff fa0b 	bl	8008fb8 <__mcmp>
 8009ba2:	2800      	cmp	r0, #0
 8009ba4:	da46      	bge.n	8009c34 <_strtod_l+0x864>
 8009ba6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009ba8:	ea53 030a 	orrs.w	r3, r3, sl
 8009bac:	d16c      	bne.n	8009c88 <_strtod_l+0x8b8>
 8009bae:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	d168      	bne.n	8009c88 <_strtod_l+0x8b8>
 8009bb6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009bba:	0d1b      	lsrs	r3, r3, #20
 8009bbc:	051b      	lsls	r3, r3, #20
 8009bbe:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8009bc2:	d961      	bls.n	8009c88 <_strtod_l+0x8b8>
 8009bc4:	6963      	ldr	r3, [r4, #20]
 8009bc6:	b913      	cbnz	r3, 8009bce <_strtod_l+0x7fe>
 8009bc8:	6923      	ldr	r3, [r4, #16]
 8009bca:	2b01      	cmp	r3, #1
 8009bcc:	dd5c      	ble.n	8009c88 <_strtod_l+0x8b8>
 8009bce:	4621      	mov	r1, r4
 8009bd0:	2201      	movs	r2, #1
 8009bd2:	9805      	ldr	r0, [sp, #20]
 8009bd4:	f7ff f984 	bl	8008ee0 <__lshift>
 8009bd8:	4641      	mov	r1, r8
 8009bda:	4604      	mov	r4, r0
 8009bdc:	f7ff f9ec 	bl	8008fb8 <__mcmp>
 8009be0:	2800      	cmp	r0, #0
 8009be2:	dd51      	ble.n	8009c88 <_strtod_l+0x8b8>
 8009be4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009be8:	9a08      	ldr	r2, [sp, #32]
 8009bea:	0d1b      	lsrs	r3, r3, #20
 8009bec:	051b      	lsls	r3, r3, #20
 8009bee:	2a00      	cmp	r2, #0
 8009bf0:	d06b      	beq.n	8009cca <_strtod_l+0x8fa>
 8009bf2:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8009bf6:	d868      	bhi.n	8009cca <_strtod_l+0x8fa>
 8009bf8:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8009bfc:	f67f ae9d 	bls.w	800993a <_strtod_l+0x56a>
 8009c00:	4b0a      	ldr	r3, [pc, #40]	@ (8009c2c <_strtod_l+0x85c>)
 8009c02:	4650      	mov	r0, sl
 8009c04:	4659      	mov	r1, fp
 8009c06:	2200      	movs	r2, #0
 8009c08:	f7f6 fd0e 	bl	8000628 <__aeabi_dmul>
 8009c0c:	4b08      	ldr	r3, [pc, #32]	@ (8009c30 <_strtod_l+0x860>)
 8009c0e:	400b      	ands	r3, r1
 8009c10:	4682      	mov	sl, r0
 8009c12:	468b      	mov	fp, r1
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	f47f ae05 	bne.w	8009824 <_strtod_l+0x454>
 8009c1a:	9a05      	ldr	r2, [sp, #20]
 8009c1c:	2322      	movs	r3, #34	@ 0x22
 8009c1e:	6013      	str	r3, [r2, #0]
 8009c20:	e600      	b.n	8009824 <_strtod_l+0x454>
 8009c22:	bf00      	nop
 8009c24:	0800bd98 	.word	0x0800bd98
 8009c28:	fffffc02 	.word	0xfffffc02
 8009c2c:	39500000 	.word	0x39500000
 8009c30:	7ff00000 	.word	0x7ff00000
 8009c34:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8009c38:	d165      	bne.n	8009d06 <_strtod_l+0x936>
 8009c3a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8009c3c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009c40:	b35a      	cbz	r2, 8009c9a <_strtod_l+0x8ca>
 8009c42:	4a9f      	ldr	r2, [pc, #636]	@ (8009ec0 <_strtod_l+0xaf0>)
 8009c44:	4293      	cmp	r3, r2
 8009c46:	d12b      	bne.n	8009ca0 <_strtod_l+0x8d0>
 8009c48:	9b08      	ldr	r3, [sp, #32]
 8009c4a:	4651      	mov	r1, sl
 8009c4c:	b303      	cbz	r3, 8009c90 <_strtod_l+0x8c0>
 8009c4e:	4b9d      	ldr	r3, [pc, #628]	@ (8009ec4 <_strtod_l+0xaf4>)
 8009c50:	465a      	mov	r2, fp
 8009c52:	4013      	ands	r3, r2
 8009c54:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8009c58:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009c5c:	d81b      	bhi.n	8009c96 <_strtod_l+0x8c6>
 8009c5e:	0d1b      	lsrs	r3, r3, #20
 8009c60:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8009c64:	fa02 f303 	lsl.w	r3, r2, r3
 8009c68:	4299      	cmp	r1, r3
 8009c6a:	d119      	bne.n	8009ca0 <_strtod_l+0x8d0>
 8009c6c:	4b96      	ldr	r3, [pc, #600]	@ (8009ec8 <_strtod_l+0xaf8>)
 8009c6e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009c70:	429a      	cmp	r2, r3
 8009c72:	d102      	bne.n	8009c7a <_strtod_l+0x8aa>
 8009c74:	3101      	adds	r1, #1
 8009c76:	f43f adca 	beq.w	800980e <_strtod_l+0x43e>
 8009c7a:	4b92      	ldr	r3, [pc, #584]	@ (8009ec4 <_strtod_l+0xaf4>)
 8009c7c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009c7e:	401a      	ands	r2, r3
 8009c80:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8009c84:	f04f 0a00 	mov.w	sl, #0
 8009c88:	9b08      	ldr	r3, [sp, #32]
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	d1b8      	bne.n	8009c00 <_strtod_l+0x830>
 8009c8e:	e5c9      	b.n	8009824 <_strtod_l+0x454>
 8009c90:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8009c94:	e7e8      	b.n	8009c68 <_strtod_l+0x898>
 8009c96:	4613      	mov	r3, r2
 8009c98:	e7e6      	b.n	8009c68 <_strtod_l+0x898>
 8009c9a:	ea53 030a 	orrs.w	r3, r3, sl
 8009c9e:	d0a1      	beq.n	8009be4 <_strtod_l+0x814>
 8009ca0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8009ca2:	b1db      	cbz	r3, 8009cdc <_strtod_l+0x90c>
 8009ca4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009ca6:	4213      	tst	r3, r2
 8009ca8:	d0ee      	beq.n	8009c88 <_strtod_l+0x8b8>
 8009caa:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009cac:	9a08      	ldr	r2, [sp, #32]
 8009cae:	4650      	mov	r0, sl
 8009cb0:	4659      	mov	r1, fp
 8009cb2:	b1bb      	cbz	r3, 8009ce4 <_strtod_l+0x914>
 8009cb4:	f7ff fb6e 	bl	8009394 <sulp>
 8009cb8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009cbc:	ec53 2b10 	vmov	r2, r3, d0
 8009cc0:	f7f6 fafc 	bl	80002bc <__adddf3>
 8009cc4:	4682      	mov	sl, r0
 8009cc6:	468b      	mov	fp, r1
 8009cc8:	e7de      	b.n	8009c88 <_strtod_l+0x8b8>
 8009cca:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8009cce:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8009cd2:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8009cd6:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8009cda:	e7d5      	b.n	8009c88 <_strtod_l+0x8b8>
 8009cdc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009cde:	ea13 0f0a 	tst.w	r3, sl
 8009ce2:	e7e1      	b.n	8009ca8 <_strtod_l+0x8d8>
 8009ce4:	f7ff fb56 	bl	8009394 <sulp>
 8009ce8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009cec:	ec53 2b10 	vmov	r2, r3, d0
 8009cf0:	f7f6 fae2 	bl	80002b8 <__aeabi_dsub>
 8009cf4:	2200      	movs	r2, #0
 8009cf6:	2300      	movs	r3, #0
 8009cf8:	4682      	mov	sl, r0
 8009cfa:	468b      	mov	fp, r1
 8009cfc:	f7f6 fefc 	bl	8000af8 <__aeabi_dcmpeq>
 8009d00:	2800      	cmp	r0, #0
 8009d02:	d0c1      	beq.n	8009c88 <_strtod_l+0x8b8>
 8009d04:	e619      	b.n	800993a <_strtod_l+0x56a>
 8009d06:	4641      	mov	r1, r8
 8009d08:	4620      	mov	r0, r4
 8009d0a:	f7ff facd 	bl	80092a8 <__ratio>
 8009d0e:	ec57 6b10 	vmov	r6, r7, d0
 8009d12:	2200      	movs	r2, #0
 8009d14:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8009d18:	4630      	mov	r0, r6
 8009d1a:	4639      	mov	r1, r7
 8009d1c:	f7f6 ff00 	bl	8000b20 <__aeabi_dcmple>
 8009d20:	2800      	cmp	r0, #0
 8009d22:	d06f      	beq.n	8009e04 <_strtod_l+0xa34>
 8009d24:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d17a      	bne.n	8009e20 <_strtod_l+0xa50>
 8009d2a:	f1ba 0f00 	cmp.w	sl, #0
 8009d2e:	d158      	bne.n	8009de2 <_strtod_l+0xa12>
 8009d30:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009d32:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	d15a      	bne.n	8009df0 <_strtod_l+0xa20>
 8009d3a:	4b64      	ldr	r3, [pc, #400]	@ (8009ecc <_strtod_l+0xafc>)
 8009d3c:	2200      	movs	r2, #0
 8009d3e:	4630      	mov	r0, r6
 8009d40:	4639      	mov	r1, r7
 8009d42:	f7f6 fee3 	bl	8000b0c <__aeabi_dcmplt>
 8009d46:	2800      	cmp	r0, #0
 8009d48:	d159      	bne.n	8009dfe <_strtod_l+0xa2e>
 8009d4a:	4630      	mov	r0, r6
 8009d4c:	4639      	mov	r1, r7
 8009d4e:	4b60      	ldr	r3, [pc, #384]	@ (8009ed0 <_strtod_l+0xb00>)
 8009d50:	2200      	movs	r2, #0
 8009d52:	f7f6 fc69 	bl	8000628 <__aeabi_dmul>
 8009d56:	4606      	mov	r6, r0
 8009d58:	460f      	mov	r7, r1
 8009d5a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8009d5e:	9606      	str	r6, [sp, #24]
 8009d60:	9307      	str	r3, [sp, #28]
 8009d62:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009d66:	4d57      	ldr	r5, [pc, #348]	@ (8009ec4 <_strtod_l+0xaf4>)
 8009d68:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8009d6c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009d6e:	401d      	ands	r5, r3
 8009d70:	4b58      	ldr	r3, [pc, #352]	@ (8009ed4 <_strtod_l+0xb04>)
 8009d72:	429d      	cmp	r5, r3
 8009d74:	f040 80b2 	bne.w	8009edc <_strtod_l+0xb0c>
 8009d78:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009d7a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8009d7e:	ec4b ab10 	vmov	d0, sl, fp
 8009d82:	f7ff f9c9 	bl	8009118 <__ulp>
 8009d86:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009d8a:	ec51 0b10 	vmov	r0, r1, d0
 8009d8e:	f7f6 fc4b 	bl	8000628 <__aeabi_dmul>
 8009d92:	4652      	mov	r2, sl
 8009d94:	465b      	mov	r3, fp
 8009d96:	f7f6 fa91 	bl	80002bc <__adddf3>
 8009d9a:	460b      	mov	r3, r1
 8009d9c:	4949      	ldr	r1, [pc, #292]	@ (8009ec4 <_strtod_l+0xaf4>)
 8009d9e:	4a4e      	ldr	r2, [pc, #312]	@ (8009ed8 <_strtod_l+0xb08>)
 8009da0:	4019      	ands	r1, r3
 8009da2:	4291      	cmp	r1, r2
 8009da4:	4682      	mov	sl, r0
 8009da6:	d942      	bls.n	8009e2e <_strtod_l+0xa5e>
 8009da8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8009daa:	4b47      	ldr	r3, [pc, #284]	@ (8009ec8 <_strtod_l+0xaf8>)
 8009dac:	429a      	cmp	r2, r3
 8009dae:	d103      	bne.n	8009db8 <_strtod_l+0x9e8>
 8009db0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009db2:	3301      	adds	r3, #1
 8009db4:	f43f ad2b 	beq.w	800980e <_strtod_l+0x43e>
 8009db8:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8009ec8 <_strtod_l+0xaf8>
 8009dbc:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8009dc0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009dc2:	9805      	ldr	r0, [sp, #20]
 8009dc4:	f7fe fe74 	bl	8008ab0 <_Bfree>
 8009dc8:	9805      	ldr	r0, [sp, #20]
 8009dca:	4649      	mov	r1, r9
 8009dcc:	f7fe fe70 	bl	8008ab0 <_Bfree>
 8009dd0:	9805      	ldr	r0, [sp, #20]
 8009dd2:	4641      	mov	r1, r8
 8009dd4:	f7fe fe6c 	bl	8008ab0 <_Bfree>
 8009dd8:	9805      	ldr	r0, [sp, #20]
 8009dda:	4621      	mov	r1, r4
 8009ddc:	f7fe fe68 	bl	8008ab0 <_Bfree>
 8009de0:	e618      	b.n	8009a14 <_strtod_l+0x644>
 8009de2:	f1ba 0f01 	cmp.w	sl, #1
 8009de6:	d103      	bne.n	8009df0 <_strtod_l+0xa20>
 8009de8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	f43f ada5 	beq.w	800993a <_strtod_l+0x56a>
 8009df0:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8009ea0 <_strtod_l+0xad0>
 8009df4:	4f35      	ldr	r7, [pc, #212]	@ (8009ecc <_strtod_l+0xafc>)
 8009df6:	ed8d 7b06 	vstr	d7, [sp, #24]
 8009dfa:	2600      	movs	r6, #0
 8009dfc:	e7b1      	b.n	8009d62 <_strtod_l+0x992>
 8009dfe:	4f34      	ldr	r7, [pc, #208]	@ (8009ed0 <_strtod_l+0xb00>)
 8009e00:	2600      	movs	r6, #0
 8009e02:	e7aa      	b.n	8009d5a <_strtod_l+0x98a>
 8009e04:	4b32      	ldr	r3, [pc, #200]	@ (8009ed0 <_strtod_l+0xb00>)
 8009e06:	4630      	mov	r0, r6
 8009e08:	4639      	mov	r1, r7
 8009e0a:	2200      	movs	r2, #0
 8009e0c:	f7f6 fc0c 	bl	8000628 <__aeabi_dmul>
 8009e10:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009e12:	4606      	mov	r6, r0
 8009e14:	460f      	mov	r7, r1
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	d09f      	beq.n	8009d5a <_strtod_l+0x98a>
 8009e1a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8009e1e:	e7a0      	b.n	8009d62 <_strtod_l+0x992>
 8009e20:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8009ea8 <_strtod_l+0xad8>
 8009e24:	ed8d 7b06 	vstr	d7, [sp, #24]
 8009e28:	ec57 6b17 	vmov	r6, r7, d7
 8009e2c:	e799      	b.n	8009d62 <_strtod_l+0x992>
 8009e2e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8009e32:	9b08      	ldr	r3, [sp, #32]
 8009e34:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	d1c1      	bne.n	8009dc0 <_strtod_l+0x9f0>
 8009e3c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009e40:	0d1b      	lsrs	r3, r3, #20
 8009e42:	051b      	lsls	r3, r3, #20
 8009e44:	429d      	cmp	r5, r3
 8009e46:	d1bb      	bne.n	8009dc0 <_strtod_l+0x9f0>
 8009e48:	4630      	mov	r0, r6
 8009e4a:	4639      	mov	r1, r7
 8009e4c:	f7f6 ff4c 	bl	8000ce8 <__aeabi_d2lz>
 8009e50:	f7f6 fbbc 	bl	80005cc <__aeabi_l2d>
 8009e54:	4602      	mov	r2, r0
 8009e56:	460b      	mov	r3, r1
 8009e58:	4630      	mov	r0, r6
 8009e5a:	4639      	mov	r1, r7
 8009e5c:	f7f6 fa2c 	bl	80002b8 <__aeabi_dsub>
 8009e60:	460b      	mov	r3, r1
 8009e62:	4602      	mov	r2, r0
 8009e64:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8009e68:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8009e6c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009e6e:	ea46 060a 	orr.w	r6, r6, sl
 8009e72:	431e      	orrs	r6, r3
 8009e74:	d06f      	beq.n	8009f56 <_strtod_l+0xb86>
 8009e76:	a30e      	add	r3, pc, #56	@ (adr r3, 8009eb0 <_strtod_l+0xae0>)
 8009e78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e7c:	f7f6 fe46 	bl	8000b0c <__aeabi_dcmplt>
 8009e80:	2800      	cmp	r0, #0
 8009e82:	f47f accf 	bne.w	8009824 <_strtod_l+0x454>
 8009e86:	a30c      	add	r3, pc, #48	@ (adr r3, 8009eb8 <_strtod_l+0xae8>)
 8009e88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e8c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009e90:	f7f6 fe5a 	bl	8000b48 <__aeabi_dcmpgt>
 8009e94:	2800      	cmp	r0, #0
 8009e96:	d093      	beq.n	8009dc0 <_strtod_l+0x9f0>
 8009e98:	e4c4      	b.n	8009824 <_strtod_l+0x454>
 8009e9a:	bf00      	nop
 8009e9c:	f3af 8000 	nop.w
 8009ea0:	00000000 	.word	0x00000000
 8009ea4:	bff00000 	.word	0xbff00000
 8009ea8:	00000000 	.word	0x00000000
 8009eac:	3ff00000 	.word	0x3ff00000
 8009eb0:	94a03595 	.word	0x94a03595
 8009eb4:	3fdfffff 	.word	0x3fdfffff
 8009eb8:	35afe535 	.word	0x35afe535
 8009ebc:	3fe00000 	.word	0x3fe00000
 8009ec0:	000fffff 	.word	0x000fffff
 8009ec4:	7ff00000 	.word	0x7ff00000
 8009ec8:	7fefffff 	.word	0x7fefffff
 8009ecc:	3ff00000 	.word	0x3ff00000
 8009ed0:	3fe00000 	.word	0x3fe00000
 8009ed4:	7fe00000 	.word	0x7fe00000
 8009ed8:	7c9fffff 	.word	0x7c9fffff
 8009edc:	9b08      	ldr	r3, [sp, #32]
 8009ede:	b323      	cbz	r3, 8009f2a <_strtod_l+0xb5a>
 8009ee0:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8009ee4:	d821      	bhi.n	8009f2a <_strtod_l+0xb5a>
 8009ee6:	a328      	add	r3, pc, #160	@ (adr r3, 8009f88 <_strtod_l+0xbb8>)
 8009ee8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009eec:	4630      	mov	r0, r6
 8009eee:	4639      	mov	r1, r7
 8009ef0:	f7f6 fe16 	bl	8000b20 <__aeabi_dcmple>
 8009ef4:	b1a0      	cbz	r0, 8009f20 <_strtod_l+0xb50>
 8009ef6:	4639      	mov	r1, r7
 8009ef8:	4630      	mov	r0, r6
 8009efa:	f7f6 fe6d 	bl	8000bd8 <__aeabi_d2uiz>
 8009efe:	2801      	cmp	r0, #1
 8009f00:	bf38      	it	cc
 8009f02:	2001      	movcc	r0, #1
 8009f04:	f7f6 fb16 	bl	8000534 <__aeabi_ui2d>
 8009f08:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009f0a:	4606      	mov	r6, r0
 8009f0c:	460f      	mov	r7, r1
 8009f0e:	b9fb      	cbnz	r3, 8009f50 <_strtod_l+0xb80>
 8009f10:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8009f14:	9014      	str	r0, [sp, #80]	@ 0x50
 8009f16:	9315      	str	r3, [sp, #84]	@ 0x54
 8009f18:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8009f1c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8009f20:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8009f22:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8009f26:	1b5b      	subs	r3, r3, r5
 8009f28:	9311      	str	r3, [sp, #68]	@ 0x44
 8009f2a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8009f2e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8009f32:	f7ff f8f1 	bl	8009118 <__ulp>
 8009f36:	4650      	mov	r0, sl
 8009f38:	ec53 2b10 	vmov	r2, r3, d0
 8009f3c:	4659      	mov	r1, fp
 8009f3e:	f7f6 fb73 	bl	8000628 <__aeabi_dmul>
 8009f42:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8009f46:	f7f6 f9b9 	bl	80002bc <__adddf3>
 8009f4a:	4682      	mov	sl, r0
 8009f4c:	468b      	mov	fp, r1
 8009f4e:	e770      	b.n	8009e32 <_strtod_l+0xa62>
 8009f50:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8009f54:	e7e0      	b.n	8009f18 <_strtod_l+0xb48>
 8009f56:	a30e      	add	r3, pc, #56	@ (adr r3, 8009f90 <_strtod_l+0xbc0>)
 8009f58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f5c:	f7f6 fdd6 	bl	8000b0c <__aeabi_dcmplt>
 8009f60:	e798      	b.n	8009e94 <_strtod_l+0xac4>
 8009f62:	2300      	movs	r3, #0
 8009f64:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009f66:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8009f68:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009f6a:	6013      	str	r3, [r2, #0]
 8009f6c:	f7ff ba6d 	b.w	800944a <_strtod_l+0x7a>
 8009f70:	2a65      	cmp	r2, #101	@ 0x65
 8009f72:	f43f ab66 	beq.w	8009642 <_strtod_l+0x272>
 8009f76:	2a45      	cmp	r2, #69	@ 0x45
 8009f78:	f43f ab63 	beq.w	8009642 <_strtod_l+0x272>
 8009f7c:	2301      	movs	r3, #1
 8009f7e:	f7ff bb9e 	b.w	80096be <_strtod_l+0x2ee>
 8009f82:	bf00      	nop
 8009f84:	f3af 8000 	nop.w
 8009f88:	ffc00000 	.word	0xffc00000
 8009f8c:	41dfffff 	.word	0x41dfffff
 8009f90:	94a03595 	.word	0x94a03595
 8009f94:	3fcfffff 	.word	0x3fcfffff

08009f98 <_strtod_r>:
 8009f98:	4b01      	ldr	r3, [pc, #4]	@ (8009fa0 <_strtod_r+0x8>)
 8009f9a:	f7ff ba19 	b.w	80093d0 <_strtod_l>
 8009f9e:	bf00      	nop
 8009fa0:	20000068 	.word	0x20000068

08009fa4 <_strtol_l.constprop.0>:
 8009fa4:	2b24      	cmp	r3, #36	@ 0x24
 8009fa6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009faa:	4686      	mov	lr, r0
 8009fac:	4690      	mov	r8, r2
 8009fae:	d801      	bhi.n	8009fb4 <_strtol_l.constprop.0+0x10>
 8009fb0:	2b01      	cmp	r3, #1
 8009fb2:	d106      	bne.n	8009fc2 <_strtol_l.constprop.0+0x1e>
 8009fb4:	f7fd fdba 	bl	8007b2c <__errno>
 8009fb8:	2316      	movs	r3, #22
 8009fba:	6003      	str	r3, [r0, #0]
 8009fbc:	2000      	movs	r0, #0
 8009fbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009fc2:	4834      	ldr	r0, [pc, #208]	@ (800a094 <_strtol_l.constprop.0+0xf0>)
 8009fc4:	460d      	mov	r5, r1
 8009fc6:	462a      	mov	r2, r5
 8009fc8:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009fcc:	5d06      	ldrb	r6, [r0, r4]
 8009fce:	f016 0608 	ands.w	r6, r6, #8
 8009fd2:	d1f8      	bne.n	8009fc6 <_strtol_l.constprop.0+0x22>
 8009fd4:	2c2d      	cmp	r4, #45	@ 0x2d
 8009fd6:	d12d      	bne.n	800a034 <_strtol_l.constprop.0+0x90>
 8009fd8:	782c      	ldrb	r4, [r5, #0]
 8009fda:	2601      	movs	r6, #1
 8009fdc:	1c95      	adds	r5, r2, #2
 8009fde:	f033 0210 	bics.w	r2, r3, #16
 8009fe2:	d109      	bne.n	8009ff8 <_strtol_l.constprop.0+0x54>
 8009fe4:	2c30      	cmp	r4, #48	@ 0x30
 8009fe6:	d12a      	bne.n	800a03e <_strtol_l.constprop.0+0x9a>
 8009fe8:	782a      	ldrb	r2, [r5, #0]
 8009fea:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8009fee:	2a58      	cmp	r2, #88	@ 0x58
 8009ff0:	d125      	bne.n	800a03e <_strtol_l.constprop.0+0x9a>
 8009ff2:	786c      	ldrb	r4, [r5, #1]
 8009ff4:	2310      	movs	r3, #16
 8009ff6:	3502      	adds	r5, #2
 8009ff8:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8009ffc:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 800a000:	2200      	movs	r2, #0
 800a002:	fbbc f9f3 	udiv	r9, ip, r3
 800a006:	4610      	mov	r0, r2
 800a008:	fb03 ca19 	mls	sl, r3, r9, ip
 800a00c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800a010:	2f09      	cmp	r7, #9
 800a012:	d81b      	bhi.n	800a04c <_strtol_l.constprop.0+0xa8>
 800a014:	463c      	mov	r4, r7
 800a016:	42a3      	cmp	r3, r4
 800a018:	dd27      	ble.n	800a06a <_strtol_l.constprop.0+0xc6>
 800a01a:	1c57      	adds	r7, r2, #1
 800a01c:	d007      	beq.n	800a02e <_strtol_l.constprop.0+0x8a>
 800a01e:	4581      	cmp	r9, r0
 800a020:	d320      	bcc.n	800a064 <_strtol_l.constprop.0+0xc0>
 800a022:	d101      	bne.n	800a028 <_strtol_l.constprop.0+0x84>
 800a024:	45a2      	cmp	sl, r4
 800a026:	db1d      	blt.n	800a064 <_strtol_l.constprop.0+0xc0>
 800a028:	fb00 4003 	mla	r0, r0, r3, r4
 800a02c:	2201      	movs	r2, #1
 800a02e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a032:	e7eb      	b.n	800a00c <_strtol_l.constprop.0+0x68>
 800a034:	2c2b      	cmp	r4, #43	@ 0x2b
 800a036:	bf04      	itt	eq
 800a038:	782c      	ldrbeq	r4, [r5, #0]
 800a03a:	1c95      	addeq	r5, r2, #2
 800a03c:	e7cf      	b.n	8009fde <_strtol_l.constprop.0+0x3a>
 800a03e:	2b00      	cmp	r3, #0
 800a040:	d1da      	bne.n	8009ff8 <_strtol_l.constprop.0+0x54>
 800a042:	2c30      	cmp	r4, #48	@ 0x30
 800a044:	bf0c      	ite	eq
 800a046:	2308      	moveq	r3, #8
 800a048:	230a      	movne	r3, #10
 800a04a:	e7d5      	b.n	8009ff8 <_strtol_l.constprop.0+0x54>
 800a04c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800a050:	2f19      	cmp	r7, #25
 800a052:	d801      	bhi.n	800a058 <_strtol_l.constprop.0+0xb4>
 800a054:	3c37      	subs	r4, #55	@ 0x37
 800a056:	e7de      	b.n	800a016 <_strtol_l.constprop.0+0x72>
 800a058:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800a05c:	2f19      	cmp	r7, #25
 800a05e:	d804      	bhi.n	800a06a <_strtol_l.constprop.0+0xc6>
 800a060:	3c57      	subs	r4, #87	@ 0x57
 800a062:	e7d8      	b.n	800a016 <_strtol_l.constprop.0+0x72>
 800a064:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a068:	e7e1      	b.n	800a02e <_strtol_l.constprop.0+0x8a>
 800a06a:	1c53      	adds	r3, r2, #1
 800a06c:	d108      	bne.n	800a080 <_strtol_l.constprop.0+0xdc>
 800a06e:	2322      	movs	r3, #34	@ 0x22
 800a070:	f8ce 3000 	str.w	r3, [lr]
 800a074:	4660      	mov	r0, ip
 800a076:	f1b8 0f00 	cmp.w	r8, #0
 800a07a:	d0a0      	beq.n	8009fbe <_strtol_l.constprop.0+0x1a>
 800a07c:	1e69      	subs	r1, r5, #1
 800a07e:	e006      	b.n	800a08e <_strtol_l.constprop.0+0xea>
 800a080:	b106      	cbz	r6, 800a084 <_strtol_l.constprop.0+0xe0>
 800a082:	4240      	negs	r0, r0
 800a084:	f1b8 0f00 	cmp.w	r8, #0
 800a088:	d099      	beq.n	8009fbe <_strtol_l.constprop.0+0x1a>
 800a08a:	2a00      	cmp	r2, #0
 800a08c:	d1f6      	bne.n	800a07c <_strtol_l.constprop.0+0xd8>
 800a08e:	f8c8 1000 	str.w	r1, [r8]
 800a092:	e794      	b.n	8009fbe <_strtol_l.constprop.0+0x1a>
 800a094:	0800ba49 	.word	0x0800ba49

0800a098 <_strtol_r>:
 800a098:	f7ff bf84 	b.w	8009fa4 <_strtol_l.constprop.0>

0800a09c <__ssputs_r>:
 800a09c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a0a0:	688e      	ldr	r6, [r1, #8]
 800a0a2:	461f      	mov	r7, r3
 800a0a4:	42be      	cmp	r6, r7
 800a0a6:	680b      	ldr	r3, [r1, #0]
 800a0a8:	4682      	mov	sl, r0
 800a0aa:	460c      	mov	r4, r1
 800a0ac:	4690      	mov	r8, r2
 800a0ae:	d82d      	bhi.n	800a10c <__ssputs_r+0x70>
 800a0b0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a0b4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800a0b8:	d026      	beq.n	800a108 <__ssputs_r+0x6c>
 800a0ba:	6965      	ldr	r5, [r4, #20]
 800a0bc:	6909      	ldr	r1, [r1, #16]
 800a0be:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a0c2:	eba3 0901 	sub.w	r9, r3, r1
 800a0c6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a0ca:	1c7b      	adds	r3, r7, #1
 800a0cc:	444b      	add	r3, r9
 800a0ce:	106d      	asrs	r5, r5, #1
 800a0d0:	429d      	cmp	r5, r3
 800a0d2:	bf38      	it	cc
 800a0d4:	461d      	movcc	r5, r3
 800a0d6:	0553      	lsls	r3, r2, #21
 800a0d8:	d527      	bpl.n	800a12a <__ssputs_r+0x8e>
 800a0da:	4629      	mov	r1, r5
 800a0dc:	f7fe fc1c 	bl	8008918 <_malloc_r>
 800a0e0:	4606      	mov	r6, r0
 800a0e2:	b360      	cbz	r0, 800a13e <__ssputs_r+0xa2>
 800a0e4:	6921      	ldr	r1, [r4, #16]
 800a0e6:	464a      	mov	r2, r9
 800a0e8:	f000 ff6c 	bl	800afc4 <memcpy>
 800a0ec:	89a3      	ldrh	r3, [r4, #12]
 800a0ee:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800a0f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a0f6:	81a3      	strh	r3, [r4, #12]
 800a0f8:	6126      	str	r6, [r4, #16]
 800a0fa:	6165      	str	r5, [r4, #20]
 800a0fc:	444e      	add	r6, r9
 800a0fe:	eba5 0509 	sub.w	r5, r5, r9
 800a102:	6026      	str	r6, [r4, #0]
 800a104:	60a5      	str	r5, [r4, #8]
 800a106:	463e      	mov	r6, r7
 800a108:	42be      	cmp	r6, r7
 800a10a:	d900      	bls.n	800a10e <__ssputs_r+0x72>
 800a10c:	463e      	mov	r6, r7
 800a10e:	6820      	ldr	r0, [r4, #0]
 800a110:	4632      	mov	r2, r6
 800a112:	4641      	mov	r1, r8
 800a114:	f000 fef7 	bl	800af06 <memmove>
 800a118:	68a3      	ldr	r3, [r4, #8]
 800a11a:	1b9b      	subs	r3, r3, r6
 800a11c:	60a3      	str	r3, [r4, #8]
 800a11e:	6823      	ldr	r3, [r4, #0]
 800a120:	4433      	add	r3, r6
 800a122:	6023      	str	r3, [r4, #0]
 800a124:	2000      	movs	r0, #0
 800a126:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a12a:	462a      	mov	r2, r5
 800a12c:	f001 fadd 	bl	800b6ea <_realloc_r>
 800a130:	4606      	mov	r6, r0
 800a132:	2800      	cmp	r0, #0
 800a134:	d1e0      	bne.n	800a0f8 <__ssputs_r+0x5c>
 800a136:	6921      	ldr	r1, [r4, #16]
 800a138:	4650      	mov	r0, sl
 800a13a:	f7fe fb79 	bl	8008830 <_free_r>
 800a13e:	230c      	movs	r3, #12
 800a140:	f8ca 3000 	str.w	r3, [sl]
 800a144:	89a3      	ldrh	r3, [r4, #12]
 800a146:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a14a:	81a3      	strh	r3, [r4, #12]
 800a14c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a150:	e7e9      	b.n	800a126 <__ssputs_r+0x8a>
	...

0800a154 <_svfiprintf_r>:
 800a154:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a158:	4698      	mov	r8, r3
 800a15a:	898b      	ldrh	r3, [r1, #12]
 800a15c:	061b      	lsls	r3, r3, #24
 800a15e:	b09d      	sub	sp, #116	@ 0x74
 800a160:	4607      	mov	r7, r0
 800a162:	460d      	mov	r5, r1
 800a164:	4614      	mov	r4, r2
 800a166:	d510      	bpl.n	800a18a <_svfiprintf_r+0x36>
 800a168:	690b      	ldr	r3, [r1, #16]
 800a16a:	b973      	cbnz	r3, 800a18a <_svfiprintf_r+0x36>
 800a16c:	2140      	movs	r1, #64	@ 0x40
 800a16e:	f7fe fbd3 	bl	8008918 <_malloc_r>
 800a172:	6028      	str	r0, [r5, #0]
 800a174:	6128      	str	r0, [r5, #16]
 800a176:	b930      	cbnz	r0, 800a186 <_svfiprintf_r+0x32>
 800a178:	230c      	movs	r3, #12
 800a17a:	603b      	str	r3, [r7, #0]
 800a17c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a180:	b01d      	add	sp, #116	@ 0x74
 800a182:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a186:	2340      	movs	r3, #64	@ 0x40
 800a188:	616b      	str	r3, [r5, #20]
 800a18a:	2300      	movs	r3, #0
 800a18c:	9309      	str	r3, [sp, #36]	@ 0x24
 800a18e:	2320      	movs	r3, #32
 800a190:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a194:	f8cd 800c 	str.w	r8, [sp, #12]
 800a198:	2330      	movs	r3, #48	@ 0x30
 800a19a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800a338 <_svfiprintf_r+0x1e4>
 800a19e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a1a2:	f04f 0901 	mov.w	r9, #1
 800a1a6:	4623      	mov	r3, r4
 800a1a8:	469a      	mov	sl, r3
 800a1aa:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a1ae:	b10a      	cbz	r2, 800a1b4 <_svfiprintf_r+0x60>
 800a1b0:	2a25      	cmp	r2, #37	@ 0x25
 800a1b2:	d1f9      	bne.n	800a1a8 <_svfiprintf_r+0x54>
 800a1b4:	ebba 0b04 	subs.w	fp, sl, r4
 800a1b8:	d00b      	beq.n	800a1d2 <_svfiprintf_r+0x7e>
 800a1ba:	465b      	mov	r3, fp
 800a1bc:	4622      	mov	r2, r4
 800a1be:	4629      	mov	r1, r5
 800a1c0:	4638      	mov	r0, r7
 800a1c2:	f7ff ff6b 	bl	800a09c <__ssputs_r>
 800a1c6:	3001      	adds	r0, #1
 800a1c8:	f000 80a7 	beq.w	800a31a <_svfiprintf_r+0x1c6>
 800a1cc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a1ce:	445a      	add	r2, fp
 800a1d0:	9209      	str	r2, [sp, #36]	@ 0x24
 800a1d2:	f89a 3000 	ldrb.w	r3, [sl]
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	f000 809f 	beq.w	800a31a <_svfiprintf_r+0x1c6>
 800a1dc:	2300      	movs	r3, #0
 800a1de:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a1e2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a1e6:	f10a 0a01 	add.w	sl, sl, #1
 800a1ea:	9304      	str	r3, [sp, #16]
 800a1ec:	9307      	str	r3, [sp, #28]
 800a1ee:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a1f2:	931a      	str	r3, [sp, #104]	@ 0x68
 800a1f4:	4654      	mov	r4, sl
 800a1f6:	2205      	movs	r2, #5
 800a1f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a1fc:	484e      	ldr	r0, [pc, #312]	@ (800a338 <_svfiprintf_r+0x1e4>)
 800a1fe:	f7f5 ffff 	bl	8000200 <memchr>
 800a202:	9a04      	ldr	r2, [sp, #16]
 800a204:	b9d8      	cbnz	r0, 800a23e <_svfiprintf_r+0xea>
 800a206:	06d0      	lsls	r0, r2, #27
 800a208:	bf44      	itt	mi
 800a20a:	2320      	movmi	r3, #32
 800a20c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a210:	0711      	lsls	r1, r2, #28
 800a212:	bf44      	itt	mi
 800a214:	232b      	movmi	r3, #43	@ 0x2b
 800a216:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a21a:	f89a 3000 	ldrb.w	r3, [sl]
 800a21e:	2b2a      	cmp	r3, #42	@ 0x2a
 800a220:	d015      	beq.n	800a24e <_svfiprintf_r+0xfa>
 800a222:	9a07      	ldr	r2, [sp, #28]
 800a224:	4654      	mov	r4, sl
 800a226:	2000      	movs	r0, #0
 800a228:	f04f 0c0a 	mov.w	ip, #10
 800a22c:	4621      	mov	r1, r4
 800a22e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a232:	3b30      	subs	r3, #48	@ 0x30
 800a234:	2b09      	cmp	r3, #9
 800a236:	d94b      	bls.n	800a2d0 <_svfiprintf_r+0x17c>
 800a238:	b1b0      	cbz	r0, 800a268 <_svfiprintf_r+0x114>
 800a23a:	9207      	str	r2, [sp, #28]
 800a23c:	e014      	b.n	800a268 <_svfiprintf_r+0x114>
 800a23e:	eba0 0308 	sub.w	r3, r0, r8
 800a242:	fa09 f303 	lsl.w	r3, r9, r3
 800a246:	4313      	orrs	r3, r2
 800a248:	9304      	str	r3, [sp, #16]
 800a24a:	46a2      	mov	sl, r4
 800a24c:	e7d2      	b.n	800a1f4 <_svfiprintf_r+0xa0>
 800a24e:	9b03      	ldr	r3, [sp, #12]
 800a250:	1d19      	adds	r1, r3, #4
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	9103      	str	r1, [sp, #12]
 800a256:	2b00      	cmp	r3, #0
 800a258:	bfbb      	ittet	lt
 800a25a:	425b      	neglt	r3, r3
 800a25c:	f042 0202 	orrlt.w	r2, r2, #2
 800a260:	9307      	strge	r3, [sp, #28]
 800a262:	9307      	strlt	r3, [sp, #28]
 800a264:	bfb8      	it	lt
 800a266:	9204      	strlt	r2, [sp, #16]
 800a268:	7823      	ldrb	r3, [r4, #0]
 800a26a:	2b2e      	cmp	r3, #46	@ 0x2e
 800a26c:	d10a      	bne.n	800a284 <_svfiprintf_r+0x130>
 800a26e:	7863      	ldrb	r3, [r4, #1]
 800a270:	2b2a      	cmp	r3, #42	@ 0x2a
 800a272:	d132      	bne.n	800a2da <_svfiprintf_r+0x186>
 800a274:	9b03      	ldr	r3, [sp, #12]
 800a276:	1d1a      	adds	r2, r3, #4
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	9203      	str	r2, [sp, #12]
 800a27c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a280:	3402      	adds	r4, #2
 800a282:	9305      	str	r3, [sp, #20]
 800a284:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800a348 <_svfiprintf_r+0x1f4>
 800a288:	7821      	ldrb	r1, [r4, #0]
 800a28a:	2203      	movs	r2, #3
 800a28c:	4650      	mov	r0, sl
 800a28e:	f7f5 ffb7 	bl	8000200 <memchr>
 800a292:	b138      	cbz	r0, 800a2a4 <_svfiprintf_r+0x150>
 800a294:	9b04      	ldr	r3, [sp, #16]
 800a296:	eba0 000a 	sub.w	r0, r0, sl
 800a29a:	2240      	movs	r2, #64	@ 0x40
 800a29c:	4082      	lsls	r2, r0
 800a29e:	4313      	orrs	r3, r2
 800a2a0:	3401      	adds	r4, #1
 800a2a2:	9304      	str	r3, [sp, #16]
 800a2a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a2a8:	4824      	ldr	r0, [pc, #144]	@ (800a33c <_svfiprintf_r+0x1e8>)
 800a2aa:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a2ae:	2206      	movs	r2, #6
 800a2b0:	f7f5 ffa6 	bl	8000200 <memchr>
 800a2b4:	2800      	cmp	r0, #0
 800a2b6:	d036      	beq.n	800a326 <_svfiprintf_r+0x1d2>
 800a2b8:	4b21      	ldr	r3, [pc, #132]	@ (800a340 <_svfiprintf_r+0x1ec>)
 800a2ba:	bb1b      	cbnz	r3, 800a304 <_svfiprintf_r+0x1b0>
 800a2bc:	9b03      	ldr	r3, [sp, #12]
 800a2be:	3307      	adds	r3, #7
 800a2c0:	f023 0307 	bic.w	r3, r3, #7
 800a2c4:	3308      	adds	r3, #8
 800a2c6:	9303      	str	r3, [sp, #12]
 800a2c8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a2ca:	4433      	add	r3, r6
 800a2cc:	9309      	str	r3, [sp, #36]	@ 0x24
 800a2ce:	e76a      	b.n	800a1a6 <_svfiprintf_r+0x52>
 800a2d0:	fb0c 3202 	mla	r2, ip, r2, r3
 800a2d4:	460c      	mov	r4, r1
 800a2d6:	2001      	movs	r0, #1
 800a2d8:	e7a8      	b.n	800a22c <_svfiprintf_r+0xd8>
 800a2da:	2300      	movs	r3, #0
 800a2dc:	3401      	adds	r4, #1
 800a2de:	9305      	str	r3, [sp, #20]
 800a2e0:	4619      	mov	r1, r3
 800a2e2:	f04f 0c0a 	mov.w	ip, #10
 800a2e6:	4620      	mov	r0, r4
 800a2e8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a2ec:	3a30      	subs	r2, #48	@ 0x30
 800a2ee:	2a09      	cmp	r2, #9
 800a2f0:	d903      	bls.n	800a2fa <_svfiprintf_r+0x1a6>
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	d0c6      	beq.n	800a284 <_svfiprintf_r+0x130>
 800a2f6:	9105      	str	r1, [sp, #20]
 800a2f8:	e7c4      	b.n	800a284 <_svfiprintf_r+0x130>
 800a2fa:	fb0c 2101 	mla	r1, ip, r1, r2
 800a2fe:	4604      	mov	r4, r0
 800a300:	2301      	movs	r3, #1
 800a302:	e7f0      	b.n	800a2e6 <_svfiprintf_r+0x192>
 800a304:	ab03      	add	r3, sp, #12
 800a306:	9300      	str	r3, [sp, #0]
 800a308:	462a      	mov	r2, r5
 800a30a:	4b0e      	ldr	r3, [pc, #56]	@ (800a344 <_svfiprintf_r+0x1f0>)
 800a30c:	a904      	add	r1, sp, #16
 800a30e:	4638      	mov	r0, r7
 800a310:	f7fc fb2e 	bl	8006970 <_printf_float>
 800a314:	1c42      	adds	r2, r0, #1
 800a316:	4606      	mov	r6, r0
 800a318:	d1d6      	bne.n	800a2c8 <_svfiprintf_r+0x174>
 800a31a:	89ab      	ldrh	r3, [r5, #12]
 800a31c:	065b      	lsls	r3, r3, #25
 800a31e:	f53f af2d 	bmi.w	800a17c <_svfiprintf_r+0x28>
 800a322:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a324:	e72c      	b.n	800a180 <_svfiprintf_r+0x2c>
 800a326:	ab03      	add	r3, sp, #12
 800a328:	9300      	str	r3, [sp, #0]
 800a32a:	462a      	mov	r2, r5
 800a32c:	4b05      	ldr	r3, [pc, #20]	@ (800a344 <_svfiprintf_r+0x1f0>)
 800a32e:	a904      	add	r1, sp, #16
 800a330:	4638      	mov	r0, r7
 800a332:	f7fc fdb5 	bl	8006ea0 <_printf_i>
 800a336:	e7ed      	b.n	800a314 <_svfiprintf_r+0x1c0>
 800a338:	0800bdc0 	.word	0x0800bdc0
 800a33c:	0800bdca 	.word	0x0800bdca
 800a340:	08006971 	.word	0x08006971
 800a344:	0800a09d 	.word	0x0800a09d
 800a348:	0800bdc6 	.word	0x0800bdc6

0800a34c <_sungetc_r>:
 800a34c:	b538      	push	{r3, r4, r5, lr}
 800a34e:	1c4b      	adds	r3, r1, #1
 800a350:	4614      	mov	r4, r2
 800a352:	d103      	bne.n	800a35c <_sungetc_r+0x10>
 800a354:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 800a358:	4628      	mov	r0, r5
 800a35a:	bd38      	pop	{r3, r4, r5, pc}
 800a35c:	8993      	ldrh	r3, [r2, #12]
 800a35e:	f023 0320 	bic.w	r3, r3, #32
 800a362:	8193      	strh	r3, [r2, #12]
 800a364:	6853      	ldr	r3, [r2, #4]
 800a366:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800a368:	b2cd      	uxtb	r5, r1
 800a36a:	b18a      	cbz	r2, 800a390 <_sungetc_r+0x44>
 800a36c:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800a36e:	429a      	cmp	r2, r3
 800a370:	dd08      	ble.n	800a384 <_sungetc_r+0x38>
 800a372:	6823      	ldr	r3, [r4, #0]
 800a374:	1e5a      	subs	r2, r3, #1
 800a376:	6022      	str	r2, [r4, #0]
 800a378:	f803 5c01 	strb.w	r5, [r3, #-1]
 800a37c:	6863      	ldr	r3, [r4, #4]
 800a37e:	3301      	adds	r3, #1
 800a380:	6063      	str	r3, [r4, #4]
 800a382:	e7e9      	b.n	800a358 <_sungetc_r+0xc>
 800a384:	4621      	mov	r1, r4
 800a386:	f000 fd84 	bl	800ae92 <__submore>
 800a38a:	2800      	cmp	r0, #0
 800a38c:	d0f1      	beq.n	800a372 <_sungetc_r+0x26>
 800a38e:	e7e1      	b.n	800a354 <_sungetc_r+0x8>
 800a390:	6921      	ldr	r1, [r4, #16]
 800a392:	6822      	ldr	r2, [r4, #0]
 800a394:	b141      	cbz	r1, 800a3a8 <_sungetc_r+0x5c>
 800a396:	4291      	cmp	r1, r2
 800a398:	d206      	bcs.n	800a3a8 <_sungetc_r+0x5c>
 800a39a:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 800a39e:	42a9      	cmp	r1, r5
 800a3a0:	d102      	bne.n	800a3a8 <_sungetc_r+0x5c>
 800a3a2:	3a01      	subs	r2, #1
 800a3a4:	6022      	str	r2, [r4, #0]
 800a3a6:	e7ea      	b.n	800a37e <_sungetc_r+0x32>
 800a3a8:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 800a3ac:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a3b0:	6363      	str	r3, [r4, #52]	@ 0x34
 800a3b2:	2303      	movs	r3, #3
 800a3b4:	63a3      	str	r3, [r4, #56]	@ 0x38
 800a3b6:	4623      	mov	r3, r4
 800a3b8:	f803 5f46 	strb.w	r5, [r3, #70]!
 800a3bc:	6023      	str	r3, [r4, #0]
 800a3be:	2301      	movs	r3, #1
 800a3c0:	e7de      	b.n	800a380 <_sungetc_r+0x34>

0800a3c2 <__ssrefill_r>:
 800a3c2:	b510      	push	{r4, lr}
 800a3c4:	460c      	mov	r4, r1
 800a3c6:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800a3c8:	b169      	cbz	r1, 800a3e6 <__ssrefill_r+0x24>
 800a3ca:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a3ce:	4299      	cmp	r1, r3
 800a3d0:	d001      	beq.n	800a3d6 <__ssrefill_r+0x14>
 800a3d2:	f7fe fa2d 	bl	8008830 <_free_r>
 800a3d6:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a3d8:	6063      	str	r3, [r4, #4]
 800a3da:	2000      	movs	r0, #0
 800a3dc:	6360      	str	r0, [r4, #52]	@ 0x34
 800a3de:	b113      	cbz	r3, 800a3e6 <__ssrefill_r+0x24>
 800a3e0:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800a3e2:	6023      	str	r3, [r4, #0]
 800a3e4:	bd10      	pop	{r4, pc}
 800a3e6:	6923      	ldr	r3, [r4, #16]
 800a3e8:	6023      	str	r3, [r4, #0]
 800a3ea:	2300      	movs	r3, #0
 800a3ec:	6063      	str	r3, [r4, #4]
 800a3ee:	89a3      	ldrh	r3, [r4, #12]
 800a3f0:	f043 0320 	orr.w	r3, r3, #32
 800a3f4:	81a3      	strh	r3, [r4, #12]
 800a3f6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a3fa:	e7f3      	b.n	800a3e4 <__ssrefill_r+0x22>

0800a3fc <__ssvfiscanf_r>:
 800a3fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a400:	460c      	mov	r4, r1
 800a402:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 800a406:	2100      	movs	r1, #0
 800a408:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 800a40c:	49a5      	ldr	r1, [pc, #660]	@ (800a6a4 <__ssvfiscanf_r+0x2a8>)
 800a40e:	91a0      	str	r1, [sp, #640]	@ 0x280
 800a410:	f10d 0804 	add.w	r8, sp, #4
 800a414:	49a4      	ldr	r1, [pc, #656]	@ (800a6a8 <__ssvfiscanf_r+0x2ac>)
 800a416:	4fa5      	ldr	r7, [pc, #660]	@ (800a6ac <__ssvfiscanf_r+0x2b0>)
 800a418:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 800a41c:	4606      	mov	r6, r0
 800a41e:	91a1      	str	r1, [sp, #644]	@ 0x284
 800a420:	9300      	str	r3, [sp, #0]
 800a422:	7813      	ldrb	r3, [r2, #0]
 800a424:	2b00      	cmp	r3, #0
 800a426:	f000 8158 	beq.w	800a6da <__ssvfiscanf_r+0x2de>
 800a42a:	5cf9      	ldrb	r1, [r7, r3]
 800a42c:	f011 0108 	ands.w	r1, r1, #8
 800a430:	f102 0501 	add.w	r5, r2, #1
 800a434:	d019      	beq.n	800a46a <__ssvfiscanf_r+0x6e>
 800a436:	6863      	ldr	r3, [r4, #4]
 800a438:	2b00      	cmp	r3, #0
 800a43a:	dd0f      	ble.n	800a45c <__ssvfiscanf_r+0x60>
 800a43c:	6823      	ldr	r3, [r4, #0]
 800a43e:	781a      	ldrb	r2, [r3, #0]
 800a440:	5cba      	ldrb	r2, [r7, r2]
 800a442:	0712      	lsls	r2, r2, #28
 800a444:	d401      	bmi.n	800a44a <__ssvfiscanf_r+0x4e>
 800a446:	462a      	mov	r2, r5
 800a448:	e7eb      	b.n	800a422 <__ssvfiscanf_r+0x26>
 800a44a:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800a44c:	3201      	adds	r2, #1
 800a44e:	9245      	str	r2, [sp, #276]	@ 0x114
 800a450:	6862      	ldr	r2, [r4, #4]
 800a452:	3301      	adds	r3, #1
 800a454:	3a01      	subs	r2, #1
 800a456:	6062      	str	r2, [r4, #4]
 800a458:	6023      	str	r3, [r4, #0]
 800a45a:	e7ec      	b.n	800a436 <__ssvfiscanf_r+0x3a>
 800a45c:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800a45e:	4621      	mov	r1, r4
 800a460:	4630      	mov	r0, r6
 800a462:	4798      	blx	r3
 800a464:	2800      	cmp	r0, #0
 800a466:	d0e9      	beq.n	800a43c <__ssvfiscanf_r+0x40>
 800a468:	e7ed      	b.n	800a446 <__ssvfiscanf_r+0x4a>
 800a46a:	2b25      	cmp	r3, #37	@ 0x25
 800a46c:	d012      	beq.n	800a494 <__ssvfiscanf_r+0x98>
 800a46e:	4699      	mov	r9, r3
 800a470:	6863      	ldr	r3, [r4, #4]
 800a472:	2b00      	cmp	r3, #0
 800a474:	f340 8093 	ble.w	800a59e <__ssvfiscanf_r+0x1a2>
 800a478:	6822      	ldr	r2, [r4, #0]
 800a47a:	7813      	ldrb	r3, [r2, #0]
 800a47c:	454b      	cmp	r3, r9
 800a47e:	f040 812c 	bne.w	800a6da <__ssvfiscanf_r+0x2de>
 800a482:	6863      	ldr	r3, [r4, #4]
 800a484:	3b01      	subs	r3, #1
 800a486:	6063      	str	r3, [r4, #4]
 800a488:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 800a48a:	3201      	adds	r2, #1
 800a48c:	3301      	adds	r3, #1
 800a48e:	6022      	str	r2, [r4, #0]
 800a490:	9345      	str	r3, [sp, #276]	@ 0x114
 800a492:	e7d8      	b.n	800a446 <__ssvfiscanf_r+0x4a>
 800a494:	9141      	str	r1, [sp, #260]	@ 0x104
 800a496:	9143      	str	r1, [sp, #268]	@ 0x10c
 800a498:	7853      	ldrb	r3, [r2, #1]
 800a49a:	2b2a      	cmp	r3, #42	@ 0x2a
 800a49c:	bf02      	ittt	eq
 800a49e:	2310      	moveq	r3, #16
 800a4a0:	1c95      	addeq	r5, r2, #2
 800a4a2:	9341      	streq	r3, [sp, #260]	@ 0x104
 800a4a4:	220a      	movs	r2, #10
 800a4a6:	46a9      	mov	r9, r5
 800a4a8:	f819 1b01 	ldrb.w	r1, [r9], #1
 800a4ac:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 800a4b0:	2b09      	cmp	r3, #9
 800a4b2:	d91e      	bls.n	800a4f2 <__ssvfiscanf_r+0xf6>
 800a4b4:	f8df a1f8 	ldr.w	sl, [pc, #504]	@ 800a6b0 <__ssvfiscanf_r+0x2b4>
 800a4b8:	2203      	movs	r2, #3
 800a4ba:	4650      	mov	r0, sl
 800a4bc:	f7f5 fea0 	bl	8000200 <memchr>
 800a4c0:	b138      	cbz	r0, 800a4d2 <__ssvfiscanf_r+0xd6>
 800a4c2:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800a4c4:	eba0 000a 	sub.w	r0, r0, sl
 800a4c8:	2301      	movs	r3, #1
 800a4ca:	4083      	lsls	r3, r0
 800a4cc:	4313      	orrs	r3, r2
 800a4ce:	9341      	str	r3, [sp, #260]	@ 0x104
 800a4d0:	464d      	mov	r5, r9
 800a4d2:	f815 3b01 	ldrb.w	r3, [r5], #1
 800a4d6:	2b78      	cmp	r3, #120	@ 0x78
 800a4d8:	d806      	bhi.n	800a4e8 <__ssvfiscanf_r+0xec>
 800a4da:	2b57      	cmp	r3, #87	@ 0x57
 800a4dc:	d810      	bhi.n	800a500 <__ssvfiscanf_r+0x104>
 800a4de:	2b25      	cmp	r3, #37	@ 0x25
 800a4e0:	d0c5      	beq.n	800a46e <__ssvfiscanf_r+0x72>
 800a4e2:	d857      	bhi.n	800a594 <__ssvfiscanf_r+0x198>
 800a4e4:	2b00      	cmp	r3, #0
 800a4e6:	d065      	beq.n	800a5b4 <__ssvfiscanf_r+0x1b8>
 800a4e8:	2303      	movs	r3, #3
 800a4ea:	9347      	str	r3, [sp, #284]	@ 0x11c
 800a4ec:	230a      	movs	r3, #10
 800a4ee:	9342      	str	r3, [sp, #264]	@ 0x108
 800a4f0:	e078      	b.n	800a5e4 <__ssvfiscanf_r+0x1e8>
 800a4f2:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 800a4f4:	fb02 1103 	mla	r1, r2, r3, r1
 800a4f8:	3930      	subs	r1, #48	@ 0x30
 800a4fa:	9143      	str	r1, [sp, #268]	@ 0x10c
 800a4fc:	464d      	mov	r5, r9
 800a4fe:	e7d2      	b.n	800a4a6 <__ssvfiscanf_r+0xaa>
 800a500:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 800a504:	2a20      	cmp	r2, #32
 800a506:	d8ef      	bhi.n	800a4e8 <__ssvfiscanf_r+0xec>
 800a508:	a101      	add	r1, pc, #4	@ (adr r1, 800a510 <__ssvfiscanf_r+0x114>)
 800a50a:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800a50e:	bf00      	nop
 800a510:	0800a5c3 	.word	0x0800a5c3
 800a514:	0800a4e9 	.word	0x0800a4e9
 800a518:	0800a4e9 	.word	0x0800a4e9
 800a51c:	0800a61d 	.word	0x0800a61d
 800a520:	0800a4e9 	.word	0x0800a4e9
 800a524:	0800a4e9 	.word	0x0800a4e9
 800a528:	0800a4e9 	.word	0x0800a4e9
 800a52c:	0800a4e9 	.word	0x0800a4e9
 800a530:	0800a4e9 	.word	0x0800a4e9
 800a534:	0800a4e9 	.word	0x0800a4e9
 800a538:	0800a4e9 	.word	0x0800a4e9
 800a53c:	0800a633 	.word	0x0800a633
 800a540:	0800a619 	.word	0x0800a619
 800a544:	0800a59b 	.word	0x0800a59b
 800a548:	0800a59b 	.word	0x0800a59b
 800a54c:	0800a59b 	.word	0x0800a59b
 800a550:	0800a4e9 	.word	0x0800a4e9
 800a554:	0800a5d5 	.word	0x0800a5d5
 800a558:	0800a4e9 	.word	0x0800a4e9
 800a55c:	0800a4e9 	.word	0x0800a4e9
 800a560:	0800a4e9 	.word	0x0800a4e9
 800a564:	0800a4e9 	.word	0x0800a4e9
 800a568:	0800a643 	.word	0x0800a643
 800a56c:	0800a5dd 	.word	0x0800a5dd
 800a570:	0800a5bb 	.word	0x0800a5bb
 800a574:	0800a4e9 	.word	0x0800a4e9
 800a578:	0800a4e9 	.word	0x0800a4e9
 800a57c:	0800a63f 	.word	0x0800a63f
 800a580:	0800a4e9 	.word	0x0800a4e9
 800a584:	0800a619 	.word	0x0800a619
 800a588:	0800a4e9 	.word	0x0800a4e9
 800a58c:	0800a4e9 	.word	0x0800a4e9
 800a590:	0800a5c3 	.word	0x0800a5c3
 800a594:	3b45      	subs	r3, #69	@ 0x45
 800a596:	2b02      	cmp	r3, #2
 800a598:	d8a6      	bhi.n	800a4e8 <__ssvfiscanf_r+0xec>
 800a59a:	2305      	movs	r3, #5
 800a59c:	e021      	b.n	800a5e2 <__ssvfiscanf_r+0x1e6>
 800a59e:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800a5a0:	4621      	mov	r1, r4
 800a5a2:	4630      	mov	r0, r6
 800a5a4:	4798      	blx	r3
 800a5a6:	2800      	cmp	r0, #0
 800a5a8:	f43f af66 	beq.w	800a478 <__ssvfiscanf_r+0x7c>
 800a5ac:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800a5ae:	2800      	cmp	r0, #0
 800a5b0:	f040 808b 	bne.w	800a6ca <__ssvfiscanf_r+0x2ce>
 800a5b4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a5b8:	e08b      	b.n	800a6d2 <__ssvfiscanf_r+0x2d6>
 800a5ba:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800a5bc:	f042 0220 	orr.w	r2, r2, #32
 800a5c0:	9241      	str	r2, [sp, #260]	@ 0x104
 800a5c2:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800a5c4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a5c8:	9241      	str	r2, [sp, #260]	@ 0x104
 800a5ca:	2210      	movs	r2, #16
 800a5cc:	2b6e      	cmp	r3, #110	@ 0x6e
 800a5ce:	9242      	str	r2, [sp, #264]	@ 0x108
 800a5d0:	d902      	bls.n	800a5d8 <__ssvfiscanf_r+0x1dc>
 800a5d2:	e005      	b.n	800a5e0 <__ssvfiscanf_r+0x1e4>
 800a5d4:	2300      	movs	r3, #0
 800a5d6:	9342      	str	r3, [sp, #264]	@ 0x108
 800a5d8:	2303      	movs	r3, #3
 800a5da:	e002      	b.n	800a5e2 <__ssvfiscanf_r+0x1e6>
 800a5dc:	2308      	movs	r3, #8
 800a5de:	9342      	str	r3, [sp, #264]	@ 0x108
 800a5e0:	2304      	movs	r3, #4
 800a5e2:	9347      	str	r3, [sp, #284]	@ 0x11c
 800a5e4:	6863      	ldr	r3, [r4, #4]
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	dd39      	ble.n	800a65e <__ssvfiscanf_r+0x262>
 800a5ea:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800a5ec:	0659      	lsls	r1, r3, #25
 800a5ee:	d404      	bmi.n	800a5fa <__ssvfiscanf_r+0x1fe>
 800a5f0:	6823      	ldr	r3, [r4, #0]
 800a5f2:	781a      	ldrb	r2, [r3, #0]
 800a5f4:	5cba      	ldrb	r2, [r7, r2]
 800a5f6:	0712      	lsls	r2, r2, #28
 800a5f8:	d438      	bmi.n	800a66c <__ssvfiscanf_r+0x270>
 800a5fa:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 800a5fc:	2b02      	cmp	r3, #2
 800a5fe:	dc47      	bgt.n	800a690 <__ssvfiscanf_r+0x294>
 800a600:	466b      	mov	r3, sp
 800a602:	4622      	mov	r2, r4
 800a604:	a941      	add	r1, sp, #260	@ 0x104
 800a606:	4630      	mov	r0, r6
 800a608:	f000 f9ae 	bl	800a968 <_scanf_chars>
 800a60c:	2801      	cmp	r0, #1
 800a60e:	d064      	beq.n	800a6da <__ssvfiscanf_r+0x2de>
 800a610:	2802      	cmp	r0, #2
 800a612:	f47f af18 	bne.w	800a446 <__ssvfiscanf_r+0x4a>
 800a616:	e7c9      	b.n	800a5ac <__ssvfiscanf_r+0x1b0>
 800a618:	220a      	movs	r2, #10
 800a61a:	e7d7      	b.n	800a5cc <__ssvfiscanf_r+0x1d0>
 800a61c:	4629      	mov	r1, r5
 800a61e:	4640      	mov	r0, r8
 800a620:	f000 fbfe 	bl	800ae20 <__sccl>
 800a624:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800a626:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a62a:	9341      	str	r3, [sp, #260]	@ 0x104
 800a62c:	4605      	mov	r5, r0
 800a62e:	2301      	movs	r3, #1
 800a630:	e7d7      	b.n	800a5e2 <__ssvfiscanf_r+0x1e6>
 800a632:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800a634:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a638:	9341      	str	r3, [sp, #260]	@ 0x104
 800a63a:	2300      	movs	r3, #0
 800a63c:	e7d1      	b.n	800a5e2 <__ssvfiscanf_r+0x1e6>
 800a63e:	2302      	movs	r3, #2
 800a640:	e7cf      	b.n	800a5e2 <__ssvfiscanf_r+0x1e6>
 800a642:	9841      	ldr	r0, [sp, #260]	@ 0x104
 800a644:	06c3      	lsls	r3, r0, #27
 800a646:	f53f aefe 	bmi.w	800a446 <__ssvfiscanf_r+0x4a>
 800a64a:	9b00      	ldr	r3, [sp, #0]
 800a64c:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800a64e:	1d19      	adds	r1, r3, #4
 800a650:	9100      	str	r1, [sp, #0]
 800a652:	681b      	ldr	r3, [r3, #0]
 800a654:	07c0      	lsls	r0, r0, #31
 800a656:	bf4c      	ite	mi
 800a658:	801a      	strhmi	r2, [r3, #0]
 800a65a:	601a      	strpl	r2, [r3, #0]
 800a65c:	e6f3      	b.n	800a446 <__ssvfiscanf_r+0x4a>
 800a65e:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800a660:	4621      	mov	r1, r4
 800a662:	4630      	mov	r0, r6
 800a664:	4798      	blx	r3
 800a666:	2800      	cmp	r0, #0
 800a668:	d0bf      	beq.n	800a5ea <__ssvfiscanf_r+0x1ee>
 800a66a:	e79f      	b.n	800a5ac <__ssvfiscanf_r+0x1b0>
 800a66c:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800a66e:	3201      	adds	r2, #1
 800a670:	9245      	str	r2, [sp, #276]	@ 0x114
 800a672:	6862      	ldr	r2, [r4, #4]
 800a674:	3a01      	subs	r2, #1
 800a676:	2a00      	cmp	r2, #0
 800a678:	6062      	str	r2, [r4, #4]
 800a67a:	dd02      	ble.n	800a682 <__ssvfiscanf_r+0x286>
 800a67c:	3301      	adds	r3, #1
 800a67e:	6023      	str	r3, [r4, #0]
 800a680:	e7b6      	b.n	800a5f0 <__ssvfiscanf_r+0x1f4>
 800a682:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800a684:	4621      	mov	r1, r4
 800a686:	4630      	mov	r0, r6
 800a688:	4798      	blx	r3
 800a68a:	2800      	cmp	r0, #0
 800a68c:	d0b0      	beq.n	800a5f0 <__ssvfiscanf_r+0x1f4>
 800a68e:	e78d      	b.n	800a5ac <__ssvfiscanf_r+0x1b0>
 800a690:	2b04      	cmp	r3, #4
 800a692:	dc0f      	bgt.n	800a6b4 <__ssvfiscanf_r+0x2b8>
 800a694:	466b      	mov	r3, sp
 800a696:	4622      	mov	r2, r4
 800a698:	a941      	add	r1, sp, #260	@ 0x104
 800a69a:	4630      	mov	r0, r6
 800a69c:	f000 f9be 	bl	800aa1c <_scanf_i>
 800a6a0:	e7b4      	b.n	800a60c <__ssvfiscanf_r+0x210>
 800a6a2:	bf00      	nop
 800a6a4:	0800a34d 	.word	0x0800a34d
 800a6a8:	0800a3c3 	.word	0x0800a3c3
 800a6ac:	0800ba49 	.word	0x0800ba49
 800a6b0:	0800bdc6 	.word	0x0800bdc6
 800a6b4:	4b0a      	ldr	r3, [pc, #40]	@ (800a6e0 <__ssvfiscanf_r+0x2e4>)
 800a6b6:	2b00      	cmp	r3, #0
 800a6b8:	f43f aec5 	beq.w	800a446 <__ssvfiscanf_r+0x4a>
 800a6bc:	466b      	mov	r3, sp
 800a6be:	4622      	mov	r2, r4
 800a6c0:	a941      	add	r1, sp, #260	@ 0x104
 800a6c2:	4630      	mov	r0, r6
 800a6c4:	f7fc fd0c 	bl	80070e0 <_scanf_float>
 800a6c8:	e7a0      	b.n	800a60c <__ssvfiscanf_r+0x210>
 800a6ca:	89a3      	ldrh	r3, [r4, #12]
 800a6cc:	065b      	lsls	r3, r3, #25
 800a6ce:	f53f af71 	bmi.w	800a5b4 <__ssvfiscanf_r+0x1b8>
 800a6d2:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 800a6d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a6da:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800a6dc:	e7f9      	b.n	800a6d2 <__ssvfiscanf_r+0x2d6>
 800a6de:	bf00      	nop
 800a6e0:	080070e1 	.word	0x080070e1

0800a6e4 <__sfputc_r>:
 800a6e4:	6893      	ldr	r3, [r2, #8]
 800a6e6:	3b01      	subs	r3, #1
 800a6e8:	2b00      	cmp	r3, #0
 800a6ea:	b410      	push	{r4}
 800a6ec:	6093      	str	r3, [r2, #8]
 800a6ee:	da08      	bge.n	800a702 <__sfputc_r+0x1e>
 800a6f0:	6994      	ldr	r4, [r2, #24]
 800a6f2:	42a3      	cmp	r3, r4
 800a6f4:	db01      	blt.n	800a6fa <__sfputc_r+0x16>
 800a6f6:	290a      	cmp	r1, #10
 800a6f8:	d103      	bne.n	800a702 <__sfputc_r+0x1e>
 800a6fa:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a6fe:	f7fd b8f8 	b.w	80078f2 <__swbuf_r>
 800a702:	6813      	ldr	r3, [r2, #0]
 800a704:	1c58      	adds	r0, r3, #1
 800a706:	6010      	str	r0, [r2, #0]
 800a708:	7019      	strb	r1, [r3, #0]
 800a70a:	4608      	mov	r0, r1
 800a70c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a710:	4770      	bx	lr

0800a712 <__sfputs_r>:
 800a712:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a714:	4606      	mov	r6, r0
 800a716:	460f      	mov	r7, r1
 800a718:	4614      	mov	r4, r2
 800a71a:	18d5      	adds	r5, r2, r3
 800a71c:	42ac      	cmp	r4, r5
 800a71e:	d101      	bne.n	800a724 <__sfputs_r+0x12>
 800a720:	2000      	movs	r0, #0
 800a722:	e007      	b.n	800a734 <__sfputs_r+0x22>
 800a724:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a728:	463a      	mov	r2, r7
 800a72a:	4630      	mov	r0, r6
 800a72c:	f7ff ffda 	bl	800a6e4 <__sfputc_r>
 800a730:	1c43      	adds	r3, r0, #1
 800a732:	d1f3      	bne.n	800a71c <__sfputs_r+0xa>
 800a734:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a738 <_vfiprintf_r>:
 800a738:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a73c:	460d      	mov	r5, r1
 800a73e:	b09d      	sub	sp, #116	@ 0x74
 800a740:	4614      	mov	r4, r2
 800a742:	4698      	mov	r8, r3
 800a744:	4606      	mov	r6, r0
 800a746:	b118      	cbz	r0, 800a750 <_vfiprintf_r+0x18>
 800a748:	6a03      	ldr	r3, [r0, #32]
 800a74a:	b90b      	cbnz	r3, 800a750 <_vfiprintf_r+0x18>
 800a74c:	f7fc ff68 	bl	8007620 <__sinit>
 800a750:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a752:	07d9      	lsls	r1, r3, #31
 800a754:	d405      	bmi.n	800a762 <_vfiprintf_r+0x2a>
 800a756:	89ab      	ldrh	r3, [r5, #12]
 800a758:	059a      	lsls	r2, r3, #22
 800a75a:	d402      	bmi.n	800a762 <_vfiprintf_r+0x2a>
 800a75c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a75e:	f7fd fa10 	bl	8007b82 <__retarget_lock_acquire_recursive>
 800a762:	89ab      	ldrh	r3, [r5, #12]
 800a764:	071b      	lsls	r3, r3, #28
 800a766:	d501      	bpl.n	800a76c <_vfiprintf_r+0x34>
 800a768:	692b      	ldr	r3, [r5, #16]
 800a76a:	b99b      	cbnz	r3, 800a794 <_vfiprintf_r+0x5c>
 800a76c:	4629      	mov	r1, r5
 800a76e:	4630      	mov	r0, r6
 800a770:	f7fd f8fe 	bl	8007970 <__swsetup_r>
 800a774:	b170      	cbz	r0, 800a794 <_vfiprintf_r+0x5c>
 800a776:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a778:	07dc      	lsls	r4, r3, #31
 800a77a:	d504      	bpl.n	800a786 <_vfiprintf_r+0x4e>
 800a77c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a780:	b01d      	add	sp, #116	@ 0x74
 800a782:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a786:	89ab      	ldrh	r3, [r5, #12]
 800a788:	0598      	lsls	r0, r3, #22
 800a78a:	d4f7      	bmi.n	800a77c <_vfiprintf_r+0x44>
 800a78c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a78e:	f7fd f9f9 	bl	8007b84 <__retarget_lock_release_recursive>
 800a792:	e7f3      	b.n	800a77c <_vfiprintf_r+0x44>
 800a794:	2300      	movs	r3, #0
 800a796:	9309      	str	r3, [sp, #36]	@ 0x24
 800a798:	2320      	movs	r3, #32
 800a79a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a79e:	f8cd 800c 	str.w	r8, [sp, #12]
 800a7a2:	2330      	movs	r3, #48	@ 0x30
 800a7a4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800a954 <_vfiprintf_r+0x21c>
 800a7a8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a7ac:	f04f 0901 	mov.w	r9, #1
 800a7b0:	4623      	mov	r3, r4
 800a7b2:	469a      	mov	sl, r3
 800a7b4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a7b8:	b10a      	cbz	r2, 800a7be <_vfiprintf_r+0x86>
 800a7ba:	2a25      	cmp	r2, #37	@ 0x25
 800a7bc:	d1f9      	bne.n	800a7b2 <_vfiprintf_r+0x7a>
 800a7be:	ebba 0b04 	subs.w	fp, sl, r4
 800a7c2:	d00b      	beq.n	800a7dc <_vfiprintf_r+0xa4>
 800a7c4:	465b      	mov	r3, fp
 800a7c6:	4622      	mov	r2, r4
 800a7c8:	4629      	mov	r1, r5
 800a7ca:	4630      	mov	r0, r6
 800a7cc:	f7ff ffa1 	bl	800a712 <__sfputs_r>
 800a7d0:	3001      	adds	r0, #1
 800a7d2:	f000 80a7 	beq.w	800a924 <_vfiprintf_r+0x1ec>
 800a7d6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a7d8:	445a      	add	r2, fp
 800a7da:	9209      	str	r2, [sp, #36]	@ 0x24
 800a7dc:	f89a 3000 	ldrb.w	r3, [sl]
 800a7e0:	2b00      	cmp	r3, #0
 800a7e2:	f000 809f 	beq.w	800a924 <_vfiprintf_r+0x1ec>
 800a7e6:	2300      	movs	r3, #0
 800a7e8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a7ec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a7f0:	f10a 0a01 	add.w	sl, sl, #1
 800a7f4:	9304      	str	r3, [sp, #16]
 800a7f6:	9307      	str	r3, [sp, #28]
 800a7f8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a7fc:	931a      	str	r3, [sp, #104]	@ 0x68
 800a7fe:	4654      	mov	r4, sl
 800a800:	2205      	movs	r2, #5
 800a802:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a806:	4853      	ldr	r0, [pc, #332]	@ (800a954 <_vfiprintf_r+0x21c>)
 800a808:	f7f5 fcfa 	bl	8000200 <memchr>
 800a80c:	9a04      	ldr	r2, [sp, #16]
 800a80e:	b9d8      	cbnz	r0, 800a848 <_vfiprintf_r+0x110>
 800a810:	06d1      	lsls	r1, r2, #27
 800a812:	bf44      	itt	mi
 800a814:	2320      	movmi	r3, #32
 800a816:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a81a:	0713      	lsls	r3, r2, #28
 800a81c:	bf44      	itt	mi
 800a81e:	232b      	movmi	r3, #43	@ 0x2b
 800a820:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a824:	f89a 3000 	ldrb.w	r3, [sl]
 800a828:	2b2a      	cmp	r3, #42	@ 0x2a
 800a82a:	d015      	beq.n	800a858 <_vfiprintf_r+0x120>
 800a82c:	9a07      	ldr	r2, [sp, #28]
 800a82e:	4654      	mov	r4, sl
 800a830:	2000      	movs	r0, #0
 800a832:	f04f 0c0a 	mov.w	ip, #10
 800a836:	4621      	mov	r1, r4
 800a838:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a83c:	3b30      	subs	r3, #48	@ 0x30
 800a83e:	2b09      	cmp	r3, #9
 800a840:	d94b      	bls.n	800a8da <_vfiprintf_r+0x1a2>
 800a842:	b1b0      	cbz	r0, 800a872 <_vfiprintf_r+0x13a>
 800a844:	9207      	str	r2, [sp, #28]
 800a846:	e014      	b.n	800a872 <_vfiprintf_r+0x13a>
 800a848:	eba0 0308 	sub.w	r3, r0, r8
 800a84c:	fa09 f303 	lsl.w	r3, r9, r3
 800a850:	4313      	orrs	r3, r2
 800a852:	9304      	str	r3, [sp, #16]
 800a854:	46a2      	mov	sl, r4
 800a856:	e7d2      	b.n	800a7fe <_vfiprintf_r+0xc6>
 800a858:	9b03      	ldr	r3, [sp, #12]
 800a85a:	1d19      	adds	r1, r3, #4
 800a85c:	681b      	ldr	r3, [r3, #0]
 800a85e:	9103      	str	r1, [sp, #12]
 800a860:	2b00      	cmp	r3, #0
 800a862:	bfbb      	ittet	lt
 800a864:	425b      	neglt	r3, r3
 800a866:	f042 0202 	orrlt.w	r2, r2, #2
 800a86a:	9307      	strge	r3, [sp, #28]
 800a86c:	9307      	strlt	r3, [sp, #28]
 800a86e:	bfb8      	it	lt
 800a870:	9204      	strlt	r2, [sp, #16]
 800a872:	7823      	ldrb	r3, [r4, #0]
 800a874:	2b2e      	cmp	r3, #46	@ 0x2e
 800a876:	d10a      	bne.n	800a88e <_vfiprintf_r+0x156>
 800a878:	7863      	ldrb	r3, [r4, #1]
 800a87a:	2b2a      	cmp	r3, #42	@ 0x2a
 800a87c:	d132      	bne.n	800a8e4 <_vfiprintf_r+0x1ac>
 800a87e:	9b03      	ldr	r3, [sp, #12]
 800a880:	1d1a      	adds	r2, r3, #4
 800a882:	681b      	ldr	r3, [r3, #0]
 800a884:	9203      	str	r2, [sp, #12]
 800a886:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a88a:	3402      	adds	r4, #2
 800a88c:	9305      	str	r3, [sp, #20]
 800a88e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800a964 <_vfiprintf_r+0x22c>
 800a892:	7821      	ldrb	r1, [r4, #0]
 800a894:	2203      	movs	r2, #3
 800a896:	4650      	mov	r0, sl
 800a898:	f7f5 fcb2 	bl	8000200 <memchr>
 800a89c:	b138      	cbz	r0, 800a8ae <_vfiprintf_r+0x176>
 800a89e:	9b04      	ldr	r3, [sp, #16]
 800a8a0:	eba0 000a 	sub.w	r0, r0, sl
 800a8a4:	2240      	movs	r2, #64	@ 0x40
 800a8a6:	4082      	lsls	r2, r0
 800a8a8:	4313      	orrs	r3, r2
 800a8aa:	3401      	adds	r4, #1
 800a8ac:	9304      	str	r3, [sp, #16]
 800a8ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a8b2:	4829      	ldr	r0, [pc, #164]	@ (800a958 <_vfiprintf_r+0x220>)
 800a8b4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a8b8:	2206      	movs	r2, #6
 800a8ba:	f7f5 fca1 	bl	8000200 <memchr>
 800a8be:	2800      	cmp	r0, #0
 800a8c0:	d03f      	beq.n	800a942 <_vfiprintf_r+0x20a>
 800a8c2:	4b26      	ldr	r3, [pc, #152]	@ (800a95c <_vfiprintf_r+0x224>)
 800a8c4:	bb1b      	cbnz	r3, 800a90e <_vfiprintf_r+0x1d6>
 800a8c6:	9b03      	ldr	r3, [sp, #12]
 800a8c8:	3307      	adds	r3, #7
 800a8ca:	f023 0307 	bic.w	r3, r3, #7
 800a8ce:	3308      	adds	r3, #8
 800a8d0:	9303      	str	r3, [sp, #12]
 800a8d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a8d4:	443b      	add	r3, r7
 800a8d6:	9309      	str	r3, [sp, #36]	@ 0x24
 800a8d8:	e76a      	b.n	800a7b0 <_vfiprintf_r+0x78>
 800a8da:	fb0c 3202 	mla	r2, ip, r2, r3
 800a8de:	460c      	mov	r4, r1
 800a8e0:	2001      	movs	r0, #1
 800a8e2:	e7a8      	b.n	800a836 <_vfiprintf_r+0xfe>
 800a8e4:	2300      	movs	r3, #0
 800a8e6:	3401      	adds	r4, #1
 800a8e8:	9305      	str	r3, [sp, #20]
 800a8ea:	4619      	mov	r1, r3
 800a8ec:	f04f 0c0a 	mov.w	ip, #10
 800a8f0:	4620      	mov	r0, r4
 800a8f2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a8f6:	3a30      	subs	r2, #48	@ 0x30
 800a8f8:	2a09      	cmp	r2, #9
 800a8fa:	d903      	bls.n	800a904 <_vfiprintf_r+0x1cc>
 800a8fc:	2b00      	cmp	r3, #0
 800a8fe:	d0c6      	beq.n	800a88e <_vfiprintf_r+0x156>
 800a900:	9105      	str	r1, [sp, #20]
 800a902:	e7c4      	b.n	800a88e <_vfiprintf_r+0x156>
 800a904:	fb0c 2101 	mla	r1, ip, r1, r2
 800a908:	4604      	mov	r4, r0
 800a90a:	2301      	movs	r3, #1
 800a90c:	e7f0      	b.n	800a8f0 <_vfiprintf_r+0x1b8>
 800a90e:	ab03      	add	r3, sp, #12
 800a910:	9300      	str	r3, [sp, #0]
 800a912:	462a      	mov	r2, r5
 800a914:	4b12      	ldr	r3, [pc, #72]	@ (800a960 <_vfiprintf_r+0x228>)
 800a916:	a904      	add	r1, sp, #16
 800a918:	4630      	mov	r0, r6
 800a91a:	f7fc f829 	bl	8006970 <_printf_float>
 800a91e:	4607      	mov	r7, r0
 800a920:	1c78      	adds	r0, r7, #1
 800a922:	d1d6      	bne.n	800a8d2 <_vfiprintf_r+0x19a>
 800a924:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a926:	07d9      	lsls	r1, r3, #31
 800a928:	d405      	bmi.n	800a936 <_vfiprintf_r+0x1fe>
 800a92a:	89ab      	ldrh	r3, [r5, #12]
 800a92c:	059a      	lsls	r2, r3, #22
 800a92e:	d402      	bmi.n	800a936 <_vfiprintf_r+0x1fe>
 800a930:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a932:	f7fd f927 	bl	8007b84 <__retarget_lock_release_recursive>
 800a936:	89ab      	ldrh	r3, [r5, #12]
 800a938:	065b      	lsls	r3, r3, #25
 800a93a:	f53f af1f 	bmi.w	800a77c <_vfiprintf_r+0x44>
 800a93e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a940:	e71e      	b.n	800a780 <_vfiprintf_r+0x48>
 800a942:	ab03      	add	r3, sp, #12
 800a944:	9300      	str	r3, [sp, #0]
 800a946:	462a      	mov	r2, r5
 800a948:	4b05      	ldr	r3, [pc, #20]	@ (800a960 <_vfiprintf_r+0x228>)
 800a94a:	a904      	add	r1, sp, #16
 800a94c:	4630      	mov	r0, r6
 800a94e:	f7fc faa7 	bl	8006ea0 <_printf_i>
 800a952:	e7e4      	b.n	800a91e <_vfiprintf_r+0x1e6>
 800a954:	0800bdc0 	.word	0x0800bdc0
 800a958:	0800bdca 	.word	0x0800bdca
 800a95c:	08006971 	.word	0x08006971
 800a960:	0800a713 	.word	0x0800a713
 800a964:	0800bdc6 	.word	0x0800bdc6

0800a968 <_scanf_chars>:
 800a968:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a96c:	4615      	mov	r5, r2
 800a96e:	688a      	ldr	r2, [r1, #8]
 800a970:	4680      	mov	r8, r0
 800a972:	460c      	mov	r4, r1
 800a974:	b932      	cbnz	r2, 800a984 <_scanf_chars+0x1c>
 800a976:	698a      	ldr	r2, [r1, #24]
 800a978:	2a00      	cmp	r2, #0
 800a97a:	bf14      	ite	ne
 800a97c:	f04f 32ff 	movne.w	r2, #4294967295	@ 0xffffffff
 800a980:	2201      	moveq	r2, #1
 800a982:	608a      	str	r2, [r1, #8]
 800a984:	6822      	ldr	r2, [r4, #0]
 800a986:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 800aa18 <_scanf_chars+0xb0>
 800a98a:	06d1      	lsls	r1, r2, #27
 800a98c:	bf5f      	itttt	pl
 800a98e:	681a      	ldrpl	r2, [r3, #0]
 800a990:	1d11      	addpl	r1, r2, #4
 800a992:	6019      	strpl	r1, [r3, #0]
 800a994:	6816      	ldrpl	r6, [r2, #0]
 800a996:	2700      	movs	r7, #0
 800a998:	69a0      	ldr	r0, [r4, #24]
 800a99a:	b188      	cbz	r0, 800a9c0 <_scanf_chars+0x58>
 800a99c:	2801      	cmp	r0, #1
 800a99e:	d107      	bne.n	800a9b0 <_scanf_chars+0x48>
 800a9a0:	682b      	ldr	r3, [r5, #0]
 800a9a2:	781a      	ldrb	r2, [r3, #0]
 800a9a4:	6963      	ldr	r3, [r4, #20]
 800a9a6:	5c9b      	ldrb	r3, [r3, r2]
 800a9a8:	b953      	cbnz	r3, 800a9c0 <_scanf_chars+0x58>
 800a9aa:	2f00      	cmp	r7, #0
 800a9ac:	d031      	beq.n	800aa12 <_scanf_chars+0xaa>
 800a9ae:	e022      	b.n	800a9f6 <_scanf_chars+0x8e>
 800a9b0:	2802      	cmp	r0, #2
 800a9b2:	d120      	bne.n	800a9f6 <_scanf_chars+0x8e>
 800a9b4:	682b      	ldr	r3, [r5, #0]
 800a9b6:	781b      	ldrb	r3, [r3, #0]
 800a9b8:	f819 3003 	ldrb.w	r3, [r9, r3]
 800a9bc:	071b      	lsls	r3, r3, #28
 800a9be:	d41a      	bmi.n	800a9f6 <_scanf_chars+0x8e>
 800a9c0:	6823      	ldr	r3, [r4, #0]
 800a9c2:	06da      	lsls	r2, r3, #27
 800a9c4:	bf5e      	ittt	pl
 800a9c6:	682b      	ldrpl	r3, [r5, #0]
 800a9c8:	781b      	ldrbpl	r3, [r3, #0]
 800a9ca:	f806 3b01 	strbpl.w	r3, [r6], #1
 800a9ce:	682a      	ldr	r2, [r5, #0]
 800a9d0:	686b      	ldr	r3, [r5, #4]
 800a9d2:	3201      	adds	r2, #1
 800a9d4:	602a      	str	r2, [r5, #0]
 800a9d6:	68a2      	ldr	r2, [r4, #8]
 800a9d8:	3b01      	subs	r3, #1
 800a9da:	3a01      	subs	r2, #1
 800a9dc:	606b      	str	r3, [r5, #4]
 800a9de:	3701      	adds	r7, #1
 800a9e0:	60a2      	str	r2, [r4, #8]
 800a9e2:	b142      	cbz	r2, 800a9f6 <_scanf_chars+0x8e>
 800a9e4:	2b00      	cmp	r3, #0
 800a9e6:	dcd7      	bgt.n	800a998 <_scanf_chars+0x30>
 800a9e8:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800a9ec:	4629      	mov	r1, r5
 800a9ee:	4640      	mov	r0, r8
 800a9f0:	4798      	blx	r3
 800a9f2:	2800      	cmp	r0, #0
 800a9f4:	d0d0      	beq.n	800a998 <_scanf_chars+0x30>
 800a9f6:	6823      	ldr	r3, [r4, #0]
 800a9f8:	f013 0310 	ands.w	r3, r3, #16
 800a9fc:	d105      	bne.n	800aa0a <_scanf_chars+0xa2>
 800a9fe:	68e2      	ldr	r2, [r4, #12]
 800aa00:	3201      	adds	r2, #1
 800aa02:	60e2      	str	r2, [r4, #12]
 800aa04:	69a2      	ldr	r2, [r4, #24]
 800aa06:	b102      	cbz	r2, 800aa0a <_scanf_chars+0xa2>
 800aa08:	7033      	strb	r3, [r6, #0]
 800aa0a:	6923      	ldr	r3, [r4, #16]
 800aa0c:	443b      	add	r3, r7
 800aa0e:	6123      	str	r3, [r4, #16]
 800aa10:	2000      	movs	r0, #0
 800aa12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aa16:	bf00      	nop
 800aa18:	0800ba49 	.word	0x0800ba49

0800aa1c <_scanf_i>:
 800aa1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa20:	4698      	mov	r8, r3
 800aa22:	4b74      	ldr	r3, [pc, #464]	@ (800abf4 <_scanf_i+0x1d8>)
 800aa24:	460c      	mov	r4, r1
 800aa26:	4682      	mov	sl, r0
 800aa28:	4616      	mov	r6, r2
 800aa2a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800aa2e:	b087      	sub	sp, #28
 800aa30:	ab03      	add	r3, sp, #12
 800aa32:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800aa36:	4b70      	ldr	r3, [pc, #448]	@ (800abf8 <_scanf_i+0x1dc>)
 800aa38:	69a1      	ldr	r1, [r4, #24]
 800aa3a:	4a70      	ldr	r2, [pc, #448]	@ (800abfc <_scanf_i+0x1e0>)
 800aa3c:	2903      	cmp	r1, #3
 800aa3e:	bf08      	it	eq
 800aa40:	461a      	moveq	r2, r3
 800aa42:	68a3      	ldr	r3, [r4, #8]
 800aa44:	9201      	str	r2, [sp, #4]
 800aa46:	1e5a      	subs	r2, r3, #1
 800aa48:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800aa4c:	bf88      	it	hi
 800aa4e:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800aa52:	4627      	mov	r7, r4
 800aa54:	bf82      	ittt	hi
 800aa56:	eb03 0905 	addhi.w	r9, r3, r5
 800aa5a:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800aa5e:	60a3      	strhi	r3, [r4, #8]
 800aa60:	f857 3b1c 	ldr.w	r3, [r7], #28
 800aa64:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 800aa68:	bf98      	it	ls
 800aa6a:	f04f 0900 	movls.w	r9, #0
 800aa6e:	6023      	str	r3, [r4, #0]
 800aa70:	463d      	mov	r5, r7
 800aa72:	f04f 0b00 	mov.w	fp, #0
 800aa76:	6831      	ldr	r1, [r6, #0]
 800aa78:	ab03      	add	r3, sp, #12
 800aa7a:	7809      	ldrb	r1, [r1, #0]
 800aa7c:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800aa80:	2202      	movs	r2, #2
 800aa82:	f7f5 fbbd 	bl	8000200 <memchr>
 800aa86:	b328      	cbz	r0, 800aad4 <_scanf_i+0xb8>
 800aa88:	f1bb 0f01 	cmp.w	fp, #1
 800aa8c:	d159      	bne.n	800ab42 <_scanf_i+0x126>
 800aa8e:	6862      	ldr	r2, [r4, #4]
 800aa90:	b92a      	cbnz	r2, 800aa9e <_scanf_i+0x82>
 800aa92:	6822      	ldr	r2, [r4, #0]
 800aa94:	2108      	movs	r1, #8
 800aa96:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800aa9a:	6061      	str	r1, [r4, #4]
 800aa9c:	6022      	str	r2, [r4, #0]
 800aa9e:	6822      	ldr	r2, [r4, #0]
 800aaa0:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 800aaa4:	6022      	str	r2, [r4, #0]
 800aaa6:	68a2      	ldr	r2, [r4, #8]
 800aaa8:	1e51      	subs	r1, r2, #1
 800aaaa:	60a1      	str	r1, [r4, #8]
 800aaac:	b192      	cbz	r2, 800aad4 <_scanf_i+0xb8>
 800aaae:	6832      	ldr	r2, [r6, #0]
 800aab0:	1c51      	adds	r1, r2, #1
 800aab2:	6031      	str	r1, [r6, #0]
 800aab4:	7812      	ldrb	r2, [r2, #0]
 800aab6:	f805 2b01 	strb.w	r2, [r5], #1
 800aaba:	6872      	ldr	r2, [r6, #4]
 800aabc:	3a01      	subs	r2, #1
 800aabe:	2a00      	cmp	r2, #0
 800aac0:	6072      	str	r2, [r6, #4]
 800aac2:	dc07      	bgt.n	800aad4 <_scanf_i+0xb8>
 800aac4:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 800aac8:	4631      	mov	r1, r6
 800aaca:	4650      	mov	r0, sl
 800aacc:	4790      	blx	r2
 800aace:	2800      	cmp	r0, #0
 800aad0:	f040 8085 	bne.w	800abde <_scanf_i+0x1c2>
 800aad4:	f10b 0b01 	add.w	fp, fp, #1
 800aad8:	f1bb 0f03 	cmp.w	fp, #3
 800aadc:	d1cb      	bne.n	800aa76 <_scanf_i+0x5a>
 800aade:	6863      	ldr	r3, [r4, #4]
 800aae0:	b90b      	cbnz	r3, 800aae6 <_scanf_i+0xca>
 800aae2:	230a      	movs	r3, #10
 800aae4:	6063      	str	r3, [r4, #4]
 800aae6:	6863      	ldr	r3, [r4, #4]
 800aae8:	4945      	ldr	r1, [pc, #276]	@ (800ac00 <_scanf_i+0x1e4>)
 800aaea:	6960      	ldr	r0, [r4, #20]
 800aaec:	1ac9      	subs	r1, r1, r3
 800aaee:	f000 f997 	bl	800ae20 <__sccl>
 800aaf2:	f04f 0b00 	mov.w	fp, #0
 800aaf6:	68a3      	ldr	r3, [r4, #8]
 800aaf8:	6822      	ldr	r2, [r4, #0]
 800aafa:	2b00      	cmp	r3, #0
 800aafc:	d03d      	beq.n	800ab7a <_scanf_i+0x15e>
 800aafe:	6831      	ldr	r1, [r6, #0]
 800ab00:	6960      	ldr	r0, [r4, #20]
 800ab02:	f891 c000 	ldrb.w	ip, [r1]
 800ab06:	f810 000c 	ldrb.w	r0, [r0, ip]
 800ab0a:	2800      	cmp	r0, #0
 800ab0c:	d035      	beq.n	800ab7a <_scanf_i+0x15e>
 800ab0e:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 800ab12:	d124      	bne.n	800ab5e <_scanf_i+0x142>
 800ab14:	0510      	lsls	r0, r2, #20
 800ab16:	d522      	bpl.n	800ab5e <_scanf_i+0x142>
 800ab18:	f10b 0b01 	add.w	fp, fp, #1
 800ab1c:	f1b9 0f00 	cmp.w	r9, #0
 800ab20:	d003      	beq.n	800ab2a <_scanf_i+0x10e>
 800ab22:	3301      	adds	r3, #1
 800ab24:	f109 39ff 	add.w	r9, r9, #4294967295	@ 0xffffffff
 800ab28:	60a3      	str	r3, [r4, #8]
 800ab2a:	6873      	ldr	r3, [r6, #4]
 800ab2c:	3b01      	subs	r3, #1
 800ab2e:	2b00      	cmp	r3, #0
 800ab30:	6073      	str	r3, [r6, #4]
 800ab32:	dd1b      	ble.n	800ab6c <_scanf_i+0x150>
 800ab34:	6833      	ldr	r3, [r6, #0]
 800ab36:	3301      	adds	r3, #1
 800ab38:	6033      	str	r3, [r6, #0]
 800ab3a:	68a3      	ldr	r3, [r4, #8]
 800ab3c:	3b01      	subs	r3, #1
 800ab3e:	60a3      	str	r3, [r4, #8]
 800ab40:	e7d9      	b.n	800aaf6 <_scanf_i+0xda>
 800ab42:	f1bb 0f02 	cmp.w	fp, #2
 800ab46:	d1ae      	bne.n	800aaa6 <_scanf_i+0x8a>
 800ab48:	6822      	ldr	r2, [r4, #0]
 800ab4a:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 800ab4e:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 800ab52:	d1bf      	bne.n	800aad4 <_scanf_i+0xb8>
 800ab54:	2110      	movs	r1, #16
 800ab56:	6061      	str	r1, [r4, #4]
 800ab58:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800ab5c:	e7a2      	b.n	800aaa4 <_scanf_i+0x88>
 800ab5e:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 800ab62:	6022      	str	r2, [r4, #0]
 800ab64:	780b      	ldrb	r3, [r1, #0]
 800ab66:	f805 3b01 	strb.w	r3, [r5], #1
 800ab6a:	e7de      	b.n	800ab2a <_scanf_i+0x10e>
 800ab6c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800ab70:	4631      	mov	r1, r6
 800ab72:	4650      	mov	r0, sl
 800ab74:	4798      	blx	r3
 800ab76:	2800      	cmp	r0, #0
 800ab78:	d0df      	beq.n	800ab3a <_scanf_i+0x11e>
 800ab7a:	6823      	ldr	r3, [r4, #0]
 800ab7c:	05d9      	lsls	r1, r3, #23
 800ab7e:	d50d      	bpl.n	800ab9c <_scanf_i+0x180>
 800ab80:	42bd      	cmp	r5, r7
 800ab82:	d909      	bls.n	800ab98 <_scanf_i+0x17c>
 800ab84:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800ab88:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800ab8c:	4632      	mov	r2, r6
 800ab8e:	4650      	mov	r0, sl
 800ab90:	4798      	blx	r3
 800ab92:	f105 39ff 	add.w	r9, r5, #4294967295	@ 0xffffffff
 800ab96:	464d      	mov	r5, r9
 800ab98:	42bd      	cmp	r5, r7
 800ab9a:	d028      	beq.n	800abee <_scanf_i+0x1d2>
 800ab9c:	6822      	ldr	r2, [r4, #0]
 800ab9e:	f012 0210 	ands.w	r2, r2, #16
 800aba2:	d113      	bne.n	800abcc <_scanf_i+0x1b0>
 800aba4:	702a      	strb	r2, [r5, #0]
 800aba6:	6863      	ldr	r3, [r4, #4]
 800aba8:	9e01      	ldr	r6, [sp, #4]
 800abaa:	4639      	mov	r1, r7
 800abac:	4650      	mov	r0, sl
 800abae:	47b0      	blx	r6
 800abb0:	f8d8 3000 	ldr.w	r3, [r8]
 800abb4:	6821      	ldr	r1, [r4, #0]
 800abb6:	1d1a      	adds	r2, r3, #4
 800abb8:	f8c8 2000 	str.w	r2, [r8]
 800abbc:	f011 0f20 	tst.w	r1, #32
 800abc0:	681b      	ldr	r3, [r3, #0]
 800abc2:	d00f      	beq.n	800abe4 <_scanf_i+0x1c8>
 800abc4:	6018      	str	r0, [r3, #0]
 800abc6:	68e3      	ldr	r3, [r4, #12]
 800abc8:	3301      	adds	r3, #1
 800abca:	60e3      	str	r3, [r4, #12]
 800abcc:	6923      	ldr	r3, [r4, #16]
 800abce:	1bed      	subs	r5, r5, r7
 800abd0:	445d      	add	r5, fp
 800abd2:	442b      	add	r3, r5
 800abd4:	6123      	str	r3, [r4, #16]
 800abd6:	2000      	movs	r0, #0
 800abd8:	b007      	add	sp, #28
 800abda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800abde:	f04f 0b00 	mov.w	fp, #0
 800abe2:	e7ca      	b.n	800ab7a <_scanf_i+0x15e>
 800abe4:	07ca      	lsls	r2, r1, #31
 800abe6:	bf4c      	ite	mi
 800abe8:	8018      	strhmi	r0, [r3, #0]
 800abea:	6018      	strpl	r0, [r3, #0]
 800abec:	e7eb      	b.n	800abc6 <_scanf_i+0x1aa>
 800abee:	2001      	movs	r0, #1
 800abf0:	e7f2      	b.n	800abd8 <_scanf_i+0x1bc>
 800abf2:	bf00      	nop
 800abf4:	0800ba1c 	.word	0x0800ba1c
 800abf8:	0800a099 	.word	0x0800a099
 800abfc:	08006819 	.word	0x08006819
 800ac00:	0800bde1 	.word	0x0800bde1

0800ac04 <__sflush_r>:
 800ac04:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ac08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ac0c:	0716      	lsls	r6, r2, #28
 800ac0e:	4605      	mov	r5, r0
 800ac10:	460c      	mov	r4, r1
 800ac12:	d454      	bmi.n	800acbe <__sflush_r+0xba>
 800ac14:	684b      	ldr	r3, [r1, #4]
 800ac16:	2b00      	cmp	r3, #0
 800ac18:	dc02      	bgt.n	800ac20 <__sflush_r+0x1c>
 800ac1a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800ac1c:	2b00      	cmp	r3, #0
 800ac1e:	dd48      	ble.n	800acb2 <__sflush_r+0xae>
 800ac20:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ac22:	2e00      	cmp	r6, #0
 800ac24:	d045      	beq.n	800acb2 <__sflush_r+0xae>
 800ac26:	2300      	movs	r3, #0
 800ac28:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800ac2c:	682f      	ldr	r7, [r5, #0]
 800ac2e:	6a21      	ldr	r1, [r4, #32]
 800ac30:	602b      	str	r3, [r5, #0]
 800ac32:	d030      	beq.n	800ac96 <__sflush_r+0x92>
 800ac34:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800ac36:	89a3      	ldrh	r3, [r4, #12]
 800ac38:	0759      	lsls	r1, r3, #29
 800ac3a:	d505      	bpl.n	800ac48 <__sflush_r+0x44>
 800ac3c:	6863      	ldr	r3, [r4, #4]
 800ac3e:	1ad2      	subs	r2, r2, r3
 800ac40:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800ac42:	b10b      	cbz	r3, 800ac48 <__sflush_r+0x44>
 800ac44:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800ac46:	1ad2      	subs	r2, r2, r3
 800ac48:	2300      	movs	r3, #0
 800ac4a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ac4c:	6a21      	ldr	r1, [r4, #32]
 800ac4e:	4628      	mov	r0, r5
 800ac50:	47b0      	blx	r6
 800ac52:	1c43      	adds	r3, r0, #1
 800ac54:	89a3      	ldrh	r3, [r4, #12]
 800ac56:	d106      	bne.n	800ac66 <__sflush_r+0x62>
 800ac58:	6829      	ldr	r1, [r5, #0]
 800ac5a:	291d      	cmp	r1, #29
 800ac5c:	d82b      	bhi.n	800acb6 <__sflush_r+0xb2>
 800ac5e:	4a2a      	ldr	r2, [pc, #168]	@ (800ad08 <__sflush_r+0x104>)
 800ac60:	410a      	asrs	r2, r1
 800ac62:	07d6      	lsls	r6, r2, #31
 800ac64:	d427      	bmi.n	800acb6 <__sflush_r+0xb2>
 800ac66:	2200      	movs	r2, #0
 800ac68:	6062      	str	r2, [r4, #4]
 800ac6a:	04d9      	lsls	r1, r3, #19
 800ac6c:	6922      	ldr	r2, [r4, #16]
 800ac6e:	6022      	str	r2, [r4, #0]
 800ac70:	d504      	bpl.n	800ac7c <__sflush_r+0x78>
 800ac72:	1c42      	adds	r2, r0, #1
 800ac74:	d101      	bne.n	800ac7a <__sflush_r+0x76>
 800ac76:	682b      	ldr	r3, [r5, #0]
 800ac78:	b903      	cbnz	r3, 800ac7c <__sflush_r+0x78>
 800ac7a:	6560      	str	r0, [r4, #84]	@ 0x54
 800ac7c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ac7e:	602f      	str	r7, [r5, #0]
 800ac80:	b1b9      	cbz	r1, 800acb2 <__sflush_r+0xae>
 800ac82:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ac86:	4299      	cmp	r1, r3
 800ac88:	d002      	beq.n	800ac90 <__sflush_r+0x8c>
 800ac8a:	4628      	mov	r0, r5
 800ac8c:	f7fd fdd0 	bl	8008830 <_free_r>
 800ac90:	2300      	movs	r3, #0
 800ac92:	6363      	str	r3, [r4, #52]	@ 0x34
 800ac94:	e00d      	b.n	800acb2 <__sflush_r+0xae>
 800ac96:	2301      	movs	r3, #1
 800ac98:	4628      	mov	r0, r5
 800ac9a:	47b0      	blx	r6
 800ac9c:	4602      	mov	r2, r0
 800ac9e:	1c50      	adds	r0, r2, #1
 800aca0:	d1c9      	bne.n	800ac36 <__sflush_r+0x32>
 800aca2:	682b      	ldr	r3, [r5, #0]
 800aca4:	2b00      	cmp	r3, #0
 800aca6:	d0c6      	beq.n	800ac36 <__sflush_r+0x32>
 800aca8:	2b1d      	cmp	r3, #29
 800acaa:	d001      	beq.n	800acb0 <__sflush_r+0xac>
 800acac:	2b16      	cmp	r3, #22
 800acae:	d11e      	bne.n	800acee <__sflush_r+0xea>
 800acb0:	602f      	str	r7, [r5, #0]
 800acb2:	2000      	movs	r0, #0
 800acb4:	e022      	b.n	800acfc <__sflush_r+0xf8>
 800acb6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800acba:	b21b      	sxth	r3, r3
 800acbc:	e01b      	b.n	800acf6 <__sflush_r+0xf2>
 800acbe:	690f      	ldr	r7, [r1, #16]
 800acc0:	2f00      	cmp	r7, #0
 800acc2:	d0f6      	beq.n	800acb2 <__sflush_r+0xae>
 800acc4:	0793      	lsls	r3, r2, #30
 800acc6:	680e      	ldr	r6, [r1, #0]
 800acc8:	bf08      	it	eq
 800acca:	694b      	ldreq	r3, [r1, #20]
 800accc:	600f      	str	r7, [r1, #0]
 800acce:	bf18      	it	ne
 800acd0:	2300      	movne	r3, #0
 800acd2:	eba6 0807 	sub.w	r8, r6, r7
 800acd6:	608b      	str	r3, [r1, #8]
 800acd8:	f1b8 0f00 	cmp.w	r8, #0
 800acdc:	dde9      	ble.n	800acb2 <__sflush_r+0xae>
 800acde:	6a21      	ldr	r1, [r4, #32]
 800ace0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800ace2:	4643      	mov	r3, r8
 800ace4:	463a      	mov	r2, r7
 800ace6:	4628      	mov	r0, r5
 800ace8:	47b0      	blx	r6
 800acea:	2800      	cmp	r0, #0
 800acec:	dc08      	bgt.n	800ad00 <__sflush_r+0xfc>
 800acee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800acf2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800acf6:	81a3      	strh	r3, [r4, #12]
 800acf8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800acfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ad00:	4407      	add	r7, r0
 800ad02:	eba8 0800 	sub.w	r8, r8, r0
 800ad06:	e7e7      	b.n	800acd8 <__sflush_r+0xd4>
 800ad08:	dfbffffe 	.word	0xdfbffffe

0800ad0c <_fflush_r>:
 800ad0c:	b538      	push	{r3, r4, r5, lr}
 800ad0e:	690b      	ldr	r3, [r1, #16]
 800ad10:	4605      	mov	r5, r0
 800ad12:	460c      	mov	r4, r1
 800ad14:	b913      	cbnz	r3, 800ad1c <_fflush_r+0x10>
 800ad16:	2500      	movs	r5, #0
 800ad18:	4628      	mov	r0, r5
 800ad1a:	bd38      	pop	{r3, r4, r5, pc}
 800ad1c:	b118      	cbz	r0, 800ad26 <_fflush_r+0x1a>
 800ad1e:	6a03      	ldr	r3, [r0, #32]
 800ad20:	b90b      	cbnz	r3, 800ad26 <_fflush_r+0x1a>
 800ad22:	f7fc fc7d 	bl	8007620 <__sinit>
 800ad26:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ad2a:	2b00      	cmp	r3, #0
 800ad2c:	d0f3      	beq.n	800ad16 <_fflush_r+0xa>
 800ad2e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800ad30:	07d0      	lsls	r0, r2, #31
 800ad32:	d404      	bmi.n	800ad3e <_fflush_r+0x32>
 800ad34:	0599      	lsls	r1, r3, #22
 800ad36:	d402      	bmi.n	800ad3e <_fflush_r+0x32>
 800ad38:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ad3a:	f7fc ff22 	bl	8007b82 <__retarget_lock_acquire_recursive>
 800ad3e:	4628      	mov	r0, r5
 800ad40:	4621      	mov	r1, r4
 800ad42:	f7ff ff5f 	bl	800ac04 <__sflush_r>
 800ad46:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ad48:	07da      	lsls	r2, r3, #31
 800ad4a:	4605      	mov	r5, r0
 800ad4c:	d4e4      	bmi.n	800ad18 <_fflush_r+0xc>
 800ad4e:	89a3      	ldrh	r3, [r4, #12]
 800ad50:	059b      	lsls	r3, r3, #22
 800ad52:	d4e1      	bmi.n	800ad18 <_fflush_r+0xc>
 800ad54:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ad56:	f7fc ff15 	bl	8007b84 <__retarget_lock_release_recursive>
 800ad5a:	e7dd      	b.n	800ad18 <_fflush_r+0xc>

0800ad5c <__swhatbuf_r>:
 800ad5c:	b570      	push	{r4, r5, r6, lr}
 800ad5e:	460c      	mov	r4, r1
 800ad60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ad64:	2900      	cmp	r1, #0
 800ad66:	b096      	sub	sp, #88	@ 0x58
 800ad68:	4615      	mov	r5, r2
 800ad6a:	461e      	mov	r6, r3
 800ad6c:	da0d      	bge.n	800ad8a <__swhatbuf_r+0x2e>
 800ad6e:	89a3      	ldrh	r3, [r4, #12]
 800ad70:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800ad74:	f04f 0100 	mov.w	r1, #0
 800ad78:	bf14      	ite	ne
 800ad7a:	2340      	movne	r3, #64	@ 0x40
 800ad7c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800ad80:	2000      	movs	r0, #0
 800ad82:	6031      	str	r1, [r6, #0]
 800ad84:	602b      	str	r3, [r5, #0]
 800ad86:	b016      	add	sp, #88	@ 0x58
 800ad88:	bd70      	pop	{r4, r5, r6, pc}
 800ad8a:	466a      	mov	r2, sp
 800ad8c:	f000 f8e8 	bl	800af60 <_fstat_r>
 800ad90:	2800      	cmp	r0, #0
 800ad92:	dbec      	blt.n	800ad6e <__swhatbuf_r+0x12>
 800ad94:	9901      	ldr	r1, [sp, #4]
 800ad96:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800ad9a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800ad9e:	4259      	negs	r1, r3
 800ada0:	4159      	adcs	r1, r3
 800ada2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ada6:	e7eb      	b.n	800ad80 <__swhatbuf_r+0x24>

0800ada8 <__smakebuf_r>:
 800ada8:	898b      	ldrh	r3, [r1, #12]
 800adaa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800adac:	079d      	lsls	r5, r3, #30
 800adae:	4606      	mov	r6, r0
 800adb0:	460c      	mov	r4, r1
 800adb2:	d507      	bpl.n	800adc4 <__smakebuf_r+0x1c>
 800adb4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800adb8:	6023      	str	r3, [r4, #0]
 800adba:	6123      	str	r3, [r4, #16]
 800adbc:	2301      	movs	r3, #1
 800adbe:	6163      	str	r3, [r4, #20]
 800adc0:	b003      	add	sp, #12
 800adc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800adc4:	ab01      	add	r3, sp, #4
 800adc6:	466a      	mov	r2, sp
 800adc8:	f7ff ffc8 	bl	800ad5c <__swhatbuf_r>
 800adcc:	9f00      	ldr	r7, [sp, #0]
 800adce:	4605      	mov	r5, r0
 800add0:	4639      	mov	r1, r7
 800add2:	4630      	mov	r0, r6
 800add4:	f7fd fda0 	bl	8008918 <_malloc_r>
 800add8:	b948      	cbnz	r0, 800adee <__smakebuf_r+0x46>
 800adda:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800adde:	059a      	lsls	r2, r3, #22
 800ade0:	d4ee      	bmi.n	800adc0 <__smakebuf_r+0x18>
 800ade2:	f023 0303 	bic.w	r3, r3, #3
 800ade6:	f043 0302 	orr.w	r3, r3, #2
 800adea:	81a3      	strh	r3, [r4, #12]
 800adec:	e7e2      	b.n	800adb4 <__smakebuf_r+0xc>
 800adee:	89a3      	ldrh	r3, [r4, #12]
 800adf0:	6020      	str	r0, [r4, #0]
 800adf2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800adf6:	81a3      	strh	r3, [r4, #12]
 800adf8:	9b01      	ldr	r3, [sp, #4]
 800adfa:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800adfe:	b15b      	cbz	r3, 800ae18 <__smakebuf_r+0x70>
 800ae00:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ae04:	4630      	mov	r0, r6
 800ae06:	f000 f8bd 	bl	800af84 <_isatty_r>
 800ae0a:	b128      	cbz	r0, 800ae18 <__smakebuf_r+0x70>
 800ae0c:	89a3      	ldrh	r3, [r4, #12]
 800ae0e:	f023 0303 	bic.w	r3, r3, #3
 800ae12:	f043 0301 	orr.w	r3, r3, #1
 800ae16:	81a3      	strh	r3, [r4, #12]
 800ae18:	89a3      	ldrh	r3, [r4, #12]
 800ae1a:	431d      	orrs	r5, r3
 800ae1c:	81a5      	strh	r5, [r4, #12]
 800ae1e:	e7cf      	b.n	800adc0 <__smakebuf_r+0x18>

0800ae20 <__sccl>:
 800ae20:	b570      	push	{r4, r5, r6, lr}
 800ae22:	780b      	ldrb	r3, [r1, #0]
 800ae24:	4604      	mov	r4, r0
 800ae26:	2b5e      	cmp	r3, #94	@ 0x5e
 800ae28:	bf0b      	itete	eq
 800ae2a:	784b      	ldrbeq	r3, [r1, #1]
 800ae2c:	1c4a      	addne	r2, r1, #1
 800ae2e:	1c8a      	addeq	r2, r1, #2
 800ae30:	2100      	movne	r1, #0
 800ae32:	bf08      	it	eq
 800ae34:	2101      	moveq	r1, #1
 800ae36:	3801      	subs	r0, #1
 800ae38:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 800ae3c:	f800 1f01 	strb.w	r1, [r0, #1]!
 800ae40:	42a8      	cmp	r0, r5
 800ae42:	d1fb      	bne.n	800ae3c <__sccl+0x1c>
 800ae44:	b90b      	cbnz	r3, 800ae4a <__sccl+0x2a>
 800ae46:	1e50      	subs	r0, r2, #1
 800ae48:	bd70      	pop	{r4, r5, r6, pc}
 800ae4a:	f081 0101 	eor.w	r1, r1, #1
 800ae4e:	54e1      	strb	r1, [r4, r3]
 800ae50:	4610      	mov	r0, r2
 800ae52:	4602      	mov	r2, r0
 800ae54:	f812 5b01 	ldrb.w	r5, [r2], #1
 800ae58:	2d2d      	cmp	r5, #45	@ 0x2d
 800ae5a:	d005      	beq.n	800ae68 <__sccl+0x48>
 800ae5c:	2d5d      	cmp	r5, #93	@ 0x5d
 800ae5e:	d016      	beq.n	800ae8e <__sccl+0x6e>
 800ae60:	2d00      	cmp	r5, #0
 800ae62:	d0f1      	beq.n	800ae48 <__sccl+0x28>
 800ae64:	462b      	mov	r3, r5
 800ae66:	e7f2      	b.n	800ae4e <__sccl+0x2e>
 800ae68:	7846      	ldrb	r6, [r0, #1]
 800ae6a:	2e5d      	cmp	r6, #93	@ 0x5d
 800ae6c:	d0fa      	beq.n	800ae64 <__sccl+0x44>
 800ae6e:	42b3      	cmp	r3, r6
 800ae70:	dcf8      	bgt.n	800ae64 <__sccl+0x44>
 800ae72:	3002      	adds	r0, #2
 800ae74:	461a      	mov	r2, r3
 800ae76:	3201      	adds	r2, #1
 800ae78:	4296      	cmp	r6, r2
 800ae7a:	54a1      	strb	r1, [r4, r2]
 800ae7c:	dcfb      	bgt.n	800ae76 <__sccl+0x56>
 800ae7e:	1af2      	subs	r2, r6, r3
 800ae80:	3a01      	subs	r2, #1
 800ae82:	1c5d      	adds	r5, r3, #1
 800ae84:	42b3      	cmp	r3, r6
 800ae86:	bfa8      	it	ge
 800ae88:	2200      	movge	r2, #0
 800ae8a:	18ab      	adds	r3, r5, r2
 800ae8c:	e7e1      	b.n	800ae52 <__sccl+0x32>
 800ae8e:	4610      	mov	r0, r2
 800ae90:	e7da      	b.n	800ae48 <__sccl+0x28>

0800ae92 <__submore>:
 800ae92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ae96:	460c      	mov	r4, r1
 800ae98:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800ae9a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ae9e:	4299      	cmp	r1, r3
 800aea0:	d11d      	bne.n	800aede <__submore+0x4c>
 800aea2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800aea6:	f7fd fd37 	bl	8008918 <_malloc_r>
 800aeaa:	b918      	cbnz	r0, 800aeb4 <__submore+0x22>
 800aeac:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800aeb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aeb4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800aeb8:	63a3      	str	r3, [r4, #56]	@ 0x38
 800aeba:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 800aebe:	6360      	str	r0, [r4, #52]	@ 0x34
 800aec0:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 800aec4:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800aec8:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 800aecc:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800aed0:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 800aed4:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 800aed8:	6020      	str	r0, [r4, #0]
 800aeda:	2000      	movs	r0, #0
 800aedc:	e7e8      	b.n	800aeb0 <__submore+0x1e>
 800aede:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 800aee0:	0077      	lsls	r7, r6, #1
 800aee2:	463a      	mov	r2, r7
 800aee4:	f000 fc01 	bl	800b6ea <_realloc_r>
 800aee8:	4605      	mov	r5, r0
 800aeea:	2800      	cmp	r0, #0
 800aeec:	d0de      	beq.n	800aeac <__submore+0x1a>
 800aeee:	eb00 0806 	add.w	r8, r0, r6
 800aef2:	4601      	mov	r1, r0
 800aef4:	4632      	mov	r2, r6
 800aef6:	4640      	mov	r0, r8
 800aef8:	f000 f864 	bl	800afc4 <memcpy>
 800aefc:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 800af00:	f8c4 8000 	str.w	r8, [r4]
 800af04:	e7e9      	b.n	800aeda <__submore+0x48>

0800af06 <memmove>:
 800af06:	4288      	cmp	r0, r1
 800af08:	b510      	push	{r4, lr}
 800af0a:	eb01 0402 	add.w	r4, r1, r2
 800af0e:	d902      	bls.n	800af16 <memmove+0x10>
 800af10:	4284      	cmp	r4, r0
 800af12:	4623      	mov	r3, r4
 800af14:	d807      	bhi.n	800af26 <memmove+0x20>
 800af16:	1e43      	subs	r3, r0, #1
 800af18:	42a1      	cmp	r1, r4
 800af1a:	d008      	beq.n	800af2e <memmove+0x28>
 800af1c:	f811 2b01 	ldrb.w	r2, [r1], #1
 800af20:	f803 2f01 	strb.w	r2, [r3, #1]!
 800af24:	e7f8      	b.n	800af18 <memmove+0x12>
 800af26:	4402      	add	r2, r0
 800af28:	4601      	mov	r1, r0
 800af2a:	428a      	cmp	r2, r1
 800af2c:	d100      	bne.n	800af30 <memmove+0x2a>
 800af2e:	bd10      	pop	{r4, pc}
 800af30:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800af34:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800af38:	e7f7      	b.n	800af2a <memmove+0x24>

0800af3a <strncmp>:
 800af3a:	b510      	push	{r4, lr}
 800af3c:	b16a      	cbz	r2, 800af5a <strncmp+0x20>
 800af3e:	3901      	subs	r1, #1
 800af40:	1884      	adds	r4, r0, r2
 800af42:	f810 2b01 	ldrb.w	r2, [r0], #1
 800af46:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800af4a:	429a      	cmp	r2, r3
 800af4c:	d103      	bne.n	800af56 <strncmp+0x1c>
 800af4e:	42a0      	cmp	r0, r4
 800af50:	d001      	beq.n	800af56 <strncmp+0x1c>
 800af52:	2a00      	cmp	r2, #0
 800af54:	d1f5      	bne.n	800af42 <strncmp+0x8>
 800af56:	1ad0      	subs	r0, r2, r3
 800af58:	bd10      	pop	{r4, pc}
 800af5a:	4610      	mov	r0, r2
 800af5c:	e7fc      	b.n	800af58 <strncmp+0x1e>
	...

0800af60 <_fstat_r>:
 800af60:	b538      	push	{r3, r4, r5, lr}
 800af62:	4d07      	ldr	r5, [pc, #28]	@ (800af80 <_fstat_r+0x20>)
 800af64:	2300      	movs	r3, #0
 800af66:	4604      	mov	r4, r0
 800af68:	4608      	mov	r0, r1
 800af6a:	4611      	mov	r1, r2
 800af6c:	602b      	str	r3, [r5, #0]
 800af6e:	f7f7 fb37 	bl	80025e0 <_fstat>
 800af72:	1c43      	adds	r3, r0, #1
 800af74:	d102      	bne.n	800af7c <_fstat_r+0x1c>
 800af76:	682b      	ldr	r3, [r5, #0]
 800af78:	b103      	cbz	r3, 800af7c <_fstat_r+0x1c>
 800af7a:	6023      	str	r3, [r4, #0]
 800af7c:	bd38      	pop	{r3, r4, r5, pc}
 800af7e:	bf00      	nop
 800af80:	20005584 	.word	0x20005584

0800af84 <_isatty_r>:
 800af84:	b538      	push	{r3, r4, r5, lr}
 800af86:	4d06      	ldr	r5, [pc, #24]	@ (800afa0 <_isatty_r+0x1c>)
 800af88:	2300      	movs	r3, #0
 800af8a:	4604      	mov	r4, r0
 800af8c:	4608      	mov	r0, r1
 800af8e:	602b      	str	r3, [r5, #0]
 800af90:	f7f7 fb36 	bl	8002600 <_isatty>
 800af94:	1c43      	adds	r3, r0, #1
 800af96:	d102      	bne.n	800af9e <_isatty_r+0x1a>
 800af98:	682b      	ldr	r3, [r5, #0]
 800af9a:	b103      	cbz	r3, 800af9e <_isatty_r+0x1a>
 800af9c:	6023      	str	r3, [r4, #0]
 800af9e:	bd38      	pop	{r3, r4, r5, pc}
 800afa0:	20005584 	.word	0x20005584

0800afa4 <_sbrk_r>:
 800afa4:	b538      	push	{r3, r4, r5, lr}
 800afa6:	4d06      	ldr	r5, [pc, #24]	@ (800afc0 <_sbrk_r+0x1c>)
 800afa8:	2300      	movs	r3, #0
 800afaa:	4604      	mov	r4, r0
 800afac:	4608      	mov	r0, r1
 800afae:	602b      	str	r3, [r5, #0]
 800afb0:	f7f7 fb3e 	bl	8002630 <_sbrk>
 800afb4:	1c43      	adds	r3, r0, #1
 800afb6:	d102      	bne.n	800afbe <_sbrk_r+0x1a>
 800afb8:	682b      	ldr	r3, [r5, #0]
 800afba:	b103      	cbz	r3, 800afbe <_sbrk_r+0x1a>
 800afbc:	6023      	str	r3, [r4, #0]
 800afbe:	bd38      	pop	{r3, r4, r5, pc}
 800afc0:	20005584 	.word	0x20005584

0800afc4 <memcpy>:
 800afc4:	440a      	add	r2, r1
 800afc6:	4291      	cmp	r1, r2
 800afc8:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800afcc:	d100      	bne.n	800afd0 <memcpy+0xc>
 800afce:	4770      	bx	lr
 800afd0:	b510      	push	{r4, lr}
 800afd2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800afd6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800afda:	4291      	cmp	r1, r2
 800afdc:	d1f9      	bne.n	800afd2 <memcpy+0xe>
 800afde:	bd10      	pop	{r4, pc}

0800afe0 <nan>:
 800afe0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800afe8 <nan+0x8>
 800afe4:	4770      	bx	lr
 800afe6:	bf00      	nop
 800afe8:	00000000 	.word	0x00000000
 800afec:	7ff80000 	.word	0x7ff80000

0800aff0 <__assert_func>:
 800aff0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800aff2:	4614      	mov	r4, r2
 800aff4:	461a      	mov	r2, r3
 800aff6:	4b09      	ldr	r3, [pc, #36]	@ (800b01c <__assert_func+0x2c>)
 800aff8:	681b      	ldr	r3, [r3, #0]
 800affa:	4605      	mov	r5, r0
 800affc:	68d8      	ldr	r0, [r3, #12]
 800affe:	b954      	cbnz	r4, 800b016 <__assert_func+0x26>
 800b000:	4b07      	ldr	r3, [pc, #28]	@ (800b020 <__assert_func+0x30>)
 800b002:	461c      	mov	r4, r3
 800b004:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b008:	9100      	str	r1, [sp, #0]
 800b00a:	462b      	mov	r3, r5
 800b00c:	4905      	ldr	r1, [pc, #20]	@ (800b024 <__assert_func+0x34>)
 800b00e:	f000 fba7 	bl	800b760 <fiprintf>
 800b012:	f000 fbb7 	bl	800b784 <abort>
 800b016:	4b04      	ldr	r3, [pc, #16]	@ (800b028 <__assert_func+0x38>)
 800b018:	e7f4      	b.n	800b004 <__assert_func+0x14>
 800b01a:	bf00      	nop
 800b01c:	20000018 	.word	0x20000018
 800b020:	0800be2f 	.word	0x0800be2f
 800b024:	0800be01 	.word	0x0800be01
 800b028:	0800bdf4 	.word	0x0800bdf4

0800b02c <_calloc_r>:
 800b02c:	b570      	push	{r4, r5, r6, lr}
 800b02e:	fba1 5402 	umull	r5, r4, r1, r2
 800b032:	b93c      	cbnz	r4, 800b044 <_calloc_r+0x18>
 800b034:	4629      	mov	r1, r5
 800b036:	f7fd fc6f 	bl	8008918 <_malloc_r>
 800b03a:	4606      	mov	r6, r0
 800b03c:	b928      	cbnz	r0, 800b04a <_calloc_r+0x1e>
 800b03e:	2600      	movs	r6, #0
 800b040:	4630      	mov	r0, r6
 800b042:	bd70      	pop	{r4, r5, r6, pc}
 800b044:	220c      	movs	r2, #12
 800b046:	6002      	str	r2, [r0, #0]
 800b048:	e7f9      	b.n	800b03e <_calloc_r+0x12>
 800b04a:	462a      	mov	r2, r5
 800b04c:	4621      	mov	r1, r4
 800b04e:	f7fc fce5 	bl	8007a1c <memset>
 800b052:	e7f5      	b.n	800b040 <_calloc_r+0x14>

0800b054 <rshift>:
 800b054:	6903      	ldr	r3, [r0, #16]
 800b056:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800b05a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b05e:	ea4f 1261 	mov.w	r2, r1, asr #5
 800b062:	f100 0414 	add.w	r4, r0, #20
 800b066:	dd45      	ble.n	800b0f4 <rshift+0xa0>
 800b068:	f011 011f 	ands.w	r1, r1, #31
 800b06c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800b070:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800b074:	d10c      	bne.n	800b090 <rshift+0x3c>
 800b076:	f100 0710 	add.w	r7, r0, #16
 800b07a:	4629      	mov	r1, r5
 800b07c:	42b1      	cmp	r1, r6
 800b07e:	d334      	bcc.n	800b0ea <rshift+0x96>
 800b080:	1a9b      	subs	r3, r3, r2
 800b082:	009b      	lsls	r3, r3, #2
 800b084:	1eea      	subs	r2, r5, #3
 800b086:	4296      	cmp	r6, r2
 800b088:	bf38      	it	cc
 800b08a:	2300      	movcc	r3, #0
 800b08c:	4423      	add	r3, r4
 800b08e:	e015      	b.n	800b0bc <rshift+0x68>
 800b090:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800b094:	f1c1 0820 	rsb	r8, r1, #32
 800b098:	40cf      	lsrs	r7, r1
 800b09a:	f105 0e04 	add.w	lr, r5, #4
 800b09e:	46a1      	mov	r9, r4
 800b0a0:	4576      	cmp	r6, lr
 800b0a2:	46f4      	mov	ip, lr
 800b0a4:	d815      	bhi.n	800b0d2 <rshift+0x7e>
 800b0a6:	1a9a      	subs	r2, r3, r2
 800b0a8:	0092      	lsls	r2, r2, #2
 800b0aa:	3a04      	subs	r2, #4
 800b0ac:	3501      	adds	r5, #1
 800b0ae:	42ae      	cmp	r6, r5
 800b0b0:	bf38      	it	cc
 800b0b2:	2200      	movcc	r2, #0
 800b0b4:	18a3      	adds	r3, r4, r2
 800b0b6:	50a7      	str	r7, [r4, r2]
 800b0b8:	b107      	cbz	r7, 800b0bc <rshift+0x68>
 800b0ba:	3304      	adds	r3, #4
 800b0bc:	1b1a      	subs	r2, r3, r4
 800b0be:	42a3      	cmp	r3, r4
 800b0c0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800b0c4:	bf08      	it	eq
 800b0c6:	2300      	moveq	r3, #0
 800b0c8:	6102      	str	r2, [r0, #16]
 800b0ca:	bf08      	it	eq
 800b0cc:	6143      	streq	r3, [r0, #20]
 800b0ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b0d2:	f8dc c000 	ldr.w	ip, [ip]
 800b0d6:	fa0c fc08 	lsl.w	ip, ip, r8
 800b0da:	ea4c 0707 	orr.w	r7, ip, r7
 800b0de:	f849 7b04 	str.w	r7, [r9], #4
 800b0e2:	f85e 7b04 	ldr.w	r7, [lr], #4
 800b0e6:	40cf      	lsrs	r7, r1
 800b0e8:	e7da      	b.n	800b0a0 <rshift+0x4c>
 800b0ea:	f851 cb04 	ldr.w	ip, [r1], #4
 800b0ee:	f847 cf04 	str.w	ip, [r7, #4]!
 800b0f2:	e7c3      	b.n	800b07c <rshift+0x28>
 800b0f4:	4623      	mov	r3, r4
 800b0f6:	e7e1      	b.n	800b0bc <rshift+0x68>

0800b0f8 <__hexdig_fun>:
 800b0f8:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800b0fc:	2b09      	cmp	r3, #9
 800b0fe:	d802      	bhi.n	800b106 <__hexdig_fun+0xe>
 800b100:	3820      	subs	r0, #32
 800b102:	b2c0      	uxtb	r0, r0
 800b104:	4770      	bx	lr
 800b106:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800b10a:	2b05      	cmp	r3, #5
 800b10c:	d801      	bhi.n	800b112 <__hexdig_fun+0x1a>
 800b10e:	3847      	subs	r0, #71	@ 0x47
 800b110:	e7f7      	b.n	800b102 <__hexdig_fun+0xa>
 800b112:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800b116:	2b05      	cmp	r3, #5
 800b118:	d801      	bhi.n	800b11e <__hexdig_fun+0x26>
 800b11a:	3827      	subs	r0, #39	@ 0x27
 800b11c:	e7f1      	b.n	800b102 <__hexdig_fun+0xa>
 800b11e:	2000      	movs	r0, #0
 800b120:	4770      	bx	lr
	...

0800b124 <__gethex>:
 800b124:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b128:	b085      	sub	sp, #20
 800b12a:	468a      	mov	sl, r1
 800b12c:	9302      	str	r3, [sp, #8]
 800b12e:	680b      	ldr	r3, [r1, #0]
 800b130:	9001      	str	r0, [sp, #4]
 800b132:	4690      	mov	r8, r2
 800b134:	1c9c      	adds	r4, r3, #2
 800b136:	46a1      	mov	r9, r4
 800b138:	f814 0b01 	ldrb.w	r0, [r4], #1
 800b13c:	2830      	cmp	r0, #48	@ 0x30
 800b13e:	d0fa      	beq.n	800b136 <__gethex+0x12>
 800b140:	eba9 0303 	sub.w	r3, r9, r3
 800b144:	f1a3 0b02 	sub.w	fp, r3, #2
 800b148:	f7ff ffd6 	bl	800b0f8 <__hexdig_fun>
 800b14c:	4605      	mov	r5, r0
 800b14e:	2800      	cmp	r0, #0
 800b150:	d168      	bne.n	800b224 <__gethex+0x100>
 800b152:	49a0      	ldr	r1, [pc, #640]	@ (800b3d4 <__gethex+0x2b0>)
 800b154:	2201      	movs	r2, #1
 800b156:	4648      	mov	r0, r9
 800b158:	f7ff feef 	bl	800af3a <strncmp>
 800b15c:	4607      	mov	r7, r0
 800b15e:	2800      	cmp	r0, #0
 800b160:	d167      	bne.n	800b232 <__gethex+0x10e>
 800b162:	f899 0001 	ldrb.w	r0, [r9, #1]
 800b166:	4626      	mov	r6, r4
 800b168:	f7ff ffc6 	bl	800b0f8 <__hexdig_fun>
 800b16c:	2800      	cmp	r0, #0
 800b16e:	d062      	beq.n	800b236 <__gethex+0x112>
 800b170:	4623      	mov	r3, r4
 800b172:	7818      	ldrb	r0, [r3, #0]
 800b174:	2830      	cmp	r0, #48	@ 0x30
 800b176:	4699      	mov	r9, r3
 800b178:	f103 0301 	add.w	r3, r3, #1
 800b17c:	d0f9      	beq.n	800b172 <__gethex+0x4e>
 800b17e:	f7ff ffbb 	bl	800b0f8 <__hexdig_fun>
 800b182:	fab0 f580 	clz	r5, r0
 800b186:	096d      	lsrs	r5, r5, #5
 800b188:	f04f 0b01 	mov.w	fp, #1
 800b18c:	464a      	mov	r2, r9
 800b18e:	4616      	mov	r6, r2
 800b190:	3201      	adds	r2, #1
 800b192:	7830      	ldrb	r0, [r6, #0]
 800b194:	f7ff ffb0 	bl	800b0f8 <__hexdig_fun>
 800b198:	2800      	cmp	r0, #0
 800b19a:	d1f8      	bne.n	800b18e <__gethex+0x6a>
 800b19c:	498d      	ldr	r1, [pc, #564]	@ (800b3d4 <__gethex+0x2b0>)
 800b19e:	2201      	movs	r2, #1
 800b1a0:	4630      	mov	r0, r6
 800b1a2:	f7ff feca 	bl	800af3a <strncmp>
 800b1a6:	2800      	cmp	r0, #0
 800b1a8:	d13f      	bne.n	800b22a <__gethex+0x106>
 800b1aa:	b944      	cbnz	r4, 800b1be <__gethex+0x9a>
 800b1ac:	1c74      	adds	r4, r6, #1
 800b1ae:	4622      	mov	r2, r4
 800b1b0:	4616      	mov	r6, r2
 800b1b2:	3201      	adds	r2, #1
 800b1b4:	7830      	ldrb	r0, [r6, #0]
 800b1b6:	f7ff ff9f 	bl	800b0f8 <__hexdig_fun>
 800b1ba:	2800      	cmp	r0, #0
 800b1bc:	d1f8      	bne.n	800b1b0 <__gethex+0x8c>
 800b1be:	1ba4      	subs	r4, r4, r6
 800b1c0:	00a7      	lsls	r7, r4, #2
 800b1c2:	7833      	ldrb	r3, [r6, #0]
 800b1c4:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800b1c8:	2b50      	cmp	r3, #80	@ 0x50
 800b1ca:	d13e      	bne.n	800b24a <__gethex+0x126>
 800b1cc:	7873      	ldrb	r3, [r6, #1]
 800b1ce:	2b2b      	cmp	r3, #43	@ 0x2b
 800b1d0:	d033      	beq.n	800b23a <__gethex+0x116>
 800b1d2:	2b2d      	cmp	r3, #45	@ 0x2d
 800b1d4:	d034      	beq.n	800b240 <__gethex+0x11c>
 800b1d6:	1c71      	adds	r1, r6, #1
 800b1d8:	2400      	movs	r4, #0
 800b1da:	7808      	ldrb	r0, [r1, #0]
 800b1dc:	f7ff ff8c 	bl	800b0f8 <__hexdig_fun>
 800b1e0:	1e43      	subs	r3, r0, #1
 800b1e2:	b2db      	uxtb	r3, r3
 800b1e4:	2b18      	cmp	r3, #24
 800b1e6:	d830      	bhi.n	800b24a <__gethex+0x126>
 800b1e8:	f1a0 0210 	sub.w	r2, r0, #16
 800b1ec:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800b1f0:	f7ff ff82 	bl	800b0f8 <__hexdig_fun>
 800b1f4:	f100 3cff 	add.w	ip, r0, #4294967295	@ 0xffffffff
 800b1f8:	fa5f fc8c 	uxtb.w	ip, ip
 800b1fc:	f1bc 0f18 	cmp.w	ip, #24
 800b200:	f04f 030a 	mov.w	r3, #10
 800b204:	d91e      	bls.n	800b244 <__gethex+0x120>
 800b206:	b104      	cbz	r4, 800b20a <__gethex+0xe6>
 800b208:	4252      	negs	r2, r2
 800b20a:	4417      	add	r7, r2
 800b20c:	f8ca 1000 	str.w	r1, [sl]
 800b210:	b1ed      	cbz	r5, 800b24e <__gethex+0x12a>
 800b212:	f1bb 0f00 	cmp.w	fp, #0
 800b216:	bf0c      	ite	eq
 800b218:	2506      	moveq	r5, #6
 800b21a:	2500      	movne	r5, #0
 800b21c:	4628      	mov	r0, r5
 800b21e:	b005      	add	sp, #20
 800b220:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b224:	2500      	movs	r5, #0
 800b226:	462c      	mov	r4, r5
 800b228:	e7b0      	b.n	800b18c <__gethex+0x68>
 800b22a:	2c00      	cmp	r4, #0
 800b22c:	d1c7      	bne.n	800b1be <__gethex+0x9a>
 800b22e:	4627      	mov	r7, r4
 800b230:	e7c7      	b.n	800b1c2 <__gethex+0x9e>
 800b232:	464e      	mov	r6, r9
 800b234:	462f      	mov	r7, r5
 800b236:	2501      	movs	r5, #1
 800b238:	e7c3      	b.n	800b1c2 <__gethex+0x9e>
 800b23a:	2400      	movs	r4, #0
 800b23c:	1cb1      	adds	r1, r6, #2
 800b23e:	e7cc      	b.n	800b1da <__gethex+0xb6>
 800b240:	2401      	movs	r4, #1
 800b242:	e7fb      	b.n	800b23c <__gethex+0x118>
 800b244:	fb03 0002 	mla	r0, r3, r2, r0
 800b248:	e7ce      	b.n	800b1e8 <__gethex+0xc4>
 800b24a:	4631      	mov	r1, r6
 800b24c:	e7de      	b.n	800b20c <__gethex+0xe8>
 800b24e:	eba6 0309 	sub.w	r3, r6, r9
 800b252:	3b01      	subs	r3, #1
 800b254:	4629      	mov	r1, r5
 800b256:	2b07      	cmp	r3, #7
 800b258:	dc0a      	bgt.n	800b270 <__gethex+0x14c>
 800b25a:	9801      	ldr	r0, [sp, #4]
 800b25c:	f7fd fbe8 	bl	8008a30 <_Balloc>
 800b260:	4604      	mov	r4, r0
 800b262:	b940      	cbnz	r0, 800b276 <__gethex+0x152>
 800b264:	4b5c      	ldr	r3, [pc, #368]	@ (800b3d8 <__gethex+0x2b4>)
 800b266:	4602      	mov	r2, r0
 800b268:	21e4      	movs	r1, #228	@ 0xe4
 800b26a:	485c      	ldr	r0, [pc, #368]	@ (800b3dc <__gethex+0x2b8>)
 800b26c:	f7ff fec0 	bl	800aff0 <__assert_func>
 800b270:	3101      	adds	r1, #1
 800b272:	105b      	asrs	r3, r3, #1
 800b274:	e7ef      	b.n	800b256 <__gethex+0x132>
 800b276:	f100 0a14 	add.w	sl, r0, #20
 800b27a:	2300      	movs	r3, #0
 800b27c:	4655      	mov	r5, sl
 800b27e:	469b      	mov	fp, r3
 800b280:	45b1      	cmp	r9, r6
 800b282:	d337      	bcc.n	800b2f4 <__gethex+0x1d0>
 800b284:	f845 bb04 	str.w	fp, [r5], #4
 800b288:	eba5 050a 	sub.w	r5, r5, sl
 800b28c:	10ad      	asrs	r5, r5, #2
 800b28e:	6125      	str	r5, [r4, #16]
 800b290:	4658      	mov	r0, fp
 800b292:	f7fd fcbf 	bl	8008c14 <__hi0bits>
 800b296:	016d      	lsls	r5, r5, #5
 800b298:	f8d8 6000 	ldr.w	r6, [r8]
 800b29c:	1a2d      	subs	r5, r5, r0
 800b29e:	42b5      	cmp	r5, r6
 800b2a0:	dd54      	ble.n	800b34c <__gethex+0x228>
 800b2a2:	1bad      	subs	r5, r5, r6
 800b2a4:	4629      	mov	r1, r5
 800b2a6:	4620      	mov	r0, r4
 800b2a8:	f7fe f853 	bl	8009352 <__any_on>
 800b2ac:	4681      	mov	r9, r0
 800b2ae:	b178      	cbz	r0, 800b2d0 <__gethex+0x1ac>
 800b2b0:	1e6b      	subs	r3, r5, #1
 800b2b2:	1159      	asrs	r1, r3, #5
 800b2b4:	f003 021f 	and.w	r2, r3, #31
 800b2b8:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800b2bc:	f04f 0901 	mov.w	r9, #1
 800b2c0:	fa09 f202 	lsl.w	r2, r9, r2
 800b2c4:	420a      	tst	r2, r1
 800b2c6:	d003      	beq.n	800b2d0 <__gethex+0x1ac>
 800b2c8:	454b      	cmp	r3, r9
 800b2ca:	dc36      	bgt.n	800b33a <__gethex+0x216>
 800b2cc:	f04f 0902 	mov.w	r9, #2
 800b2d0:	4629      	mov	r1, r5
 800b2d2:	4620      	mov	r0, r4
 800b2d4:	f7ff febe 	bl	800b054 <rshift>
 800b2d8:	442f      	add	r7, r5
 800b2da:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b2de:	42bb      	cmp	r3, r7
 800b2e0:	da42      	bge.n	800b368 <__gethex+0x244>
 800b2e2:	9801      	ldr	r0, [sp, #4]
 800b2e4:	4621      	mov	r1, r4
 800b2e6:	f7fd fbe3 	bl	8008ab0 <_Bfree>
 800b2ea:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b2ec:	2300      	movs	r3, #0
 800b2ee:	6013      	str	r3, [r2, #0]
 800b2f0:	25a3      	movs	r5, #163	@ 0xa3
 800b2f2:	e793      	b.n	800b21c <__gethex+0xf8>
 800b2f4:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800b2f8:	2a2e      	cmp	r2, #46	@ 0x2e
 800b2fa:	d012      	beq.n	800b322 <__gethex+0x1fe>
 800b2fc:	2b20      	cmp	r3, #32
 800b2fe:	d104      	bne.n	800b30a <__gethex+0x1e6>
 800b300:	f845 bb04 	str.w	fp, [r5], #4
 800b304:	f04f 0b00 	mov.w	fp, #0
 800b308:	465b      	mov	r3, fp
 800b30a:	7830      	ldrb	r0, [r6, #0]
 800b30c:	9303      	str	r3, [sp, #12]
 800b30e:	f7ff fef3 	bl	800b0f8 <__hexdig_fun>
 800b312:	9b03      	ldr	r3, [sp, #12]
 800b314:	f000 000f 	and.w	r0, r0, #15
 800b318:	4098      	lsls	r0, r3
 800b31a:	ea4b 0b00 	orr.w	fp, fp, r0
 800b31e:	3304      	adds	r3, #4
 800b320:	e7ae      	b.n	800b280 <__gethex+0x15c>
 800b322:	45b1      	cmp	r9, r6
 800b324:	d8ea      	bhi.n	800b2fc <__gethex+0x1d8>
 800b326:	492b      	ldr	r1, [pc, #172]	@ (800b3d4 <__gethex+0x2b0>)
 800b328:	9303      	str	r3, [sp, #12]
 800b32a:	2201      	movs	r2, #1
 800b32c:	4630      	mov	r0, r6
 800b32e:	f7ff fe04 	bl	800af3a <strncmp>
 800b332:	9b03      	ldr	r3, [sp, #12]
 800b334:	2800      	cmp	r0, #0
 800b336:	d1e1      	bne.n	800b2fc <__gethex+0x1d8>
 800b338:	e7a2      	b.n	800b280 <__gethex+0x15c>
 800b33a:	1ea9      	subs	r1, r5, #2
 800b33c:	4620      	mov	r0, r4
 800b33e:	f7fe f808 	bl	8009352 <__any_on>
 800b342:	2800      	cmp	r0, #0
 800b344:	d0c2      	beq.n	800b2cc <__gethex+0x1a8>
 800b346:	f04f 0903 	mov.w	r9, #3
 800b34a:	e7c1      	b.n	800b2d0 <__gethex+0x1ac>
 800b34c:	da09      	bge.n	800b362 <__gethex+0x23e>
 800b34e:	1b75      	subs	r5, r6, r5
 800b350:	4621      	mov	r1, r4
 800b352:	9801      	ldr	r0, [sp, #4]
 800b354:	462a      	mov	r2, r5
 800b356:	f7fd fdc3 	bl	8008ee0 <__lshift>
 800b35a:	1b7f      	subs	r7, r7, r5
 800b35c:	4604      	mov	r4, r0
 800b35e:	f100 0a14 	add.w	sl, r0, #20
 800b362:	f04f 0900 	mov.w	r9, #0
 800b366:	e7b8      	b.n	800b2da <__gethex+0x1b6>
 800b368:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800b36c:	42bd      	cmp	r5, r7
 800b36e:	dd6f      	ble.n	800b450 <__gethex+0x32c>
 800b370:	1bed      	subs	r5, r5, r7
 800b372:	42ae      	cmp	r6, r5
 800b374:	dc34      	bgt.n	800b3e0 <__gethex+0x2bc>
 800b376:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b37a:	2b02      	cmp	r3, #2
 800b37c:	d022      	beq.n	800b3c4 <__gethex+0x2a0>
 800b37e:	2b03      	cmp	r3, #3
 800b380:	d024      	beq.n	800b3cc <__gethex+0x2a8>
 800b382:	2b01      	cmp	r3, #1
 800b384:	d115      	bne.n	800b3b2 <__gethex+0x28e>
 800b386:	42ae      	cmp	r6, r5
 800b388:	d113      	bne.n	800b3b2 <__gethex+0x28e>
 800b38a:	2e01      	cmp	r6, #1
 800b38c:	d10b      	bne.n	800b3a6 <__gethex+0x282>
 800b38e:	9a02      	ldr	r2, [sp, #8]
 800b390:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800b394:	6013      	str	r3, [r2, #0]
 800b396:	2301      	movs	r3, #1
 800b398:	6123      	str	r3, [r4, #16]
 800b39a:	f8ca 3000 	str.w	r3, [sl]
 800b39e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b3a0:	2562      	movs	r5, #98	@ 0x62
 800b3a2:	601c      	str	r4, [r3, #0]
 800b3a4:	e73a      	b.n	800b21c <__gethex+0xf8>
 800b3a6:	1e71      	subs	r1, r6, #1
 800b3a8:	4620      	mov	r0, r4
 800b3aa:	f7fd ffd2 	bl	8009352 <__any_on>
 800b3ae:	2800      	cmp	r0, #0
 800b3b0:	d1ed      	bne.n	800b38e <__gethex+0x26a>
 800b3b2:	9801      	ldr	r0, [sp, #4]
 800b3b4:	4621      	mov	r1, r4
 800b3b6:	f7fd fb7b 	bl	8008ab0 <_Bfree>
 800b3ba:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b3bc:	2300      	movs	r3, #0
 800b3be:	6013      	str	r3, [r2, #0]
 800b3c0:	2550      	movs	r5, #80	@ 0x50
 800b3c2:	e72b      	b.n	800b21c <__gethex+0xf8>
 800b3c4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b3c6:	2b00      	cmp	r3, #0
 800b3c8:	d1f3      	bne.n	800b3b2 <__gethex+0x28e>
 800b3ca:	e7e0      	b.n	800b38e <__gethex+0x26a>
 800b3cc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b3ce:	2b00      	cmp	r3, #0
 800b3d0:	d1dd      	bne.n	800b38e <__gethex+0x26a>
 800b3d2:	e7ee      	b.n	800b3b2 <__gethex+0x28e>
 800b3d4:	0800bd68 	.word	0x0800bd68
 800b3d8:	0800bbfc 	.word	0x0800bbfc
 800b3dc:	0800be30 	.word	0x0800be30
 800b3e0:	1e6f      	subs	r7, r5, #1
 800b3e2:	f1b9 0f00 	cmp.w	r9, #0
 800b3e6:	d130      	bne.n	800b44a <__gethex+0x326>
 800b3e8:	b127      	cbz	r7, 800b3f4 <__gethex+0x2d0>
 800b3ea:	4639      	mov	r1, r7
 800b3ec:	4620      	mov	r0, r4
 800b3ee:	f7fd ffb0 	bl	8009352 <__any_on>
 800b3f2:	4681      	mov	r9, r0
 800b3f4:	117a      	asrs	r2, r7, #5
 800b3f6:	2301      	movs	r3, #1
 800b3f8:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800b3fc:	f007 071f 	and.w	r7, r7, #31
 800b400:	40bb      	lsls	r3, r7
 800b402:	4213      	tst	r3, r2
 800b404:	4629      	mov	r1, r5
 800b406:	4620      	mov	r0, r4
 800b408:	bf18      	it	ne
 800b40a:	f049 0902 	orrne.w	r9, r9, #2
 800b40e:	f7ff fe21 	bl	800b054 <rshift>
 800b412:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800b416:	1b76      	subs	r6, r6, r5
 800b418:	2502      	movs	r5, #2
 800b41a:	f1b9 0f00 	cmp.w	r9, #0
 800b41e:	d047      	beq.n	800b4b0 <__gethex+0x38c>
 800b420:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b424:	2b02      	cmp	r3, #2
 800b426:	d015      	beq.n	800b454 <__gethex+0x330>
 800b428:	2b03      	cmp	r3, #3
 800b42a:	d017      	beq.n	800b45c <__gethex+0x338>
 800b42c:	2b01      	cmp	r3, #1
 800b42e:	d109      	bne.n	800b444 <__gethex+0x320>
 800b430:	f019 0f02 	tst.w	r9, #2
 800b434:	d006      	beq.n	800b444 <__gethex+0x320>
 800b436:	f8da 3000 	ldr.w	r3, [sl]
 800b43a:	ea49 0903 	orr.w	r9, r9, r3
 800b43e:	f019 0f01 	tst.w	r9, #1
 800b442:	d10e      	bne.n	800b462 <__gethex+0x33e>
 800b444:	f045 0510 	orr.w	r5, r5, #16
 800b448:	e032      	b.n	800b4b0 <__gethex+0x38c>
 800b44a:	f04f 0901 	mov.w	r9, #1
 800b44e:	e7d1      	b.n	800b3f4 <__gethex+0x2d0>
 800b450:	2501      	movs	r5, #1
 800b452:	e7e2      	b.n	800b41a <__gethex+0x2f6>
 800b454:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b456:	f1c3 0301 	rsb	r3, r3, #1
 800b45a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b45c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b45e:	2b00      	cmp	r3, #0
 800b460:	d0f0      	beq.n	800b444 <__gethex+0x320>
 800b462:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800b466:	f104 0314 	add.w	r3, r4, #20
 800b46a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800b46e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800b472:	f04f 0c00 	mov.w	ip, #0
 800b476:	4618      	mov	r0, r3
 800b478:	f853 2b04 	ldr.w	r2, [r3], #4
 800b47c:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 800b480:	d01b      	beq.n	800b4ba <__gethex+0x396>
 800b482:	3201      	adds	r2, #1
 800b484:	6002      	str	r2, [r0, #0]
 800b486:	2d02      	cmp	r5, #2
 800b488:	f104 0314 	add.w	r3, r4, #20
 800b48c:	d13c      	bne.n	800b508 <__gethex+0x3e4>
 800b48e:	f8d8 2000 	ldr.w	r2, [r8]
 800b492:	3a01      	subs	r2, #1
 800b494:	42b2      	cmp	r2, r6
 800b496:	d109      	bne.n	800b4ac <__gethex+0x388>
 800b498:	1171      	asrs	r1, r6, #5
 800b49a:	2201      	movs	r2, #1
 800b49c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b4a0:	f006 061f 	and.w	r6, r6, #31
 800b4a4:	fa02 f606 	lsl.w	r6, r2, r6
 800b4a8:	421e      	tst	r6, r3
 800b4aa:	d13a      	bne.n	800b522 <__gethex+0x3fe>
 800b4ac:	f045 0520 	orr.w	r5, r5, #32
 800b4b0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b4b2:	601c      	str	r4, [r3, #0]
 800b4b4:	9b02      	ldr	r3, [sp, #8]
 800b4b6:	601f      	str	r7, [r3, #0]
 800b4b8:	e6b0      	b.n	800b21c <__gethex+0xf8>
 800b4ba:	4299      	cmp	r1, r3
 800b4bc:	f843 cc04 	str.w	ip, [r3, #-4]
 800b4c0:	d8d9      	bhi.n	800b476 <__gethex+0x352>
 800b4c2:	68a3      	ldr	r3, [r4, #8]
 800b4c4:	459b      	cmp	fp, r3
 800b4c6:	db17      	blt.n	800b4f8 <__gethex+0x3d4>
 800b4c8:	6861      	ldr	r1, [r4, #4]
 800b4ca:	9801      	ldr	r0, [sp, #4]
 800b4cc:	3101      	adds	r1, #1
 800b4ce:	f7fd faaf 	bl	8008a30 <_Balloc>
 800b4d2:	4681      	mov	r9, r0
 800b4d4:	b918      	cbnz	r0, 800b4de <__gethex+0x3ba>
 800b4d6:	4b1a      	ldr	r3, [pc, #104]	@ (800b540 <__gethex+0x41c>)
 800b4d8:	4602      	mov	r2, r0
 800b4da:	2184      	movs	r1, #132	@ 0x84
 800b4dc:	e6c5      	b.n	800b26a <__gethex+0x146>
 800b4de:	6922      	ldr	r2, [r4, #16]
 800b4e0:	3202      	adds	r2, #2
 800b4e2:	f104 010c 	add.w	r1, r4, #12
 800b4e6:	0092      	lsls	r2, r2, #2
 800b4e8:	300c      	adds	r0, #12
 800b4ea:	f7ff fd6b 	bl	800afc4 <memcpy>
 800b4ee:	4621      	mov	r1, r4
 800b4f0:	9801      	ldr	r0, [sp, #4]
 800b4f2:	f7fd fadd 	bl	8008ab0 <_Bfree>
 800b4f6:	464c      	mov	r4, r9
 800b4f8:	6923      	ldr	r3, [r4, #16]
 800b4fa:	1c5a      	adds	r2, r3, #1
 800b4fc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b500:	6122      	str	r2, [r4, #16]
 800b502:	2201      	movs	r2, #1
 800b504:	615a      	str	r2, [r3, #20]
 800b506:	e7be      	b.n	800b486 <__gethex+0x362>
 800b508:	6922      	ldr	r2, [r4, #16]
 800b50a:	455a      	cmp	r2, fp
 800b50c:	dd0b      	ble.n	800b526 <__gethex+0x402>
 800b50e:	2101      	movs	r1, #1
 800b510:	4620      	mov	r0, r4
 800b512:	f7ff fd9f 	bl	800b054 <rshift>
 800b516:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b51a:	3701      	adds	r7, #1
 800b51c:	42bb      	cmp	r3, r7
 800b51e:	f6ff aee0 	blt.w	800b2e2 <__gethex+0x1be>
 800b522:	2501      	movs	r5, #1
 800b524:	e7c2      	b.n	800b4ac <__gethex+0x388>
 800b526:	f016 061f 	ands.w	r6, r6, #31
 800b52a:	d0fa      	beq.n	800b522 <__gethex+0x3fe>
 800b52c:	4453      	add	r3, sl
 800b52e:	f1c6 0620 	rsb	r6, r6, #32
 800b532:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800b536:	f7fd fb6d 	bl	8008c14 <__hi0bits>
 800b53a:	42b0      	cmp	r0, r6
 800b53c:	dbe7      	blt.n	800b50e <__gethex+0x3ea>
 800b53e:	e7f0      	b.n	800b522 <__gethex+0x3fe>
 800b540:	0800bbfc 	.word	0x0800bbfc

0800b544 <L_shift>:
 800b544:	f1c2 0208 	rsb	r2, r2, #8
 800b548:	0092      	lsls	r2, r2, #2
 800b54a:	b570      	push	{r4, r5, r6, lr}
 800b54c:	f1c2 0620 	rsb	r6, r2, #32
 800b550:	6843      	ldr	r3, [r0, #4]
 800b552:	6804      	ldr	r4, [r0, #0]
 800b554:	fa03 f506 	lsl.w	r5, r3, r6
 800b558:	432c      	orrs	r4, r5
 800b55a:	40d3      	lsrs	r3, r2
 800b55c:	6004      	str	r4, [r0, #0]
 800b55e:	f840 3f04 	str.w	r3, [r0, #4]!
 800b562:	4288      	cmp	r0, r1
 800b564:	d3f4      	bcc.n	800b550 <L_shift+0xc>
 800b566:	bd70      	pop	{r4, r5, r6, pc}

0800b568 <__match>:
 800b568:	b530      	push	{r4, r5, lr}
 800b56a:	6803      	ldr	r3, [r0, #0]
 800b56c:	3301      	adds	r3, #1
 800b56e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b572:	b914      	cbnz	r4, 800b57a <__match+0x12>
 800b574:	6003      	str	r3, [r0, #0]
 800b576:	2001      	movs	r0, #1
 800b578:	bd30      	pop	{r4, r5, pc}
 800b57a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b57e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800b582:	2d19      	cmp	r5, #25
 800b584:	bf98      	it	ls
 800b586:	3220      	addls	r2, #32
 800b588:	42a2      	cmp	r2, r4
 800b58a:	d0f0      	beq.n	800b56e <__match+0x6>
 800b58c:	2000      	movs	r0, #0
 800b58e:	e7f3      	b.n	800b578 <__match+0x10>

0800b590 <__hexnan>:
 800b590:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b594:	680b      	ldr	r3, [r1, #0]
 800b596:	6801      	ldr	r1, [r0, #0]
 800b598:	115e      	asrs	r6, r3, #5
 800b59a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800b59e:	f013 031f 	ands.w	r3, r3, #31
 800b5a2:	b087      	sub	sp, #28
 800b5a4:	bf18      	it	ne
 800b5a6:	3604      	addne	r6, #4
 800b5a8:	2500      	movs	r5, #0
 800b5aa:	1f37      	subs	r7, r6, #4
 800b5ac:	4682      	mov	sl, r0
 800b5ae:	4690      	mov	r8, r2
 800b5b0:	9301      	str	r3, [sp, #4]
 800b5b2:	f846 5c04 	str.w	r5, [r6, #-4]
 800b5b6:	46b9      	mov	r9, r7
 800b5b8:	463c      	mov	r4, r7
 800b5ba:	9502      	str	r5, [sp, #8]
 800b5bc:	46ab      	mov	fp, r5
 800b5be:	784a      	ldrb	r2, [r1, #1]
 800b5c0:	1c4b      	adds	r3, r1, #1
 800b5c2:	9303      	str	r3, [sp, #12]
 800b5c4:	b342      	cbz	r2, 800b618 <__hexnan+0x88>
 800b5c6:	4610      	mov	r0, r2
 800b5c8:	9105      	str	r1, [sp, #20]
 800b5ca:	9204      	str	r2, [sp, #16]
 800b5cc:	f7ff fd94 	bl	800b0f8 <__hexdig_fun>
 800b5d0:	2800      	cmp	r0, #0
 800b5d2:	d151      	bne.n	800b678 <__hexnan+0xe8>
 800b5d4:	9a04      	ldr	r2, [sp, #16]
 800b5d6:	9905      	ldr	r1, [sp, #20]
 800b5d8:	2a20      	cmp	r2, #32
 800b5da:	d818      	bhi.n	800b60e <__hexnan+0x7e>
 800b5dc:	9b02      	ldr	r3, [sp, #8]
 800b5de:	459b      	cmp	fp, r3
 800b5e0:	dd13      	ble.n	800b60a <__hexnan+0x7a>
 800b5e2:	454c      	cmp	r4, r9
 800b5e4:	d206      	bcs.n	800b5f4 <__hexnan+0x64>
 800b5e6:	2d07      	cmp	r5, #7
 800b5e8:	dc04      	bgt.n	800b5f4 <__hexnan+0x64>
 800b5ea:	462a      	mov	r2, r5
 800b5ec:	4649      	mov	r1, r9
 800b5ee:	4620      	mov	r0, r4
 800b5f0:	f7ff ffa8 	bl	800b544 <L_shift>
 800b5f4:	4544      	cmp	r4, r8
 800b5f6:	d952      	bls.n	800b69e <__hexnan+0x10e>
 800b5f8:	2300      	movs	r3, #0
 800b5fa:	f1a4 0904 	sub.w	r9, r4, #4
 800b5fe:	f844 3c04 	str.w	r3, [r4, #-4]
 800b602:	f8cd b008 	str.w	fp, [sp, #8]
 800b606:	464c      	mov	r4, r9
 800b608:	461d      	mov	r5, r3
 800b60a:	9903      	ldr	r1, [sp, #12]
 800b60c:	e7d7      	b.n	800b5be <__hexnan+0x2e>
 800b60e:	2a29      	cmp	r2, #41	@ 0x29
 800b610:	d157      	bne.n	800b6c2 <__hexnan+0x132>
 800b612:	3102      	adds	r1, #2
 800b614:	f8ca 1000 	str.w	r1, [sl]
 800b618:	f1bb 0f00 	cmp.w	fp, #0
 800b61c:	d051      	beq.n	800b6c2 <__hexnan+0x132>
 800b61e:	454c      	cmp	r4, r9
 800b620:	d206      	bcs.n	800b630 <__hexnan+0xa0>
 800b622:	2d07      	cmp	r5, #7
 800b624:	dc04      	bgt.n	800b630 <__hexnan+0xa0>
 800b626:	462a      	mov	r2, r5
 800b628:	4649      	mov	r1, r9
 800b62a:	4620      	mov	r0, r4
 800b62c:	f7ff ff8a 	bl	800b544 <L_shift>
 800b630:	4544      	cmp	r4, r8
 800b632:	d936      	bls.n	800b6a2 <__hexnan+0x112>
 800b634:	f1a8 0204 	sub.w	r2, r8, #4
 800b638:	4623      	mov	r3, r4
 800b63a:	f853 1b04 	ldr.w	r1, [r3], #4
 800b63e:	f842 1f04 	str.w	r1, [r2, #4]!
 800b642:	429f      	cmp	r7, r3
 800b644:	d2f9      	bcs.n	800b63a <__hexnan+0xaa>
 800b646:	1b3b      	subs	r3, r7, r4
 800b648:	f023 0303 	bic.w	r3, r3, #3
 800b64c:	3304      	adds	r3, #4
 800b64e:	3401      	adds	r4, #1
 800b650:	3e03      	subs	r6, #3
 800b652:	42b4      	cmp	r4, r6
 800b654:	bf88      	it	hi
 800b656:	2304      	movhi	r3, #4
 800b658:	4443      	add	r3, r8
 800b65a:	2200      	movs	r2, #0
 800b65c:	f843 2b04 	str.w	r2, [r3], #4
 800b660:	429f      	cmp	r7, r3
 800b662:	d2fb      	bcs.n	800b65c <__hexnan+0xcc>
 800b664:	683b      	ldr	r3, [r7, #0]
 800b666:	b91b      	cbnz	r3, 800b670 <__hexnan+0xe0>
 800b668:	4547      	cmp	r7, r8
 800b66a:	d128      	bne.n	800b6be <__hexnan+0x12e>
 800b66c:	2301      	movs	r3, #1
 800b66e:	603b      	str	r3, [r7, #0]
 800b670:	2005      	movs	r0, #5
 800b672:	b007      	add	sp, #28
 800b674:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b678:	3501      	adds	r5, #1
 800b67a:	2d08      	cmp	r5, #8
 800b67c:	f10b 0b01 	add.w	fp, fp, #1
 800b680:	dd06      	ble.n	800b690 <__hexnan+0x100>
 800b682:	4544      	cmp	r4, r8
 800b684:	d9c1      	bls.n	800b60a <__hexnan+0x7a>
 800b686:	2300      	movs	r3, #0
 800b688:	f844 3c04 	str.w	r3, [r4, #-4]
 800b68c:	2501      	movs	r5, #1
 800b68e:	3c04      	subs	r4, #4
 800b690:	6822      	ldr	r2, [r4, #0]
 800b692:	f000 000f 	and.w	r0, r0, #15
 800b696:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800b69a:	6020      	str	r0, [r4, #0]
 800b69c:	e7b5      	b.n	800b60a <__hexnan+0x7a>
 800b69e:	2508      	movs	r5, #8
 800b6a0:	e7b3      	b.n	800b60a <__hexnan+0x7a>
 800b6a2:	9b01      	ldr	r3, [sp, #4]
 800b6a4:	2b00      	cmp	r3, #0
 800b6a6:	d0dd      	beq.n	800b664 <__hexnan+0xd4>
 800b6a8:	f1c3 0320 	rsb	r3, r3, #32
 800b6ac:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800b6b0:	40da      	lsrs	r2, r3
 800b6b2:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800b6b6:	4013      	ands	r3, r2
 800b6b8:	f846 3c04 	str.w	r3, [r6, #-4]
 800b6bc:	e7d2      	b.n	800b664 <__hexnan+0xd4>
 800b6be:	3f04      	subs	r7, #4
 800b6c0:	e7d0      	b.n	800b664 <__hexnan+0xd4>
 800b6c2:	2004      	movs	r0, #4
 800b6c4:	e7d5      	b.n	800b672 <__hexnan+0xe2>

0800b6c6 <__ascii_mbtowc>:
 800b6c6:	b082      	sub	sp, #8
 800b6c8:	b901      	cbnz	r1, 800b6cc <__ascii_mbtowc+0x6>
 800b6ca:	a901      	add	r1, sp, #4
 800b6cc:	b142      	cbz	r2, 800b6e0 <__ascii_mbtowc+0x1a>
 800b6ce:	b14b      	cbz	r3, 800b6e4 <__ascii_mbtowc+0x1e>
 800b6d0:	7813      	ldrb	r3, [r2, #0]
 800b6d2:	600b      	str	r3, [r1, #0]
 800b6d4:	7812      	ldrb	r2, [r2, #0]
 800b6d6:	1e10      	subs	r0, r2, #0
 800b6d8:	bf18      	it	ne
 800b6da:	2001      	movne	r0, #1
 800b6dc:	b002      	add	sp, #8
 800b6de:	4770      	bx	lr
 800b6e0:	4610      	mov	r0, r2
 800b6e2:	e7fb      	b.n	800b6dc <__ascii_mbtowc+0x16>
 800b6e4:	f06f 0001 	mvn.w	r0, #1
 800b6e8:	e7f8      	b.n	800b6dc <__ascii_mbtowc+0x16>

0800b6ea <_realloc_r>:
 800b6ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b6ee:	4680      	mov	r8, r0
 800b6f0:	4615      	mov	r5, r2
 800b6f2:	460c      	mov	r4, r1
 800b6f4:	b921      	cbnz	r1, 800b700 <_realloc_r+0x16>
 800b6f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b6fa:	4611      	mov	r1, r2
 800b6fc:	f7fd b90c 	b.w	8008918 <_malloc_r>
 800b700:	b92a      	cbnz	r2, 800b70e <_realloc_r+0x24>
 800b702:	f7fd f895 	bl	8008830 <_free_r>
 800b706:	2400      	movs	r4, #0
 800b708:	4620      	mov	r0, r4
 800b70a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b70e:	f000 f840 	bl	800b792 <_malloc_usable_size_r>
 800b712:	4285      	cmp	r5, r0
 800b714:	4606      	mov	r6, r0
 800b716:	d802      	bhi.n	800b71e <_realloc_r+0x34>
 800b718:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800b71c:	d8f4      	bhi.n	800b708 <_realloc_r+0x1e>
 800b71e:	4629      	mov	r1, r5
 800b720:	4640      	mov	r0, r8
 800b722:	f7fd f8f9 	bl	8008918 <_malloc_r>
 800b726:	4607      	mov	r7, r0
 800b728:	2800      	cmp	r0, #0
 800b72a:	d0ec      	beq.n	800b706 <_realloc_r+0x1c>
 800b72c:	42b5      	cmp	r5, r6
 800b72e:	462a      	mov	r2, r5
 800b730:	4621      	mov	r1, r4
 800b732:	bf28      	it	cs
 800b734:	4632      	movcs	r2, r6
 800b736:	f7ff fc45 	bl	800afc4 <memcpy>
 800b73a:	4621      	mov	r1, r4
 800b73c:	4640      	mov	r0, r8
 800b73e:	f7fd f877 	bl	8008830 <_free_r>
 800b742:	463c      	mov	r4, r7
 800b744:	e7e0      	b.n	800b708 <_realloc_r+0x1e>

0800b746 <__ascii_wctomb>:
 800b746:	4603      	mov	r3, r0
 800b748:	4608      	mov	r0, r1
 800b74a:	b141      	cbz	r1, 800b75e <__ascii_wctomb+0x18>
 800b74c:	2aff      	cmp	r2, #255	@ 0xff
 800b74e:	d904      	bls.n	800b75a <__ascii_wctomb+0x14>
 800b750:	228a      	movs	r2, #138	@ 0x8a
 800b752:	601a      	str	r2, [r3, #0]
 800b754:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b758:	4770      	bx	lr
 800b75a:	700a      	strb	r2, [r1, #0]
 800b75c:	2001      	movs	r0, #1
 800b75e:	4770      	bx	lr

0800b760 <fiprintf>:
 800b760:	b40e      	push	{r1, r2, r3}
 800b762:	b503      	push	{r0, r1, lr}
 800b764:	4601      	mov	r1, r0
 800b766:	ab03      	add	r3, sp, #12
 800b768:	4805      	ldr	r0, [pc, #20]	@ (800b780 <fiprintf+0x20>)
 800b76a:	f853 2b04 	ldr.w	r2, [r3], #4
 800b76e:	6800      	ldr	r0, [r0, #0]
 800b770:	9301      	str	r3, [sp, #4]
 800b772:	f7fe ffe1 	bl	800a738 <_vfiprintf_r>
 800b776:	b002      	add	sp, #8
 800b778:	f85d eb04 	ldr.w	lr, [sp], #4
 800b77c:	b003      	add	sp, #12
 800b77e:	4770      	bx	lr
 800b780:	20000018 	.word	0x20000018

0800b784 <abort>:
 800b784:	b508      	push	{r3, lr}
 800b786:	2006      	movs	r0, #6
 800b788:	f000 f834 	bl	800b7f4 <raise>
 800b78c:	2001      	movs	r0, #1
 800b78e:	f7f6 fed7 	bl	8002540 <_exit>

0800b792 <_malloc_usable_size_r>:
 800b792:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b796:	1f18      	subs	r0, r3, #4
 800b798:	2b00      	cmp	r3, #0
 800b79a:	bfbc      	itt	lt
 800b79c:	580b      	ldrlt	r3, [r1, r0]
 800b79e:	18c0      	addlt	r0, r0, r3
 800b7a0:	4770      	bx	lr

0800b7a2 <_raise_r>:
 800b7a2:	291f      	cmp	r1, #31
 800b7a4:	b538      	push	{r3, r4, r5, lr}
 800b7a6:	4605      	mov	r5, r0
 800b7a8:	460c      	mov	r4, r1
 800b7aa:	d904      	bls.n	800b7b6 <_raise_r+0x14>
 800b7ac:	2316      	movs	r3, #22
 800b7ae:	6003      	str	r3, [r0, #0]
 800b7b0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b7b4:	bd38      	pop	{r3, r4, r5, pc}
 800b7b6:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800b7b8:	b112      	cbz	r2, 800b7c0 <_raise_r+0x1e>
 800b7ba:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b7be:	b94b      	cbnz	r3, 800b7d4 <_raise_r+0x32>
 800b7c0:	4628      	mov	r0, r5
 800b7c2:	f000 f831 	bl	800b828 <_getpid_r>
 800b7c6:	4622      	mov	r2, r4
 800b7c8:	4601      	mov	r1, r0
 800b7ca:	4628      	mov	r0, r5
 800b7cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b7d0:	f000 b818 	b.w	800b804 <_kill_r>
 800b7d4:	2b01      	cmp	r3, #1
 800b7d6:	d00a      	beq.n	800b7ee <_raise_r+0x4c>
 800b7d8:	1c59      	adds	r1, r3, #1
 800b7da:	d103      	bne.n	800b7e4 <_raise_r+0x42>
 800b7dc:	2316      	movs	r3, #22
 800b7de:	6003      	str	r3, [r0, #0]
 800b7e0:	2001      	movs	r0, #1
 800b7e2:	e7e7      	b.n	800b7b4 <_raise_r+0x12>
 800b7e4:	2100      	movs	r1, #0
 800b7e6:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800b7ea:	4620      	mov	r0, r4
 800b7ec:	4798      	blx	r3
 800b7ee:	2000      	movs	r0, #0
 800b7f0:	e7e0      	b.n	800b7b4 <_raise_r+0x12>
	...

0800b7f4 <raise>:
 800b7f4:	4b02      	ldr	r3, [pc, #8]	@ (800b800 <raise+0xc>)
 800b7f6:	4601      	mov	r1, r0
 800b7f8:	6818      	ldr	r0, [r3, #0]
 800b7fa:	f7ff bfd2 	b.w	800b7a2 <_raise_r>
 800b7fe:	bf00      	nop
 800b800:	20000018 	.word	0x20000018

0800b804 <_kill_r>:
 800b804:	b538      	push	{r3, r4, r5, lr}
 800b806:	4d07      	ldr	r5, [pc, #28]	@ (800b824 <_kill_r+0x20>)
 800b808:	2300      	movs	r3, #0
 800b80a:	4604      	mov	r4, r0
 800b80c:	4608      	mov	r0, r1
 800b80e:	4611      	mov	r1, r2
 800b810:	602b      	str	r3, [r5, #0]
 800b812:	f7f6 fe85 	bl	8002520 <_kill>
 800b816:	1c43      	adds	r3, r0, #1
 800b818:	d102      	bne.n	800b820 <_kill_r+0x1c>
 800b81a:	682b      	ldr	r3, [r5, #0]
 800b81c:	b103      	cbz	r3, 800b820 <_kill_r+0x1c>
 800b81e:	6023      	str	r3, [r4, #0]
 800b820:	bd38      	pop	{r3, r4, r5, pc}
 800b822:	bf00      	nop
 800b824:	20005584 	.word	0x20005584

0800b828 <_getpid_r>:
 800b828:	f7f6 be72 	b.w	8002510 <_getpid>

0800b82c <_init>:
 800b82c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b82e:	bf00      	nop
 800b830:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b832:	bc08      	pop	{r3}
 800b834:	469e      	mov	lr, r3
 800b836:	4770      	bx	lr

0800b838 <_fini>:
 800b838:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b83a:	bf00      	nop
 800b83c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b83e:	bc08      	pop	{r3}
 800b840:	469e      	mov	lr, r3
 800b842:	4770      	bx	lr
